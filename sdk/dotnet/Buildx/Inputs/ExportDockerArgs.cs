// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Docker.Buildx.Inputs
{

    public sealed class ExportDockerArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Attach an arbitrary key/value annotation to the image.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// The compression type to use.
        /// </summary>
        [Input("compression")]
        public Input<Pulumi.Docker.Buildx.CompressionType>? Compression { get; set; }

        /// <summary>
        /// Compression level from 0 to 22.
        /// </summary>
        [Input("compressionLevel")]
        public Input<int>? CompressionLevel { get; set; }

        /// <summary>
        /// The local export path.
        /// </summary>
        [Input("dest")]
        public Input<string>? Dest { get; set; }

        /// <summary>
        /// Forcefully apply compression.
        /// </summary>
        [Input("forceCompression")]
        public Input<bool>? ForceCompression { get; set; }

        [Input("names")]
        private InputList<string>? _names;

        /// <summary>
        /// Specify images names to export. This is overridden if tags are already specified.
        /// </summary>
        public InputList<string> Names
        {
            get => _names ?? (_names = new InputList<string>());
            set => _names = value;
        }

        /// <summary>
        /// Use OCI media types in exporter manifests.
        /// </summary>
        [Input("ociMediaTypes")]
        public Input<bool>? OciMediaTypes { get; set; }

        /// <summary>
        /// Bundle the output into a tarball layout.
        /// </summary>
        [Input("tar")]
        public Input<bool>? Tar { get; set; }

        public ExportDockerArgs()
        {
            Compression = Pulumi.Docker.Buildx.CompressionType.Gzip;
            CompressionLevel = 0;
            ForceCompression = false;
            OciMediaTypes = false;
            Tar = true;
        }
        public static new ExportDockerArgs Empty => new ExportDockerArgs();
    }
}
