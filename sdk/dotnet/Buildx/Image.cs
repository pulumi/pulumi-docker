// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Docker.Buildx
{
    /// <summary>
    /// A Docker image built using Buildkit
    /// </summary>
    [DockerResourceType("docker:buildx/image:Image")]
    public partial class Image : global::Pulumi.CustomResource
    {
        /// <summary>
        /// 
        /// An optional map of named build-time argument variables to set during
        /// the Docker build. This flag allows you to pass build-time variables that
        /// can be accessed like environment variables inside the RUN
        /// instruction.
        /// </summary>
        [Output("buildArgs")]
        public Output<ImmutableDictionary<string, string>?> BuildArgs { get; private set; } = null!;

        /// <summary>
        /// 
        /// Build with a specific builder instance
        /// </summary>
        [Output("builder")]
        public Output<string?> Builder { get; private set; } = null!;

        /// <summary>
        /// 
        /// External cache sources (e.g., "user/app:cache", "type=local,src=path/to/dir")
        /// </summary>
        [Output("cacheFrom")]
        public Output<ImmutableArray<string>> CacheFrom { get; private set; } = null!;

        /// <summary>
        /// 
        /// Cache export destinations (e.g., "user/app:cache", "type=local,dest=path/to/dir")
        /// </summary>
        [Output("cacheTo")]
        public Output<ImmutableArray<string>> CacheTo { get; private set; } = null!;

        /// <summary>
        /// 
        /// Path to use for build context. If omitted, an empty context is used.
        /// </summary>
        [Output("context")]
        public Output<string?> Context { get; private set; } = null!;

        [Output("contextHash")]
        public Output<string?> ContextHash { get; private set; } = null!;

        /// <summary>
        /// 
        /// Name and optionally a tag (format: "name:tag"). If outputting to a
        /// registry, the name should include the fully qualified registry address.
        /// </summary>
        [Output("exports")]
        public Output<ImmutableArray<string>> Exports { get; private set; } = null!;

        /// <summary>
        /// 
        /// Name of the Dockerfile to use (defaults to "${context}/Dockerfile").
        /// </summary>
        [Output("file")]
        public Output<string?> File { get; private set; } = null!;

        [Output("manifests")]
        public Output<ImmutableArray<Outputs.Manifest>> Manifests { get; private set; } = null!;

        /// <summary>
        /// 
        /// Set target platforms for the build. Defaults to the host's platform
        /// </summary>
        [Output("platforms")]
        public Output<ImmutableArray<string>> Platforms { get; private set; } = null!;

        /// <summary>
        /// 
        /// Always attempt to pull referenced images.
        /// </summary>
        [Output("pull")]
        public Output<bool?> Pull { get; private set; } = null!;

        /// <summary>
        /// 
        /// Logins for registry outputs
        /// </summary>
        [Output("registries")]
        public Output<ImmutableArray<Outputs.RegistryAuth>> Registries { get; private set; } = null!;

        /// <summary>
        /// 
        /// Name and optionally a tag (format: "name:tag"). If outputting to a
        /// registry, the name should include the fully qualified registry address.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Image resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Image(string name, ImageArgs args, CustomResourceOptions? options = null)
            : base("docker:buildx/image:Image", name, args ?? new ImageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Image(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("docker:buildx/image:Image", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Image resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Image Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Image(name, id, options);
        }
    }

    public sealed class ImageArgs : global::Pulumi.ResourceArgs
    {
        [Input("buildArgs")]
        private InputMap<string>? _buildArgs;

        /// <summary>
        /// 
        /// An optional map of named build-time argument variables to set during
        /// the Docker build. This flag allows you to pass build-time variables that
        /// can be accessed like environment variables inside the RUN
        /// instruction.
        /// </summary>
        public InputMap<string> BuildArgs
        {
            get => _buildArgs ?? (_buildArgs = new InputMap<string>());
            set => _buildArgs = value;
        }

        /// <summary>
        /// 
        /// Build with a specific builder instance
        /// </summary>
        [Input("builder")]
        public Input<string>? Builder { get; set; }

        [Input("cacheFrom")]
        private InputList<string>? _cacheFrom;

        /// <summary>
        /// 
        /// External cache sources (e.g., "user/app:cache", "type=local,src=path/to/dir")
        /// </summary>
        public InputList<string> CacheFrom
        {
            get => _cacheFrom ?? (_cacheFrom = new InputList<string>());
            set => _cacheFrom = value;
        }

        [Input("cacheTo")]
        private InputList<string>? _cacheTo;

        /// <summary>
        /// 
        /// Cache export destinations (e.g., "user/app:cache", "type=local,dest=path/to/dir")
        /// </summary>
        public InputList<string> CacheTo
        {
            get => _cacheTo ?? (_cacheTo = new InputList<string>());
            set => _cacheTo = value;
        }

        /// <summary>
        /// 
        /// Path to use for build context. If omitted, an empty context is used.
        /// </summary>
        [Input("context")]
        public Input<string>? Context { get; set; }

        [Input("exports")]
        private InputList<string>? _exports;

        /// <summary>
        /// 
        /// Name and optionally a tag (format: "name:tag"). If outputting to a
        /// registry, the name should include the fully qualified registry address.
        /// </summary>
        public InputList<string> Exports
        {
            get => _exports ?? (_exports = new InputList<string>());
            set => _exports = value;
        }

        /// <summary>
        /// 
        /// Name of the Dockerfile to use (defaults to "${context}/Dockerfile").
        /// </summary>
        [Input("file")]
        public Input<string>? File { get; set; }

        [Input("platforms")]
        private InputList<string>? _platforms;

        /// <summary>
        /// 
        /// Set target platforms for the build. Defaults to the host's platform
        /// </summary>
        public InputList<string> Platforms
        {
            get => _platforms ?? (_platforms = new InputList<string>());
            set => _platforms = value;
        }

        /// <summary>
        /// 
        /// Always attempt to pull referenced images.
        /// </summary>
        [Input("pull")]
        public Input<bool>? Pull { get; set; }

        [Input("registries")]
        private InputList<Inputs.RegistryAuthArgs>? _registries;

        /// <summary>
        /// 
        /// Logins for registry outputs
        /// </summary>
        public InputList<Inputs.RegistryAuthArgs> Registries
        {
            get => _registries ?? (_registries = new InputList<Inputs.RegistryAuthArgs>());
            set => _registries = value;
        }

        [Input("tags", required: true)]
        private InputList<string>? _tags;

        /// <summary>
        /// 
        /// Name and optionally a tag (format: "name:tag"). If outputting to a
        /// registry, the name should include the fully qualified registry address.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public ImageArgs()
        {
            File = "Dockerfile";
        }
        public static new ImageArgs Empty => new ImageArgs();
    }
}
