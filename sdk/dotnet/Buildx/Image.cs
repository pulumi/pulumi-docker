// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Docker.Buildx
{
    /// <summary>
    /// A Docker image built using buildx -- Docker's interface to the improved
    /// BuildKit backend.
    /// 
    /// **This resource is experimental and subject to change.**
    /// 
    /// API types are unstable. Subsequent releases _may_ require manual edits
    /// to your state file(s) in order to adopt API changes.
    /// 
    /// Only use this resource if you understand and accept the risks.
    /// 
    /// ## Example Usage
    /// ### Multi-platform image
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Docker = Pulumi.Docker;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var image = new Docker.Buildx.Image("image", new()
    ///     {
    ///         Context = new Docker.Buildx.Inputs.BuildContextArgs
    ///         {
    ///             Location = "app",
    ///         },
    ///         Dockerfile = new Docker.Buildx.Inputs.DockerfileArgs
    ///         {
    ///             Location = "app/Dockerfile",
    ///         },
    ///         Platforms = new[]
    ///         {
    ///             Docker.Buildx.Image.Platform.Plan9_amd64,
    ///             Docker.Buildx.Image.Platform.Plan9_386,
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// ```
    /// ### Registry export
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Docker = Pulumi.Docker;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var image = new Docker.Buildx.Image("image", new()
    ///     {
    ///         Context = new Docker.Buildx.Inputs.BuildContextArgs
    ///         {
    ///             Location = "app",
    ///         },
    ///         Dockerfile = new Docker.Buildx.Inputs.DockerfileArgs
    ///         {
    ///             Location = "app/Dockerfile",
    ///         },
    ///         Exports = new[]
    ///         {
    ///             new Docker.Buildx.Inputs.ExportEntryArgs
    ///             {
    ///                 Registry = new Docker.Buildx.Inputs.ExportRegistryArgs
    ///                 {
    ///                     OciMediaTypes = true,
    ///                 },
    ///             },
    ///         },
    ///         Registries = new[]
    ///         {
    ///             new Docker.Buildx.Inputs.RegistryAuthArgs
    ///             {
    ///                 Address = "docker.io",
    ///                 Password = dockerHubPassword,
    ///                 Username = "pulumibot",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// ```
    /// ### Caching
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Docker = Pulumi.Docker;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var image = new Docker.Buildx.Image("image", new()
    ///     {
    ///         CacheFrom = new[]
    ///         {
    ///             new Docker.Buildx.Inputs.CacheFromEntryArgs
    ///             {
    ///                 Local = new Docker.Buildx.Inputs.CacheFromLocalArgs
    ///                 {
    ///                     Src = "tmp/cache",
    ///                 },
    ///             },
    ///         },
    ///         CacheTo = new[]
    ///         {
    ///             new Docker.Buildx.Inputs.CacheToEntryArgs
    ///             {
    ///                 Local = new Docker.Buildx.Inputs.CacheToLocalArgs
    ///                 {
    ///                     Dest = "tmp/cache",
    ///                     Mode = Docker.Buildx.Image.CacheMode.Max,
    ///                 },
    ///             },
    ///         },
    ///         Context = new Docker.Buildx.Inputs.BuildContextArgs
    ///         {
    ///             Location = "app",
    ///         },
    ///         Dockerfile = new Docker.Buildx.Inputs.DockerfileArgs
    ///         {
    ///             Location = "app/Dockerfile",
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// ```
    /// ### Build arguments
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Docker = Pulumi.Docker;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var image = new Docker.Buildx.Image("image", new()
    ///     {
    ///         BuildArgs = 
    ///         {
    ///             { "SET_ME_TO_TRUE", "true" },
    ///         },
    ///         Context = new Docker.Buildx.Inputs.BuildContextArgs
    ///         {
    ///             Location = "app",
    ///         },
    ///         Dockerfile = new Docker.Buildx.Inputs.DockerfileArgs
    ///         {
    ///             Location = "app/Dockerfile",
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// ```
    /// ### Build targets
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Docker = Pulumi.Docker;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var image = new Docker.Buildx.Image("image", new()
    ///     {
    ///         Context = new Docker.Buildx.Inputs.BuildContextArgs
    ///         {
    ///             Location = "app",
    ///         },
    ///         Dockerfile = new Docker.Buildx.Inputs.DockerfileArgs
    ///         {
    ///             Location = "app/Dockerfile",
    ///         },
    ///         Targets = new[]
    ///         {
    ///             "build-me",
    ///             "also-build-me",
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// ```
    /// ### Named contexts
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Docker = Pulumi.Docker;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var image = new Docker.Buildx.Image("image", new()
    ///     {
    ///         Context = new Docker.Buildx.Inputs.BuildContextArgs
    ///         {
    ///             Location = "app",
    ///             Named = 
    ///             {
    ///                 { "golang:latest", new Docker.Buildx.Inputs.ContextArgs
    ///                 {
    ///                     Location = "docker-image://golang@sha256:b8e62cf593cdaff36efd90aa3a37de268e6781a2e68c6610940c48f7cdf36984",
    ///                 } },
    ///             },
    ///         },
    ///         Dockerfile = new Docker.Buildx.Inputs.DockerfileArgs
    ///         {
    ///             Location = "app/Dockerfile",
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// ```
    /// ### Remote context
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Docker = Pulumi.Docker;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var image = new Docker.Buildx.Image("image", new()
    ///     {
    ///         Context = new Docker.Buildx.Inputs.BuildContextArgs
    ///         {
    ///             Location = "https://raw.githubusercontent.com/pulumi/pulumi-docker/api-types/provider/testdata/Dockerfile",
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// ```
    /// ### Inline Dockerfile
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Docker = Pulumi.Docker;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var image = new Docker.Buildx.Image("image", new()
    ///     {
    ///         Context = new Docker.Buildx.Inputs.BuildContextArgs
    ///         {
    ///             Location = "app",
    ///         },
    ///         Dockerfile = new Docker.Buildx.Inputs.DockerfileArgs
    ///         {
    ///             Inline = @"FROM busybox
    /// COPY hello.c ./
    /// ",
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// ```
    /// ### Remote context
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Docker = Pulumi.Docker;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var image = new Docker.Buildx.Image("image", new()
    ///     {
    ///         Context = new Docker.Buildx.Inputs.BuildContextArgs
    ///         {
    ///             Location = "https://github.com/docker-library/hello-world.git",
    ///         },
    ///         Dockerfile = new Docker.Buildx.Inputs.DockerfileArgs
    ///         {
    ///             Location = "app/Dockerfile",
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// ```
    /// ### Local export
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Docker = Pulumi.Docker;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var image = new Docker.Buildx.Image("image", new()
    ///     {
    ///         Context = new Docker.Buildx.Inputs.BuildContextArgs
    ///         {
    ///             Location = "app",
    ///         },
    ///         Dockerfile = new Docker.Buildx.Inputs.DockerfileArgs
    ///         {
    ///             Location = "app/Dockerfile",
    ///         },
    ///         Exports = new[]
    ///         {
    ///             new Docker.Buildx.Inputs.ExportEntryArgs
    ///             {
    ///                 Docker = new Docker.Buildx.Inputs.ExportDockerArgs
    ///                 {
    ///                     Tar = true,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// ```
    /// </summary>
    [DockerResourceType("docker:buildx/image:Image")]
    public partial class Image : global::Pulumi.CustomResource
    {
        /// <summary>
        /// `ARG` names and values to set during the build.
        /// 
        /// These variables are accessed like environment variables inside `RUN`
        /// instructions.
        /// 
        /// Build arguments are persisted in the image, so you should use `secrets`
        /// if these arguments are sensitive.
        /// </summary>
        [Output("buildArgs")]
        public Output<ImmutableDictionary<string, string>?> BuildArgs { get; private set; } = null!;

        /// <summary>
        /// When `true`, attempt to build the image during previews. The image will
        /// not be pushed to registries, however caches will still populated.
        /// </summary>
        [Output("buildOnPreview")]
        public Output<bool?> BuildOnPreview { get; private set; } = null!;

        /// <summary>
        /// Builder configuration.
        /// </summary>
        [Output("builder")]
        public Output<Outputs.BuilderConfig?> Builder { get; private set; } = null!;

        /// <summary>
        /// External cache configuration.
        /// </summary>
        [Output("cacheFrom")]
        public Output<ImmutableArray<Outputs.CacheFromEntry>> CacheFrom { get; private set; } = null!;

        /// <summary>
        /// Cache export configuration.
        /// </summary>
        [Output("cacheTo")]
        public Output<ImmutableArray<Outputs.CacheToEntry>> CacheTo { get; private set; } = null!;

        /// <summary>
        /// Build context settings.
        /// </summary>
        [Output("context")]
        public Output<Outputs.BuildContext?> Context { get; private set; } = null!;

        /// <summary>
        /// A preliminary hash of the image's build context.
        /// 
        /// Pulumi uses this to determine if an image _may_ need to be re-built.
        /// </summary>
        [Output("contextHash")]
        public Output<string?> ContextHash { get; private set; } = null!;

        /// <summary>
        /// A mapping of platform type to refs which were pushed to registries.
        /// </summary>
        [Output("digests")]
        public Output<ImmutableDictionary<string, ImmutableArray<string>>?> Digests { get; private set; } = null!;

        /// <summary>
        /// Dockerfile settings.
        /// </summary>
        [Output("dockerfile")]
        public Output<Outputs.Dockerfile?> Dockerfile { get; private set; } = null!;

        /// <summary>
        /// Controls where images are persisted after building.
        /// 
        /// Images are only stored in the local cache unless `exports` are
        /// explicitly configured.
        /// </summary>
        [Output("exports")]
        public Output<ImmutableArray<Outputs.ExportEntry>> Exports { get; private set; } = null!;

        /// <summary>
        /// Attach arbitrary key/value metadata to the image.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Set target platform(s) for the build. Defaults to the host's platform
        /// </summary>
        [Output("platforms")]
        public Output<ImmutableArray<Pulumi.Docker.Buildx.Platform>> Platforms { get; private set; } = null!;

        /// <summary>
        /// Always pull referenced images.
        /// </summary>
        [Output("pull")]
        public Output<bool?> Pull { get; private set; } = null!;

        /// <summary>
        /// Registry credentials. Required if reading or exporting to private
        /// repositories.
        /// </summary>
        [Output("registries")]
        public Output<ImmutableArray<Outputs.RegistryAuth>> Registries { get; private set; } = null!;

        /// <summary>
        /// A mapping of secret names to their corresponding values.
        /// 
        /// Unlike the Docker CLI, these can be passed by value and do not need to
        /// exist on-disk or in environment variables.
        /// 
        /// Build arguments and environment variables are persistent in the final
        /// image, so you should use this for sensitive values.
        /// </summary>
        [Output("secrets")]
        public Output<ImmutableDictionary<string, string>?> Secrets { get; private set; } = null!;

        /// <summary>
        /// Name and optionally a tag (format: `name:tag`).
        /// 
        /// If exporting to a registry, the name should include the fully qualified
        /// registry address (e.g. `docker.io/pulumi/pulumi:latest`).
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Set the target build stage(s) to build.
        /// 
        /// If not specified all targets will be built by default.
        /// </summary>
        [Output("targets")]
        public Output<ImmutableArray<string>> Targets { get; private set; } = null!;


        /// <summary>
        /// Create a Image resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Image(string name, ImageArgs? args = null, CustomResourceOptions? options = null)
            : base("docker:buildx/image:Image", name, args ?? new ImageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Image(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("docker:buildx/image:Image", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "secrets",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Image resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Image Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Image(name, id, options);
        }
    }

    public sealed class ImageArgs : global::Pulumi.ResourceArgs
    {
        [Input("buildArgs")]
        private InputMap<string>? _buildArgs;

        /// <summary>
        /// `ARG` names and values to set during the build.
        /// 
        /// These variables are accessed like environment variables inside `RUN`
        /// instructions.
        /// 
        /// Build arguments are persisted in the image, so you should use `secrets`
        /// if these arguments are sensitive.
        /// </summary>
        public InputMap<string> BuildArgs
        {
            get => _buildArgs ?? (_buildArgs = new InputMap<string>());
            set => _buildArgs = value;
        }

        /// <summary>
        /// When `true`, attempt to build the image during previews. The image will
        /// not be pushed to registries, however caches will still populated.
        /// </summary>
        [Input("buildOnPreview")]
        public Input<bool>? BuildOnPreview { get; set; }

        /// <summary>
        /// Builder configuration.
        /// </summary>
        [Input("builder")]
        public Input<Inputs.BuilderConfigArgs>? Builder { get; set; }

        [Input("cacheFrom")]
        private InputList<Inputs.CacheFromEntryArgs>? _cacheFrom;

        /// <summary>
        /// External cache configuration.
        /// </summary>
        public InputList<Inputs.CacheFromEntryArgs> CacheFrom
        {
            get => _cacheFrom ?? (_cacheFrom = new InputList<Inputs.CacheFromEntryArgs>());
            set => _cacheFrom = value;
        }

        [Input("cacheTo")]
        private InputList<Inputs.CacheToEntryArgs>? _cacheTo;

        /// <summary>
        /// Cache export configuration.
        /// </summary>
        public InputList<Inputs.CacheToEntryArgs> CacheTo
        {
            get => _cacheTo ?? (_cacheTo = new InputList<Inputs.CacheToEntryArgs>());
            set => _cacheTo = value;
        }

        /// <summary>
        /// Build context settings.
        /// </summary>
        [Input("context")]
        public Input<Inputs.BuildContextArgs>? Context { get; set; }

        /// <summary>
        /// Dockerfile settings.
        /// </summary>
        [Input("dockerfile")]
        public Input<Inputs.DockerfileArgs>? Dockerfile { get; set; }

        [Input("exports")]
        private InputList<Inputs.ExportEntryArgs>? _exports;

        /// <summary>
        /// Controls where images are persisted after building.
        /// 
        /// Images are only stored in the local cache unless `exports` are
        /// explicitly configured.
        /// </summary>
        public InputList<Inputs.ExportEntryArgs> Exports
        {
            get => _exports ?? (_exports = new InputList<Inputs.ExportEntryArgs>());
            set => _exports = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Attach arbitrary key/value metadata to the image.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("platforms")]
        private InputList<Pulumi.Docker.Buildx.Platform>? _platforms;

        /// <summary>
        /// Set target platform(s) for the build. Defaults to the host's platform
        /// </summary>
        public InputList<Pulumi.Docker.Buildx.Platform> Platforms
        {
            get => _platforms ?? (_platforms = new InputList<Pulumi.Docker.Buildx.Platform>());
            set => _platforms = value;
        }

        /// <summary>
        /// Always pull referenced images.
        /// </summary>
        [Input("pull")]
        public Input<bool>? Pull { get; set; }

        [Input("registries")]
        private InputList<Inputs.RegistryAuthArgs>? _registries;

        /// <summary>
        /// Registry credentials. Required if reading or exporting to private
        /// repositories.
        /// </summary>
        public InputList<Inputs.RegistryAuthArgs> Registries
        {
            get => _registries ?? (_registries = new InputList<Inputs.RegistryAuthArgs>());
            set => _registries = value;
        }

        [Input("secrets")]
        private InputMap<string>? _secrets;

        /// <summary>
        /// A mapping of secret names to their corresponding values.
        /// 
        /// Unlike the Docker CLI, these can be passed by value and do not need to
        /// exist on-disk or in environment variables.
        /// 
        /// Build arguments and environment variables are persistent in the final
        /// image, so you should use this for sensitive values.
        /// </summary>
        public InputMap<string> Secrets
        {
            get => _secrets ?? (_secrets = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _secrets = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Name and optionally a tag (format: `name:tag`).
        /// 
        /// If exporting to a registry, the name should include the fully qualified
        /// registry address (e.g. `docker.io/pulumi/pulumi:latest`).
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("targets")]
        private InputList<string>? _targets;

        /// <summary>
        /// Set the target build stage(s) to build.
        /// 
        /// If not specified all targets will be built by default.
        /// </summary>
        public InputList<string> Targets
        {
            get => _targets ?? (_targets = new InputList<string>());
            set => _targets = value;
        }

        public ImageArgs()
        {
        }
        public static new ImageArgs Empty => new ImageArgs();
    }
}
