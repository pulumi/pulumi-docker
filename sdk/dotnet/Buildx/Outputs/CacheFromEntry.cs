// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Docker.Buildx.Outputs
{

    [OutputType]
    public sealed class CacheFromEntry
    {
        /// <summary>
        /// 
        /// Push cache to Azure's blob storage service.
        /// </summary>
        public readonly Outputs.CacheFromAzureBlob? Azblob;
        /// <summary>
        /// 
        /// Recommended for use with GitHub Actions workflows.
        /// 
        /// An action like "crazy-max/ghaction-github-runtime" is recommended to
        /// expose appropriate credentials to your GitHub workflow.
        /// </summary>
        public readonly Outputs.CacheFromGitHubActions? Gha;
        /// <summary>
        /// 
        /// The inline cache storage backend is the simplest implementation to get
        /// started with, but it does not handle multi-stage builds. Consider the
        /// registry cache backend instead.
        /// </summary>
        public readonly Outputs.CacheInline? Inline;
        /// <summary>
        /// 
        /// A simple backend which caches imagines on your local filesystem.
        /// </summary>
        public readonly Outputs.CacheFromLocal? Local;
        /// <summary>
        /// 
        /// A raw string as you would provide it to the Docker CLI (e.g.,
        /// "type=inline")
        /// </summary>
        public readonly string? Raw;
        /// <summary>
        /// 
        /// Push caches to remote registries. Incompatible with the "docker" build
        /// driver.
        /// </summary>
        public readonly Outputs.CacheFromRegistry? Registry;
        /// <summary>
        /// 
        /// Push cache to AWS S3 or S3-compatible services such as MinIO.
        /// </summary>
        public readonly Outputs.CacheFromS3? S3;

        [OutputConstructor]
        private CacheFromEntry(
            Outputs.CacheFromAzureBlob? azblob,

            Outputs.CacheFromGitHubActions? gha,

            Outputs.CacheInline? inline,

            Outputs.CacheFromLocal? local,

            string? raw,

            Outputs.CacheFromRegistry? registry,

            Outputs.CacheFromS3? s3)
        {
            Azblob = azblob;
            Gha = gha;
            Inline = inline;
            Local = local;
            Raw = raw;
            Registry = registry;
            S3 = s3;
        }
    }
}
