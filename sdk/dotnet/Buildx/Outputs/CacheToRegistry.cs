// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Docker.Buildx.Outputs
{

    [OutputType]
    public sealed class CacheToRegistry
    {
        /// <summary>
        /// The compression type to use.
        /// </summary>
        public readonly Pulumi.Docker.Buildx.CompressionType? Compression;
        /// <summary>
        /// Compression level from 0 to 22.
        /// </summary>
        public readonly int? CompressionLevel;
        /// <summary>
        /// Forcefully apply compression.
        /// </summary>
        public readonly bool? ForceCompression;
        /// <summary>
        /// Ignore errors caused by failed cache exports.
        /// </summary>
        public readonly bool? IgnoreError;
        /// <summary>
        /// Export cache manifest as an OCI-compatible image manifest instead of a manifest list (requires OCI media types).
        /// </summary>
        public readonly bool? ImageManifest;
        public readonly Pulumi.Docker.Buildx.CacheMode? Mode;
        /// <summary>
        /// Whether to use OCI mediatypes in exported manifests.
        /// </summary>
        public readonly bool? OciMediaTypes;
        /// <summary>
        /// Full name of the cache image to import.
        /// </summary>
        public readonly string Ref;

        [OutputConstructor]
        private CacheToRegistry(
            Pulumi.Docker.Buildx.CompressionType? compression,

            int? compressionLevel,

            bool? forceCompression,

            bool? ignoreError,

            bool? imageManifest,

            Pulumi.Docker.Buildx.CacheMode? mode,

            bool? ociMediaTypes,

            string @ref)
        {
            Compression = compression;
            CompressionLevel = compressionLevel;
            ForceCompression = forceCompression;
            IgnoreError = ignoreError;
            ImageManifest = imageManifest;
            Mode = mode;
            OciMediaTypes = ociMediaTypes;
            Ref = @ref;
        }
    }
}
