// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Docker
{
    public static class GetRemoteImage
    {
        /// <summary>
        /// `docker.RemoteImage` provides details about a specific Docker Image which need to be presend on the Docker Host
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Docker = Pulumi.Docker;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var latest = Docker.GetRemoteImage.Invoke(new()
        ///     {
        ///         Name = "nginx",
        ///     });
        /// 
        ///     var specific = Docker.GetRemoteImage.Invoke(new()
        ///     {
        ///         Name = "nginx:1.17.6",
        ///     });
        /// 
        ///     var digest = Docker.GetRemoteImage.Invoke(new()
        ///     {
        ///         Name = "nginx@sha256:36b74457bccb56fbf8b05f79c85569501b721d4db813b684391d63e02287c0b2",
        ///     });
        /// 
        ///     var tagAndDigest = Docker.GetRemoteImage.Invoke(new()
        ///     {
        ///         Name = "nginx:1.19.1@sha256:36b74457bccb56fbf8b05f79c85569501b721d4db813b684391d63e02287c0b2",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRemoteImageResult> InvokeAsync(GetRemoteImageArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRemoteImageResult>("docker:index/getRemoteImage:getRemoteImage", args ?? new GetRemoteImageArgs(), options.WithDefaults());

        /// <summary>
        /// `docker.RemoteImage` provides details about a specific Docker Image which need to be presend on the Docker Host
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Docker = Pulumi.Docker;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var latest = Docker.GetRemoteImage.Invoke(new()
        ///     {
        ///         Name = "nginx",
        ///     });
        /// 
        ///     var specific = Docker.GetRemoteImage.Invoke(new()
        ///     {
        ///         Name = "nginx:1.17.6",
        ///     });
        /// 
        ///     var digest = Docker.GetRemoteImage.Invoke(new()
        ///     {
        ///         Name = "nginx@sha256:36b74457bccb56fbf8b05f79c85569501b721d4db813b684391d63e02287c0b2",
        ///     });
        /// 
        ///     var tagAndDigest = Docker.GetRemoteImage.Invoke(new()
        ///     {
        ///         Name = "nginx:1.19.1@sha256:36b74457bccb56fbf8b05f79c85569501b721d4db813b684391d63e02287c0b2",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRemoteImageResult> Invoke(GetRemoteImageInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRemoteImageResult>("docker:index/getRemoteImage:getRemoteImage", args ?? new GetRemoteImageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRemoteImageArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Docker image, including any tags or SHA256 repo digests.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetRemoteImageArgs()
        {
        }
        public static new GetRemoteImageArgs Empty => new GetRemoteImageArgs();
    }

    public sealed class GetRemoteImageInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Docker image, including any tags or SHA256 repo digests.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetRemoteImageInvokeArgs()
        {
        }
        public static new GetRemoteImageInvokeArgs Empty => new GetRemoteImageInvokeArgs();
    }


    [OutputType]
    public sealed class GetRemoteImageResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the Docker image, including any tags or SHA256 repo digests.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The image sha256 digest in the form of `repo[:tag]@sha256:&lt;hash&gt;`. It may be empty in the edge case where the local image was pulled from a repo, tagged locally, and then referred to in the data source by that local name/tag.
        /// </summary>
        public readonly string RepoDigest;

        [OutputConstructor]
        private GetRemoteImageResult(
            string id,

            string name,

            string repoDigest)
        {
            Id = id;
            Name = name;
            RepoDigest = repoDigest;
        }
    }
}
