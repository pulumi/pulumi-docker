// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Docker.Inputs
{

    public sealed class VolumeClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Availability of the volume. Can be `Active` (default), `Pause`, or `Drain`.
        /// </summary>
        [Input("availability")]
        public Input<string>? Availability { get; set; }

        /// <summary>
        /// Cluster Volume group
        /// </summary>
        [Input("group")]
        public Input<string>? Group { get; set; }

        /// <summary>
        /// The ID of the cluster volume.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Minimum size of the Cluster Volume in human readable memory bytes (like 128MiB, 2GiB, etc). Must be in format of KiB, MiB, Gib, Tib or PiB.
        /// </summary>
        [Input("limitBytes")]
        public Input<string>? LimitBytes { get; set; }

        /// <summary>
        /// Maximum size of the Cluster Volume in human readable memory bytes (like 128MiB, 2GiB, etc). Must be in format of KiB, MiB, Gib, Tib or PiB.
        /// </summary>
        [Input("requiredBytes")]
        public Input<string>? RequiredBytes { get; set; }

        /// <summary>
        /// The scope of the volume. Can be `Single` (default) or `Multi`.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// The sharing mode. Can be `None` (default), `Readonly`, `Onewriter` or `All`.
        /// </summary>
        [Input("sharing")]
        public Input<string>? Sharing { get; set; }

        /// <summary>
        /// A topology that the Cluster Volume would be preferred in
        /// </summary>
        [Input("topologyPreferred")]
        public Input<string>? TopologyPreferred { get; set; }

        /// <summary>
        /// A topology that the Cluster Volume must be accessible from
        /// </summary>
        [Input("topologyRequired")]
        public Input<string>? TopologyRequired { get; set; }

        /// <summary>
        /// Cluster Volume access type. Can be `Mount` or `Block` (default).
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public VolumeClusterArgs()
        {
        }
        public static new VolumeClusterArgs Empty => new VolumeClusterArgs();
    }
}
