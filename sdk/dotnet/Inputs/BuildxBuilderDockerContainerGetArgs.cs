// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Docker.Inputs
{

    public sealed class BuildxBuilderDockerContainerGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Sets the cgroup parent of the container if Docker is using the "cgroupfs" driver.
        /// </summary>
        [Input("cgroupParent")]
        public Input<string>? CgroupParent { get; set; }

        /// <summary>
        /// Sets the CPU CFS scheduler period for the container.
        /// </summary>
        [Input("cpuPeriod")]
        public Input<string>? CpuPeriod { get; set; }

        /// <summary>
        /// Imposes a CPU CFS quota on the container.
        /// </summary>
        [Input("cpuQuota")]
        public Input<string>? CpuQuota { get; set; }

        /// <summary>
        /// Configures CPU shares (relative weight) of the container.
        /// </summary>
        [Input("cpuShares")]
        public Input<string>? CpuShares { get; set; }

        /// <summary>
        /// Limits the set of CPU cores the container can use.
        /// </summary>
        [Input("cpusetCpus")]
        public Input<string>? CpusetCpus { get; set; }

        /// <summary>
        /// Limits the set of CPU memory nodes the container can use.
        /// </summary>
        [Input("cpusetMems")]
        public Input<string>? CpusetMems { get; set; }

        /// <summary>
        /// Automatically load images to the Docker Engine image store. Defaults to `False`
        /// </summary>
        [Input("defaultLoad")]
        public Input<bool>? DefaultLoad { get; set; }

        [Input("env")]
        private InputMap<string>? _env;

        /// <summary>
        /// Sets environment variables in the container.
        /// </summary>
        public InputMap<string> Env
        {
            get => _env ?? (_env = new InputMap<string>());
            set => _env = value;
        }

        /// <summary>
        /// Sets the BuildKit image to use for the container.
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        /// <summary>
        /// Sets the amount of memory the container can use.
        /// </summary>
        [Input("memory")]
        public Input<string>? Memory { get; set; }

        /// <summary>
        /// Sets the memory swap limit for the container.
        /// </summary>
        [Input("memorySwap")]
        public Input<string>? MemorySwap { get; set; }

        /// <summary>
        /// Sets the network mode for the container.
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// Sets the container's restart policy.
        /// </summary>
        [Input("restartPolicy")]
        public Input<string>? RestartPolicy { get; set; }

        public BuildxBuilderDockerContainerGetArgs()
        {
        }
        public static new BuildxBuilderDockerContainerGetArgs Empty => new BuildxBuilderDockerContainerGetArgs();
    }
}
