// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Docker.Inputs
{

    public sealed class ServiceTaskSpecContainerSpecArgs : Pulumi.ResourceArgs
    {
        [Input("args")]
        private InputList<string>? _args;

        /// <summary>
        /// Arguments to the command.
        /// </summary>
        public InputList<string> Args
        {
            get => _args ?? (_args = new InputList<string>());
            set => _args = value;
        }

        [Input("commands")]
        private InputList<string>? _commands;

        /// <summary>
        /// The command to be run in the image.
        /// </summary>
        public InputList<string> Commands
        {
            get => _commands ?? (_commands = new InputList<string>());
            set => _commands = value;
        }

        [Input("configs")]
        private InputList<Inputs.ServiceTaskSpecContainerSpecConfigArgs>? _configs;

        /// <summary>
        /// See Configs below for details.
        /// </summary>
        public InputList<Inputs.ServiceTaskSpecContainerSpecConfigArgs> Configs
        {
            get => _configs ?? (_configs = new InputList<Inputs.ServiceTaskSpecContainerSpecConfigArgs>());
            set => _configs = value;
        }

        /// <summary>
        /// The working directory for commands to run in.
        /// </summary>
        [Input("dir")]
        public Input<string>? Dir { get; set; }

        /// <summary>
        /// See DNS Config below for details.
        /// </summary>
        [Input("dnsConfig")]
        public Input<Inputs.ServiceTaskSpecContainerSpecDnsConfigArgs>? DnsConfig { get; set; }

        [Input("env")]
        private InputMap<string>? _env;

        /// <summary>
        /// A list of environment variables in the form VAR=value.
        /// </summary>
        public InputMap<string> Env
        {
            get => _env ?? (_env = new InputMap<string>());
            set => _env = value;
        }

        [Input("groups")]
        private InputList<string>? _groups;

        /// <summary>
        /// A list of additional groups that the container process will run as.
        /// * `privileges` (Optional, block) See Privileges below for details.
        /// </summary>
        public InputList<string> Groups
        {
            get => _groups ?? (_groups = new InputList<string>());
            set => _groups = value;
        }

        /// <summary>
        /// See Healthcheck below for details.
        /// </summary>
        [Input("healthcheck")]
        public Input<Inputs.ServiceTaskSpecContainerSpecHealthcheckArgs>? Healthcheck { get; set; }

        /// <summary>
        /// The hostname to use for the container, as a valid RFC 1123 hostname.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        [Input("hosts")]
        private InputList<Inputs.ServiceTaskSpecContainerSpecHostArgs>? _hosts;
        public InputList<Inputs.ServiceTaskSpecContainerSpecHostArgs> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<Inputs.ServiceTaskSpecContainerSpecHostArgs>());
            set => _hosts = value;
        }

        /// <summary>
        /// The image used to create the Docker service.
        /// </summary>
        [Input("image", required: true)]
        public Input<string> Image { get; set; } = null!;

        /// <summary>
        /// Isolation technology of the containers running the service. (Windows only). Valid values are: `default|process|hyperv`
        /// </summary>
        [Input("isolation")]
        public Input<string>? Isolation { get; set; }

        [Input("labels")]
        private InputList<Inputs.ServiceTaskSpecContainerSpecLabelArgs>? _labels;

        /// <summary>
        /// See Labels below for details.
        /// </summary>
        public InputList<Inputs.ServiceTaskSpecContainerSpecLabelArgs> Labels
        {
            get => _labels ?? (_labels = new InputList<Inputs.ServiceTaskSpecContainerSpecLabelArgs>());
            set => _labels = value;
        }

        [Input("mounts")]
        private InputList<Inputs.ServiceTaskSpecContainerSpecMountArgs>? _mounts;

        /// <summary>
        /// See Mounts below for details.
        /// </summary>
        public InputList<Inputs.ServiceTaskSpecContainerSpecMountArgs> Mounts
        {
            get => _mounts ?? (_mounts = new InputList<Inputs.ServiceTaskSpecContainerSpecMountArgs>());
            set => _mounts = value;
        }

        [Input("privileges")]
        public Input<Inputs.ServiceTaskSpecContainerSpecPrivilegesArgs>? Privileges { get; set; }

        /// <summary>
        /// Mount the container's root filesystem as read only.
        /// </summary>
        [Input("readOnly")]
        public Input<bool>? ReadOnly { get; set; }

        [Input("secrets")]
        private InputList<Inputs.ServiceTaskSpecContainerSpecSecretArgs>? _secrets;

        /// <summary>
        /// See Secrets below for details.
        /// </summary>
        public InputList<Inputs.ServiceTaskSpecContainerSpecSecretArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.ServiceTaskSpecContainerSpecSecretArgs>());
            set => _secrets = value;
        }

        /// <summary>
        /// Amount of time to wait for the container to terminate before forcefully removing it `(ms|s|m|h)`.
        /// </summary>
        [Input("stopGracePeriod")]
        public Input<string>? StopGracePeriod { get; set; }

        /// <summary>
        /// Signal to stop the container.
        /// </summary>
        [Input("stopSignal")]
        public Input<string>? StopSignal { get; set; }

        /// <summary>
        /// The user inside the container.
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public ServiceTaskSpecContainerSpecArgs()
        {
        }
    }
}
