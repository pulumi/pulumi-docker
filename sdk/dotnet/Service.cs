// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Docker
{
    /// <summary>
    /// &lt;!-- Bug: Type and Name are switched --&gt;
    /// This resource manages the lifecycle of a Docker service. By default, the creation, update and delete of services are detached.
    ///  With the Converge Config Name of the service
    /// - `task_spec` (Block List, Min: 1, Max: 1) User modifiable task configuration (see below for nested schema)
    /// 
    /// ## Import
    /// 
    /// ### Example Assuming you created a `service` as follows #!/bin/bash docker service create --name foo -p 8080:80 nginx prints th ID 4pcphbxkfn2rffhbhe6czytgi you provide the definition for the resource as follows terraform resource "docker_service" "foo" {
    /// 
    ///  name = "foo"
    /// 
    ///  task_spec {
    /// 
    ///  container_spec {
    /// 
    ///  image = "nginx"
    /// 
    ///  }
    /// 
    ///  }
    /// 
    ///  endpoint_spec {
    /// 
    ///  ports {
    /// 
    ///  target_port
    /// 
    /// = "80"
    /// 
    ///  published_port = "8080"
    /// 
    ///  }
    /// 
    ///  } } then the import command is as follows #!/bin/bash
    /// 
    /// ```sh
    ///  $ pulumi import docker:index/service:Service foo 4pcphbxkfn2rffhbhe6czytgi
    /// ```
    /// </summary>
    [DockerResourceType("docker:index/service:Service")]
    public partial class Service : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configuration for the authentication for pulling the images of the service
        /// </summary>
        [Output("auth")]
        public Output<Outputs.ServiceAuth?> Auth { get; private set; } = null!;

        /// <summary>
        /// A configuration to ensure that a service converges aka reaches the desired that of all task up and running
        /// </summary>
        [Output("convergeConfig")]
        public Output<Outputs.ServiceConvergeConfig?> ConvergeConfig { get; private set; } = null!;

        /// <summary>
        /// Properties that can be configured to access and load balance a service
        /// </summary>
        [Output("endpointSpec")]
        public Output<Outputs.ServiceEndpointSpec> EndpointSpec { get; private set; } = null!;

        /// <summary>
        /// User-defined key/value metadata
        /// </summary>
        [Output("labels")]
        public Output<ImmutableArray<Outputs.ServiceLabel>> Labels { get; private set; } = null!;

        /// <summary>
        /// Scheduling mode for the service
        /// </summary>
        [Output("mode")]
        public Output<Outputs.ServiceMode> Mode { get; private set; } = null!;

        /// <summary>
        /// Name of the service
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specification for the rollback strategy of the service
        /// </summary>
        [Output("rollbackConfig")]
        public Output<Outputs.ServiceRollbackConfig?> RollbackConfig { get; private set; } = null!;

        /// <summary>
        /// User modifiable task configuration
        /// </summary>
        [Output("taskSpec")]
        public Output<Outputs.ServiceTaskSpec> TaskSpec { get; private set; } = null!;

        /// <summary>
        /// Specification for the update strategy of the service
        /// </summary>
        [Output("updateConfig")]
        public Output<Outputs.ServiceUpdateConfig?> UpdateConfig { get; private set; } = null!;


        /// <summary>
        /// Create a Service resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Service(string name, ServiceArgs args, CustomResourceOptions? options = null)
            : base("docker:index/service:Service", name, args ?? new ServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Service(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
            : base("docker:index/service:Service", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Service resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Service Get(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new Service(name, id, state, options);
        }
    }

    public sealed class ServiceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration for the authentication for pulling the images of the service
        /// </summary>
        [Input("auth")]
        public Input<Inputs.ServiceAuthArgs>? Auth { get; set; }

        /// <summary>
        /// A configuration to ensure that a service converges aka reaches the desired that of all task up and running
        /// </summary>
        [Input("convergeConfig")]
        public Input<Inputs.ServiceConvergeConfigArgs>? ConvergeConfig { get; set; }

        /// <summary>
        /// Properties that can be configured to access and load balance a service
        /// </summary>
        [Input("endpointSpec")]
        public Input<Inputs.ServiceEndpointSpecArgs>? EndpointSpec { get; set; }

        [Input("labels")]
        private InputList<Inputs.ServiceLabelArgs>? _labels;

        /// <summary>
        /// User-defined key/value metadata
        /// </summary>
        public InputList<Inputs.ServiceLabelArgs> Labels
        {
            get => _labels ?? (_labels = new InputList<Inputs.ServiceLabelArgs>());
            set => _labels = value;
        }

        /// <summary>
        /// Scheduling mode for the service
        /// </summary>
        [Input("mode")]
        public Input<Inputs.ServiceModeArgs>? Mode { get; set; }

        /// <summary>
        /// Name of the service
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specification for the rollback strategy of the service
        /// </summary>
        [Input("rollbackConfig")]
        public Input<Inputs.ServiceRollbackConfigArgs>? RollbackConfig { get; set; }

        /// <summary>
        /// User modifiable task configuration
        /// </summary>
        [Input("taskSpec", required: true)]
        public Input<Inputs.ServiceTaskSpecArgs> TaskSpec { get; set; } = null!;

        /// <summary>
        /// Specification for the update strategy of the service
        /// </summary>
        [Input("updateConfig")]
        public Input<Inputs.ServiceUpdateConfigArgs>? UpdateConfig { get; set; }

        public ServiceArgs()
        {
        }
        public static new ServiceArgs Empty => new ServiceArgs();
    }

    public sealed class ServiceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration for the authentication for pulling the images of the service
        /// </summary>
        [Input("auth")]
        public Input<Inputs.ServiceAuthGetArgs>? Auth { get; set; }

        /// <summary>
        /// A configuration to ensure that a service converges aka reaches the desired that of all task up and running
        /// </summary>
        [Input("convergeConfig")]
        public Input<Inputs.ServiceConvergeConfigGetArgs>? ConvergeConfig { get; set; }

        /// <summary>
        /// Properties that can be configured to access and load balance a service
        /// </summary>
        [Input("endpointSpec")]
        public Input<Inputs.ServiceEndpointSpecGetArgs>? EndpointSpec { get; set; }

        [Input("labels")]
        private InputList<Inputs.ServiceLabelGetArgs>? _labels;

        /// <summary>
        /// User-defined key/value metadata
        /// </summary>
        public InputList<Inputs.ServiceLabelGetArgs> Labels
        {
            get => _labels ?? (_labels = new InputList<Inputs.ServiceLabelGetArgs>());
            set => _labels = value;
        }

        /// <summary>
        /// Scheduling mode for the service
        /// </summary>
        [Input("mode")]
        public Input<Inputs.ServiceModeGetArgs>? Mode { get; set; }

        /// <summary>
        /// Name of the service
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specification for the rollback strategy of the service
        /// </summary>
        [Input("rollbackConfig")]
        public Input<Inputs.ServiceRollbackConfigGetArgs>? RollbackConfig { get; set; }

        /// <summary>
        /// User modifiable task configuration
        /// </summary>
        [Input("taskSpec")]
        public Input<Inputs.ServiceTaskSpecGetArgs>? TaskSpec { get; set; }

        /// <summary>
        /// Specification for the update strategy of the service
        /// </summary>
        [Input("updateConfig")]
        public Input<Inputs.ServiceUpdateConfigGetArgs>? UpdateConfig { get; set; }

        public ServiceState()
        {
        }
        public static new ServiceState Empty => new ServiceState();
    }
}
