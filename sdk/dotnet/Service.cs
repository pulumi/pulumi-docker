// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Docker
{
    /// <summary>
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-docker/blob/master/website/docs/r/service.html.markdown.
    /// </summary>
    public partial class Service : Pulumi.CustomResource
    {
        /// <summary>
        /// See Auth below for details.
        /// </summary>
        [Output("auth")]
        public Output<Outputs.ServiceAuth?> Auth { get; private set; } = null!;

        /// <summary>
        /// See Converge Config below for details.
        /// </summary>
        [Output("convergeConfig")]
        public Output<Outputs.ServiceConvergeConfig?> ConvergeConfig { get; private set; } = null!;

        /// <summary>
        /// See EndpointSpec below for details.
        /// </summary>
        [Output("endpointSpec")]
        public Output<Outputs.ServiceEndpointSpec> EndpointSpec { get; private set; } = null!;

        /// <summary>
        /// User-defined key/value metadata
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        /// <summary>
        /// The mode of resolution to use for internal load balancing between tasks. `(vip|dnsrr)`. Default: `vip`.
        /// </summary>
        [Output("mode")]
        public Output<Outputs.ServiceMode> Mode { get; private set; } = null!;

        /// <summary>
        /// A random name for the port.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// See RollbackConfig below for details.
        /// </summary>
        [Output("rollbackConfig")]
        public Output<Outputs.ServiceRollbackConfig?> RollbackConfig { get; private set; } = null!;

        /// <summary>
        /// See TaskSpec below for details.
        /// </summary>
        [Output("taskSpec")]
        public Output<Outputs.ServiceTaskSpec> TaskSpec { get; private set; } = null!;

        /// <summary>
        /// See UpdateConfig below for details.
        /// </summary>
        [Output("updateConfig")]
        public Output<Outputs.ServiceUpdateConfig?> UpdateConfig { get; private set; } = null!;


        /// <summary>
        /// Create a Service resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Service(string name, ServiceArgs args, CustomResourceOptions? options = null)
            : base("docker:index/service:Service", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Service(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
            : base("docker:index/service:Service", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Service resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Service Get(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new Service(name, id, state, options);
        }
    }

    public sealed class ServiceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// See Auth below for details.
        /// </summary>
        [Input("auth")]
        public Input<Inputs.ServiceAuthArgs>? Auth { get; set; }

        /// <summary>
        /// See Converge Config below for details.
        /// </summary>
        [Input("convergeConfig")]
        public Input<Inputs.ServiceConvergeConfigArgs>? ConvergeConfig { get; set; }

        /// <summary>
        /// See EndpointSpec below for details.
        /// </summary>
        [Input("endpointSpec")]
        public Input<Inputs.ServiceEndpointSpecArgs>? EndpointSpec { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User-defined key/value metadata
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The mode of resolution to use for internal load balancing between tasks. `(vip|dnsrr)`. Default: `vip`.
        /// </summary>
        [Input("mode")]
        public Input<Inputs.ServiceModeArgs>? Mode { get; set; }

        /// <summary>
        /// A random name for the port.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// See RollbackConfig below for details.
        /// </summary>
        [Input("rollbackConfig")]
        public Input<Inputs.ServiceRollbackConfigArgs>? RollbackConfig { get; set; }

        /// <summary>
        /// See TaskSpec below for details.
        /// </summary>
        [Input("taskSpec", required: true)]
        public Input<Inputs.ServiceTaskSpecArgs> TaskSpec { get; set; } = null!;

        /// <summary>
        /// See UpdateConfig below for details.
        /// </summary>
        [Input("updateConfig")]
        public Input<Inputs.ServiceUpdateConfigArgs>? UpdateConfig { get; set; }

        public ServiceArgs()
        {
        }
    }

    public sealed class ServiceState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// See Auth below for details.
        /// </summary>
        [Input("auth")]
        public Input<Inputs.ServiceAuthGetArgs>? Auth { get; set; }

        /// <summary>
        /// See Converge Config below for details.
        /// </summary>
        [Input("convergeConfig")]
        public Input<Inputs.ServiceConvergeConfigGetArgs>? ConvergeConfig { get; set; }

        /// <summary>
        /// See EndpointSpec below for details.
        /// </summary>
        [Input("endpointSpec")]
        public Input<Inputs.ServiceEndpointSpecGetArgs>? EndpointSpec { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User-defined key/value metadata
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The mode of resolution to use for internal load balancing between tasks. `(vip|dnsrr)`. Default: `vip`.
        /// </summary>
        [Input("mode")]
        public Input<Inputs.ServiceModeGetArgs>? Mode { get; set; }

        /// <summary>
        /// A random name for the port.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// See RollbackConfig below for details.
        /// </summary>
        [Input("rollbackConfig")]
        public Input<Inputs.ServiceRollbackConfigGetArgs>? RollbackConfig { get; set; }

        /// <summary>
        /// See TaskSpec below for details.
        /// </summary>
        [Input("taskSpec")]
        public Input<Inputs.ServiceTaskSpecGetArgs>? TaskSpec { get; set; }

        /// <summary>
        /// See UpdateConfig below for details.
        /// </summary>
        [Input("updateConfig")]
        public Input<Inputs.ServiceUpdateConfigGetArgs>? UpdateConfig { get; set; }

        public ServiceState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ServiceAuthArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The password to use for authenticating to the registry. If this is blank, the `DOCKER_REGISTRY_PASS` is also be checked.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// The address of the registry server
        /// </summary>
        [Input("serverAddress", required: true)]
        public Input<string> ServerAddress { get; set; } = null!;

        /// <summary>
        /// The username to use for authenticating to the registry. If this is blank, the `DOCKER_REGISTRY_USER` is also be checked. 
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ServiceAuthArgs()
        {
        }
    }

    public sealed class ServiceAuthGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The password to use for authenticating to the registry. If this is blank, the `DOCKER_REGISTRY_PASS` is also be checked.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// The address of the registry server
        /// </summary>
        [Input("serverAddress", required: true)]
        public Input<string> ServerAddress { get; set; } = null!;

        /// <summary>
        /// The username to use for authenticating to the registry. If this is blank, the `DOCKER_REGISTRY_USER` is also be checked. 
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ServiceAuthGetArgs()
        {
        }
    }

    public sealed class ServiceConvergeConfigArgs : Pulumi.ResourceArgs
    {
        [Input("delay")]
        public Input<string>? Delay { get; set; }

        [Input("timeout")]
        public Input<string>? Timeout { get; set; }

        public ServiceConvergeConfigArgs()
        {
        }
    }

    public sealed class ServiceConvergeConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("delay")]
        public Input<string>? Delay { get; set; }

        [Input("timeout")]
        public Input<string>? Timeout { get; set; }

        public ServiceConvergeConfigGetArgs()
        {
        }
    }

    public sealed class ServiceEndpointSpecArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The mode of resolution to use for internal load balancing between tasks. `(vip|dnsrr)`. Default: `vip`.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        [Input("ports")]
        private InputList<ServiceEndpointSpecPortsArgs>? _ports;

        /// <summary>
        /// See Ports below for details.
        /// </summary>
        public InputList<ServiceEndpointSpecPortsArgs> Ports
        {
            get => _ports ?? (_ports = new InputList<ServiceEndpointSpecPortsArgs>());
            set => _ports = value;
        }

        public ServiceEndpointSpecArgs()
        {
        }
    }

    public sealed class ServiceEndpointSpecGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The mode of resolution to use for internal load balancing between tasks. `(vip|dnsrr)`. Default: `vip`.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        [Input("ports")]
        private InputList<ServiceEndpointSpecPortsGetArgs>? _ports;

        /// <summary>
        /// See Ports below for details.
        /// </summary>
        public InputList<ServiceEndpointSpecPortsGetArgs> Ports
        {
            get => _ports ?? (_ports = new InputList<ServiceEndpointSpecPortsGetArgs>());
            set => _ports = value;
        }

        public ServiceEndpointSpecGetArgs()
        {
        }
    }

    public sealed class ServiceEndpointSpecPortsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A random name for the port.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Protocol that can be used over this port: `tcp|udp|sctp`. Default: `tcp`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// Represents the mode in which the port is to be published: `ingress|host`
        /// </summary>
        [Input("publishMode")]
        public Input<string>? PublishMode { get; set; }

        /// <summary>
        /// The port on the swarm hosts. If not set the value of `target_port` will be used.
        /// </summary>
        [Input("publishedPort")]
        public Input<int>? PublishedPort { get; set; }

        /// <summary>
        /// Port inside the container.
        /// </summary>
        [Input("targetPort", required: true)]
        public Input<int> TargetPort { get; set; } = null!;

        public ServiceEndpointSpecPortsArgs()
        {
        }
    }

    public sealed class ServiceEndpointSpecPortsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A random name for the port.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Protocol that can be used over this port: `tcp|udp|sctp`. Default: `tcp`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// Represents the mode in which the port is to be published: `ingress|host`
        /// </summary>
        [Input("publishMode")]
        public Input<string>? PublishMode { get; set; }

        /// <summary>
        /// The port on the swarm hosts. If not set the value of `target_port` will be used.
        /// </summary>
        [Input("publishedPort")]
        public Input<int>? PublishedPort { get; set; }

        /// <summary>
        /// Port inside the container.
        /// </summary>
        [Input("targetPort", required: true)]
        public Input<int> TargetPort { get; set; } = null!;

        public ServiceEndpointSpecPortsGetArgs()
        {
        }
    }

    public sealed class ServiceModeArgs : Pulumi.ResourceArgs
    {
        [Input("global")]
        public Input<bool>? Global { get; set; }

        [Input("replicated")]
        public Input<ServiceModeReplicatedArgs>? Replicated { get; set; }

        public ServiceModeArgs()
        {
        }
    }

    public sealed class ServiceModeGetArgs : Pulumi.ResourceArgs
    {
        [Input("global")]
        public Input<bool>? Global { get; set; }

        [Input("replicated")]
        public Input<ServiceModeReplicatedGetArgs>? Replicated { get; set; }

        public ServiceModeGetArgs()
        {
        }
    }

    public sealed class ServiceModeReplicatedArgs : Pulumi.ResourceArgs
    {
        [Input("replicas")]
        public Input<int>? Replicas { get; set; }

        public ServiceModeReplicatedArgs()
        {
        }
    }

    public sealed class ServiceModeReplicatedGetArgs : Pulumi.ResourceArgs
    {
        [Input("replicas")]
        public Input<int>? Replicas { get; set; }

        public ServiceModeReplicatedGetArgs()
        {
        }
    }

    public sealed class ServiceRollbackConfigArgs : Pulumi.ResourceArgs
    {
        [Input("delay")]
        public Input<string>? Delay { get; set; }

        [Input("failureAction")]
        public Input<string>? FailureAction { get; set; }

        [Input("maxFailureRatio")]
        public Input<string>? MaxFailureRatio { get; set; }

        [Input("monitor")]
        public Input<string>? Monitor { get; set; }

        [Input("order")]
        public Input<string>? Order { get; set; }

        [Input("parallelism")]
        public Input<int>? Parallelism { get; set; }

        public ServiceRollbackConfigArgs()
        {
        }
    }

    public sealed class ServiceRollbackConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("delay")]
        public Input<string>? Delay { get; set; }

        [Input("failureAction")]
        public Input<string>? FailureAction { get; set; }

        [Input("maxFailureRatio")]
        public Input<string>? MaxFailureRatio { get; set; }

        [Input("monitor")]
        public Input<string>? Monitor { get; set; }

        [Input("order")]
        public Input<string>? Order { get; set; }

        [Input("parallelism")]
        public Input<int>? Parallelism { get; set; }

        public ServiceRollbackConfigGetArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecArgs : Pulumi.ResourceArgs
    {
        [Input("containerSpec", required: true)]
        public Input<ServiceTaskSpecContainerSpecArgs> ContainerSpec { get; set; } = null!;

        [Input("forceUpdate")]
        public Input<int>? ForceUpdate { get; set; }

        [Input("logDriver")]
        public Input<ServiceTaskSpecLogDriverArgs>? LogDriver { get; set; }

        [Input("networks")]
        private InputList<string>? _networks;
        public InputList<string> Networks
        {
            get => _networks ?? (_networks = new InputList<string>());
            set => _networks = value;
        }

        [Input("placement")]
        public Input<ServiceTaskSpecPlacementArgs>? Placement { get; set; }

        [Input("resources")]
        public Input<ServiceTaskSpecResourcesArgs>? Resources { get; set; }

        [Input("restartPolicy")]
        public Input<ServiceTaskSpecRestartPolicyArgs>? RestartPolicy { get; set; }

        [Input("runtime")]
        public Input<string>? Runtime { get; set; }

        public ServiceTaskSpecArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecContainerSpecArgs : Pulumi.ResourceArgs
    {
        [Input("args")]
        private InputList<string>? _args;
        public InputList<string> Args
        {
            get => _args ?? (_args = new InputList<string>());
            set => _args = value;
        }

        [Input("commands")]
        private InputList<string>? _commands;
        public InputList<string> Commands
        {
            get => _commands ?? (_commands = new InputList<string>());
            set => _commands = value;
        }

        [Input("configs")]
        private InputList<ServiceTaskSpecContainerSpecConfigsArgs>? _configs;
        public InputList<ServiceTaskSpecContainerSpecConfigsArgs> Configs
        {
            get => _configs ?? (_configs = new InputList<ServiceTaskSpecContainerSpecConfigsArgs>());
            set => _configs = value;
        }

        [Input("dir")]
        public Input<string>? Dir { get; set; }

        [Input("dnsConfig")]
        public Input<ServiceTaskSpecContainerSpecDnsConfigArgs>? DnsConfig { get; set; }

        [Input("env")]
        private InputMap<string>? _env;
        public InputMap<string> Env
        {
            get => _env ?? (_env = new InputMap<string>());
            set => _env = value;
        }

        [Input("groups")]
        private InputList<string>? _groups;
        public InputList<string> Groups
        {
            get => _groups ?? (_groups = new InputList<string>());
            set => _groups = value;
        }

        [Input("healthcheck")]
        public Input<ServiceTaskSpecContainerSpecHealthcheckArgs>? Healthcheck { get; set; }

        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        [Input("hosts")]
        private InputList<ServiceTaskSpecContainerSpecHostsArgs>? _hosts;
        public InputList<ServiceTaskSpecContainerSpecHostsArgs> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<ServiceTaskSpecContainerSpecHostsArgs>());
            set => _hosts = value;
        }

        [Input("image", required: true)]
        public Input<string> Image { get; set; } = null!;

        [Input("isolation")]
        public Input<string>? Isolation { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("mounts")]
        private InputList<ServiceTaskSpecContainerSpecMountsArgs>? _mounts;
        public InputList<ServiceTaskSpecContainerSpecMountsArgs> Mounts
        {
            get => _mounts ?? (_mounts = new InputList<ServiceTaskSpecContainerSpecMountsArgs>());
            set => _mounts = value;
        }

        [Input("privileges")]
        public Input<ServiceTaskSpecContainerSpecPrivilegesArgs>? Privileges { get; set; }

        [Input("readOnly")]
        public Input<bool>? ReadOnly { get; set; }

        [Input("secrets")]
        private InputList<ServiceTaskSpecContainerSpecSecretsArgs>? _secrets;
        public InputList<ServiceTaskSpecContainerSpecSecretsArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<ServiceTaskSpecContainerSpecSecretsArgs>());
            set => _secrets = value;
        }

        [Input("stopGracePeriod")]
        public Input<string>? StopGracePeriod { get; set; }

        [Input("stopSignal")]
        public Input<string>? StopSignal { get; set; }

        [Input("user")]
        public Input<string>? User { get; set; }

        public ServiceTaskSpecContainerSpecArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecContainerSpecConfigsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// ConfigID represents the ID of the specific config.
        /// </summary>
        [Input("configId", required: true)]
        public Input<string> ConfigId { get; set; } = null!;

        /// <summary>
        /// The name of the config that this references, but internally it is just provided for lookup/display purposes
        /// </summary>
        [Input("configName")]
        public Input<string>? ConfigName { get; set; }

        /// <summary>
        /// Represents the final filename in the filesystem. The specific target file that the config data is written within the docker container, e.g. `/root/config/config.json`
        /// </summary>
        [Input("fileName", required: true)]
        public Input<string> FileName { get; set; } = null!;

        public ServiceTaskSpecContainerSpecConfigsArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecContainerSpecConfigsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// ConfigID represents the ID of the specific config.
        /// </summary>
        [Input("configId", required: true)]
        public Input<string> ConfigId { get; set; } = null!;

        /// <summary>
        /// The name of the config that this references, but internally it is just provided for lookup/display purposes
        /// </summary>
        [Input("configName")]
        public Input<string>? ConfigName { get; set; }

        /// <summary>
        /// Represents the final filename in the filesystem. The specific target file that the config data is written within the docker container, e.g. `/root/config/config.json`
        /// </summary>
        [Input("fileName", required: true)]
        public Input<string> FileName { get; set; } = null!;

        public ServiceTaskSpecContainerSpecConfigsGetArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecContainerSpecDnsConfigArgs : Pulumi.ResourceArgs
    {
        [Input("nameservers", required: true)]
        private InputList<string>? _nameservers;
        public InputList<string> Nameservers
        {
            get => _nameservers ?? (_nameservers = new InputList<string>());
            set => _nameservers = value;
        }

        [Input("options")]
        private InputList<string>? _options;

        /// <summary>
        /// The options for the logging driver, e.g.
        /// </summary>
        public InputList<string> Options
        {
            get => _options ?? (_options = new InputList<string>());
            set => _options = value;
        }

        [Input("searches")]
        private InputList<string>? _searches;
        public InputList<string> Searches
        {
            get => _searches ?? (_searches = new InputList<string>());
            set => _searches = value;
        }

        public ServiceTaskSpecContainerSpecDnsConfigArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecContainerSpecDnsConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("nameservers", required: true)]
        private InputList<string>? _nameservers;
        public InputList<string> Nameservers
        {
            get => _nameservers ?? (_nameservers = new InputList<string>());
            set => _nameservers = value;
        }

        [Input("options")]
        private InputList<string>? _options;

        /// <summary>
        /// The options for the logging driver, e.g.
        /// </summary>
        public InputList<string> Options
        {
            get => _options ?? (_options = new InputList<string>());
            set => _options = value;
        }

        [Input("searches")]
        private InputList<string>? _searches;
        public InputList<string> Searches
        {
            get => _searches ?? (_searches = new InputList<string>());
            set => _searches = value;
        }

        public ServiceTaskSpecContainerSpecDnsConfigGetArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecContainerSpecGetArgs : Pulumi.ResourceArgs
    {
        [Input("args")]
        private InputList<string>? _args;
        public InputList<string> Args
        {
            get => _args ?? (_args = new InputList<string>());
            set => _args = value;
        }

        [Input("commands")]
        private InputList<string>? _commands;
        public InputList<string> Commands
        {
            get => _commands ?? (_commands = new InputList<string>());
            set => _commands = value;
        }

        [Input("configs")]
        private InputList<ServiceTaskSpecContainerSpecConfigsGetArgs>? _configs;
        public InputList<ServiceTaskSpecContainerSpecConfigsGetArgs> Configs
        {
            get => _configs ?? (_configs = new InputList<ServiceTaskSpecContainerSpecConfigsGetArgs>());
            set => _configs = value;
        }

        [Input("dir")]
        public Input<string>? Dir { get; set; }

        [Input("dnsConfig")]
        public Input<ServiceTaskSpecContainerSpecDnsConfigGetArgs>? DnsConfig { get; set; }

        [Input("env")]
        private InputMap<string>? _env;
        public InputMap<string> Env
        {
            get => _env ?? (_env = new InputMap<string>());
            set => _env = value;
        }

        [Input("groups")]
        private InputList<string>? _groups;
        public InputList<string> Groups
        {
            get => _groups ?? (_groups = new InputList<string>());
            set => _groups = value;
        }

        [Input("healthcheck")]
        public Input<ServiceTaskSpecContainerSpecHealthcheckGetArgs>? Healthcheck { get; set; }

        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        [Input("hosts")]
        private InputList<ServiceTaskSpecContainerSpecHostsGetArgs>? _hosts;
        public InputList<ServiceTaskSpecContainerSpecHostsGetArgs> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<ServiceTaskSpecContainerSpecHostsGetArgs>());
            set => _hosts = value;
        }

        [Input("image", required: true)]
        public Input<string> Image { get; set; } = null!;

        [Input("isolation")]
        public Input<string>? Isolation { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("mounts")]
        private InputList<ServiceTaskSpecContainerSpecMountsGetArgs>? _mounts;
        public InputList<ServiceTaskSpecContainerSpecMountsGetArgs> Mounts
        {
            get => _mounts ?? (_mounts = new InputList<ServiceTaskSpecContainerSpecMountsGetArgs>());
            set => _mounts = value;
        }

        [Input("privileges")]
        public Input<ServiceTaskSpecContainerSpecPrivilegesGetArgs>? Privileges { get; set; }

        [Input("readOnly")]
        public Input<bool>? ReadOnly { get; set; }

        [Input("secrets")]
        private InputList<ServiceTaskSpecContainerSpecSecretsGetArgs>? _secrets;
        public InputList<ServiceTaskSpecContainerSpecSecretsGetArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<ServiceTaskSpecContainerSpecSecretsGetArgs>());
            set => _secrets = value;
        }

        [Input("stopGracePeriod")]
        public Input<string>? StopGracePeriod { get; set; }

        [Input("stopSignal")]
        public Input<string>? StopSignal { get; set; }

        [Input("user")]
        public Input<string>? User { get; set; }

        public ServiceTaskSpecContainerSpecGetArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecContainerSpecHealthcheckArgs : Pulumi.ResourceArgs
    {
        [Input("interval")]
        public Input<string>? Interval { get; set; }

        [Input("retries")]
        public Input<int>? Retries { get; set; }

        [Input("startPeriod")]
        public Input<string>? StartPeriod { get; set; }

        [Input("tests", required: true)]
        private InputList<string>? _tests;
        public InputList<string> Tests
        {
            get => _tests ?? (_tests = new InputList<string>());
            set => _tests = value;
        }

        [Input("timeout")]
        public Input<string>? Timeout { get; set; }

        public ServiceTaskSpecContainerSpecHealthcheckArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecContainerSpecHealthcheckGetArgs : Pulumi.ResourceArgs
    {
        [Input("interval")]
        public Input<string>? Interval { get; set; }

        [Input("retries")]
        public Input<int>? Retries { get; set; }

        [Input("startPeriod")]
        public Input<string>? StartPeriod { get; set; }

        [Input("tests", required: true)]
        private InputList<string>? _tests;
        public InputList<string> Tests
        {
            get => _tests ?? (_tests = new InputList<string>());
            set => _tests = value;
        }

        [Input("timeout")]
        public Input<string>? Timeout { get; set; }

        public ServiceTaskSpecContainerSpecHealthcheckGetArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecContainerSpecHostsArgs : Pulumi.ResourceArgs
    {
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        [Input("ip", required: true)]
        public Input<string> Ip { get; set; } = null!;

        public ServiceTaskSpecContainerSpecHostsArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecContainerSpecHostsGetArgs : Pulumi.ResourceArgs
    {
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        [Input("ip", required: true)]
        public Input<string> Ip { get; set; } = null!;

        public ServiceTaskSpecContainerSpecHostsGetArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecContainerSpecMountsArgs : Pulumi.ResourceArgs
    {
        [Input("bindOptions")]
        public Input<ServiceTaskSpecContainerSpecMountsBindOptionsArgs>? BindOptions { get; set; }

        [Input("readOnly")]
        public Input<bool>? ReadOnly { get; set; }

        [Input("source")]
        public Input<string>? Source { get; set; }

        [Input("target", required: true)]
        public Input<string> Target { get; set; } = null!;

        [Input("tmpfsOptions")]
        public Input<ServiceTaskSpecContainerSpecMountsTmpfsOptionsArgs>? TmpfsOptions { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("volumeOptions")]
        public Input<ServiceTaskSpecContainerSpecMountsVolumeOptionsArgs>? VolumeOptions { get; set; }

        public ServiceTaskSpecContainerSpecMountsArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecContainerSpecMountsBindOptionsArgs : Pulumi.ResourceArgs
    {
        [Input("propagation")]
        public Input<string>? Propagation { get; set; }

        public ServiceTaskSpecContainerSpecMountsBindOptionsArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecContainerSpecMountsBindOptionsGetArgs : Pulumi.ResourceArgs
    {
        [Input("propagation")]
        public Input<string>? Propagation { get; set; }

        public ServiceTaskSpecContainerSpecMountsBindOptionsGetArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecContainerSpecMountsGetArgs : Pulumi.ResourceArgs
    {
        [Input("bindOptions")]
        public Input<ServiceTaskSpecContainerSpecMountsBindOptionsGetArgs>? BindOptions { get; set; }

        [Input("readOnly")]
        public Input<bool>? ReadOnly { get; set; }

        [Input("source")]
        public Input<string>? Source { get; set; }

        [Input("target", required: true)]
        public Input<string> Target { get; set; } = null!;

        [Input("tmpfsOptions")]
        public Input<ServiceTaskSpecContainerSpecMountsTmpfsOptionsGetArgs>? TmpfsOptions { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("volumeOptions")]
        public Input<ServiceTaskSpecContainerSpecMountsVolumeOptionsGetArgs>? VolumeOptions { get; set; }

        public ServiceTaskSpecContainerSpecMountsGetArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecContainerSpecMountsTmpfsOptionsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The mode of resolution to use for internal load balancing between tasks. `(vip|dnsrr)`. Default: `vip`.
        /// </summary>
        [Input("mode")]
        public Input<int>? Mode { get; set; }

        [Input("sizeBytes")]
        public Input<int>? SizeBytes { get; set; }

        public ServiceTaskSpecContainerSpecMountsTmpfsOptionsArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecContainerSpecMountsTmpfsOptionsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The mode of resolution to use for internal load balancing between tasks. `(vip|dnsrr)`. Default: `vip`.
        /// </summary>
        [Input("mode")]
        public Input<int>? Mode { get; set; }

        [Input("sizeBytes")]
        public Input<int>? SizeBytes { get; set; }

        public ServiceTaskSpecContainerSpecMountsTmpfsOptionsGetArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecContainerSpecMountsVolumeOptionsArgs : Pulumi.ResourceArgs
    {
        [Input("driverName")]
        public Input<string>? DriverName { get; set; }

        [Input("driverOptions")]
        private InputMap<string>? _driverOptions;
        public InputMap<string> DriverOptions
        {
            get => _driverOptions ?? (_driverOptions = new InputMap<string>());
            set => _driverOptions = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("noCopy")]
        public Input<bool>? NoCopy { get; set; }

        public ServiceTaskSpecContainerSpecMountsVolumeOptionsArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecContainerSpecMountsVolumeOptionsGetArgs : Pulumi.ResourceArgs
    {
        [Input("driverName")]
        public Input<string>? DriverName { get; set; }

        [Input("driverOptions")]
        private InputMap<string>? _driverOptions;
        public InputMap<string> DriverOptions
        {
            get => _driverOptions ?? (_driverOptions = new InputMap<string>());
            set => _driverOptions = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("noCopy")]
        public Input<bool>? NoCopy { get; set; }

        public ServiceTaskSpecContainerSpecMountsVolumeOptionsGetArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecContainerSpecPrivilegesArgs : Pulumi.ResourceArgs
    {
        [Input("credentialSpec")]
        public Input<ServiceTaskSpecContainerSpecPrivilegesCredentialSpecArgs>? CredentialSpec { get; set; }

        [Input("seLinuxContext")]
        public Input<ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextArgs>? SeLinuxContext { get; set; }

        public ServiceTaskSpecContainerSpecPrivilegesArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecContainerSpecPrivilegesCredentialSpecArgs : Pulumi.ResourceArgs
    {
        [Input("file")]
        public Input<string>? File { get; set; }

        [Input("registry")]
        public Input<string>? Registry { get; set; }

        public ServiceTaskSpecContainerSpecPrivilegesCredentialSpecArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecContainerSpecPrivilegesCredentialSpecGetArgs : Pulumi.ResourceArgs
    {
        [Input("file")]
        public Input<string>? File { get; set; }

        [Input("registry")]
        public Input<string>? Registry { get; set; }

        public ServiceTaskSpecContainerSpecPrivilegesCredentialSpecGetArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecContainerSpecPrivilegesGetArgs : Pulumi.ResourceArgs
    {
        [Input("credentialSpec")]
        public Input<ServiceTaskSpecContainerSpecPrivilegesCredentialSpecGetArgs>? CredentialSpec { get; set; }

        [Input("seLinuxContext")]
        public Input<ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextGetArgs>? SeLinuxContext { get; set; }

        public ServiceTaskSpecContainerSpecPrivilegesGetArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextArgs : Pulumi.ResourceArgs
    {
        [Input("disable")]
        public Input<bool>? Disable { get; set; }

        [Input("level")]
        public Input<string>? Level { get; set; }

        [Input("role")]
        public Input<string>? Role { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("user")]
        public Input<string>? User { get; set; }

        public ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextGetArgs : Pulumi.ResourceArgs
    {
        [Input("disable")]
        public Input<bool>? Disable { get; set; }

        [Input("level")]
        public Input<string>? Level { get; set; }

        [Input("role")]
        public Input<string>? Role { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("user")]
        public Input<string>? User { get; set; }

        public ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextGetArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecContainerSpecSecretsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Represents the final filename in the filesystem. The specific target file that the config data is written within the docker container, e.g. `/root/config/config.json`
        /// </summary>
        [Input("fileName", required: true)]
        public Input<string> FileName { get; set; } = null!;

        [Input("secretId", required: true)]
        public Input<string> SecretId { get; set; } = null!;

        [Input("secretName")]
        public Input<string>? SecretName { get; set; }

        public ServiceTaskSpecContainerSpecSecretsArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecContainerSpecSecretsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Represents the final filename in the filesystem. The specific target file that the config data is written within the docker container, e.g. `/root/config/config.json`
        /// </summary>
        [Input("fileName", required: true)]
        public Input<string> FileName { get; set; } = null!;

        [Input("secretId", required: true)]
        public Input<string> SecretId { get; set; } = null!;

        [Input("secretName")]
        public Input<string>? SecretName { get; set; }

        public ServiceTaskSpecContainerSpecSecretsGetArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecGetArgs : Pulumi.ResourceArgs
    {
        [Input("containerSpec", required: true)]
        public Input<ServiceTaskSpecContainerSpecGetArgs> ContainerSpec { get; set; } = null!;

        [Input("forceUpdate")]
        public Input<int>? ForceUpdate { get; set; }

        [Input("logDriver")]
        public Input<ServiceTaskSpecLogDriverGetArgs>? LogDriver { get; set; }

        [Input("networks")]
        private InputList<string>? _networks;
        public InputList<string> Networks
        {
            get => _networks ?? (_networks = new InputList<string>());
            set => _networks = value;
        }

        [Input("placement")]
        public Input<ServiceTaskSpecPlacementGetArgs>? Placement { get; set; }

        [Input("resources")]
        public Input<ServiceTaskSpecResourcesGetArgs>? Resources { get; set; }

        [Input("restartPolicy")]
        public Input<ServiceTaskSpecRestartPolicyGetArgs>? RestartPolicy { get; set; }

        [Input("runtime")]
        public Input<string>? Runtime { get; set; }

        public ServiceTaskSpecGetArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecLogDriverArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A random name for the port.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("options")]
        private InputMap<string>? _options;

        /// <summary>
        /// The options for the logging driver, e.g.
        /// </summary>
        public InputMap<string> Options
        {
            get => _options ?? (_options = new InputMap<string>());
            set => _options = value;
        }

        public ServiceTaskSpecLogDriverArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecLogDriverGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A random name for the port.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("options")]
        private InputMap<string>? _options;

        /// <summary>
        /// The options for the logging driver, e.g.
        /// </summary>
        public InputMap<string> Options
        {
            get => _options ?? (_options = new InputMap<string>());
            set => _options = value;
        }

        public ServiceTaskSpecLogDriverGetArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecPlacementArgs : Pulumi.ResourceArgs
    {
        [Input("constraints")]
        private InputList<string>? _constraints;
        public InputList<string> Constraints
        {
            get => _constraints ?? (_constraints = new InputList<string>());
            set => _constraints = value;
        }

        [Input("platforms")]
        private InputList<ServiceTaskSpecPlacementPlatformsArgs>? _platforms;
        public InputList<ServiceTaskSpecPlacementPlatformsArgs> Platforms
        {
            get => _platforms ?? (_platforms = new InputList<ServiceTaskSpecPlacementPlatformsArgs>());
            set => _platforms = value;
        }

        [Input("prefs")]
        private InputList<string>? _prefs;
        public InputList<string> Prefs
        {
            get => _prefs ?? (_prefs = new InputList<string>());
            set => _prefs = value;
        }

        public ServiceTaskSpecPlacementArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecPlacementGetArgs : Pulumi.ResourceArgs
    {
        [Input("constraints")]
        private InputList<string>? _constraints;
        public InputList<string> Constraints
        {
            get => _constraints ?? (_constraints = new InputList<string>());
            set => _constraints = value;
        }

        [Input("platforms")]
        private InputList<ServiceTaskSpecPlacementPlatformsGetArgs>? _platforms;
        public InputList<ServiceTaskSpecPlacementPlatformsGetArgs> Platforms
        {
            get => _platforms ?? (_platforms = new InputList<ServiceTaskSpecPlacementPlatformsGetArgs>());
            set => _platforms = value;
        }

        [Input("prefs")]
        private InputList<string>? _prefs;
        public InputList<string> Prefs
        {
            get => _prefs ?? (_prefs = new InputList<string>());
            set => _prefs = value;
        }

        public ServiceTaskSpecPlacementGetArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecPlacementPlatformsArgs : Pulumi.ResourceArgs
    {
        [Input("architecture", required: true)]
        public Input<string> Architecture { get; set; } = null!;

        [Input("os", required: true)]
        public Input<string> Os { get; set; } = null!;

        public ServiceTaskSpecPlacementPlatformsArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecPlacementPlatformsGetArgs : Pulumi.ResourceArgs
    {
        [Input("architecture", required: true)]
        public Input<string> Architecture { get; set; } = null!;

        [Input("os", required: true)]
        public Input<string> Os { get; set; } = null!;

        public ServiceTaskSpecPlacementPlatformsGetArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecResourcesArgs : Pulumi.ResourceArgs
    {
        [Input("limits")]
        public Input<ServiceTaskSpecResourcesLimitsArgs>? Limits { get; set; }

        [Input("reservation")]
        public Input<ServiceTaskSpecResourcesReservationArgs>? Reservation { get; set; }

        public ServiceTaskSpecResourcesArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecResourcesGetArgs : Pulumi.ResourceArgs
    {
        [Input("limits")]
        public Input<ServiceTaskSpecResourcesLimitsGetArgs>? Limits { get; set; }

        [Input("reservation")]
        public Input<ServiceTaskSpecResourcesReservationGetArgs>? Reservation { get; set; }

        public ServiceTaskSpecResourcesGetArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecResourcesLimitsArgs : Pulumi.ResourceArgs
    {
        [Input("genericResources")]
        public Input<ServiceTaskSpecResourcesLimitsGenericResourcesArgs>? GenericResources { get; set; }

        [Input("memoryBytes")]
        public Input<int>? MemoryBytes { get; set; }

        [Input("nanoCpus")]
        public Input<int>? NanoCpus { get; set; }

        public ServiceTaskSpecResourcesLimitsArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecResourcesLimitsGenericResourcesArgs : Pulumi.ResourceArgs
    {
        [Input("discreteResourcesSpecs")]
        private InputList<string>? _discreteResourcesSpecs;
        public InputList<string> DiscreteResourcesSpecs
        {
            get => _discreteResourcesSpecs ?? (_discreteResourcesSpecs = new InputList<string>());
            set => _discreteResourcesSpecs = value;
        }

        [Input("namedResourcesSpecs")]
        private InputList<string>? _namedResourcesSpecs;
        public InputList<string> NamedResourcesSpecs
        {
            get => _namedResourcesSpecs ?? (_namedResourcesSpecs = new InputList<string>());
            set => _namedResourcesSpecs = value;
        }

        public ServiceTaskSpecResourcesLimitsGenericResourcesArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecResourcesLimitsGenericResourcesGetArgs : Pulumi.ResourceArgs
    {
        [Input("discreteResourcesSpecs")]
        private InputList<string>? _discreteResourcesSpecs;
        public InputList<string> DiscreteResourcesSpecs
        {
            get => _discreteResourcesSpecs ?? (_discreteResourcesSpecs = new InputList<string>());
            set => _discreteResourcesSpecs = value;
        }

        [Input("namedResourcesSpecs")]
        private InputList<string>? _namedResourcesSpecs;
        public InputList<string> NamedResourcesSpecs
        {
            get => _namedResourcesSpecs ?? (_namedResourcesSpecs = new InputList<string>());
            set => _namedResourcesSpecs = value;
        }

        public ServiceTaskSpecResourcesLimitsGenericResourcesGetArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecResourcesLimitsGetArgs : Pulumi.ResourceArgs
    {
        [Input("genericResources")]
        public Input<ServiceTaskSpecResourcesLimitsGenericResourcesGetArgs>? GenericResources { get; set; }

        [Input("memoryBytes")]
        public Input<int>? MemoryBytes { get; set; }

        [Input("nanoCpus")]
        public Input<int>? NanoCpus { get; set; }

        public ServiceTaskSpecResourcesLimitsGetArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecResourcesReservationArgs : Pulumi.ResourceArgs
    {
        [Input("genericResources")]
        public Input<ServiceTaskSpecResourcesReservationGenericResourcesArgs>? GenericResources { get; set; }

        [Input("memoryBytes")]
        public Input<int>? MemoryBytes { get; set; }

        [Input("nanoCpus")]
        public Input<int>? NanoCpus { get; set; }

        public ServiceTaskSpecResourcesReservationArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecResourcesReservationGenericResourcesArgs : Pulumi.ResourceArgs
    {
        [Input("discreteResourcesSpecs")]
        private InputList<string>? _discreteResourcesSpecs;
        public InputList<string> DiscreteResourcesSpecs
        {
            get => _discreteResourcesSpecs ?? (_discreteResourcesSpecs = new InputList<string>());
            set => _discreteResourcesSpecs = value;
        }

        [Input("namedResourcesSpecs")]
        private InputList<string>? _namedResourcesSpecs;
        public InputList<string> NamedResourcesSpecs
        {
            get => _namedResourcesSpecs ?? (_namedResourcesSpecs = new InputList<string>());
            set => _namedResourcesSpecs = value;
        }

        public ServiceTaskSpecResourcesReservationGenericResourcesArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecResourcesReservationGenericResourcesGetArgs : Pulumi.ResourceArgs
    {
        [Input("discreteResourcesSpecs")]
        private InputList<string>? _discreteResourcesSpecs;
        public InputList<string> DiscreteResourcesSpecs
        {
            get => _discreteResourcesSpecs ?? (_discreteResourcesSpecs = new InputList<string>());
            set => _discreteResourcesSpecs = value;
        }

        [Input("namedResourcesSpecs")]
        private InputList<string>? _namedResourcesSpecs;
        public InputList<string> NamedResourcesSpecs
        {
            get => _namedResourcesSpecs ?? (_namedResourcesSpecs = new InputList<string>());
            set => _namedResourcesSpecs = value;
        }

        public ServiceTaskSpecResourcesReservationGenericResourcesGetArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecResourcesReservationGetArgs : Pulumi.ResourceArgs
    {
        [Input("genericResources")]
        public Input<ServiceTaskSpecResourcesReservationGenericResourcesGetArgs>? GenericResources { get; set; }

        [Input("memoryBytes")]
        public Input<int>? MemoryBytes { get; set; }

        [Input("nanoCpus")]
        public Input<int>? NanoCpus { get; set; }

        public ServiceTaskSpecResourcesReservationGetArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecRestartPolicyArgs : Pulumi.ResourceArgs
    {
        [Input("condition")]
        public Input<string>? Condition { get; set; }

        [Input("delay")]
        public Input<string>? Delay { get; set; }

        [Input("maxAttempts")]
        public Input<int>? MaxAttempts { get; set; }

        [Input("window")]
        public Input<string>? Window { get; set; }

        public ServiceTaskSpecRestartPolicyArgs()
        {
        }
    }

    public sealed class ServiceTaskSpecRestartPolicyGetArgs : Pulumi.ResourceArgs
    {
        [Input("condition")]
        public Input<string>? Condition { get; set; }

        [Input("delay")]
        public Input<string>? Delay { get; set; }

        [Input("maxAttempts")]
        public Input<int>? MaxAttempts { get; set; }

        [Input("window")]
        public Input<string>? Window { get; set; }

        public ServiceTaskSpecRestartPolicyGetArgs()
        {
        }
    }

    public sealed class ServiceUpdateConfigArgs : Pulumi.ResourceArgs
    {
        [Input("delay")]
        public Input<string>? Delay { get; set; }

        [Input("failureAction")]
        public Input<string>? FailureAction { get; set; }

        [Input("maxFailureRatio")]
        public Input<string>? MaxFailureRatio { get; set; }

        [Input("monitor")]
        public Input<string>? Monitor { get; set; }

        [Input("order")]
        public Input<string>? Order { get; set; }

        [Input("parallelism")]
        public Input<int>? Parallelism { get; set; }

        public ServiceUpdateConfigArgs()
        {
        }
    }

    public sealed class ServiceUpdateConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("delay")]
        public Input<string>? Delay { get; set; }

        [Input("failureAction")]
        public Input<string>? FailureAction { get; set; }

        [Input("maxFailureRatio")]
        public Input<string>? MaxFailureRatio { get; set; }

        [Input("monitor")]
        public Input<string>? Monitor { get; set; }

        [Input("order")]
        public Input<string>? Order { get; set; }

        [Input("parallelism")]
        public Input<int>? Parallelism { get; set; }

        public ServiceUpdateConfigGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ServiceAuth
    {
        /// <summary>
        /// The password to use for authenticating to the registry. If this is blank, the `DOCKER_REGISTRY_PASS` is also be checked.
        /// </summary>
        public readonly string? Password;
        /// <summary>
        /// The address of the registry server
        /// </summary>
        public readonly string ServerAddress;
        /// <summary>
        /// The username to use for authenticating to the registry. If this is blank, the `DOCKER_REGISTRY_USER` is also be checked. 
        /// </summary>
        public readonly string? Username;

        [OutputConstructor]
        private ServiceAuth(
            string? password,
            string serverAddress,
            string? username)
        {
            Password = password;
            ServerAddress = serverAddress;
            Username = username;
        }
    }

    [OutputType]
    public sealed class ServiceConvergeConfig
    {
        public readonly string? Delay;
        public readonly string? Timeout;

        [OutputConstructor]
        private ServiceConvergeConfig(
            string? delay,
            string? timeout)
        {
            Delay = delay;
            Timeout = timeout;
        }
    }

    [OutputType]
    public sealed class ServiceEndpointSpec
    {
        /// <summary>
        /// The mode of resolution to use for internal load balancing between tasks. `(vip|dnsrr)`. Default: `vip`.
        /// </summary>
        public readonly string Mode;
        /// <summary>
        /// See Ports below for details.
        /// </summary>
        public readonly ImmutableArray<ServiceEndpointSpecPorts> Ports;

        [OutputConstructor]
        private ServiceEndpointSpec(
            string mode,
            ImmutableArray<ServiceEndpointSpecPorts> ports)
        {
            Mode = mode;
            Ports = ports;
        }
    }

    [OutputType]
    public sealed class ServiceEndpointSpecPorts
    {
        /// <summary>
        /// A random name for the port.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Protocol that can be used over this port: `tcp|udp|sctp`. Default: `tcp`.
        /// </summary>
        public readonly string? Protocol;
        /// <summary>
        /// Represents the mode in which the port is to be published: `ingress|host`
        /// </summary>
        public readonly string? PublishMode;
        /// <summary>
        /// The port on the swarm hosts. If not set the value of `target_port` will be used.
        /// </summary>
        public readonly int? PublishedPort;
        /// <summary>
        /// Port inside the container.
        /// </summary>
        public readonly int TargetPort;

        [OutputConstructor]
        private ServiceEndpointSpecPorts(
            string? name,
            string? protocol,
            string? publishMode,
            int? publishedPort,
            int targetPort)
        {
            Name = name;
            Protocol = protocol;
            PublishMode = publishMode;
            PublishedPort = publishedPort;
            TargetPort = targetPort;
        }
    }

    [OutputType]
    public sealed class ServiceMode
    {
        public readonly bool? Global;
        public readonly ServiceModeReplicated Replicated;

        [OutputConstructor]
        private ServiceMode(
            bool? global,
            ServiceModeReplicated replicated)
        {
            Global = global;
            Replicated = replicated;
        }
    }

    [OutputType]
    public sealed class ServiceModeReplicated
    {
        public readonly int? Replicas;

        [OutputConstructor]
        private ServiceModeReplicated(int? replicas)
        {
            Replicas = replicas;
        }
    }

    [OutputType]
    public sealed class ServiceRollbackConfig
    {
        public readonly string? Delay;
        public readonly string? FailureAction;
        public readonly string? MaxFailureRatio;
        public readonly string? Monitor;
        public readonly string? Order;
        public readonly int? Parallelism;

        [OutputConstructor]
        private ServiceRollbackConfig(
            string? delay,
            string? failureAction,
            string? maxFailureRatio,
            string? monitor,
            string? order,
            int? parallelism)
        {
            Delay = delay;
            FailureAction = failureAction;
            MaxFailureRatio = maxFailureRatio;
            Monitor = monitor;
            Order = order;
            Parallelism = parallelism;
        }
    }

    [OutputType]
    public sealed class ServiceTaskSpec
    {
        public readonly ServiceTaskSpecContainerSpec ContainerSpec;
        public readonly int ForceUpdate;
        public readonly ServiceTaskSpecLogDriver? LogDriver;
        public readonly ImmutableArray<string> Networks;
        public readonly ServiceTaskSpecPlacement Placement;
        public readonly ServiceTaskSpecResources Resources;
        public readonly ServiceTaskSpecRestartPolicy RestartPolicy;
        public readonly string Runtime;

        [OutputConstructor]
        private ServiceTaskSpec(
            ServiceTaskSpecContainerSpec containerSpec,
            int forceUpdate,
            ServiceTaskSpecLogDriver? logDriver,
            ImmutableArray<string> networks,
            ServiceTaskSpecPlacement placement,
            ServiceTaskSpecResources resources,
            ServiceTaskSpecRestartPolicy restartPolicy,
            string runtime)
        {
            ContainerSpec = containerSpec;
            ForceUpdate = forceUpdate;
            LogDriver = logDriver;
            Networks = networks;
            Placement = placement;
            Resources = resources;
            RestartPolicy = restartPolicy;
            Runtime = runtime;
        }
    }

    [OutputType]
    public sealed class ServiceTaskSpecContainerSpec
    {
        public readonly ImmutableArray<string> Args;
        public readonly ImmutableArray<string> Commands;
        public readonly ImmutableArray<ServiceTaskSpecContainerSpecConfigs> Configs;
        public readonly string? Dir;
        public readonly ServiceTaskSpecContainerSpecDnsConfig DnsConfig;
        public readonly ImmutableDictionary<string, string>? Env;
        public readonly ImmutableArray<string> Groups;
        public readonly ServiceTaskSpecContainerSpecHealthcheck Healthcheck;
        public readonly string? Hostname;
        public readonly ImmutableArray<ServiceTaskSpecContainerSpecHosts> Hosts;
        public readonly string Image;
        public readonly string? Isolation;
        public readonly ImmutableDictionary<string, string>? Labels;
        public readonly ImmutableArray<ServiceTaskSpecContainerSpecMounts> Mounts;
        public readonly ServiceTaskSpecContainerSpecPrivileges? Privileges;
        public readonly bool? ReadOnly;
        public readonly ImmutableArray<ServiceTaskSpecContainerSpecSecrets> Secrets;
        public readonly string StopGracePeriod;
        public readonly string? StopSignal;
        public readonly string? User;

        [OutputConstructor]
        private ServiceTaskSpecContainerSpec(
            ImmutableArray<string> args,
            ImmutableArray<string> commands,
            ImmutableArray<ServiceTaskSpecContainerSpecConfigs> configs,
            string? dir,
            ServiceTaskSpecContainerSpecDnsConfig dnsConfig,
            ImmutableDictionary<string, string>? env,
            ImmutableArray<string> groups,
            ServiceTaskSpecContainerSpecHealthcheck healthcheck,
            string? hostname,
            ImmutableArray<ServiceTaskSpecContainerSpecHosts> hosts,
            string image,
            string? isolation,
            ImmutableDictionary<string, string>? labels,
            ImmutableArray<ServiceTaskSpecContainerSpecMounts> mounts,
            ServiceTaskSpecContainerSpecPrivileges? privileges,
            bool? readOnly,
            ImmutableArray<ServiceTaskSpecContainerSpecSecrets> secrets,
            string stopGracePeriod,
            string? stopSignal,
            string? user)
        {
            Args = args;
            Commands = commands;
            Configs = configs;
            Dir = dir;
            DnsConfig = dnsConfig;
            Env = env;
            Groups = groups;
            Healthcheck = healthcheck;
            Hostname = hostname;
            Hosts = hosts;
            Image = image;
            Isolation = isolation;
            Labels = labels;
            Mounts = mounts;
            Privileges = privileges;
            ReadOnly = readOnly;
            Secrets = secrets;
            StopGracePeriod = stopGracePeriod;
            StopSignal = stopSignal;
            User = user;
        }
    }

    [OutputType]
    public sealed class ServiceTaskSpecContainerSpecConfigs
    {
        /// <summary>
        /// ConfigID represents the ID of the specific config.
        /// </summary>
        public readonly string ConfigId;
        /// <summary>
        /// The name of the config that this references, but internally it is just provided for lookup/display purposes
        /// </summary>
        public readonly string? ConfigName;
        /// <summary>
        /// Represents the final filename in the filesystem. The specific target file that the config data is written within the docker container, e.g. `/root/config/config.json`
        /// </summary>
        public readonly string FileName;

        [OutputConstructor]
        private ServiceTaskSpecContainerSpecConfigs(
            string configId,
            string? configName,
            string fileName)
        {
            ConfigId = configId;
            ConfigName = configName;
            FileName = fileName;
        }
    }

    [OutputType]
    public sealed class ServiceTaskSpecContainerSpecDnsConfig
    {
        public readonly ImmutableArray<string> Nameservers;
        /// <summary>
        /// The options for the logging driver, e.g.
        /// </summary>
        public readonly ImmutableArray<string> Options;
        public readonly ImmutableArray<string> Searches;

        [OutputConstructor]
        private ServiceTaskSpecContainerSpecDnsConfig(
            ImmutableArray<string> nameservers,
            ImmutableArray<string> options,
            ImmutableArray<string> searches)
        {
            Nameservers = nameservers;
            Options = options;
            Searches = searches;
        }
    }

    [OutputType]
    public sealed class ServiceTaskSpecContainerSpecHealthcheck
    {
        public readonly string? Interval;
        public readonly int? Retries;
        public readonly string? StartPeriod;
        public readonly ImmutableArray<string> Tests;
        public readonly string? Timeout;

        [OutputConstructor]
        private ServiceTaskSpecContainerSpecHealthcheck(
            string? interval,
            int? retries,
            string? startPeriod,
            ImmutableArray<string> tests,
            string? timeout)
        {
            Interval = interval;
            Retries = retries;
            StartPeriod = startPeriod;
            Tests = tests;
            Timeout = timeout;
        }
    }

    [OutputType]
    public sealed class ServiceTaskSpecContainerSpecHosts
    {
        public readonly string Host;
        public readonly string Ip;

        [OutputConstructor]
        private ServiceTaskSpecContainerSpecHosts(
            string host,
            string ip)
        {
            Host = host;
            Ip = ip;
        }
    }

    [OutputType]
    public sealed class ServiceTaskSpecContainerSpecMounts
    {
        public readonly ServiceTaskSpecContainerSpecMountsBindOptions? BindOptions;
        public readonly bool? ReadOnly;
        public readonly string? Source;
        public readonly string Target;
        public readonly ServiceTaskSpecContainerSpecMountsTmpfsOptions? TmpfsOptions;
        public readonly string Type;
        public readonly ServiceTaskSpecContainerSpecMountsVolumeOptions? VolumeOptions;

        [OutputConstructor]
        private ServiceTaskSpecContainerSpecMounts(
            ServiceTaskSpecContainerSpecMountsBindOptions? bindOptions,
            bool? readOnly,
            string? source,
            string target,
            ServiceTaskSpecContainerSpecMountsTmpfsOptions? tmpfsOptions,
            string type,
            ServiceTaskSpecContainerSpecMountsVolumeOptions? volumeOptions)
        {
            BindOptions = bindOptions;
            ReadOnly = readOnly;
            Source = source;
            Target = target;
            TmpfsOptions = tmpfsOptions;
            Type = type;
            VolumeOptions = volumeOptions;
        }
    }

    [OutputType]
    public sealed class ServiceTaskSpecContainerSpecMountsBindOptions
    {
        public readonly string? Propagation;

        [OutputConstructor]
        private ServiceTaskSpecContainerSpecMountsBindOptions(string? propagation)
        {
            Propagation = propagation;
        }
    }

    [OutputType]
    public sealed class ServiceTaskSpecContainerSpecMountsTmpfsOptions
    {
        /// <summary>
        /// The mode of resolution to use for internal load balancing between tasks. `(vip|dnsrr)`. Default: `vip`.
        /// </summary>
        public readonly int? Mode;
        public readonly int? SizeBytes;

        [OutputConstructor]
        private ServiceTaskSpecContainerSpecMountsTmpfsOptions(
            int? mode,
            int? sizeBytes)
        {
            Mode = mode;
            SizeBytes = sizeBytes;
        }
    }

    [OutputType]
    public sealed class ServiceTaskSpecContainerSpecMountsVolumeOptions
    {
        public readonly string? DriverName;
        public readonly ImmutableDictionary<string, string>? DriverOptions;
        public readonly ImmutableDictionary<string, string>? Labels;
        public readonly bool? NoCopy;

        [OutputConstructor]
        private ServiceTaskSpecContainerSpecMountsVolumeOptions(
            string? driverName,
            ImmutableDictionary<string, string>? driverOptions,
            ImmutableDictionary<string, string>? labels,
            bool? noCopy)
        {
            DriverName = driverName;
            DriverOptions = driverOptions;
            Labels = labels;
            NoCopy = noCopy;
        }
    }

    [OutputType]
    public sealed class ServiceTaskSpecContainerSpecPrivileges
    {
        public readonly ServiceTaskSpecContainerSpecPrivilegesCredentialSpec? CredentialSpec;
        public readonly ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext? SeLinuxContext;

        [OutputConstructor]
        private ServiceTaskSpecContainerSpecPrivileges(
            ServiceTaskSpecContainerSpecPrivilegesCredentialSpec? credentialSpec,
            ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext? seLinuxContext)
        {
            CredentialSpec = credentialSpec;
            SeLinuxContext = seLinuxContext;
        }
    }

    [OutputType]
    public sealed class ServiceTaskSpecContainerSpecPrivilegesCredentialSpec
    {
        public readonly string? File;
        public readonly string? Registry;

        [OutputConstructor]
        private ServiceTaskSpecContainerSpecPrivilegesCredentialSpec(
            string? file,
            string? registry)
        {
            File = file;
            Registry = registry;
        }
    }

    [OutputType]
    public sealed class ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext
    {
        public readonly bool? Disable;
        public readonly string? Level;
        public readonly string? Role;
        public readonly string? Type;
        public readonly string? User;

        [OutputConstructor]
        private ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext(
            bool? disable,
            string? level,
            string? role,
            string? type,
            string? user)
        {
            Disable = disable;
            Level = level;
            Role = role;
            Type = type;
            User = user;
        }
    }

    [OutputType]
    public sealed class ServiceTaskSpecContainerSpecSecrets
    {
        /// <summary>
        /// Represents the final filename in the filesystem. The specific target file that the config data is written within the docker container, e.g. `/root/config/config.json`
        /// </summary>
        public readonly string FileName;
        public readonly string SecretId;
        public readonly string? SecretName;

        [OutputConstructor]
        private ServiceTaskSpecContainerSpecSecrets(
            string fileName,
            string secretId,
            string? secretName)
        {
            FileName = fileName;
            SecretId = secretId;
            SecretName = secretName;
        }
    }

    [OutputType]
    public sealed class ServiceTaskSpecLogDriver
    {
        /// <summary>
        /// A random name for the port.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The options for the logging driver, e.g.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Options;

        [OutputConstructor]
        private ServiceTaskSpecLogDriver(
            string name,
            ImmutableDictionary<string, string>? options)
        {
            Name = name;
            Options = options;
        }
    }

    [OutputType]
    public sealed class ServiceTaskSpecPlacement
    {
        public readonly ImmutableArray<string> Constraints;
        public readonly ImmutableArray<ServiceTaskSpecPlacementPlatforms> Platforms;
        public readonly ImmutableArray<string> Prefs;

        [OutputConstructor]
        private ServiceTaskSpecPlacement(
            ImmutableArray<string> constraints,
            ImmutableArray<ServiceTaskSpecPlacementPlatforms> platforms,
            ImmutableArray<string> prefs)
        {
            Constraints = constraints;
            Platforms = platforms;
            Prefs = prefs;
        }
    }

    [OutputType]
    public sealed class ServiceTaskSpecPlacementPlatforms
    {
        public readonly string Architecture;
        public readonly string Os;

        [OutputConstructor]
        private ServiceTaskSpecPlacementPlatforms(
            string architecture,
            string os)
        {
            Architecture = architecture;
            Os = os;
        }
    }

    [OutputType]
    public sealed class ServiceTaskSpecResources
    {
        public readonly ServiceTaskSpecResourcesLimits? Limits;
        public readonly ServiceTaskSpecResourcesReservation? Reservation;

        [OutputConstructor]
        private ServiceTaskSpecResources(
            ServiceTaskSpecResourcesLimits? limits,
            ServiceTaskSpecResourcesReservation? reservation)
        {
            Limits = limits;
            Reservation = reservation;
        }
    }

    [OutputType]
    public sealed class ServiceTaskSpecResourcesLimits
    {
        public readonly ServiceTaskSpecResourcesLimitsGenericResources? GenericResources;
        public readonly int? MemoryBytes;
        public readonly int? NanoCpus;

        [OutputConstructor]
        private ServiceTaskSpecResourcesLimits(
            ServiceTaskSpecResourcesLimitsGenericResources? genericResources,
            int? memoryBytes,
            int? nanoCpus)
        {
            GenericResources = genericResources;
            MemoryBytes = memoryBytes;
            NanoCpus = nanoCpus;
        }
    }

    [OutputType]
    public sealed class ServiceTaskSpecResourcesLimitsGenericResources
    {
        public readonly ImmutableArray<string> DiscreteResourcesSpecs;
        public readonly ImmutableArray<string> NamedResourcesSpecs;

        [OutputConstructor]
        private ServiceTaskSpecResourcesLimitsGenericResources(
            ImmutableArray<string> discreteResourcesSpecs,
            ImmutableArray<string> namedResourcesSpecs)
        {
            DiscreteResourcesSpecs = discreteResourcesSpecs;
            NamedResourcesSpecs = namedResourcesSpecs;
        }
    }

    [OutputType]
    public sealed class ServiceTaskSpecResourcesReservation
    {
        public readonly ServiceTaskSpecResourcesReservationGenericResources? GenericResources;
        public readonly int? MemoryBytes;
        public readonly int? NanoCpus;

        [OutputConstructor]
        private ServiceTaskSpecResourcesReservation(
            ServiceTaskSpecResourcesReservationGenericResources? genericResources,
            int? memoryBytes,
            int? nanoCpus)
        {
            GenericResources = genericResources;
            MemoryBytes = memoryBytes;
            NanoCpus = nanoCpus;
        }
    }

    [OutputType]
    public sealed class ServiceTaskSpecResourcesReservationGenericResources
    {
        public readonly ImmutableArray<string> DiscreteResourcesSpecs;
        public readonly ImmutableArray<string> NamedResourcesSpecs;

        [OutputConstructor]
        private ServiceTaskSpecResourcesReservationGenericResources(
            ImmutableArray<string> discreteResourcesSpecs,
            ImmutableArray<string> namedResourcesSpecs)
        {
            DiscreteResourcesSpecs = discreteResourcesSpecs;
            NamedResourcesSpecs = namedResourcesSpecs;
        }
    }

    [OutputType]
    public sealed class ServiceTaskSpecRestartPolicy
    {
        public readonly string? Condition;
        public readonly string? Delay;
        public readonly int? MaxAttempts;
        public readonly string? Window;

        [OutputConstructor]
        private ServiceTaskSpecRestartPolicy(
            string? condition,
            string? delay,
            int? maxAttempts,
            string? window)
        {
            Condition = condition;
            Delay = delay;
            MaxAttempts = maxAttempts;
            Window = window;
        }
    }

    [OutputType]
    public sealed class ServiceUpdateConfig
    {
        public readonly string? Delay;
        public readonly string? FailureAction;
        public readonly string? MaxFailureRatio;
        public readonly string? Monitor;
        public readonly string? Order;
        public readonly int? Parallelism;

        [OutputConstructor]
        private ServiceUpdateConfig(
            string? delay,
            string? failureAction,
            string? maxFailureRatio,
            string? monitor,
            string? order,
            int? parallelism)
        {
            Delay = delay;
            FailureAction = failureAction;
            MaxFailureRatio = maxFailureRatio;
            Monitor = monitor;
            Order = order;
            Parallelism = parallelism;
        }
    }
    }
}
