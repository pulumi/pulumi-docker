// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Docker
{
    public static class GetLogs
    {
        /// <summary>
        /// `docker.getLogs` provides logs from specific container
        /// </summary>
        public static Task<GetLogsResult> InvokeAsync(GetLogsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLogsResult>("docker:index/getLogs:getLogs", args ?? new GetLogsArgs(), options.WithDefaults());

        /// <summary>
        /// `docker.getLogs` provides logs from specific container
        /// </summary>
        public static Output<GetLogsResult> Invoke(GetLogsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLogsResult>("docker:index/getLogs:getLogs", args ?? new GetLogsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// `docker.getLogs` provides logs from specific container
        /// </summary>
        public static Output<GetLogsResult> Invoke(GetLogsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetLogsResult>("docker:index/getLogs:getLogs", args ?? new GetLogsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLogsArgs : global::Pulumi.InvokeArgs
    {
        [Input("details")]
        public bool? Details { get; set; }

        /// <summary>
        /// Discard headers that docker appends to each log entry
        /// </summary>
        [Input("discardHeaders")]
        public bool? DiscardHeaders { get; set; }

        [Input("follow")]
        public bool? Follow { get; set; }

        /// <summary>
        /// If true populate computed value `LogsListString`
        /// </summary>
        [Input("logsListStringEnabled")]
        public bool? LogsListStringEnabled { get; set; }

        /// <summary>
        /// The name of the Docker Container
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("showStderr")]
        public bool? ShowStderr { get; set; }

        [Input("showStdout")]
        public bool? ShowStdout { get; set; }

        [Input("since")]
        public string? Since { get; set; }

        [Input("tail")]
        public string? Tail { get; set; }

        [Input("timestamps")]
        public bool? Timestamps { get; set; }

        [Input("until")]
        public string? Until { get; set; }

        public GetLogsArgs()
        {
        }
        public static new GetLogsArgs Empty => new GetLogsArgs();
    }

    public sealed class GetLogsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("details")]
        public Input<bool>? Details { get; set; }

        /// <summary>
        /// Discard headers that docker appends to each log entry
        /// </summary>
        [Input("discardHeaders")]
        public Input<bool>? DiscardHeaders { get; set; }

        [Input("follow")]
        public Input<bool>? Follow { get; set; }

        /// <summary>
        /// If true populate computed value `LogsListString`
        /// </summary>
        [Input("logsListStringEnabled")]
        public Input<bool>? LogsListStringEnabled { get; set; }

        /// <summary>
        /// The name of the Docker Container
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("showStderr")]
        public Input<bool>? ShowStderr { get; set; }

        [Input("showStdout")]
        public Input<bool>? ShowStdout { get; set; }

        [Input("since")]
        public Input<string>? Since { get; set; }

        [Input("tail")]
        public Input<string>? Tail { get; set; }

        [Input("timestamps")]
        public Input<bool>? Timestamps { get; set; }

        [Input("until")]
        public Input<string>? Until { get; set; }

        public GetLogsInvokeArgs()
        {
        }
        public static new GetLogsInvokeArgs Empty => new GetLogsInvokeArgs();
    }


    [OutputType]
    public sealed class GetLogsResult
    {
        public readonly bool? Details;
        /// <summary>
        /// Discard headers that docker appends to each log entry
        /// </summary>
        public readonly bool? DiscardHeaders;
        public readonly bool? Follow;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// If true populate computed value `LogsListString`
        /// </summary>
        public readonly bool? LogsListStringEnabled;
        /// <summary>
        /// List of container logs, each element is a line.
        /// </summary>
        public readonly ImmutableArray<string> LogsListStrings;
        /// <summary>
        /// The name of the Docker Container
        /// </summary>
        public readonly string Name;
        public readonly bool? ShowStderr;
        public readonly bool? ShowStdout;
        public readonly string? Since;
        public readonly string? Tail;
        public readonly bool? Timestamps;
        public readonly string? Until;

        [OutputConstructor]
        private GetLogsResult(
            bool? details,

            bool? discardHeaders,

            bool? follow,

            string id,

            bool? logsListStringEnabled,

            ImmutableArray<string> logsListStrings,

            string name,

            bool? showStderr,

            bool? showStdout,

            string? since,

            string? tail,

            bool? timestamps,

            string? until)
        {
            Details = details;
            DiscardHeaders = discardHeaders;
            Follow = follow;
            Id = id;
            LogsListStringEnabled = logsListStringEnabled;
            LogsListStrings = logsListStrings;
            Name = name;
            ShowStderr = showStderr;
            ShowStdout = showStdout;
            Since = since;
            Tail = tail;
            Timestamps = timestamps;
            Until = until;
        }
    }
}
