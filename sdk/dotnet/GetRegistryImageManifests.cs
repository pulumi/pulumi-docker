// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Docker
{
    public static class GetRegistryImageManifests
    {
        /// <summary>
        /// Reads the image metadata for each manifest in a Docker multi-arch image from a Docker Registry.
        /// </summary>
        public static Task<GetRegistryImageManifestsResult> InvokeAsync(GetRegistryImageManifestsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRegistryImageManifestsResult>("docker:index/getRegistryImageManifests:getRegistryImageManifests", args ?? new GetRegistryImageManifestsArgs(), options.WithDefaults());

        /// <summary>
        /// Reads the image metadata for each manifest in a Docker multi-arch image from a Docker Registry.
        /// </summary>
        public static Output<GetRegistryImageManifestsResult> Invoke(GetRegistryImageManifestsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegistryImageManifestsResult>("docker:index/getRegistryImageManifests:getRegistryImageManifests", args ?? new GetRegistryImageManifestsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Reads the image metadata for each manifest in a Docker multi-arch image from a Docker Registry.
        /// </summary>
        public static Output<GetRegistryImageManifestsResult> Invoke(GetRegistryImageManifestsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegistryImageManifestsResult>("docker:index/getRegistryImageManifests:getRegistryImageManifests", args ?? new GetRegistryImageManifestsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegistryImageManifestsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Authentication configuration for the Docker registry. It is only used for this resource.
        /// </summary>
        [Input("authConfig")]
        public Inputs.GetRegistryImageManifestsAuthConfigArgs? AuthConfig { get; set; }

        /// <summary>
        /// If `true`, the verification of TLS certificates of the server/registry is disabled. Defaults to `false`
        /// </summary>
        [Input("insecureSkipVerify")]
        public bool? InsecureSkipVerify { get; set; }

        /// <summary>
        /// The name of the Docker image, including any tags. e.g. `alpine:latest`
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetRegistryImageManifestsArgs()
        {
        }
        public static new GetRegistryImageManifestsArgs Empty => new GetRegistryImageManifestsArgs();
    }

    public sealed class GetRegistryImageManifestsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Authentication configuration for the Docker registry. It is only used for this resource.
        /// </summary>
        [Input("authConfig")]
        public Input<Inputs.GetRegistryImageManifestsAuthConfigInputArgs>? AuthConfig { get; set; }

        /// <summary>
        /// If `true`, the verification of TLS certificates of the server/registry is disabled. Defaults to `false`
        /// </summary>
        [Input("insecureSkipVerify")]
        public Input<bool>? InsecureSkipVerify { get; set; }

        /// <summary>
        /// The name of the Docker image, including any tags. e.g. `alpine:latest`
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetRegistryImageManifestsInvokeArgs()
        {
        }
        public static new GetRegistryImageManifestsInvokeArgs Empty => new GetRegistryImageManifestsInvokeArgs();
    }


    [OutputType]
    public sealed class GetRegistryImageManifestsResult
    {
        /// <summary>
        /// Authentication configuration for the Docker registry. It is only used for this resource.
        /// </summary>
        public readonly Outputs.GetRegistryImageManifestsAuthConfigResult? AuthConfig;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// If `true`, the verification of TLS certificates of the server/registry is disabled. Defaults to `false`
        /// </summary>
        public readonly bool? InsecureSkipVerify;
        /// <summary>
        /// The metadata for each manifest in the image
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRegistryImageManifestsManifestResult> Manifests;
        /// <summary>
        /// The name of the Docker image, including any tags. e.g. `alpine:latest`
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private GetRegistryImageManifestsResult(
            Outputs.GetRegistryImageManifestsAuthConfigResult? authConfig,

            string id,

            bool? insecureSkipVerify,

            ImmutableArray<Outputs.GetRegistryImageManifestsManifestResult> manifests,

            string name)
        {
            AuthConfig = authConfig;
            Id = id;
            InsecureSkipVerify = insecureSkipVerify;
            Manifests = manifests;
            Name = name;
        }
    }
}
