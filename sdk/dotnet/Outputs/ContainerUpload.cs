// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Docker.Outputs
{

    [OutputType]
    public sealed class ContainerUpload
    {
        /// <summary>
        /// Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text. Conflicts with `ContentBase64` &amp; `Source`
        /// </summary>
        public readonly string? Content;
        /// <summary>
        /// Base64-encoded data that will be decoded and uploaded as raw bytes for the object content. This allows safely uploading non-UTF8 binary data, but is recommended only for larger binary content such as the result of the `Base64encode` interpolation function. See here for the reason. Conflicts with `Content` &amp; `Source`
        /// </summary>
        public readonly string? ContentBase64;
        /// <summary>
        /// If `True`, the file will be uploaded with user executable permission. Defaults to `False`.
        /// </summary>
        public readonly bool? Executable;
        /// <summary>
        /// Path to the file in the container where is upload goes to
        /// </summary>
        public readonly string File;
        /// <summary>
        /// The permission mode for the file in the container. Has precedence over `Executable`.
        /// </summary>
        public readonly string? Permissions;
        /// <summary>
        /// A filename that references a file which will be uploaded as the object content. This allows for large file uploads that do not get stored in state. Conflicts with `Content` &amp; `ContentBase64`
        /// </summary>
        public readonly string? Source;
        /// <summary>
        /// If using `Source`, this will force an update if the file content has updated but the filename has not.
        /// </summary>
        public readonly string? SourceHash;

        [OutputConstructor]
        private ContainerUpload(
            string? content,

            string? contentBase64,

            bool? executable,

            string file,

            string? permissions,

            string? source,

            string? sourceHash)
        {
            Content = content;
            ContentBase64 = contentBase64;
            Executable = executable;
            File = file;
            Permissions = permissions;
            Source = source;
            SourceHash = sourceHash;
        }
    }
}
