// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Docker
{
    /// <summary>
    /// Builds a Docker Image and pushes to a Docker registry.
    /// 
    /// ## Example Usage
    /// ### A Docker image build
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Docker = Pulumi.Docker;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var demoImage = new Docker.Image("demo-image", new()
    ///     {
    ///         Build = 
    ///         {
    ///             { "context", "." },
    ///             { "dockerfile", "Dockerfile" },
    ///         },
    ///         ImageName = "username/image:tag1",
    ///         SkipPush = true,
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["imageName"] = demoImage.ImageName,
    ///     };
    /// });
    /// 
    /// ```
    /// 
    /// {{% //examples %}}
    /// </summary>
    [DockerResourceType("docker:index/image:Image")]
    public partial class Image : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The fully qualified image name that was pushed to the registry.
        /// </summary>
        [Output("baseImageName")]
        public Output<string?> BaseImageName { get; private set; } = null!;

        /// <summary>
        /// The fully qualified image name
        /// </summary>
        [Output("imageName")]
        public Output<string?> ImageName { get; private set; } = null!;

        /// <summary>
        /// The name of the registry server hosting the image.
        /// </summary>
        [Output("registryServer")]
        public Output<string?> RegistryServer { get; private set; } = null!;


        /// <summary>
        /// Create a Image resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Image(string name, ImageArgs args, CustomResourceOptions? options = null)
            : base("docker:index/image:Image", name, args ?? new ImageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Image(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("docker:index/image:Image", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Image resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Image Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Image(name, id, options);
        }
    }

    public sealed class ImageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Docker build context
        /// </summary>
        [Input("build")]
        public InputUnion<string, Inputs.DockerBuildArgs>? Build { get; set; }

        /// <summary>
        /// The image name
        /// </summary>
        [Input("imageName", required: true)]
        public Input<string> ImageName { get; set; } = null!;

        /// <summary>
        /// The registry to push the image to
        /// </summary>
        [Input("registry")]
        public Input<Inputs.RegistryArgs>? Registry { get; set; }

        /// <summary>
        /// A flag to skip a registry push.
        /// </summary>
        [Input("skipPush")]
        public Input<bool>? SkipPush { get; set; }

        public ImageArgs()
        {
            SkipPush = false;
        }
        public static new ImageArgs Empty => new ImageArgs();
    }
}
