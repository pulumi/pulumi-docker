// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Docker
{
    /// <summary>
    /// `Image` builds a Docker image and pushes it Docker and OCI compatible registries.
    /// This resource enables running Docker builds as part of a Pulumi deployment.
    /// 
    /// Note: We recommend you migrate your images to the more modern [Docker
    /// Build](https://www.pulumi.com/registry/packages/docker-build/) provider to get
    /// the best possible support, features, and performance.
    /// 
    /// Note: This resource does not delete tags, locally or remotely, when destroyed.
    /// 
    /// ## Image name
    /// 
    /// The Image resource uses `imageName` to refer to a fully qualified Docker image name, by the format `repository:tag`.
    /// Note that this does not include any digest information and thus will not cause any updates when passed to dependencies,
    /// even when using `latest` tag. To trigger such updates, e.g. when referencing pushed images in container orchestration
    /// and management resources, please use the `repoDigest` Output instead, which is of the format
    /// `repository@&lt;algorithm&gt;:&lt;hash&gt;` and unique per build/push.
    /// As of Docker v4.4, `repoDigest` is now available for local Images.
    /// 
    /// ## Cross-platform builds
    /// 
    /// The Image resource supports cross-platform builds when the [Docker engine has cross-platform support enabled via emulators](https://docs.docker.com/build/building/multi-platform/#building-multi-platform-images).
    /// The Image resource currently supports providing only a single operating system and architecture in the `platform` field, e.g.: `linux/amd64`.
    /// To enable this support, you may need to install the emulators in the environment running your Pulumi program.
    /// 
    /// If you are using Linux, you may be using Docker Engine or Docker Desktop for Linux, depending on how you have installed Docker. The [FAQ for Docker Desktop for Linux](https://docs.docker.com/desktop/faqs/linuxfaqs/#context) describes the differences and how to select which Docker context is in use.
    /// 
    /// * For local development using Docker Desktop, this is enabled by default.
    /// * For systems using Docker Engine, install the QEMU binaries and register them with using the docker image from [github.com/tonistiigi/binfmt](https://github.com/tonistiigi/binfmt):
    /// * In a GitHub Actions workflow, the [docker/setup-qemu-action](https://github.com/docker/setup-qemu-action) can be used instead by adding this step to your workflow file. Example workflow usage:
    /// 
    /// ## Example Usage
    /// ### A Docker image build
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Docker = Pulumi.Docker;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var demoImage = new Docker.Image("demo-image", new()
    ///     {
    ///         Build = new Docker.Inputs.DockerBuildArgs
    ///         {
    ///             Context = ".",
    ///             Dockerfile = "Dockerfile",
    ///             Platform = "linux/amd64",
    ///         },
    ///         ImageName = "username/image:tag1",
    ///         SkipPush = true,
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["imageName"] = demoImage.ImageName,
    ///     };
    /// });
    /// 
    /// ```
    /// ### A Docker image build and push
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Docker = Pulumi.Docker;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var demoPushImage = new Docker.Image("demo-push-image", new()
    ///     {
    ///         Build = new Docker.Inputs.DockerBuildArgs
    ///         {
    ///             Context = ".",
    ///             Dockerfile = "Dockerfile",
    ///         },
    ///         ImageName = "docker.io/username/push-image:tag1",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["imageName"] = demoPushImage.ImageName,
    ///         ["repoDigest"] = demoPushImage.RepoDigest,
    ///     };
    /// });
    /// 
    /// ```
    /// ### Docker image build using caching with AWS Elastic Container Registry
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// using Docker = Pulumi.Docker;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var ecrRepository = new Aws.Ecr.Repository("ecr-repository", new()
    ///     {
    ///         Name = "docker-repository",
    ///     });
    /// 
    ///     var authToken = Aws.Ecr.GetAuthorizationToken.Invoke(new()
    ///     {
    ///         RegistryId = ecrRepository.RegistryId,
    ///     });
    /// 
    ///     var myAppImage = new Docker.Image("my-app-image", new()
    ///     {
    ///         Build = new Docker.Inputs.DockerBuildArgs
    ///         {
    ///             Args = 
    ///             {
    ///                 { "BUILDKIT_INLINE_CACHE", "1" },
    ///             },
    ///             CacheFrom = new Docker.Inputs.CacheFromArgs
    ///             {
    ///                 Images = new[]
    ///                 {
    ///                     ecrRepository.RepositoryUrl.Apply(repositoryUrl =&gt; $"{repositoryUrl}:latest"),
    ///                 },
    ///             },
    ///             Context = "app/",
    ///             Dockerfile = "app/Dockerfile",
    ///         },
    ///         ImageName = ecrRepository.RepositoryUrl.Apply(repositoryUrl =&gt; $"{repositoryUrl}:latest"),
    ///         Registry = new Docker.Inputs.RegistryArgs
    ///         {
    ///             Password = Output.CreateSecret(authToken.Apply(getAuthorizationTokenResult =&gt; getAuthorizationTokenResult.Password)),
    ///             Server = ecrRepository.RepositoryUrl,
    ///             Username = authToken.Apply(getAuthorizationTokenResult =&gt; getAuthorizationTokenResult.UserName),
    ///         },
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["imageName"] = myAppImage.ImageName,
    ///     };
    /// });
    /// 
    /// ```
    /// </summary>
    [DockerResourceType("docker:index/image:Image")]
    public partial class Image : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The fully qualified image name that was pushed to the registry.
        /// </summary>
        [Output("baseImageName")]
        public Output<string> BaseImageName { get; private set; } = null!;

        /// <summary>
        /// The path to the build context to use.
        /// </summary>
        [Output("context")]
        public Output<string> Context { get; private set; } = null!;

        /// <summary>
        /// The location of the Dockerfile relative to the docker build context.
        /// </summary>
        [Output("dockerfile")]
        public Output<string> Dockerfile { get; private set; } = null!;

        /// <summary>
        /// The fully qualified image name
        /// </summary>
        [Output("imageName")]
        public Output<string> ImageName { get; private set; } = null!;

        /// <summary>
        /// The image's architecture and OS
        /// </summary>
        [Output("platform")]
        public Output<string?> Platform { get; private set; } = null!;

        /// <summary>
        /// The name of the registry server hosting the image.
        /// </summary>
        [Output("registryServer")]
        public Output<string> RegistryServer { get; private set; } = null!;

        /// <summary>
        /// **For pushed images:**
        /// The manifest digest of an image pushed to a registry, of the format repository@&lt;algorithm&gt;:&lt;hash&gt;, e.g. `username/demo-image@sha256:a6ae6dd8d39c5bb02320e41abf00cd4cb35905fec540e37d306c878be8d38bd3`.
        /// This reference is unique per image build and push. 
        /// Only available for images pushed to a registry.
        /// Use when passing a reference to a pushed image to container management resources.
        /// 
        /// **Local-only images**For local images, this field is the image ID of the built local image, of the format &lt;algorithm&gt;:&lt;hash&gt;, e.g `sha256:826a130323165bb0ccb0374ae774f885c067a951b51a6ee133577f4e5dbc4119` 
        /// </summary>
        [Output("repoDigest")]
        public Output<string> RepoDigest { get; private set; } = null!;


        /// <summary>
        /// Create a Image resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Image(string name, ImageArgs args, CustomResourceOptions? options = null)
            : base("docker:index/image:Image", name, args ?? new ImageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Image(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("docker:index/image:Image", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "docker:image:Image" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Image resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Image Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Image(name, id, options);
        }
    }

    public sealed class ImageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Docker build context
        /// </summary>
        [Input("build")]
        public Input<Inputs.DockerBuildArgs>? Build { get; set; }

        /// <summary>
        /// A flag to build an image on preview
        /// </summary>
        [Input("buildOnPreview")]
        public Input<bool>? BuildOnPreview { get; set; }

        /// <summary>
        /// The image name, of the format repository[:tag], e.g. `docker.io/username/demo-image:v1`.
        /// This reference is not unique to each build and push.For the unique manifest SHA of a pushed docker image, or the local image ID, please use `repoDigest`.
        /// </summary>
        [Input("imageName", required: true)]
        public Input<string> ImageName { get; set; } = null!;

        /// <summary>
        /// The registry to push the image to
        /// </summary>
        [Input("registry")]
        public Input<Inputs.RegistryArgs>? Registry { get; set; }

        /// <summary>
        /// A flag to skip a registry push.
        /// </summary>
        [Input("skipPush")]
        public Input<bool>? SkipPush { get; set; }

        public ImageArgs()
        {
            BuildOnPreview = false;
            SkipPush = false;
        }
        public static new ImageArgs Empty => new ImageArgs();
    }
}
