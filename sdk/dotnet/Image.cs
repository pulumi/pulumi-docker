// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Docker
{
    /// <summary>
    /// A real CRUD docker image we hope
    /// </summary>
    [DockerResourceType("docker:index/image:Image")]
    public partial class Image : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The path to the build context to use.
        /// </summary>
        [Output("context")]
        public Output<string> Context { get; private set; } = null!;

        /// <summary>
        /// The path to the Dockerfile to use.
        /// </summary>
        [Output("dockerfile")]
        public Output<string> Dockerfile { get; private set; } = null!;

        /// <summary>
        /// The image name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The URL of the registry server hosting the image.
        /// </summary>
        [Output("registryURL")]
        public Output<string> RegistryURL { get; private set; } = null!;

        /// <summary>
        /// The image tag.
        /// </summary>
        [Output("tag")]
        public Output<string?> Tag { get; private set; } = null!;


        /// <summary>
        /// Create a Image resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Image(string name, ImageArgs args, CustomResourceOptions? options = null)
            : base("docker:index/image:Image", name, args ?? new ImageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Image(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("docker:index/image:Image", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Image resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Image Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Image(name, id, options);
        }
    }

    public sealed class ImageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The path to the build context to use.
        /// </summary>
        [Input("context")]
        public Input<string>? Context { get; set; }

        /// <summary>
        /// The path to the Dockerfile to use.
        /// </summary>
        [Input("dockerfile")]
        public Input<string>? Dockerfile { get; set; }

        /// <summary>
        /// The image name
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The registry to push the image to
        /// </summary>
        [Input("registry", required: true)]
        public Input<Inputs.RegistryArgs> Registry { get; set; } = null!;

        /// <summary>
        /// The URL of the registry server hosting the image.
        /// </summary>
        [Input("registryURL", required: true)]
        public Input<string> RegistryURL { get; set; } = null!;

        /// <summary>
        /// The image tag.
        /// </summary>
        [Input("tag")]
        public Input<string>? Tag { get; set; }

        public ImageArgs()
        {
            Context = ".";
            Dockerfile = "Dockerfile";
            Tag = "latest";
        }
        public static new ImageArgs Empty => new ImageArgs();
    }
}
