// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Docker
{
    public static class GetPlugin
    {
        /// <summary>
        /// Reads the local Docker plugin. The plugin must be installed locally.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// 
        /// ### With alias
        /// data "docker.Plugin" "by_alias" {
        ///   alias = "sample-volume-plugin:latest"
        /// }
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPluginResult> InvokeAsync(GetPluginArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPluginResult>("docker:index/getPlugin:getPlugin", args ?? new GetPluginArgs(), options.WithDefaults());

        /// <summary>
        /// Reads the local Docker plugin. The plugin must be installed locally.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// 
        /// ### With alias
        /// data "docker.Plugin" "by_alias" {
        ///   alias = "sample-volume-plugin:latest"
        /// }
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPluginResult> Invoke(GetPluginInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetPluginResult>("docker:index/getPlugin:getPlugin", args ?? new GetPluginInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPluginArgs : Pulumi.InvokeArgs
    {
        [Input("alias")]
        public string? Alias { get; set; }

        [Input("id")]
        public string? Id { get; set; }

        public GetPluginArgs()
        {
        }
    }

    public sealed class GetPluginInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        [Input("id")]
        public Input<string>? Id { get; set; }

        public GetPluginInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetPluginResult
    {
        public readonly string? Alias;
        public readonly bool Enabled;
        public readonly ImmutableArray<string> Envs;
        public readonly bool GrantAllPermissions;
        public readonly string? Id;
        public readonly string Name;
        public readonly string PluginReference;

        [OutputConstructor]
        private GetPluginResult(
            string? alias,

            bool enabled,

            ImmutableArray<string> envs,

            bool grantAllPermissions,

            string? id,

            string name,

            string pluginReference)
        {
            Alias = alias;
            Enabled = enabled;
            Envs = envs;
            GrantAllPermissions = grantAllPermissions;
            Id = id;
            Name = name;
            PluginReference = pluginReference;
        }
    }
}
