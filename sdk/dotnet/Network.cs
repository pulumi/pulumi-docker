// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Docker
{
    /// <summary>
    /// Manages a Docker Network. This can be used alongside
    /// [docker\_container](https://www.terraform.io/docs/providers/docker/r/container.html)
    /// to create virtual networks within the docker environment.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-docker/blob/master/website/docs/r/network.html.markdown.
    /// </summary>
    public partial class Network : Pulumi.CustomResource
    {
        /// <summary>
        /// Enable manual container attachment to the network.
        /// Defaults to `false`.
        /// </summary>
        [Output("attachable")]
        public Output<bool?> Attachable { get; private set; } = null!;

        /// <summary>
        /// Requests daemon to check for networks
        /// with same name.
        /// </summary>
        [Output("checkDuplicate")]
        public Output<bool?> CheckDuplicate { get; private set; } = null!;

        /// <summary>
        /// Name of the network driver to use. Defaults to
        /// `bridge` driver.
        /// </summary>
        [Output("driver")]
        public Output<string> Driver { get; private set; } = null!;

        /// <summary>
        /// Create swarm routing-mesh network.
        /// Defaults to `false`.
        /// </summary>
        [Output("ingress")]
        public Output<bool?> Ingress { get; private set; } = null!;

        /// <summary>
        /// Restrict external access to the network.
        /// Defaults to `false`.
        /// </summary>
        [Output("internal")]
        public Output<bool> Internal { get; private set; } = null!;

        /// <summary>
        /// See IPAM config below for
        /// details.
        /// </summary>
        [Output("ipamConfigs")]
        public Output<ImmutableArray<Outputs.NetworkIpamConfigs>> IpamConfigs { get; private set; } = null!;

        /// <summary>
        /// Driver used by the custom IP scheme of the
        /// network.
        /// </summary>
        [Output("ipamDriver")]
        public Output<string?> IpamDriver { get; private set; } = null!;

        /// <summary>
        /// Enable IPv6 networking.
        /// Defaults to `false`.
        /// </summary>
        [Output("ipv6")]
        public Output<bool?> Ipv6 { get; private set; } = null!;

        /// <summary>
        /// See Labels below for details.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableArray<Outputs.NetworkLabels>> Labels { get; private set; } = null!;

        /// <summary>
        /// The name of the Docker network.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Network specific options to be used by
        /// the drivers.
        /// </summary>
        [Output("options")]
        public Output<ImmutableDictionary<string, object>> Options { get; private set; } = null!;

        [Output("scope")]
        public Output<string> Scope { get; private set; } = null!;


        /// <summary>
        /// Create a Network resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Network(string name, NetworkArgs? args = null, CustomResourceOptions? options = null)
            : base("docker:index/network:Network", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Network(string name, Input<string> id, NetworkState? state = null, CustomResourceOptions? options = null)
            : base("docker:index/network:Network", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Network resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Network Get(string name, Input<string> id, NetworkState? state = null, CustomResourceOptions? options = null)
        {
            return new Network(name, id, state, options);
        }
    }

    public sealed class NetworkArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable manual container attachment to the network.
        /// Defaults to `false`.
        /// </summary>
        [Input("attachable")]
        public Input<bool>? Attachable { get; set; }

        /// <summary>
        /// Requests daemon to check for networks
        /// with same name.
        /// </summary>
        [Input("checkDuplicate")]
        public Input<bool>? CheckDuplicate { get; set; }

        /// <summary>
        /// Name of the network driver to use. Defaults to
        /// `bridge` driver.
        /// </summary>
        [Input("driver")]
        public Input<string>? Driver { get; set; }

        /// <summary>
        /// Create swarm routing-mesh network.
        /// Defaults to `false`.
        /// </summary>
        [Input("ingress")]
        public Input<bool>? Ingress { get; set; }

        /// <summary>
        /// Restrict external access to the network.
        /// Defaults to `false`.
        /// </summary>
        [Input("internal")]
        public Input<bool>? Internal { get; set; }

        [Input("ipamConfigs")]
        private InputList<Inputs.NetworkIpamConfigsArgs>? _ipamConfigs;

        /// <summary>
        /// See IPAM config below for
        /// details.
        /// </summary>
        public InputList<Inputs.NetworkIpamConfigsArgs> IpamConfigs
        {
            get => _ipamConfigs ?? (_ipamConfigs = new InputList<Inputs.NetworkIpamConfigsArgs>());
            set => _ipamConfigs = value;
        }

        /// <summary>
        /// Driver used by the custom IP scheme of the
        /// network.
        /// </summary>
        [Input("ipamDriver")]
        public Input<string>? IpamDriver { get; set; }

        /// <summary>
        /// Enable IPv6 networking.
        /// Defaults to `false`.
        /// </summary>
        [Input("ipv6")]
        public Input<bool>? Ipv6 { get; set; }

        [Input("labels")]
        private InputList<Inputs.NetworkLabelsArgs>? _labels;

        /// <summary>
        /// See Labels below for details.
        /// </summary>
        public InputList<Inputs.NetworkLabelsArgs> Labels
        {
            get => _labels ?? (_labels = new InputList<Inputs.NetworkLabelsArgs>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the Docker network.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("options")]
        private InputMap<object>? _options;

        /// <summary>
        /// Network specific options to be used by
        /// the drivers.
        /// </summary>
        public InputMap<object> Options
        {
            get => _options ?? (_options = new InputMap<object>());
            set => _options = value;
        }

        public NetworkArgs()
        {
        }
    }

    public sealed class NetworkState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable manual container attachment to the network.
        /// Defaults to `false`.
        /// </summary>
        [Input("attachable")]
        public Input<bool>? Attachable { get; set; }

        /// <summary>
        /// Requests daemon to check for networks
        /// with same name.
        /// </summary>
        [Input("checkDuplicate")]
        public Input<bool>? CheckDuplicate { get; set; }

        /// <summary>
        /// Name of the network driver to use. Defaults to
        /// `bridge` driver.
        /// </summary>
        [Input("driver")]
        public Input<string>? Driver { get; set; }

        /// <summary>
        /// Create swarm routing-mesh network.
        /// Defaults to `false`.
        /// </summary>
        [Input("ingress")]
        public Input<bool>? Ingress { get; set; }

        /// <summary>
        /// Restrict external access to the network.
        /// Defaults to `false`.
        /// </summary>
        [Input("internal")]
        public Input<bool>? Internal { get; set; }

        [Input("ipamConfigs")]
        private InputList<Inputs.NetworkIpamConfigsGetArgs>? _ipamConfigs;

        /// <summary>
        /// See IPAM config below for
        /// details.
        /// </summary>
        public InputList<Inputs.NetworkIpamConfigsGetArgs> IpamConfigs
        {
            get => _ipamConfigs ?? (_ipamConfigs = new InputList<Inputs.NetworkIpamConfigsGetArgs>());
            set => _ipamConfigs = value;
        }

        /// <summary>
        /// Driver used by the custom IP scheme of the
        /// network.
        /// </summary>
        [Input("ipamDriver")]
        public Input<string>? IpamDriver { get; set; }

        /// <summary>
        /// Enable IPv6 networking.
        /// Defaults to `false`.
        /// </summary>
        [Input("ipv6")]
        public Input<bool>? Ipv6 { get; set; }

        [Input("labels")]
        private InputList<Inputs.NetworkLabelsGetArgs>? _labels;

        /// <summary>
        /// See Labels below for details.
        /// </summary>
        public InputList<Inputs.NetworkLabelsGetArgs> Labels
        {
            get => _labels ?? (_labels = new InputList<Inputs.NetworkLabelsGetArgs>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the Docker network.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("options")]
        private InputMap<object>? _options;

        /// <summary>
        /// Network specific options to be used by
        /// the drivers.
        /// </summary>
        public InputMap<object> Options
        {
            get => _options ?? (_options = new InputMap<object>());
            set => _options = value;
        }

        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public NetworkState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class NetworkIpamConfigsArgs : Pulumi.ResourceArgs
    {
        [Input("auxAddress")]
        private InputMap<object>? _auxAddress;
        public InputMap<object> AuxAddress
        {
            get => _auxAddress ?? (_auxAddress = new InputMap<object>());
            set => _auxAddress = value;
        }

        [Input("gateway")]
        public Input<string>? Gateway { get; set; }

        [Input("ipRange")]
        public Input<string>? IpRange { get; set; }

        [Input("subnet")]
        public Input<string>? Subnet { get; set; }

        public NetworkIpamConfigsArgs()
        {
        }
    }

    public sealed class NetworkIpamConfigsGetArgs : Pulumi.ResourceArgs
    {
        [Input("auxAddress")]
        private InputMap<object>? _auxAddress;
        public InputMap<object> AuxAddress
        {
            get => _auxAddress ?? (_auxAddress = new InputMap<object>());
            set => _auxAddress = value;
        }

        [Input("gateway")]
        public Input<string>? Gateway { get; set; }

        [Input("ipRange")]
        public Input<string>? IpRange { get; set; }

        [Input("subnet")]
        public Input<string>? Subnet { get; set; }

        public NetworkIpamConfigsGetArgs()
        {
        }
    }

    public sealed class NetworkLabelsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the label
        /// * `value` (Required, string) Value of the label
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public NetworkLabelsArgs()
        {
        }
    }

    public sealed class NetworkLabelsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the label
        /// * `value` (Required, string) Value of the label
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public NetworkLabelsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class NetworkIpamConfigs
    {
        public readonly ImmutableDictionary<string, object>? AuxAddress;
        public readonly string? Gateway;
        public readonly string? IpRange;
        public readonly string? Subnet;

        [OutputConstructor]
        private NetworkIpamConfigs(
            ImmutableDictionary<string, object>? auxAddress,
            string? gateway,
            string? ipRange,
            string? subnet)
        {
            AuxAddress = auxAddress;
            Gateway = gateway;
            IpRange = ipRange;
            Subnet = subnet;
        }
    }

    [OutputType]
    public sealed class NetworkLabels
    {
        /// <summary>
        /// Name of the label
        /// * `value` (Required, string) Value of the label
        /// </summary>
        public readonly string Label;
        public readonly string Value;

        [OutputConstructor]
        private NetworkLabels(
            string label,
            string value)
        {
            Label = label;
            Value = value;
        }
    }
    }
}
