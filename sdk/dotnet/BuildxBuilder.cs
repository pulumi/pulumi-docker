// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Docker
{
    /// <summary>
    /// Manages a Docker Buildx builder instance. This resource allows you to create a  buildx builder with various configurations such as driver, nodes, and platform settings. Please see https://github.com/docker/buildx/blob/master/docs/reference/buildx_create.md for more documentation
    /// </summary>
    [DockerResourceType("docker:index/buildxBuilder:BuildxBuilder")]
    public partial class BuildxBuilder : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Append a node to builder instead of changing it
        /// </summary>
        [Output("append")]
        public Output<bool?> Append { get; private set; } = null!;

        /// <summary>
        /// Automatically boot the builder after creation. Defaults to `false`
        /// </summary>
        [Output("bootstrap")]
        public Output<bool?> Bootstrap { get; private set; } = null!;

        /// <summary>
        /// BuildKit daemon config file
        /// </summary>
        [Output("buildkitConfig")]
        public Output<string?> BuildkitConfig { get; private set; } = null!;

        /// <summary>
        /// BuildKit flags to set for the builder.
        /// </summary>
        [Output("buildkitFlags")]
        public Output<string?> BuildkitFlags { get; private set; } = null!;

        /// <summary>
        /// Configuration block for the Docker-Container driver.
        /// </summary>
        [Output("dockerContainer")]
        public Output<Outputs.BuildxBuilderDockerContainer?> DockerContainer { get; private set; } = null!;

        /// <summary>
        /// The driver to use for the Buildx builder (e.g., docker-container, kubernetes).
        /// </summary>
        [Output("driver")]
        public Output<string?> Driver { get; private set; } = null!;

        /// <summary>
        /// Additional options for the Buildx driver in the form of `key=value,...`. These options are driver-specific.
        /// </summary>
        [Output("driverOptions")]
        public Output<ImmutableDictionary<string, string>?> DriverOptions { get; private set; } = null!;

        /// <summary>
        /// The endpoint or context to use for the Buildx builder, where context is the name of a context from docker context ls and endpoint is the address for Docker socket (eg. DOCKER_HOST value). By default, the current Docker configuration is used for determining the context/endpoint value.
        /// </summary>
        [Output("endpoint")]
        public Output<string?> Endpoint { get; private set; } = null!;

        /// <summary>
        /// Configuration block for the Kubernetes driver.
        /// </summary>
        [Output("kubernetes")]
        public Output<Outputs.BuildxBuilderKubernetes?> Kubernetes { get; private set; } = null!;

        /// <summary>
        /// The name of the Buildx builder. IF not specified, a random name will be generated.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Create/modify node with given name
        /// </summary>
        [Output("node")]
        public Output<string?> Node { get; private set; } = null!;

        /// <summary>
        /// Fixed platforms for current node
        /// </summary>
        [Output("platforms")]
        public Output<ImmutableArray<string>> Platforms { get; private set; } = null!;

        /// <summary>
        /// Configuration block for the Remote driver.
        /// </summary>
        [Output("remote")]
        public Output<Outputs.BuildxBuilderRemote?> Remote { get; private set; } = null!;

        /// <summary>
        /// Set the current builder instance as the default for the current context.
        /// </summary>
        [Output("use")]
        public Output<bool?> Use { get; private set; } = null!;


        /// <summary>
        /// Create a BuildxBuilder resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BuildxBuilder(string name, BuildxBuilderArgs? args = null, CustomResourceOptions? options = null)
            : base("docker:index/buildxBuilder:BuildxBuilder", name, args ?? new BuildxBuilderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BuildxBuilder(string name, Input<string> id, BuildxBuilderState? state = null, CustomResourceOptions? options = null)
            : base("docker:index/buildxBuilder:BuildxBuilder", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BuildxBuilder resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BuildxBuilder Get(string name, Input<string> id, BuildxBuilderState? state = null, CustomResourceOptions? options = null)
        {
            return new BuildxBuilder(name, id, state, options);
        }
    }

    public sealed class BuildxBuilderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Append a node to builder instead of changing it
        /// </summary>
        [Input("append")]
        public Input<bool>? Append { get; set; }

        /// <summary>
        /// Automatically boot the builder after creation. Defaults to `false`
        /// </summary>
        [Input("bootstrap")]
        public Input<bool>? Bootstrap { get; set; }

        /// <summary>
        /// BuildKit daemon config file
        /// </summary>
        [Input("buildkitConfig")]
        public Input<string>? BuildkitConfig { get; set; }

        /// <summary>
        /// BuildKit flags to set for the builder.
        /// </summary>
        [Input("buildkitFlags")]
        public Input<string>? BuildkitFlags { get; set; }

        /// <summary>
        /// Configuration block for the Docker-Container driver.
        /// </summary>
        [Input("dockerContainer")]
        public Input<Inputs.BuildxBuilderDockerContainerArgs>? DockerContainer { get; set; }

        /// <summary>
        /// The driver to use for the Buildx builder (e.g., docker-container, kubernetes).
        /// </summary>
        [Input("driver")]
        public Input<string>? Driver { get; set; }

        [Input("driverOptions")]
        private InputMap<string>? _driverOptions;

        /// <summary>
        /// Additional options for the Buildx driver in the form of `key=value,...`. These options are driver-specific.
        /// </summary>
        public InputMap<string> DriverOptions
        {
            get => _driverOptions ?? (_driverOptions = new InputMap<string>());
            set => _driverOptions = value;
        }

        /// <summary>
        /// The endpoint or context to use for the Buildx builder, where context is the name of a context from docker context ls and endpoint is the address for Docker socket (eg. DOCKER_HOST value). By default, the current Docker configuration is used for determining the context/endpoint value.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// Configuration block for the Kubernetes driver.
        /// </summary>
        [Input("kubernetes")]
        public Input<Inputs.BuildxBuilderKubernetesArgs>? Kubernetes { get; set; }

        /// <summary>
        /// The name of the Buildx builder. IF not specified, a random name will be generated.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Create/modify node with given name
        /// </summary>
        [Input("node")]
        public Input<string>? Node { get; set; }

        [Input("platforms")]
        private InputList<string>? _platforms;

        /// <summary>
        /// Fixed platforms for current node
        /// </summary>
        public InputList<string> Platforms
        {
            get => _platforms ?? (_platforms = new InputList<string>());
            set => _platforms = value;
        }

        /// <summary>
        /// Configuration block for the Remote driver.
        /// </summary>
        [Input("remote")]
        public Input<Inputs.BuildxBuilderRemoteArgs>? Remote { get; set; }

        /// <summary>
        /// Set the current builder instance as the default for the current context.
        /// </summary>
        [Input("use")]
        public Input<bool>? Use { get; set; }

        public BuildxBuilderArgs()
        {
        }
        public static new BuildxBuilderArgs Empty => new BuildxBuilderArgs();
    }

    public sealed class BuildxBuilderState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Append a node to builder instead of changing it
        /// </summary>
        [Input("append")]
        public Input<bool>? Append { get; set; }

        /// <summary>
        /// Automatically boot the builder after creation. Defaults to `false`
        /// </summary>
        [Input("bootstrap")]
        public Input<bool>? Bootstrap { get; set; }

        /// <summary>
        /// BuildKit daemon config file
        /// </summary>
        [Input("buildkitConfig")]
        public Input<string>? BuildkitConfig { get; set; }

        /// <summary>
        /// BuildKit flags to set for the builder.
        /// </summary>
        [Input("buildkitFlags")]
        public Input<string>? BuildkitFlags { get; set; }

        /// <summary>
        /// Configuration block for the Docker-Container driver.
        /// </summary>
        [Input("dockerContainer")]
        public Input<Inputs.BuildxBuilderDockerContainerGetArgs>? DockerContainer { get; set; }

        /// <summary>
        /// The driver to use for the Buildx builder (e.g., docker-container, kubernetes).
        /// </summary>
        [Input("driver")]
        public Input<string>? Driver { get; set; }

        [Input("driverOptions")]
        private InputMap<string>? _driverOptions;

        /// <summary>
        /// Additional options for the Buildx driver in the form of `key=value,...`. These options are driver-specific.
        /// </summary>
        public InputMap<string> DriverOptions
        {
            get => _driverOptions ?? (_driverOptions = new InputMap<string>());
            set => _driverOptions = value;
        }

        /// <summary>
        /// The endpoint or context to use for the Buildx builder, where context is the name of a context from docker context ls and endpoint is the address for Docker socket (eg. DOCKER_HOST value). By default, the current Docker configuration is used for determining the context/endpoint value.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// Configuration block for the Kubernetes driver.
        /// </summary>
        [Input("kubernetes")]
        public Input<Inputs.BuildxBuilderKubernetesGetArgs>? Kubernetes { get; set; }

        /// <summary>
        /// The name of the Buildx builder. IF not specified, a random name will be generated.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Create/modify node with given name
        /// </summary>
        [Input("node")]
        public Input<string>? Node { get; set; }

        [Input("platforms")]
        private InputList<string>? _platforms;

        /// <summary>
        /// Fixed platforms for current node
        /// </summary>
        public InputList<string> Platforms
        {
            get => _platforms ?? (_platforms = new InputList<string>());
            set => _platforms = value;
        }

        /// <summary>
        /// Configuration block for the Remote driver.
        /// </summary>
        [Input("remote")]
        public Input<Inputs.BuildxBuilderRemoteGetArgs>? Remote { get; set; }

        /// <summary>
        /// Set the current builder instance as the default for the current context.
        /// </summary>
        [Input("use")]
        public Input<bool>? Use { get; set; }

        public BuildxBuilderState()
        {
        }
        public static new BuildxBuilderState Empty => new BuildxBuilderState();
    }
}
