// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Docker
{
    /// <summary>
    /// &lt;!-- Bug: Type and Name are switched --&gt;
    /// Manages the lifecycle of docker image in a registry. You can upload images to a registry (= `docker push`) and also delete them again
    /// </summary>
    [DockerResourceType("docker:index/registryImage:RegistryImage")]
    public partial class RegistryImage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// If `true`, the verification of TLS certificates of the server/registry is disabled. Defaults to `false`
        /// </summary>
        [Output("insecureSkipVerify")]
        public Output<bool?> InsecureSkipVerify { get; private set; } = null!;

        /// <summary>
        /// If true, then the Docker image won't be deleted on destroy operation. If this is false, it will delete the image from the docker registry on destroy operation. Defaults to `false`
        /// </summary>
        [Output("keepRemotely")]
        public Output<bool?> KeepRemotely { get; private set; } = null!;

        /// <summary>
        /// The name of the Docker image.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The sha256 digest of the image.
        /// </summary>
        [Output("sha256Digest")]
        public Output<string> Sha256Digest { get; private set; } = null!;

        /// <summary>
        /// A map of arbitrary strings that, when changed, will force the `docker.RegistryImage` resource to be replaced. This can be used to repush a local image
        /// </summary>
        [Output("triggers")]
        public Output<ImmutableDictionary<string, object>?> Triggers { get; private set; } = null!;


        /// <summary>
        /// Create a RegistryImage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RegistryImage(string name, RegistryImageArgs? args = null, CustomResourceOptions? options = null)
            : base("docker:index/registryImage:RegistryImage", name, args ?? new RegistryImageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RegistryImage(string name, Input<string> id, RegistryImageState? state = null, CustomResourceOptions? options = null)
            : base("docker:index/registryImage:RegistryImage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RegistryImage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RegistryImage Get(string name, Input<string> id, RegistryImageState? state = null, CustomResourceOptions? options = null)
        {
            return new RegistryImage(name, id, state, options);
        }
    }

    public sealed class RegistryImageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If `true`, the verification of TLS certificates of the server/registry is disabled. Defaults to `false`
        /// </summary>
        [Input("insecureSkipVerify")]
        public Input<bool>? InsecureSkipVerify { get; set; }

        /// <summary>
        /// If true, then the Docker image won't be deleted on destroy operation. If this is false, it will delete the image from the docker registry on destroy operation. Defaults to `false`
        /// </summary>
        [Input("keepRemotely")]
        public Input<bool>? KeepRemotely { get; set; }

        /// <summary>
        /// The name of the Docker image.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("triggers")]
        private InputMap<object>? _triggers;

        /// <summary>
        /// A map of arbitrary strings that, when changed, will force the `docker.RegistryImage` resource to be replaced. This can be used to repush a local image
        /// </summary>
        public InputMap<object> Triggers
        {
            get => _triggers ?? (_triggers = new InputMap<object>());
            set => _triggers = value;
        }

        public RegistryImageArgs()
        {
        }
        public static new RegistryImageArgs Empty => new RegistryImageArgs();
    }

    public sealed class RegistryImageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If `true`, the verification of TLS certificates of the server/registry is disabled. Defaults to `false`
        /// </summary>
        [Input("insecureSkipVerify")]
        public Input<bool>? InsecureSkipVerify { get; set; }

        /// <summary>
        /// If true, then the Docker image won't be deleted on destroy operation. If this is false, it will delete the image from the docker registry on destroy operation. Defaults to `false`
        /// </summary>
        [Input("keepRemotely")]
        public Input<bool>? KeepRemotely { get; set; }

        /// <summary>
        /// The name of the Docker image.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The sha256 digest of the image.
        /// </summary>
        [Input("sha256Digest")]
        public Input<string>? Sha256Digest { get; set; }

        [Input("triggers")]
        private InputMap<object>? _triggers;

        /// <summary>
        /// A map of arbitrary strings that, when changed, will force the `docker.RegistryImage` resource to be replaced. This can be used to repush a local image
        /// </summary>
        public InputMap<object> Triggers
        {
            get => _triggers ?? (_triggers = new InputMap<object>());
            set => _triggers = value;
        }

        public RegistryImageState()
        {
        }
        public static new RegistryImageState Empty => new RegistryImageState();
    }
}
