// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Docker
{
    /// <summary>
    /// &lt;!-- Bug: Type and Name are switched --&gt;
    /// Manages the lifecycle of docker image/tag in a registry.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Docker = Pulumi.Docker;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var helloworld = new Docker.RegistryImage("helloworld", new Docker.RegistryImageArgs
    ///         {
    ///             Build = new Docker.Inputs.RegistryImageBuildArgs
    ///             {
    ///                 Context = $"{path.Cwd}/absolutePathToContextFolder",
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// &lt;!-- schema generated by tfplugindocs --&gt;
    /// ## Schema
    /// 
    /// ### Required
    /// 
    /// - **name** (String) The name of the Docker image.
    /// 
    /// ### Optional
    /// 
    /// - **build** (Block List, Max: 1) Definition for building the image (see below for nested schema)
    /// - **id** (String) The ID of this resource.
    /// - **insecure_skip_verify** (Boolean) If `true`, the verification of TLS certificates of the server/registry is disabled. Defaults to `false`
    /// - **keep_remotely** (Boolean) If true, then the Docker image won't be deleted on destroy operation. If this is false, it will delete the image from the docker registry on destroy operation. Defaults to `false`
    /// 
    /// ### Read-Only
    /// 
    /// - **sha256_digest** (String) The sha256 digest of the image.
    /// 
    /// &lt;a id="nestedblock--build"&gt;&lt;/a&gt;
    /// ### Nested Schema for `build`
    /// 
    /// Required:
    /// 
    /// - **context** (String) The absolute path to the context folder. You can use the helper function '${path.cwd}/context-dir'.
    /// 
    /// Optional:
    /// 
    /// - **auth_config** (Block List) The configuration for the authentication (see below for nested schema)
    /// - **build_args** (Map of String) Pairs for build-time variables in the form TODO
    /// - **build_id** (String) BuildID is an optional identifier that can be passed together with the build request. The
    /// - **cache_from** (List of String) Images to consider as cache sources
    /// - **cgroup_parent** (String) Optional parent cgroup for the container
    /// - **cpu_period** (Number) The length of a CPU period in microseconds
    /// - **cpu_quota** (Number) Microseconds of CPU time that the container can get in a CPU period
    /// - **cpu_set_cpus** (String) CPUs in which to allow execution (e.g., `0-3`, `0`, `1`)
    /// - **cpu_set_mems** (String) MEMs in which to allow execution (`0-3`, `0`, `1`)
    /// - **cpu_shares** (Number) CPU shares (relative weight)
    /// - **dockerfile** (String) Dockerfile file. Defaults to `Dockerfile`
    /// - **extra_hosts** (List of String) A list of hostnames/IP mappings to add to the containerâ€™s /etc/hosts file. Specified in the form ["hostname:IP"]
    /// - **force_remove** (Boolean) Always remove intermediate containers
    /// - **isolation** (String) Isolation represents the isolation technology of a container. The supported values are
    /// - **labels** (Map of String) User-defined key/value metadata
    /// - **memory** (Number) Set memory limit for build
    /// - **memory_swap** (Number) Total memory (memory + swap), -1 to enable unlimited swap
    /// - **network_mode** (String) Set the networking mode for the RUN instructions during build
    /// - **no_cache** (Boolean) Do not use the cache when building the image
    /// - **platform** (String) Set platform if server is multi-platform capable
    /// - **pull_parent** (Boolean) Attempt to pull the image even if an older image exists locally
    /// - **remote_context** (String) A Git repository URI or HTTP/HTTPS context URI
    /// - **remove** (Boolean) Remove intermediate containers after a successful build (default behavior)
    /// - **security_opt** (List of String) The security options
    /// - **session_id** (String) Set an ID for the build session
    /// - **shm_size** (Number) Size of /dev/shm in bytes. The size must be greater than 0
    /// - **squash** (Boolean) If true the new layers are squashed into a new image with a single new layer
    /// - **suppress_output** (Boolean) Suppress the build output and print image ID on success
    /// - **target** (String) Set the target build stage to build
    /// - **ulimit** (Block List) Configuration for ulimits (see below for nested schema)
    /// - **version** (String) Version of the unerlying builder to use
    /// 
    /// &lt;a id="nestedblock--build--auth_config"&gt;&lt;/a&gt;
    /// ### Nested Schema for `build.auth_config`
    /// 
    /// Required:
    /// 
    /// - **host_name** (String) hostname of the registry
    /// 
    /// Optional:
    /// 
    /// - **auth** (String) the auth token
    /// - **email** (String) the user emal
    /// - **identity_token** (String) the identity token
    /// - **password** (String) the registry password
    /// - **registry_token** (String) the registry token
    /// - **server_address** (String) the server address
    /// - **user_name** (String) the registry user name
    /// 
    /// &lt;a id="nestedblock--build--ulimit"&gt;&lt;/a&gt;
    /// ### Nested Schema for `build.ulimit`
    /// 
    /// Required:
    /// 
    /// - **hard** (Number) soft limit
    /// - **name** (String) type of ulimit, e.g. `nofile`
    /// - **soft** (Number) hard limit
    /// </summary>
    [DockerResourceType("docker:index/registryImage:RegistryImage")]
    public partial class RegistryImage : Pulumi.CustomResource
    {
        /// <summary>
        /// Definition for building the image
        /// </summary>
        [Output("build")]
        public Output<Outputs.RegistryImageBuild?> Build { get; private set; } = null!;

        /// <summary>
        /// If `true`, the verification of TLS certificates of the server/registry is disabled. Defaults to `false`
        /// </summary>
        [Output("insecureSkipVerify")]
        public Output<bool?> InsecureSkipVerify { get; private set; } = null!;

        /// <summary>
        /// If true, then the Docker image won't be deleted on destroy operation. If this is false, it will delete the image from
        /// the docker registry on destroy operation. Defaults to `false`
        /// </summary>
        [Output("keepRemotely")]
        public Output<bool?> KeepRemotely { get; private set; } = null!;

        /// <summary>
        /// The name of the Docker image.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The sha256 digest of the image.
        /// </summary>
        [Output("sha256Digest")]
        public Output<string> Sha256Digest { get; private set; } = null!;


        /// <summary>
        /// Create a RegistryImage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RegistryImage(string name, RegistryImageArgs? args = null, CustomResourceOptions? options = null)
            : base("docker:index/registryImage:RegistryImage", name, args ?? new RegistryImageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RegistryImage(string name, Input<string> id, RegistryImageState? state = null, CustomResourceOptions? options = null)
            : base("docker:index/registryImage:RegistryImage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RegistryImage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RegistryImage Get(string name, Input<string> id, RegistryImageState? state = null, CustomResourceOptions? options = null)
        {
            return new RegistryImage(name, id, state, options);
        }
    }

    public sealed class RegistryImageArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Definition for building the image
        /// </summary>
        [Input("build")]
        public Input<Inputs.RegistryImageBuildArgs>? Build { get; set; }

        /// <summary>
        /// If `true`, the verification of TLS certificates of the server/registry is disabled. Defaults to `false`
        /// </summary>
        [Input("insecureSkipVerify")]
        public Input<bool>? InsecureSkipVerify { get; set; }

        /// <summary>
        /// If true, then the Docker image won't be deleted on destroy operation. If this is false, it will delete the image from
        /// the docker registry on destroy operation. Defaults to `false`
        /// </summary>
        [Input("keepRemotely")]
        public Input<bool>? KeepRemotely { get; set; }

        /// <summary>
        /// The name of the Docker image.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public RegistryImageArgs()
        {
        }
    }

    public sealed class RegistryImageState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Definition for building the image
        /// </summary>
        [Input("build")]
        public Input<Inputs.RegistryImageBuildGetArgs>? Build { get; set; }

        /// <summary>
        /// If `true`, the verification of TLS certificates of the server/registry is disabled. Defaults to `false`
        /// </summary>
        [Input("insecureSkipVerify")]
        public Input<bool>? InsecureSkipVerify { get; set; }

        /// <summary>
        /// If true, then the Docker image won't be deleted on destroy operation. If this is false, it will delete the image from
        /// the docker registry on destroy operation. Defaults to `false`
        /// </summary>
        [Input("keepRemotely")]
        public Input<bool>? KeepRemotely { get; set; }

        /// <summary>
        /// The name of the Docker image.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The sha256 digest of the image.
        /// </summary>
        [Input("sha256Digest")]
        public Input<string>? Sha256Digest { get; set; }

        public RegistryImageState()
        {
        }
    }
}
