// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Docker
{
    /// <summary>
    /// The provider type for the docker package. By default, resources use package-wide configuration
    /// settings, however an explicit `Provider` instance may be created and passed during resource
    /// construction to achieve fine-grained programmatic control over provider settings. See the
    /// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
    /// </summary>
    [DockerResourceType("pulumi:providers:docker")]
    public partial class Provider : Pulumi.ProviderResource
    {
        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs? args = null, CustomResourceOptions? options = null)
            : base("docker", name, args ?? new ProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ProviderArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// PEM-encoded content of Docker host CA certificate
        /// </summary>
        [Input("caMaterial")]
        public Input<string>? CaMaterial { get; set; }

        /// <summary>
        /// PEM-encoded content of Docker client certificate
        /// </summary>
        [Input("certMaterial")]
        public Input<string>? CertMaterial { get; set; }

        /// <summary>
        /// Path to directory with Docker TLS config
        /// </summary>
        [Input("certPath")]
        public Input<string>? CertPath { get; set; }

        /// <summary>
        /// The Docker daemon address
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// PEM-encoded content of Docker client private key
        /// </summary>
        [Input("keyMaterial")]
        public Input<string>? KeyMaterial { get; set; }

        [Input("registryAuth", json: true)]
        private InputList<Inputs.ProviderRegistryAuthArgs>? _registryAuth;
        public InputList<Inputs.ProviderRegistryAuthArgs> RegistryAuth
        {
            get => _registryAuth ?? (_registryAuth = new InputList<Inputs.ProviderRegistryAuthArgs>());
            set => _registryAuth = value;
        }

        public ProviderArgs()
        {
            Host = Utilities.GetEnv("DOCKER_HOST") ?? "unix:///var/run/docker.sock";
        }
    }
}
