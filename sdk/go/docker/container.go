// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package docker

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-docker/sdk/v4/go/docker/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// <!-- Bug: Type and Name are switched -->
// Manages the lifecycle of a Docker container.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-docker/sdk/v4/go/docker"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			ubuntuRemoteImage, err := docker.NewRemoteImage(ctx, "ubuntuRemoteImage", &docker.RemoteImageArgs{
//				Name: pulumi.String("ubuntu:precise"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = docker.NewContainer(ctx, "ubuntuContainer", &docker.ContainerArgs{
//				Image: ubuntuRemoteImage.ImageId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ### Example Assuming you created a `container` as follows #!/bin/bash docker run --name foo -p8080:80 -d nginx
//
// prints the container ID
//
// 9a550c0f0163d39d77222d3efd58701b625d47676c25c686c95b5b92d1cba6fd you provide the definition for the resource as follows terraform resource "docker_container" "foo" {
//
//	name
//
// = "foo"
//
//	image = "nginx"
//
//	ports {
//
//	internal = "80"
//
//	external = "8080"
//
//	} } then the import command is as follows #!/bin/bash
//
// ```sh
//
//	$ pulumi import docker:index/container:Container foo 9a550c0f0163d39d77222d3efd58701b625d47676c25c686c95b5b92d1cba6fd
//
// ```
type Container struct {
	pulumi.CustomResourceState

	// If `true` attach to the container after its creation and waits the end of its execution. Defaults to `false`.
	Attach pulumi.BoolPtrOutput `pulumi:"attach"`
	// The network bridge of the container as read from its NetworkSettings.
	Bridge pulumi.StringOutput `pulumi:"bridge"`
	// Add or drop certrain linux capabilities.
	Capabilities ContainerCapabilitiesPtrOutput `pulumi:"capabilities"`
	// Cgroup namespace mode to use for the container. Possible values are: `private`, `host`.
	CgroupnsMode pulumi.StringPtrOutput `pulumi:"cgroupnsMode"`
	// The command to use to start the container. For example, to run `/usr/bin/myprogram -f baz.conf` set the command to be `["/usr/bin/myprogram","-f","baz.con"]`.
	Command pulumi.StringArrayOutput `pulumi:"command"`
	// The logs of the container if its execution is done (`attach` must be disabled).
	ContainerLogs pulumi.StringOutput `pulumi:"containerLogs"`
	// The total number of milliseconds to wait for the container to reach status 'running'
	ContainerReadRefreshTimeoutMilliseconds pulumi.IntPtrOutput `pulumi:"containerReadRefreshTimeoutMilliseconds"`
	// A comma-separated list or hyphen-separated range of CPUs a container can use, e.g. `0-1`.
	CpuSet pulumi.StringPtrOutput `pulumi:"cpuSet"`
	// CPU shares (relative weight) for the container.
	CpuShares pulumi.IntPtrOutput `pulumi:"cpuShares"`
	// If defined will attempt to stop the container before destroying. Container will be destroyed after `n` seconds or on successful stop.
	DestroyGraceSeconds pulumi.IntPtrOutput `pulumi:"destroyGraceSeconds"`
	// Bind devices to the container.
	Devices ContainerDeviceArrayOutput `pulumi:"devices"`
	// DNS servers to use.
	Dns pulumi.StringArrayOutput `pulumi:"dns"`
	// DNS options used by the DNS provider(s), see `resolv.conf` documentation for valid list of options.
	DnsOpts pulumi.StringArrayOutput `pulumi:"dnsOpts"`
	// DNS search domains that are used when bare unqualified hostnames are used inside of the container.
	DnsSearches pulumi.StringArrayOutput `pulumi:"dnsSearches"`
	// Domain name of the container.
	Domainname pulumi.StringPtrOutput `pulumi:"domainname"`
	// The command to use as the Entrypoint for the container. The Entrypoint allows you to configure a container to run as an executable. For example, to run `/usr/bin/myprogram` when starting a container, set the entrypoint to be `"/usr/bin/myprogra"]`.
	Entrypoints pulumi.StringArrayOutput `pulumi:"entrypoints"`
	// Environment variables to set in the form of `KEY=VALUE`, e.g. `DEBUG=0`
	Envs pulumi.StringArrayOutput `pulumi:"envs"`
	// The exit code of the container if its execution is done (`mustRun` must be disabled).
	ExitCode pulumi.IntOutput `pulumi:"exitCode"`
	// GPU devices to add to the container. Currently, only the value `all` is supported. Passing any other value will result in unexpected behavior.
	Gpus pulumi.StringPtrOutput `pulumi:"gpus"`
	// Additional groups for the container user
	GroupAdds pulumi.StringArrayOutput `pulumi:"groupAdds"`
	// A test to perform to check that the container is healthy
	Healthcheck ContainerHealthcheckOutput `pulumi:"healthcheck"`
	// Hostname of the container.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// Additional hosts to add to the container.
	Hosts ContainerHostArrayOutput `pulumi:"hosts"`
	// The ID of the image to back this container. The easiest way to get this value is to use the `RemoteImage` resource as is shown in the example.
	Image pulumi.StringOutput `pulumi:"image"`
	// Configured whether an init process should be injected for this container. If unset this will default to the `dockerd` defaults.
	Init pulumi.BoolOutput `pulumi:"init"`
	// IPC sharing mode for the container. Possible values are: `none`, `private`, `shareable`, `container:<name|id>` or `host`.
	IpcMode pulumi.StringOutput `pulumi:"ipcMode"`
	// User-defined key/value metadata
	Labels ContainerLabelArrayOutput `pulumi:"labels"`
	// The logging driver to use for the container.
	LogDriver pulumi.StringOutput `pulumi:"logDriver"`
	// Key/value pairs to use as options for the logging driver.
	LogOpts pulumi.MapOutput `pulumi:"logOpts"`
	// Save the container logs (`attach` must be enabled). Defaults to `false`.
	Logs pulumi.BoolPtrOutput `pulumi:"logs"`
	// The maximum amount of times to an attempt a restart when `restart` is set to 'on-failure'.
	MaxRetryCount pulumi.IntPtrOutput `pulumi:"maxRetryCount"`
	// The memory limit for the container in MBs.
	Memory pulumi.IntPtrOutput `pulumi:"memory"`
	// The total memory limit (memory + swap) for the container in MBs. This setting may compute to `-1` after `pulumi up` if the target host doesn't support memory swap, when that is the case docker will use a soft limitation.
	MemorySwap pulumi.IntPtrOutput `pulumi:"memorySwap"`
	// Specification for mounts to be added to containers created as part of the service.
	Mounts ContainerMountArrayOutput `pulumi:"mounts"`
	// If `true`, then the Docker container will be kept running. If `false`, then as long as the container exists, Terraform
	// assumes it is successful. Defaults to `true`.
	MustRun pulumi.BoolPtrOutput `pulumi:"mustRun"`
	// The name of the container.
	Name pulumi.StringOutput `pulumi:"name"`
	// The data of the networks the container is connected to.
	NetworkDatas ContainerNetworkDataArrayOutput `pulumi:"networkDatas"`
	// Network mode of the container.
	NetworkMode pulumi.StringPtrOutput `pulumi:"networkMode"`
	// The networks the container is attached to
	NetworksAdvanced ContainerNetworksAdvancedArrayOutput `pulumi:"networksAdvanced"`
	// he PID (Process) Namespace mode for the container. Either `container:<name|id>` or `host`.
	PidMode pulumi.StringPtrOutput `pulumi:"pidMode"`
	// Publish a container's port(s) to the host.
	Ports ContainerPortArrayOutput `pulumi:"ports"`
	// If `true`, the container runs in privileged mode.
	Privileged pulumi.BoolPtrOutput `pulumi:"privileged"`
	// Publish all ports of the container.
	PublishAllPorts pulumi.BoolPtrOutput `pulumi:"publishAllPorts"`
	// If `true`, the container will be started as readonly. Defaults to `false`.
	ReadOnly pulumi.BoolPtrOutput `pulumi:"readOnly"`
	// If `true`, it will remove anonymous volumes associated with the container. Defaults to `true`.
	RemoveVolumes pulumi.BoolPtrOutput `pulumi:"removeVolumes"`
	// The restart policy for the container. Must be one of 'no', 'on-failure', 'always', 'unless-stopped'. Defaults to `no`.
	Restart pulumi.StringPtrOutput `pulumi:"restart"`
	// If `true`, then the container will be automatically removed when it exits. Defaults to `false`.
	Rm pulumi.BoolPtrOutput `pulumi:"rm"`
	// Runtime to use for the container.
	Runtime pulumi.StringOutput `pulumi:"runtime"`
	// List of string values to customize labels for MLS systems, such as SELinux. See https://docs.docker.com/engine/reference/run/#security-configuration.
	SecurityOpts pulumi.StringArrayOutput `pulumi:"securityOpts"`
	// Size of `/dev/shm` in MBs.
	ShmSize pulumi.IntOutput `pulumi:"shmSize"`
	// If `true`, then the Docker container will be started after creation. If `false`, then the container is only created. Defaults to `true`.
	Start pulumi.BoolPtrOutput `pulumi:"start"`
	// If `true`, keep STDIN open even if not attached (`docker run -i`). Defaults to `false`.
	StdinOpen pulumi.BoolPtrOutput `pulumi:"stdinOpen"`
	// Signal to stop a container (default `SIGTERM`).
	StopSignal pulumi.StringOutput `pulumi:"stopSignal"`
	// Timeout (in seconds) to stop a container.
	StopTimeout pulumi.IntOutput `pulumi:"stopTimeout"`
	// Key/value pairs for the storage driver options, e.g. `size`: `120G`
	StorageOpts pulumi.MapOutput `pulumi:"storageOpts"`
	// A map of kernel parameters (sysctls) to set in the container.
	Sysctls pulumi.MapOutput `pulumi:"sysctls"`
	// A map of container directories which should be replaced by `tmpfs mounts`, and their corresponding mount options.
	Tmpfs pulumi.MapOutput `pulumi:"tmpfs"`
	// If `true`, allocate a pseudo-tty (`docker run -t`). Defaults to `false`.
	Tty pulumi.BoolPtrOutput `pulumi:"tty"`
	// Ulimit options to add.
	Ulimits ContainerUlimitArrayOutput `pulumi:"ulimits"`
	// Specifies files to upload to the container before starting it. Only one of `content` or `contentBase64` can be set and at least one of them has to be set.
	Uploads ContainerUploadArrayOutput `pulumi:"uploads"`
	// User used for run the first process. Format is `user` or `user:group` which user and group can be passed literraly or by name.
	User pulumi.StringPtrOutput `pulumi:"user"`
	// Sets the usernamespace mode for the container when usernamespace remapping option is enabled.
	UsernsMode pulumi.StringPtrOutput `pulumi:"usernsMode"`
	// Spec for mounting volumes in the container.
	Volumes ContainerVolumeArrayOutput `pulumi:"volumes"`
	// If `true`, then the Docker container is waited for being healthy state after creation. If `false`, then the container health state is not checked. Defaults to `false`.
	Wait pulumi.BoolPtrOutput `pulumi:"wait"`
	// The timeout in seconds to wait the container to be healthy after creation. Defaults to `60`.
	WaitTimeout pulumi.IntPtrOutput `pulumi:"waitTimeout"`
	// The working directory for commands to run in.
	WorkingDir pulumi.StringPtrOutput `pulumi:"workingDir"`
}

// NewContainer registers a new resource with the given unique name, arguments, and options.
func NewContainer(ctx *pulumi.Context,
	name string, args *ContainerArgs, opts ...pulumi.ResourceOption) (*Container, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Image == nil {
		return nil, errors.New("invalid value for required argument 'Image'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Container
	err := ctx.RegisterResource("docker:index/container:Container", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainer gets an existing Container resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerState, opts ...pulumi.ResourceOption) (*Container, error) {
	var resource Container
	err := ctx.ReadResource("docker:index/container:Container", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Container resources.
type containerState struct {
	// If `true` attach to the container after its creation and waits the end of its execution. Defaults to `false`.
	Attach *bool `pulumi:"attach"`
	// The network bridge of the container as read from its NetworkSettings.
	Bridge *string `pulumi:"bridge"`
	// Add or drop certrain linux capabilities.
	Capabilities *ContainerCapabilities `pulumi:"capabilities"`
	// Cgroup namespace mode to use for the container. Possible values are: `private`, `host`.
	CgroupnsMode *string `pulumi:"cgroupnsMode"`
	// The command to use to start the container. For example, to run `/usr/bin/myprogram -f baz.conf` set the command to be `["/usr/bin/myprogram","-f","baz.con"]`.
	Command []string `pulumi:"command"`
	// The logs of the container if its execution is done (`attach` must be disabled).
	ContainerLogs *string `pulumi:"containerLogs"`
	// The total number of milliseconds to wait for the container to reach status 'running'
	ContainerReadRefreshTimeoutMilliseconds *int `pulumi:"containerReadRefreshTimeoutMilliseconds"`
	// A comma-separated list or hyphen-separated range of CPUs a container can use, e.g. `0-1`.
	CpuSet *string `pulumi:"cpuSet"`
	// CPU shares (relative weight) for the container.
	CpuShares *int `pulumi:"cpuShares"`
	// If defined will attempt to stop the container before destroying. Container will be destroyed after `n` seconds or on successful stop.
	DestroyGraceSeconds *int `pulumi:"destroyGraceSeconds"`
	// Bind devices to the container.
	Devices []ContainerDevice `pulumi:"devices"`
	// DNS servers to use.
	Dns []string `pulumi:"dns"`
	// DNS options used by the DNS provider(s), see `resolv.conf` documentation for valid list of options.
	DnsOpts []string `pulumi:"dnsOpts"`
	// DNS search domains that are used when bare unqualified hostnames are used inside of the container.
	DnsSearches []string `pulumi:"dnsSearches"`
	// Domain name of the container.
	Domainname *string `pulumi:"domainname"`
	// The command to use as the Entrypoint for the container. The Entrypoint allows you to configure a container to run as an executable. For example, to run `/usr/bin/myprogram` when starting a container, set the entrypoint to be `"/usr/bin/myprogra"]`.
	Entrypoints []string `pulumi:"entrypoints"`
	// Environment variables to set in the form of `KEY=VALUE`, e.g. `DEBUG=0`
	Envs []string `pulumi:"envs"`
	// The exit code of the container if its execution is done (`mustRun` must be disabled).
	ExitCode *int `pulumi:"exitCode"`
	// GPU devices to add to the container. Currently, only the value `all` is supported. Passing any other value will result in unexpected behavior.
	Gpus *string `pulumi:"gpus"`
	// Additional groups for the container user
	GroupAdds []string `pulumi:"groupAdds"`
	// A test to perform to check that the container is healthy
	Healthcheck *ContainerHealthcheck `pulumi:"healthcheck"`
	// Hostname of the container.
	Hostname *string `pulumi:"hostname"`
	// Additional hosts to add to the container.
	Hosts []ContainerHost `pulumi:"hosts"`
	// The ID of the image to back this container. The easiest way to get this value is to use the `RemoteImage` resource as is shown in the example.
	Image *string `pulumi:"image"`
	// Configured whether an init process should be injected for this container. If unset this will default to the `dockerd` defaults.
	Init *bool `pulumi:"init"`
	// IPC sharing mode for the container. Possible values are: `none`, `private`, `shareable`, `container:<name|id>` or `host`.
	IpcMode *string `pulumi:"ipcMode"`
	// User-defined key/value metadata
	Labels []ContainerLabel `pulumi:"labels"`
	// The logging driver to use for the container.
	LogDriver *string `pulumi:"logDriver"`
	// Key/value pairs to use as options for the logging driver.
	LogOpts map[string]interface{} `pulumi:"logOpts"`
	// Save the container logs (`attach` must be enabled). Defaults to `false`.
	Logs *bool `pulumi:"logs"`
	// The maximum amount of times to an attempt a restart when `restart` is set to 'on-failure'.
	MaxRetryCount *int `pulumi:"maxRetryCount"`
	// The memory limit for the container in MBs.
	Memory *int `pulumi:"memory"`
	// The total memory limit (memory + swap) for the container in MBs. This setting may compute to `-1` after `pulumi up` if the target host doesn't support memory swap, when that is the case docker will use a soft limitation.
	MemorySwap *int `pulumi:"memorySwap"`
	// Specification for mounts to be added to containers created as part of the service.
	Mounts []ContainerMount `pulumi:"mounts"`
	// If `true`, then the Docker container will be kept running. If `false`, then as long as the container exists, Terraform
	// assumes it is successful. Defaults to `true`.
	MustRun *bool `pulumi:"mustRun"`
	// The name of the container.
	Name *string `pulumi:"name"`
	// The data of the networks the container is connected to.
	NetworkDatas []ContainerNetworkData `pulumi:"networkDatas"`
	// Network mode of the container.
	NetworkMode *string `pulumi:"networkMode"`
	// The networks the container is attached to
	NetworksAdvanced []ContainerNetworksAdvanced `pulumi:"networksAdvanced"`
	// he PID (Process) Namespace mode for the container. Either `container:<name|id>` or `host`.
	PidMode *string `pulumi:"pidMode"`
	// Publish a container's port(s) to the host.
	Ports []ContainerPort `pulumi:"ports"`
	// If `true`, the container runs in privileged mode.
	Privileged *bool `pulumi:"privileged"`
	// Publish all ports of the container.
	PublishAllPorts *bool `pulumi:"publishAllPorts"`
	// If `true`, the container will be started as readonly. Defaults to `false`.
	ReadOnly *bool `pulumi:"readOnly"`
	// If `true`, it will remove anonymous volumes associated with the container. Defaults to `true`.
	RemoveVolumes *bool `pulumi:"removeVolumes"`
	// The restart policy for the container. Must be one of 'no', 'on-failure', 'always', 'unless-stopped'. Defaults to `no`.
	Restart *string `pulumi:"restart"`
	// If `true`, then the container will be automatically removed when it exits. Defaults to `false`.
	Rm *bool `pulumi:"rm"`
	// Runtime to use for the container.
	Runtime *string `pulumi:"runtime"`
	// List of string values to customize labels for MLS systems, such as SELinux. See https://docs.docker.com/engine/reference/run/#security-configuration.
	SecurityOpts []string `pulumi:"securityOpts"`
	// Size of `/dev/shm` in MBs.
	ShmSize *int `pulumi:"shmSize"`
	// If `true`, then the Docker container will be started after creation. If `false`, then the container is only created. Defaults to `true`.
	Start *bool `pulumi:"start"`
	// If `true`, keep STDIN open even if not attached (`docker run -i`). Defaults to `false`.
	StdinOpen *bool `pulumi:"stdinOpen"`
	// Signal to stop a container (default `SIGTERM`).
	StopSignal *string `pulumi:"stopSignal"`
	// Timeout (in seconds) to stop a container.
	StopTimeout *int `pulumi:"stopTimeout"`
	// Key/value pairs for the storage driver options, e.g. `size`: `120G`
	StorageOpts map[string]interface{} `pulumi:"storageOpts"`
	// A map of kernel parameters (sysctls) to set in the container.
	Sysctls map[string]interface{} `pulumi:"sysctls"`
	// A map of container directories which should be replaced by `tmpfs mounts`, and their corresponding mount options.
	Tmpfs map[string]interface{} `pulumi:"tmpfs"`
	// If `true`, allocate a pseudo-tty (`docker run -t`). Defaults to `false`.
	Tty *bool `pulumi:"tty"`
	// Ulimit options to add.
	Ulimits []ContainerUlimit `pulumi:"ulimits"`
	// Specifies files to upload to the container before starting it. Only one of `content` or `contentBase64` can be set and at least one of them has to be set.
	Uploads []ContainerUpload `pulumi:"uploads"`
	// User used for run the first process. Format is `user` or `user:group` which user and group can be passed literraly or by name.
	User *string `pulumi:"user"`
	// Sets the usernamespace mode for the container when usernamespace remapping option is enabled.
	UsernsMode *string `pulumi:"usernsMode"`
	// Spec for mounting volumes in the container.
	Volumes []ContainerVolume `pulumi:"volumes"`
	// If `true`, then the Docker container is waited for being healthy state after creation. If `false`, then the container health state is not checked. Defaults to `false`.
	Wait *bool `pulumi:"wait"`
	// The timeout in seconds to wait the container to be healthy after creation. Defaults to `60`.
	WaitTimeout *int `pulumi:"waitTimeout"`
	// The working directory for commands to run in.
	WorkingDir *string `pulumi:"workingDir"`
}

type ContainerState struct {
	// If `true` attach to the container after its creation and waits the end of its execution. Defaults to `false`.
	Attach pulumi.BoolPtrInput
	// The network bridge of the container as read from its NetworkSettings.
	Bridge pulumi.StringPtrInput
	// Add or drop certrain linux capabilities.
	Capabilities ContainerCapabilitiesPtrInput
	// Cgroup namespace mode to use for the container. Possible values are: `private`, `host`.
	CgroupnsMode pulumi.StringPtrInput
	// The command to use to start the container. For example, to run `/usr/bin/myprogram -f baz.conf` set the command to be `["/usr/bin/myprogram","-f","baz.con"]`.
	Command pulumi.StringArrayInput
	// The logs of the container if its execution is done (`attach` must be disabled).
	ContainerLogs pulumi.StringPtrInput
	// The total number of milliseconds to wait for the container to reach status 'running'
	ContainerReadRefreshTimeoutMilliseconds pulumi.IntPtrInput
	// A comma-separated list or hyphen-separated range of CPUs a container can use, e.g. `0-1`.
	CpuSet pulumi.StringPtrInput
	// CPU shares (relative weight) for the container.
	CpuShares pulumi.IntPtrInput
	// If defined will attempt to stop the container before destroying. Container will be destroyed after `n` seconds or on successful stop.
	DestroyGraceSeconds pulumi.IntPtrInput
	// Bind devices to the container.
	Devices ContainerDeviceArrayInput
	// DNS servers to use.
	Dns pulumi.StringArrayInput
	// DNS options used by the DNS provider(s), see `resolv.conf` documentation for valid list of options.
	DnsOpts pulumi.StringArrayInput
	// DNS search domains that are used when bare unqualified hostnames are used inside of the container.
	DnsSearches pulumi.StringArrayInput
	// Domain name of the container.
	Domainname pulumi.StringPtrInput
	// The command to use as the Entrypoint for the container. The Entrypoint allows you to configure a container to run as an executable. For example, to run `/usr/bin/myprogram` when starting a container, set the entrypoint to be `"/usr/bin/myprogra"]`.
	Entrypoints pulumi.StringArrayInput
	// Environment variables to set in the form of `KEY=VALUE`, e.g. `DEBUG=0`
	Envs pulumi.StringArrayInput
	// The exit code of the container if its execution is done (`mustRun` must be disabled).
	ExitCode pulumi.IntPtrInput
	// GPU devices to add to the container. Currently, only the value `all` is supported. Passing any other value will result in unexpected behavior.
	Gpus pulumi.StringPtrInput
	// Additional groups for the container user
	GroupAdds pulumi.StringArrayInput
	// A test to perform to check that the container is healthy
	Healthcheck ContainerHealthcheckPtrInput
	// Hostname of the container.
	Hostname pulumi.StringPtrInput
	// Additional hosts to add to the container.
	Hosts ContainerHostArrayInput
	// The ID of the image to back this container. The easiest way to get this value is to use the `RemoteImage` resource as is shown in the example.
	Image pulumi.StringPtrInput
	// Configured whether an init process should be injected for this container. If unset this will default to the `dockerd` defaults.
	Init pulumi.BoolPtrInput
	// IPC sharing mode for the container. Possible values are: `none`, `private`, `shareable`, `container:<name|id>` or `host`.
	IpcMode pulumi.StringPtrInput
	// User-defined key/value metadata
	Labels ContainerLabelArrayInput
	// The logging driver to use for the container.
	LogDriver pulumi.StringPtrInput
	// Key/value pairs to use as options for the logging driver.
	LogOpts pulumi.MapInput
	// Save the container logs (`attach` must be enabled). Defaults to `false`.
	Logs pulumi.BoolPtrInput
	// The maximum amount of times to an attempt a restart when `restart` is set to 'on-failure'.
	MaxRetryCount pulumi.IntPtrInput
	// The memory limit for the container in MBs.
	Memory pulumi.IntPtrInput
	// The total memory limit (memory + swap) for the container in MBs. This setting may compute to `-1` after `pulumi up` if the target host doesn't support memory swap, when that is the case docker will use a soft limitation.
	MemorySwap pulumi.IntPtrInput
	// Specification for mounts to be added to containers created as part of the service.
	Mounts ContainerMountArrayInput
	// If `true`, then the Docker container will be kept running. If `false`, then as long as the container exists, Terraform
	// assumes it is successful. Defaults to `true`.
	MustRun pulumi.BoolPtrInput
	// The name of the container.
	Name pulumi.StringPtrInput
	// The data of the networks the container is connected to.
	NetworkDatas ContainerNetworkDataArrayInput
	// Network mode of the container.
	NetworkMode pulumi.StringPtrInput
	// The networks the container is attached to
	NetworksAdvanced ContainerNetworksAdvancedArrayInput
	// he PID (Process) Namespace mode for the container. Either `container:<name|id>` or `host`.
	PidMode pulumi.StringPtrInput
	// Publish a container's port(s) to the host.
	Ports ContainerPortArrayInput
	// If `true`, the container runs in privileged mode.
	Privileged pulumi.BoolPtrInput
	// Publish all ports of the container.
	PublishAllPorts pulumi.BoolPtrInput
	// If `true`, the container will be started as readonly. Defaults to `false`.
	ReadOnly pulumi.BoolPtrInput
	// If `true`, it will remove anonymous volumes associated with the container. Defaults to `true`.
	RemoveVolumes pulumi.BoolPtrInput
	// The restart policy for the container. Must be one of 'no', 'on-failure', 'always', 'unless-stopped'. Defaults to `no`.
	Restart pulumi.StringPtrInput
	// If `true`, then the container will be automatically removed when it exits. Defaults to `false`.
	Rm pulumi.BoolPtrInput
	// Runtime to use for the container.
	Runtime pulumi.StringPtrInput
	// List of string values to customize labels for MLS systems, such as SELinux. See https://docs.docker.com/engine/reference/run/#security-configuration.
	SecurityOpts pulumi.StringArrayInput
	// Size of `/dev/shm` in MBs.
	ShmSize pulumi.IntPtrInput
	// If `true`, then the Docker container will be started after creation. If `false`, then the container is only created. Defaults to `true`.
	Start pulumi.BoolPtrInput
	// If `true`, keep STDIN open even if not attached (`docker run -i`). Defaults to `false`.
	StdinOpen pulumi.BoolPtrInput
	// Signal to stop a container (default `SIGTERM`).
	StopSignal pulumi.StringPtrInput
	// Timeout (in seconds) to stop a container.
	StopTimeout pulumi.IntPtrInput
	// Key/value pairs for the storage driver options, e.g. `size`: `120G`
	StorageOpts pulumi.MapInput
	// A map of kernel parameters (sysctls) to set in the container.
	Sysctls pulumi.MapInput
	// A map of container directories which should be replaced by `tmpfs mounts`, and their corresponding mount options.
	Tmpfs pulumi.MapInput
	// If `true`, allocate a pseudo-tty (`docker run -t`). Defaults to `false`.
	Tty pulumi.BoolPtrInput
	// Ulimit options to add.
	Ulimits ContainerUlimitArrayInput
	// Specifies files to upload to the container before starting it. Only one of `content` or `contentBase64` can be set and at least one of them has to be set.
	Uploads ContainerUploadArrayInput
	// User used for run the first process. Format is `user` or `user:group` which user and group can be passed literraly or by name.
	User pulumi.StringPtrInput
	// Sets the usernamespace mode for the container when usernamespace remapping option is enabled.
	UsernsMode pulumi.StringPtrInput
	// Spec for mounting volumes in the container.
	Volumes ContainerVolumeArrayInput
	// If `true`, then the Docker container is waited for being healthy state after creation. If `false`, then the container health state is not checked. Defaults to `false`.
	Wait pulumi.BoolPtrInput
	// The timeout in seconds to wait the container to be healthy after creation. Defaults to `60`.
	WaitTimeout pulumi.IntPtrInput
	// The working directory for commands to run in.
	WorkingDir pulumi.StringPtrInput
}

func (ContainerState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerState)(nil)).Elem()
}

type containerArgs struct {
	// If `true` attach to the container after its creation and waits the end of its execution. Defaults to `false`.
	Attach *bool `pulumi:"attach"`
	// Add or drop certrain linux capabilities.
	Capabilities *ContainerCapabilities `pulumi:"capabilities"`
	// Cgroup namespace mode to use for the container. Possible values are: `private`, `host`.
	CgroupnsMode *string `pulumi:"cgroupnsMode"`
	// The command to use to start the container. For example, to run `/usr/bin/myprogram -f baz.conf` set the command to be `["/usr/bin/myprogram","-f","baz.con"]`.
	Command []string `pulumi:"command"`
	// The total number of milliseconds to wait for the container to reach status 'running'
	ContainerReadRefreshTimeoutMilliseconds *int `pulumi:"containerReadRefreshTimeoutMilliseconds"`
	// A comma-separated list or hyphen-separated range of CPUs a container can use, e.g. `0-1`.
	CpuSet *string `pulumi:"cpuSet"`
	// CPU shares (relative weight) for the container.
	CpuShares *int `pulumi:"cpuShares"`
	// If defined will attempt to stop the container before destroying. Container will be destroyed after `n` seconds or on successful stop.
	DestroyGraceSeconds *int `pulumi:"destroyGraceSeconds"`
	// Bind devices to the container.
	Devices []ContainerDevice `pulumi:"devices"`
	// DNS servers to use.
	Dns []string `pulumi:"dns"`
	// DNS options used by the DNS provider(s), see `resolv.conf` documentation for valid list of options.
	DnsOpts []string `pulumi:"dnsOpts"`
	// DNS search domains that are used when bare unqualified hostnames are used inside of the container.
	DnsSearches []string `pulumi:"dnsSearches"`
	// Domain name of the container.
	Domainname *string `pulumi:"domainname"`
	// The command to use as the Entrypoint for the container. The Entrypoint allows you to configure a container to run as an executable. For example, to run `/usr/bin/myprogram` when starting a container, set the entrypoint to be `"/usr/bin/myprogra"]`.
	Entrypoints []string `pulumi:"entrypoints"`
	// Environment variables to set in the form of `KEY=VALUE`, e.g. `DEBUG=0`
	Envs []string `pulumi:"envs"`
	// GPU devices to add to the container. Currently, only the value `all` is supported. Passing any other value will result in unexpected behavior.
	Gpus *string `pulumi:"gpus"`
	// Additional groups for the container user
	GroupAdds []string `pulumi:"groupAdds"`
	// A test to perform to check that the container is healthy
	Healthcheck *ContainerHealthcheck `pulumi:"healthcheck"`
	// Hostname of the container.
	Hostname *string `pulumi:"hostname"`
	// Additional hosts to add to the container.
	Hosts []ContainerHost `pulumi:"hosts"`
	// The ID of the image to back this container. The easiest way to get this value is to use the `RemoteImage` resource as is shown in the example.
	Image string `pulumi:"image"`
	// Configured whether an init process should be injected for this container. If unset this will default to the `dockerd` defaults.
	Init *bool `pulumi:"init"`
	// IPC sharing mode for the container. Possible values are: `none`, `private`, `shareable`, `container:<name|id>` or `host`.
	IpcMode *string `pulumi:"ipcMode"`
	// User-defined key/value metadata
	Labels []ContainerLabel `pulumi:"labels"`
	// The logging driver to use for the container.
	LogDriver *string `pulumi:"logDriver"`
	// Key/value pairs to use as options for the logging driver.
	LogOpts map[string]interface{} `pulumi:"logOpts"`
	// Save the container logs (`attach` must be enabled). Defaults to `false`.
	Logs *bool `pulumi:"logs"`
	// The maximum amount of times to an attempt a restart when `restart` is set to 'on-failure'.
	MaxRetryCount *int `pulumi:"maxRetryCount"`
	// The memory limit for the container in MBs.
	Memory *int `pulumi:"memory"`
	// The total memory limit (memory + swap) for the container in MBs. This setting may compute to `-1` after `pulumi up` if the target host doesn't support memory swap, when that is the case docker will use a soft limitation.
	MemorySwap *int `pulumi:"memorySwap"`
	// Specification for mounts to be added to containers created as part of the service.
	Mounts []ContainerMount `pulumi:"mounts"`
	// If `true`, then the Docker container will be kept running. If `false`, then as long as the container exists, Terraform
	// assumes it is successful. Defaults to `true`.
	MustRun *bool `pulumi:"mustRun"`
	// The name of the container.
	Name *string `pulumi:"name"`
	// Network mode of the container.
	NetworkMode *string `pulumi:"networkMode"`
	// The networks the container is attached to
	NetworksAdvanced []ContainerNetworksAdvanced `pulumi:"networksAdvanced"`
	// he PID (Process) Namespace mode for the container. Either `container:<name|id>` or `host`.
	PidMode *string `pulumi:"pidMode"`
	// Publish a container's port(s) to the host.
	Ports []ContainerPort `pulumi:"ports"`
	// If `true`, the container runs in privileged mode.
	Privileged *bool `pulumi:"privileged"`
	// Publish all ports of the container.
	PublishAllPorts *bool `pulumi:"publishAllPorts"`
	// If `true`, the container will be started as readonly. Defaults to `false`.
	ReadOnly *bool `pulumi:"readOnly"`
	// If `true`, it will remove anonymous volumes associated with the container. Defaults to `true`.
	RemoveVolumes *bool `pulumi:"removeVolumes"`
	// The restart policy for the container. Must be one of 'no', 'on-failure', 'always', 'unless-stopped'. Defaults to `no`.
	Restart *string `pulumi:"restart"`
	// If `true`, then the container will be automatically removed when it exits. Defaults to `false`.
	Rm *bool `pulumi:"rm"`
	// Runtime to use for the container.
	Runtime *string `pulumi:"runtime"`
	// List of string values to customize labels for MLS systems, such as SELinux. See https://docs.docker.com/engine/reference/run/#security-configuration.
	SecurityOpts []string `pulumi:"securityOpts"`
	// Size of `/dev/shm` in MBs.
	ShmSize *int `pulumi:"shmSize"`
	// If `true`, then the Docker container will be started after creation. If `false`, then the container is only created. Defaults to `true`.
	Start *bool `pulumi:"start"`
	// If `true`, keep STDIN open even if not attached (`docker run -i`). Defaults to `false`.
	StdinOpen *bool `pulumi:"stdinOpen"`
	// Signal to stop a container (default `SIGTERM`).
	StopSignal *string `pulumi:"stopSignal"`
	// Timeout (in seconds) to stop a container.
	StopTimeout *int `pulumi:"stopTimeout"`
	// Key/value pairs for the storage driver options, e.g. `size`: `120G`
	StorageOpts map[string]interface{} `pulumi:"storageOpts"`
	// A map of kernel parameters (sysctls) to set in the container.
	Sysctls map[string]interface{} `pulumi:"sysctls"`
	// A map of container directories which should be replaced by `tmpfs mounts`, and their corresponding mount options.
	Tmpfs map[string]interface{} `pulumi:"tmpfs"`
	// If `true`, allocate a pseudo-tty (`docker run -t`). Defaults to `false`.
	Tty *bool `pulumi:"tty"`
	// Ulimit options to add.
	Ulimits []ContainerUlimit `pulumi:"ulimits"`
	// Specifies files to upload to the container before starting it. Only one of `content` or `contentBase64` can be set and at least one of them has to be set.
	Uploads []ContainerUpload `pulumi:"uploads"`
	// User used for run the first process. Format is `user` or `user:group` which user and group can be passed literraly or by name.
	User *string `pulumi:"user"`
	// Sets the usernamespace mode for the container when usernamespace remapping option is enabled.
	UsernsMode *string `pulumi:"usernsMode"`
	// Spec for mounting volumes in the container.
	Volumes []ContainerVolume `pulumi:"volumes"`
	// If `true`, then the Docker container is waited for being healthy state after creation. If `false`, then the container health state is not checked. Defaults to `false`.
	Wait *bool `pulumi:"wait"`
	// The timeout in seconds to wait the container to be healthy after creation. Defaults to `60`.
	WaitTimeout *int `pulumi:"waitTimeout"`
	// The working directory for commands to run in.
	WorkingDir *string `pulumi:"workingDir"`
}

// The set of arguments for constructing a Container resource.
type ContainerArgs struct {
	// If `true` attach to the container after its creation and waits the end of its execution. Defaults to `false`.
	Attach pulumi.BoolPtrInput
	// Add or drop certrain linux capabilities.
	Capabilities ContainerCapabilitiesPtrInput
	// Cgroup namespace mode to use for the container. Possible values are: `private`, `host`.
	CgroupnsMode pulumi.StringPtrInput
	// The command to use to start the container. For example, to run `/usr/bin/myprogram -f baz.conf` set the command to be `["/usr/bin/myprogram","-f","baz.con"]`.
	Command pulumi.StringArrayInput
	// The total number of milliseconds to wait for the container to reach status 'running'
	ContainerReadRefreshTimeoutMilliseconds pulumi.IntPtrInput
	// A comma-separated list or hyphen-separated range of CPUs a container can use, e.g. `0-1`.
	CpuSet pulumi.StringPtrInput
	// CPU shares (relative weight) for the container.
	CpuShares pulumi.IntPtrInput
	// If defined will attempt to stop the container before destroying. Container will be destroyed after `n` seconds or on successful stop.
	DestroyGraceSeconds pulumi.IntPtrInput
	// Bind devices to the container.
	Devices ContainerDeviceArrayInput
	// DNS servers to use.
	Dns pulumi.StringArrayInput
	// DNS options used by the DNS provider(s), see `resolv.conf` documentation for valid list of options.
	DnsOpts pulumi.StringArrayInput
	// DNS search domains that are used when bare unqualified hostnames are used inside of the container.
	DnsSearches pulumi.StringArrayInput
	// Domain name of the container.
	Domainname pulumi.StringPtrInput
	// The command to use as the Entrypoint for the container. The Entrypoint allows you to configure a container to run as an executable. For example, to run `/usr/bin/myprogram` when starting a container, set the entrypoint to be `"/usr/bin/myprogra"]`.
	Entrypoints pulumi.StringArrayInput
	// Environment variables to set in the form of `KEY=VALUE`, e.g. `DEBUG=0`
	Envs pulumi.StringArrayInput
	// GPU devices to add to the container. Currently, only the value `all` is supported. Passing any other value will result in unexpected behavior.
	Gpus pulumi.StringPtrInput
	// Additional groups for the container user
	GroupAdds pulumi.StringArrayInput
	// A test to perform to check that the container is healthy
	Healthcheck ContainerHealthcheckPtrInput
	// Hostname of the container.
	Hostname pulumi.StringPtrInput
	// Additional hosts to add to the container.
	Hosts ContainerHostArrayInput
	// The ID of the image to back this container. The easiest way to get this value is to use the `RemoteImage` resource as is shown in the example.
	Image pulumi.StringInput
	// Configured whether an init process should be injected for this container. If unset this will default to the `dockerd` defaults.
	Init pulumi.BoolPtrInput
	// IPC sharing mode for the container. Possible values are: `none`, `private`, `shareable`, `container:<name|id>` or `host`.
	IpcMode pulumi.StringPtrInput
	// User-defined key/value metadata
	Labels ContainerLabelArrayInput
	// The logging driver to use for the container.
	LogDriver pulumi.StringPtrInput
	// Key/value pairs to use as options for the logging driver.
	LogOpts pulumi.MapInput
	// Save the container logs (`attach` must be enabled). Defaults to `false`.
	Logs pulumi.BoolPtrInput
	// The maximum amount of times to an attempt a restart when `restart` is set to 'on-failure'.
	MaxRetryCount pulumi.IntPtrInput
	// The memory limit for the container in MBs.
	Memory pulumi.IntPtrInput
	// The total memory limit (memory + swap) for the container in MBs. This setting may compute to `-1` after `pulumi up` if the target host doesn't support memory swap, when that is the case docker will use a soft limitation.
	MemorySwap pulumi.IntPtrInput
	// Specification for mounts to be added to containers created as part of the service.
	Mounts ContainerMountArrayInput
	// If `true`, then the Docker container will be kept running. If `false`, then as long as the container exists, Terraform
	// assumes it is successful. Defaults to `true`.
	MustRun pulumi.BoolPtrInput
	// The name of the container.
	Name pulumi.StringPtrInput
	// Network mode of the container.
	NetworkMode pulumi.StringPtrInput
	// The networks the container is attached to
	NetworksAdvanced ContainerNetworksAdvancedArrayInput
	// he PID (Process) Namespace mode for the container. Either `container:<name|id>` or `host`.
	PidMode pulumi.StringPtrInput
	// Publish a container's port(s) to the host.
	Ports ContainerPortArrayInput
	// If `true`, the container runs in privileged mode.
	Privileged pulumi.BoolPtrInput
	// Publish all ports of the container.
	PublishAllPorts pulumi.BoolPtrInput
	// If `true`, the container will be started as readonly. Defaults to `false`.
	ReadOnly pulumi.BoolPtrInput
	// If `true`, it will remove anonymous volumes associated with the container. Defaults to `true`.
	RemoveVolumes pulumi.BoolPtrInput
	// The restart policy for the container. Must be one of 'no', 'on-failure', 'always', 'unless-stopped'. Defaults to `no`.
	Restart pulumi.StringPtrInput
	// If `true`, then the container will be automatically removed when it exits. Defaults to `false`.
	Rm pulumi.BoolPtrInput
	// Runtime to use for the container.
	Runtime pulumi.StringPtrInput
	// List of string values to customize labels for MLS systems, such as SELinux. See https://docs.docker.com/engine/reference/run/#security-configuration.
	SecurityOpts pulumi.StringArrayInput
	// Size of `/dev/shm` in MBs.
	ShmSize pulumi.IntPtrInput
	// If `true`, then the Docker container will be started after creation. If `false`, then the container is only created. Defaults to `true`.
	Start pulumi.BoolPtrInput
	// If `true`, keep STDIN open even if not attached (`docker run -i`). Defaults to `false`.
	StdinOpen pulumi.BoolPtrInput
	// Signal to stop a container (default `SIGTERM`).
	StopSignal pulumi.StringPtrInput
	// Timeout (in seconds) to stop a container.
	StopTimeout pulumi.IntPtrInput
	// Key/value pairs for the storage driver options, e.g. `size`: `120G`
	StorageOpts pulumi.MapInput
	// A map of kernel parameters (sysctls) to set in the container.
	Sysctls pulumi.MapInput
	// A map of container directories which should be replaced by `tmpfs mounts`, and their corresponding mount options.
	Tmpfs pulumi.MapInput
	// If `true`, allocate a pseudo-tty (`docker run -t`). Defaults to `false`.
	Tty pulumi.BoolPtrInput
	// Ulimit options to add.
	Ulimits ContainerUlimitArrayInput
	// Specifies files to upload to the container before starting it. Only one of `content` or `contentBase64` can be set and at least one of them has to be set.
	Uploads ContainerUploadArrayInput
	// User used for run the first process. Format is `user` or `user:group` which user and group can be passed literraly or by name.
	User pulumi.StringPtrInput
	// Sets the usernamespace mode for the container when usernamespace remapping option is enabled.
	UsernsMode pulumi.StringPtrInput
	// Spec for mounting volumes in the container.
	Volumes ContainerVolumeArrayInput
	// If `true`, then the Docker container is waited for being healthy state after creation. If `false`, then the container health state is not checked. Defaults to `false`.
	Wait pulumi.BoolPtrInput
	// The timeout in seconds to wait the container to be healthy after creation. Defaults to `60`.
	WaitTimeout pulumi.IntPtrInput
	// The working directory for commands to run in.
	WorkingDir pulumi.StringPtrInput
}

func (ContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerArgs)(nil)).Elem()
}

type ContainerInput interface {
	pulumi.Input

	ToContainerOutput() ContainerOutput
	ToContainerOutputWithContext(ctx context.Context) ContainerOutput
}

func (*Container) ElementType() reflect.Type {
	return reflect.TypeOf((**Container)(nil)).Elem()
}

func (i *Container) ToContainerOutput() ContainerOutput {
	return i.ToContainerOutputWithContext(context.Background())
}

func (i *Container) ToContainerOutputWithContext(ctx context.Context) ContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerOutput)
}

func (i *Container) ToOutput(ctx context.Context) pulumix.Output[*Container] {
	return pulumix.Output[*Container]{
		OutputState: i.ToContainerOutputWithContext(ctx).OutputState,
	}
}

// ContainerArrayInput is an input type that accepts ContainerArray and ContainerArrayOutput values.
// You can construct a concrete instance of `ContainerArrayInput` via:
//
//	ContainerArray{ ContainerArgs{...} }
type ContainerArrayInput interface {
	pulumi.Input

	ToContainerArrayOutput() ContainerArrayOutput
	ToContainerArrayOutputWithContext(context.Context) ContainerArrayOutput
}

type ContainerArray []ContainerInput

func (ContainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Container)(nil)).Elem()
}

func (i ContainerArray) ToContainerArrayOutput() ContainerArrayOutput {
	return i.ToContainerArrayOutputWithContext(context.Background())
}

func (i ContainerArray) ToContainerArrayOutputWithContext(ctx context.Context) ContainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerArrayOutput)
}

func (i ContainerArray) ToOutput(ctx context.Context) pulumix.Output[[]*Container] {
	return pulumix.Output[[]*Container]{
		OutputState: i.ToContainerArrayOutputWithContext(ctx).OutputState,
	}
}

// ContainerMapInput is an input type that accepts ContainerMap and ContainerMapOutput values.
// You can construct a concrete instance of `ContainerMapInput` via:
//
//	ContainerMap{ "key": ContainerArgs{...} }
type ContainerMapInput interface {
	pulumi.Input

	ToContainerMapOutput() ContainerMapOutput
	ToContainerMapOutputWithContext(context.Context) ContainerMapOutput
}

type ContainerMap map[string]ContainerInput

func (ContainerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Container)(nil)).Elem()
}

func (i ContainerMap) ToContainerMapOutput() ContainerMapOutput {
	return i.ToContainerMapOutputWithContext(context.Background())
}

func (i ContainerMap) ToContainerMapOutputWithContext(ctx context.Context) ContainerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerMapOutput)
}

func (i ContainerMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Container] {
	return pulumix.Output[map[string]*Container]{
		OutputState: i.ToContainerMapOutputWithContext(ctx).OutputState,
	}
}

type ContainerOutput struct{ *pulumi.OutputState }

func (ContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Container)(nil)).Elem()
}

func (o ContainerOutput) ToContainerOutput() ContainerOutput {
	return o
}

func (o ContainerOutput) ToContainerOutputWithContext(ctx context.Context) ContainerOutput {
	return o
}

func (o ContainerOutput) ToOutput(ctx context.Context) pulumix.Output[*Container] {
	return pulumix.Output[*Container]{
		OutputState: o.OutputState,
	}
}

// If `true` attach to the container after its creation and waits the end of its execution. Defaults to `false`.
func (o ContainerOutput) Attach() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.BoolPtrOutput { return v.Attach }).(pulumi.BoolPtrOutput)
}

// The network bridge of the container as read from its NetworkSettings.
func (o ContainerOutput) Bridge() pulumi.StringOutput {
	return o.ApplyT(func(v *Container) pulumi.StringOutput { return v.Bridge }).(pulumi.StringOutput)
}

// Add or drop certrain linux capabilities.
func (o ContainerOutput) Capabilities() ContainerCapabilitiesPtrOutput {
	return o.ApplyT(func(v *Container) ContainerCapabilitiesPtrOutput { return v.Capabilities }).(ContainerCapabilitiesPtrOutput)
}

// Cgroup namespace mode to use for the container. Possible values are: `private`, `host`.
func (o ContainerOutput) CgroupnsMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.StringPtrOutput { return v.CgroupnsMode }).(pulumi.StringPtrOutput)
}

// The command to use to start the container. For example, to run `/usr/bin/myprogram -f baz.conf` set the command to be `["/usr/bin/myprogram","-f","baz.con"]`.
func (o ContainerOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Container) pulumi.StringArrayOutput { return v.Command }).(pulumi.StringArrayOutput)
}

// The logs of the container if its execution is done (`attach` must be disabled).
func (o ContainerOutput) ContainerLogs() pulumi.StringOutput {
	return o.ApplyT(func(v *Container) pulumi.StringOutput { return v.ContainerLogs }).(pulumi.StringOutput)
}

// The total number of milliseconds to wait for the container to reach status 'running'
func (o ContainerOutput) ContainerReadRefreshTimeoutMilliseconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.IntPtrOutput { return v.ContainerReadRefreshTimeoutMilliseconds }).(pulumi.IntPtrOutput)
}

// A comma-separated list or hyphen-separated range of CPUs a container can use, e.g. `0-1`.
func (o ContainerOutput) CpuSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.StringPtrOutput { return v.CpuSet }).(pulumi.StringPtrOutput)
}

// CPU shares (relative weight) for the container.
func (o ContainerOutput) CpuShares() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.IntPtrOutput { return v.CpuShares }).(pulumi.IntPtrOutput)
}

// If defined will attempt to stop the container before destroying. Container will be destroyed after `n` seconds or on successful stop.
func (o ContainerOutput) DestroyGraceSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.IntPtrOutput { return v.DestroyGraceSeconds }).(pulumi.IntPtrOutput)
}

// Bind devices to the container.
func (o ContainerOutput) Devices() ContainerDeviceArrayOutput {
	return o.ApplyT(func(v *Container) ContainerDeviceArrayOutput { return v.Devices }).(ContainerDeviceArrayOutput)
}

// DNS servers to use.
func (o ContainerOutput) Dns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Container) pulumi.StringArrayOutput { return v.Dns }).(pulumi.StringArrayOutput)
}

// DNS options used by the DNS provider(s), see `resolv.conf` documentation for valid list of options.
func (o ContainerOutput) DnsOpts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Container) pulumi.StringArrayOutput { return v.DnsOpts }).(pulumi.StringArrayOutput)
}

// DNS search domains that are used when bare unqualified hostnames are used inside of the container.
func (o ContainerOutput) DnsSearches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Container) pulumi.StringArrayOutput { return v.DnsSearches }).(pulumi.StringArrayOutput)
}

// Domain name of the container.
func (o ContainerOutput) Domainname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.StringPtrOutput { return v.Domainname }).(pulumi.StringPtrOutput)
}

// The command to use as the Entrypoint for the container. The Entrypoint allows you to configure a container to run as an executable. For example, to run `/usr/bin/myprogram` when starting a container, set the entrypoint to be `"/usr/bin/myprogra"]`.
func (o ContainerOutput) Entrypoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Container) pulumi.StringArrayOutput { return v.Entrypoints }).(pulumi.StringArrayOutput)
}

// Environment variables to set in the form of `KEY=VALUE`, e.g. `DEBUG=0`
func (o ContainerOutput) Envs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Container) pulumi.StringArrayOutput { return v.Envs }).(pulumi.StringArrayOutput)
}

// The exit code of the container if its execution is done (`mustRun` must be disabled).
func (o ContainerOutput) ExitCode() pulumi.IntOutput {
	return o.ApplyT(func(v *Container) pulumi.IntOutput { return v.ExitCode }).(pulumi.IntOutput)
}

// GPU devices to add to the container. Currently, only the value `all` is supported. Passing any other value will result in unexpected behavior.
func (o ContainerOutput) Gpus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.StringPtrOutput { return v.Gpus }).(pulumi.StringPtrOutput)
}

// Additional groups for the container user
func (o ContainerOutput) GroupAdds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Container) pulumi.StringArrayOutput { return v.GroupAdds }).(pulumi.StringArrayOutput)
}

// A test to perform to check that the container is healthy
func (o ContainerOutput) Healthcheck() ContainerHealthcheckOutput {
	return o.ApplyT(func(v *Container) ContainerHealthcheckOutput { return v.Healthcheck }).(ContainerHealthcheckOutput)
}

// Hostname of the container.
func (o ContainerOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *Container) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// Additional hosts to add to the container.
func (o ContainerOutput) Hosts() ContainerHostArrayOutput {
	return o.ApplyT(func(v *Container) ContainerHostArrayOutput { return v.Hosts }).(ContainerHostArrayOutput)
}

// The ID of the image to back this container. The easiest way to get this value is to use the `RemoteImage` resource as is shown in the example.
func (o ContainerOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v *Container) pulumi.StringOutput { return v.Image }).(pulumi.StringOutput)
}

// Configured whether an init process should be injected for this container. If unset this will default to the `dockerd` defaults.
func (o ContainerOutput) Init() pulumi.BoolOutput {
	return o.ApplyT(func(v *Container) pulumi.BoolOutput { return v.Init }).(pulumi.BoolOutput)
}

// IPC sharing mode for the container. Possible values are: `none`, `private`, `shareable`, `container:<name|id>` or `host`.
func (o ContainerOutput) IpcMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Container) pulumi.StringOutput { return v.IpcMode }).(pulumi.StringOutput)
}

// User-defined key/value metadata
func (o ContainerOutput) Labels() ContainerLabelArrayOutput {
	return o.ApplyT(func(v *Container) ContainerLabelArrayOutput { return v.Labels }).(ContainerLabelArrayOutput)
}

// The logging driver to use for the container.
func (o ContainerOutput) LogDriver() pulumi.StringOutput {
	return o.ApplyT(func(v *Container) pulumi.StringOutput { return v.LogDriver }).(pulumi.StringOutput)
}

// Key/value pairs to use as options for the logging driver.
func (o ContainerOutput) LogOpts() pulumi.MapOutput {
	return o.ApplyT(func(v *Container) pulumi.MapOutput { return v.LogOpts }).(pulumi.MapOutput)
}

// Save the container logs (`attach` must be enabled). Defaults to `false`.
func (o ContainerOutput) Logs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.BoolPtrOutput { return v.Logs }).(pulumi.BoolPtrOutput)
}

// The maximum amount of times to an attempt a restart when `restart` is set to 'on-failure'.
func (o ContainerOutput) MaxRetryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.IntPtrOutput { return v.MaxRetryCount }).(pulumi.IntPtrOutput)
}

// The memory limit for the container in MBs.
func (o ContainerOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.IntPtrOutput { return v.Memory }).(pulumi.IntPtrOutput)
}

// The total memory limit (memory + swap) for the container in MBs. This setting may compute to `-1` after `pulumi up` if the target host doesn't support memory swap, when that is the case docker will use a soft limitation.
func (o ContainerOutput) MemorySwap() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.IntPtrOutput { return v.MemorySwap }).(pulumi.IntPtrOutput)
}

// Specification for mounts to be added to containers created as part of the service.
func (o ContainerOutput) Mounts() ContainerMountArrayOutput {
	return o.ApplyT(func(v *Container) ContainerMountArrayOutput { return v.Mounts }).(ContainerMountArrayOutput)
}

// If `true`, then the Docker container will be kept running. If `false`, then as long as the container exists, Terraform
// assumes it is successful. Defaults to `true`.
func (o ContainerOutput) MustRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.BoolPtrOutput { return v.MustRun }).(pulumi.BoolPtrOutput)
}

// The name of the container.
func (o ContainerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Container) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The data of the networks the container is connected to.
func (o ContainerOutput) NetworkDatas() ContainerNetworkDataArrayOutput {
	return o.ApplyT(func(v *Container) ContainerNetworkDataArrayOutput { return v.NetworkDatas }).(ContainerNetworkDataArrayOutput)
}

// Network mode of the container.
func (o ContainerOutput) NetworkMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.StringPtrOutput { return v.NetworkMode }).(pulumi.StringPtrOutput)
}

// The networks the container is attached to
func (o ContainerOutput) NetworksAdvanced() ContainerNetworksAdvancedArrayOutput {
	return o.ApplyT(func(v *Container) ContainerNetworksAdvancedArrayOutput { return v.NetworksAdvanced }).(ContainerNetworksAdvancedArrayOutput)
}

// he PID (Process) Namespace mode for the container. Either `container:<name|id>` or `host`.
func (o ContainerOutput) PidMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.StringPtrOutput { return v.PidMode }).(pulumi.StringPtrOutput)
}

// Publish a container's port(s) to the host.
func (o ContainerOutput) Ports() ContainerPortArrayOutput {
	return o.ApplyT(func(v *Container) ContainerPortArrayOutput { return v.Ports }).(ContainerPortArrayOutput)
}

// If `true`, the container runs in privileged mode.
func (o ContainerOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.BoolPtrOutput { return v.Privileged }).(pulumi.BoolPtrOutput)
}

// Publish all ports of the container.
func (o ContainerOutput) PublishAllPorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.BoolPtrOutput { return v.PublishAllPorts }).(pulumi.BoolPtrOutput)
}

// If `true`, the container will be started as readonly. Defaults to `false`.
func (o ContainerOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.BoolPtrOutput { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// If `true`, it will remove anonymous volumes associated with the container. Defaults to `true`.
func (o ContainerOutput) RemoveVolumes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.BoolPtrOutput { return v.RemoveVolumes }).(pulumi.BoolPtrOutput)
}

// The restart policy for the container. Must be one of 'no', 'on-failure', 'always', 'unless-stopped'. Defaults to `no`.
func (o ContainerOutput) Restart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.StringPtrOutput { return v.Restart }).(pulumi.StringPtrOutput)
}

// If `true`, then the container will be automatically removed when it exits. Defaults to `false`.
func (o ContainerOutput) Rm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.BoolPtrOutput { return v.Rm }).(pulumi.BoolPtrOutput)
}

// Runtime to use for the container.
func (o ContainerOutput) Runtime() pulumi.StringOutput {
	return o.ApplyT(func(v *Container) pulumi.StringOutput { return v.Runtime }).(pulumi.StringOutput)
}

// List of string values to customize labels for MLS systems, such as SELinux. See https://docs.docker.com/engine/reference/run/#security-configuration.
func (o ContainerOutput) SecurityOpts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Container) pulumi.StringArrayOutput { return v.SecurityOpts }).(pulumi.StringArrayOutput)
}

// Size of `/dev/shm` in MBs.
func (o ContainerOutput) ShmSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Container) pulumi.IntOutput { return v.ShmSize }).(pulumi.IntOutput)
}

// If `true`, then the Docker container will be started after creation. If `false`, then the container is only created. Defaults to `true`.
func (o ContainerOutput) Start() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.BoolPtrOutput { return v.Start }).(pulumi.BoolPtrOutput)
}

// If `true`, keep STDIN open even if not attached (`docker run -i`). Defaults to `false`.
func (o ContainerOutput) StdinOpen() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.BoolPtrOutput { return v.StdinOpen }).(pulumi.BoolPtrOutput)
}

// Signal to stop a container (default `SIGTERM`).
func (o ContainerOutput) StopSignal() pulumi.StringOutput {
	return o.ApplyT(func(v *Container) pulumi.StringOutput { return v.StopSignal }).(pulumi.StringOutput)
}

// Timeout (in seconds) to stop a container.
func (o ContainerOutput) StopTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Container) pulumi.IntOutput { return v.StopTimeout }).(pulumi.IntOutput)
}

// Key/value pairs for the storage driver options, e.g. `size`: `120G`
func (o ContainerOutput) StorageOpts() pulumi.MapOutput {
	return o.ApplyT(func(v *Container) pulumi.MapOutput { return v.StorageOpts }).(pulumi.MapOutput)
}

// A map of kernel parameters (sysctls) to set in the container.
func (o ContainerOutput) Sysctls() pulumi.MapOutput {
	return o.ApplyT(func(v *Container) pulumi.MapOutput { return v.Sysctls }).(pulumi.MapOutput)
}

// A map of container directories which should be replaced by `tmpfs mounts`, and their corresponding mount options.
func (o ContainerOutput) Tmpfs() pulumi.MapOutput {
	return o.ApplyT(func(v *Container) pulumi.MapOutput { return v.Tmpfs }).(pulumi.MapOutput)
}

// If `true`, allocate a pseudo-tty (`docker run -t`). Defaults to `false`.
func (o ContainerOutput) Tty() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.BoolPtrOutput { return v.Tty }).(pulumi.BoolPtrOutput)
}

// Ulimit options to add.
func (o ContainerOutput) Ulimits() ContainerUlimitArrayOutput {
	return o.ApplyT(func(v *Container) ContainerUlimitArrayOutput { return v.Ulimits }).(ContainerUlimitArrayOutput)
}

// Specifies files to upload to the container before starting it. Only one of `content` or `contentBase64` can be set and at least one of them has to be set.
func (o ContainerOutput) Uploads() ContainerUploadArrayOutput {
	return o.ApplyT(func(v *Container) ContainerUploadArrayOutput { return v.Uploads }).(ContainerUploadArrayOutput)
}

// User used for run the first process. Format is `user` or `user:group` which user and group can be passed literraly or by name.
func (o ContainerOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.StringPtrOutput { return v.User }).(pulumi.StringPtrOutput)
}

// Sets the usernamespace mode for the container when usernamespace remapping option is enabled.
func (o ContainerOutput) UsernsMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.StringPtrOutput { return v.UsernsMode }).(pulumi.StringPtrOutput)
}

// Spec for mounting volumes in the container.
func (o ContainerOutput) Volumes() ContainerVolumeArrayOutput {
	return o.ApplyT(func(v *Container) ContainerVolumeArrayOutput { return v.Volumes }).(ContainerVolumeArrayOutput)
}

// If `true`, then the Docker container is waited for being healthy state after creation. If `false`, then the container health state is not checked. Defaults to `false`.
func (o ContainerOutput) Wait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.BoolPtrOutput { return v.Wait }).(pulumi.BoolPtrOutput)
}

// The timeout in seconds to wait the container to be healthy after creation. Defaults to `60`.
func (o ContainerOutput) WaitTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.IntPtrOutput { return v.WaitTimeout }).(pulumi.IntPtrOutput)
}

// The working directory for commands to run in.
func (o ContainerOutput) WorkingDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.StringPtrOutput { return v.WorkingDir }).(pulumi.StringPtrOutput)
}

type ContainerArrayOutput struct{ *pulumi.OutputState }

func (ContainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Container)(nil)).Elem()
}

func (o ContainerArrayOutput) ToContainerArrayOutput() ContainerArrayOutput {
	return o
}

func (o ContainerArrayOutput) ToContainerArrayOutputWithContext(ctx context.Context) ContainerArrayOutput {
	return o
}

func (o ContainerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Container] {
	return pulumix.Output[[]*Container]{
		OutputState: o.OutputState,
	}
}

func (o ContainerArrayOutput) Index(i pulumi.IntInput) ContainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Container {
		return vs[0].([]*Container)[vs[1].(int)]
	}).(ContainerOutput)
}

type ContainerMapOutput struct{ *pulumi.OutputState }

func (ContainerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Container)(nil)).Elem()
}

func (o ContainerMapOutput) ToContainerMapOutput() ContainerMapOutput {
	return o
}

func (o ContainerMapOutput) ToContainerMapOutputWithContext(ctx context.Context) ContainerMapOutput {
	return o
}

func (o ContainerMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Container] {
	return pulumix.Output[map[string]*Container]{
		OutputState: o.OutputState,
	}
}

func (o ContainerMapOutput) MapIndex(k pulumi.StringInput) ContainerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Container {
		return vs[0].(map[string]*Container)[vs[1].(string)]
	}).(ContainerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInput)(nil)).Elem(), &Container{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerArrayInput)(nil)).Elem(), ContainerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerMapInput)(nil)).Elem(), ContainerMap{})
	pulumi.RegisterOutputType(ContainerOutput{})
	pulumi.RegisterOutputType(ContainerArrayOutput{})
	pulumi.RegisterOutputType(ContainerMapOutput{})
}
