// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package buildx

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-docker/sdk/v4/go/docker/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An index (or manifest list) referencing one or more existing images.
//
// Useful for crafting a multi-platform image from several
// platform-specific images.
//
// This creates an OCI image index or a Docker manifest list depending on
// the media types of the source images.
//
// ## Example Usage
// ### Multi-platform registry caching
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-docker/sdk/v4/go/docker/buildx"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			amd64, err := buildx.NewImage(ctx, "amd64", &buildx.ImageArgs{
//				CacheFrom: buildx.CacheFromArray{
//					&buildx.CacheFromArgs{
//						Registry: &buildx.CacheFromRegistryArgs{
//							Ref: pulumi.String("docker.io/pulumi/pulumi:cache-amd64"),
//						},
//					},
//				},
//				CacheTo: buildx.CacheToArray{
//					&buildx.CacheToArgs{
//						Registry: &buildx.CacheToRegistryArgs{
//							Mode: buildx.CacheModeMax,
//							Ref:  pulumi.String("docker.io/pulumi/pulumi:cache-amd64"),
//						},
//					},
//				},
//				Context: &buildx.BuildContextArgs{
//					Location: pulumi.String("app"),
//				},
//				Platforms: buildx.PlatformArray{
//					buildx.Platform_Linux_amd64,
//				},
//				Tags: pulumi.StringArray{
//					pulumi.String("docker.io/pulumi/pulumi:3.107.0-amd64"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			arm64, err := buildx.NewImage(ctx, "arm64", &buildx.ImageArgs{
//				CacheFrom: buildx.CacheFromArray{
//					&buildx.CacheFromArgs{
//						Registry: &buildx.CacheFromRegistryArgs{
//							Ref: pulumi.String("docker.io/pulumi/pulumi:cache-arm64"),
//						},
//					},
//				},
//				CacheTo: buildx.CacheToArray{
//					&buildx.CacheToArgs{
//						Registry: &buildx.CacheToRegistryArgs{
//							Mode: buildx.CacheModeMax,
//							Ref:  pulumi.String("docker.io/pulumi/pulumi:cache-arm64"),
//						},
//					},
//				},
//				Context: &buildx.BuildContextArgs{
//					Location: pulumi.String("app"),
//				},
//				Platforms: buildx.PlatformArray{
//					buildx.Platform_Linux_arm64,
//				},
//				Tags: pulumi.StringArray{
//					pulumi.String("docker.io/pulumi/pulumi:3.107.0-arm64"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			index, err := buildx.NewIndex(ctx, "index", &buildx.IndexArgs{
//				Sources: pulumi.StringArray{
//					amd64.Ref,
//					arm64.Ref,
//				},
//				Tag: pulumi.String("docker.io/pulumi/pulumi:3.107.0"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("ref", index.Ref)
//			return nil
//		})
//	}
//
// ```
type Index struct {
	pulumi.CustomResourceState

	// If true, push the index to the target registry.
	//
	// Defaults to `true`.
	Push pulumi.BoolPtrOutput `pulumi:"push"`
	// The pushed tag with digest.
	//
	// Identical to the tag if the index was not pushed.
	Ref pulumi.StringOutput `pulumi:"ref"`
	// Authentication for the registry where the tagged index will be pushed.
	//
	// Credentials can also be included with the provider's configuration.
	Registry RegistryAuthPtrOutput `pulumi:"registry"`
	// Existing images to include in the index.
	Sources pulumi.StringArrayOutput `pulumi:"sources"`
	// The tag to apply to the index.
	Tag pulumi.StringOutput `pulumi:"tag"`
}

// NewIndex registers a new resource with the given unique name, arguments, and options.
func NewIndex(ctx *pulumi.Context,
	name string, args *IndexArgs, opts ...pulumi.ResourceOption) (*Index, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Sources == nil {
		return nil, errors.New("invalid value for required argument 'Sources'")
	}
	if args.Tag == nil {
		return nil, errors.New("invalid value for required argument 'Tag'")
	}
	if args.Push == nil {
		args.Push = pulumi.BoolPtr(true)
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Index
	err := ctx.RegisterResource("docker:buildx/image:Index", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIndex gets an existing Index resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIndex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IndexState, opts ...pulumi.ResourceOption) (*Index, error) {
	var resource Index
	err := ctx.ReadResource("docker:buildx/image:Index", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Index resources.
type indexState struct {
}

type IndexState struct {
}

func (IndexState) ElementType() reflect.Type {
	return reflect.TypeOf((*indexState)(nil)).Elem()
}

type indexArgs struct {
	// If true, push the index to the target registry.
	//
	// Defaults to `true`.
	Push *bool `pulumi:"push"`
	// Authentication for the registry where the tagged index will be pushed.
	//
	// Credentials can also be included with the provider's configuration.
	Registry *RegistryAuth `pulumi:"registry"`
	// Existing images to include in the index.
	Sources []string `pulumi:"sources"`
	// The tag to apply to the index.
	Tag string `pulumi:"tag"`
}

// The set of arguments for constructing a Index resource.
type IndexArgs struct {
	// If true, push the index to the target registry.
	//
	// Defaults to `true`.
	Push pulumi.BoolPtrInput
	// Authentication for the registry where the tagged index will be pushed.
	//
	// Credentials can also be included with the provider's configuration.
	Registry RegistryAuthPtrInput
	// Existing images to include in the index.
	Sources pulumi.StringArrayInput
	// The tag to apply to the index.
	Tag pulumi.StringInput
}

func (IndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*indexArgs)(nil)).Elem()
}

type IndexInput interface {
	pulumi.Input

	ToIndexOutput() IndexOutput
	ToIndexOutputWithContext(ctx context.Context) IndexOutput
}

func (*Index) ElementType() reflect.Type {
	return reflect.TypeOf((**Index)(nil)).Elem()
}

func (i *Index) ToIndexOutput() IndexOutput {
	return i.ToIndexOutputWithContext(context.Background())
}

func (i *Index) ToIndexOutputWithContext(ctx context.Context) IndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexOutput)
}

// IndexArrayInput is an input type that accepts IndexArray and IndexArrayOutput values.
// You can construct a concrete instance of `IndexArrayInput` via:
//
//	IndexArray{ IndexArgs{...} }
type IndexArrayInput interface {
	pulumi.Input

	ToIndexArrayOutput() IndexArrayOutput
	ToIndexArrayOutputWithContext(context.Context) IndexArrayOutput
}

type IndexArray []IndexInput

func (IndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Index)(nil)).Elem()
}

func (i IndexArray) ToIndexArrayOutput() IndexArrayOutput {
	return i.ToIndexArrayOutputWithContext(context.Background())
}

func (i IndexArray) ToIndexArrayOutputWithContext(ctx context.Context) IndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexArrayOutput)
}

// IndexMapInput is an input type that accepts IndexMap and IndexMapOutput values.
// You can construct a concrete instance of `IndexMapInput` via:
//
//	IndexMap{ "key": IndexArgs{...} }
type IndexMapInput interface {
	pulumi.Input

	ToIndexMapOutput() IndexMapOutput
	ToIndexMapOutputWithContext(context.Context) IndexMapOutput
}

type IndexMap map[string]IndexInput

func (IndexMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Index)(nil)).Elem()
}

func (i IndexMap) ToIndexMapOutput() IndexMapOutput {
	return i.ToIndexMapOutputWithContext(context.Background())
}

func (i IndexMap) ToIndexMapOutputWithContext(ctx context.Context) IndexMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexMapOutput)
}

type IndexOutput struct{ *pulumi.OutputState }

func (IndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Index)(nil)).Elem()
}

func (o IndexOutput) ToIndexOutput() IndexOutput {
	return o
}

func (o IndexOutput) ToIndexOutputWithContext(ctx context.Context) IndexOutput {
	return o
}

// If true, push the index to the target registry.
//
// Defaults to `true`.
func (o IndexOutput) Push() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.BoolPtrOutput { return v.Push }).(pulumi.BoolPtrOutput)
}

// The pushed tag with digest.
//
// Identical to the tag if the index was not pushed.
func (o IndexOutput) Ref() pulumi.StringOutput {
	return o.ApplyT(func(v *Index) pulumi.StringOutput { return v.Ref }).(pulumi.StringOutput)
}

// Authentication for the registry where the tagged index will be pushed.
//
// Credentials can also be included with the provider's configuration.
func (o IndexOutput) Registry() RegistryAuthPtrOutput {
	return o.ApplyT(func(v *Index) RegistryAuthPtrOutput { return v.Registry }).(RegistryAuthPtrOutput)
}

// Existing images to include in the index.
func (o IndexOutput) Sources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Index) pulumi.StringArrayOutput { return v.Sources }).(pulumi.StringArrayOutput)
}

// The tag to apply to the index.
func (o IndexOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v *Index) pulumi.StringOutput { return v.Tag }).(pulumi.StringOutput)
}

type IndexArrayOutput struct{ *pulumi.OutputState }

func (IndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Index)(nil)).Elem()
}

func (o IndexArrayOutput) ToIndexArrayOutput() IndexArrayOutput {
	return o
}

func (o IndexArrayOutput) ToIndexArrayOutputWithContext(ctx context.Context) IndexArrayOutput {
	return o
}

func (o IndexArrayOutput) Index(i pulumi.IntInput) IndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Index {
		return vs[0].([]*Index)[vs[1].(int)]
	}).(IndexOutput)
}

type IndexMapOutput struct{ *pulumi.OutputState }

func (IndexMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Index)(nil)).Elem()
}

func (o IndexMapOutput) ToIndexMapOutput() IndexMapOutput {
	return o
}

func (o IndexMapOutput) ToIndexMapOutputWithContext(ctx context.Context) IndexMapOutput {
	return o
}

func (o IndexMapOutput) MapIndex(k pulumi.StringInput) IndexOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Index {
		return vs[0].(map[string]*Index)[vs[1].(string)]
	}).(IndexOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IndexInput)(nil)).Elem(), &Index{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexArrayInput)(nil)).Elem(), IndexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexMapInput)(nil)).Elem(), IndexMap{})
	pulumi.RegisterOutputType(IndexOutput{})
	pulumi.RegisterOutputType(IndexArrayOutput{})
	pulumi.RegisterOutputType(IndexMapOutput{})
}
