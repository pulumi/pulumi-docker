// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package buildx

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-docker/sdk/v4/go/docker/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type Manifest struct {
	Digest   string   `pulumi:"digest"`
	Platform Platform `pulumi:"platform"`
	// The manifest's ref
	Ref  string   `pulumi:"ref"`
	Size int      `pulumi:"size"`
	Urls []string `pulumi:"urls"`
}

// ManifestInput is an input type that accepts ManifestArgs and ManifestOutput values.
// You can construct a concrete instance of `ManifestInput` via:
//
//	ManifestArgs{...}
type ManifestInput interface {
	pulumi.Input

	ToManifestOutput() ManifestOutput
	ToManifestOutputWithContext(context.Context) ManifestOutput
}

type ManifestArgs struct {
	Digest   pulumi.StringInput `pulumi:"digest"`
	Platform PlatformInput      `pulumi:"platform"`
	// The manifest's ref
	Ref  pulumi.StringInput      `pulumi:"ref"`
	Size pulumi.IntInput         `pulumi:"size"`
	Urls pulumi.StringArrayInput `pulumi:"urls"`
}

func (ManifestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Manifest)(nil)).Elem()
}

func (i ManifestArgs) ToManifestOutput() ManifestOutput {
	return i.ToManifestOutputWithContext(context.Background())
}

func (i ManifestArgs) ToManifestOutputWithContext(ctx context.Context) ManifestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManifestOutput)
}

// ManifestArrayInput is an input type that accepts ManifestArray and ManifestArrayOutput values.
// You can construct a concrete instance of `ManifestArrayInput` via:
//
//	ManifestArray{ ManifestArgs{...} }
type ManifestArrayInput interface {
	pulumi.Input

	ToManifestArrayOutput() ManifestArrayOutput
	ToManifestArrayOutputWithContext(context.Context) ManifestArrayOutput
}

type ManifestArray []ManifestInput

func (ManifestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Manifest)(nil)).Elem()
}

func (i ManifestArray) ToManifestArrayOutput() ManifestArrayOutput {
	return i.ToManifestArrayOutputWithContext(context.Background())
}

func (i ManifestArray) ToManifestArrayOutputWithContext(ctx context.Context) ManifestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManifestArrayOutput)
}

type ManifestOutput struct{ *pulumi.OutputState }

func (ManifestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Manifest)(nil)).Elem()
}

func (o ManifestOutput) ToManifestOutput() ManifestOutput {
	return o
}

func (o ManifestOutput) ToManifestOutputWithContext(ctx context.Context) ManifestOutput {
	return o
}

func (o ManifestOutput) Digest() pulumi.StringOutput {
	return o.ApplyT(func(v Manifest) string { return v.Digest }).(pulumi.StringOutput)
}

func (o ManifestOutput) Platform() PlatformOutput {
	return o.ApplyT(func(v Manifest) Platform { return v.Platform }).(PlatformOutput)
}

// The manifest's ref
func (o ManifestOutput) Ref() pulumi.StringOutput {
	return o.ApplyT(func(v Manifest) string { return v.Ref }).(pulumi.StringOutput)
}

func (o ManifestOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v Manifest) int { return v.Size }).(pulumi.IntOutput)
}

func (o ManifestOutput) Urls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Manifest) []string { return v.Urls }).(pulumi.StringArrayOutput)
}

type ManifestArrayOutput struct{ *pulumi.OutputState }

func (ManifestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Manifest)(nil)).Elem()
}

func (o ManifestArrayOutput) ToManifestArrayOutput() ManifestArrayOutput {
	return o
}

func (o ManifestArrayOutput) ToManifestArrayOutputWithContext(ctx context.Context) ManifestArrayOutput {
	return o
}

func (o ManifestArrayOutput) Index(i pulumi.IntInput) ManifestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Manifest {
		return vs[0].([]Manifest)[vs[1].(int)]
	}).(ManifestOutput)
}

type Platform struct {
	Architecture string `pulumi:"architecture"`
	Os           string `pulumi:"os"`
}

// PlatformInput is an input type that accepts PlatformArgs and PlatformOutput values.
// You can construct a concrete instance of `PlatformInput` via:
//
//	PlatformArgs{...}
type PlatformInput interface {
	pulumi.Input

	ToPlatformOutput() PlatformOutput
	ToPlatformOutputWithContext(context.Context) PlatformOutput
}

type PlatformArgs struct {
	Architecture pulumi.StringInput `pulumi:"architecture"`
	Os           pulumi.StringInput `pulumi:"os"`
}

func (PlatformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Platform)(nil)).Elem()
}

func (i PlatformArgs) ToPlatformOutput() PlatformOutput {
	return i.ToPlatformOutputWithContext(context.Background())
}

func (i PlatformArgs) ToPlatformOutputWithContext(ctx context.Context) PlatformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformOutput)
}

type PlatformOutput struct{ *pulumi.OutputState }

func (PlatformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Platform)(nil)).Elem()
}

func (o PlatformOutput) ToPlatformOutput() PlatformOutput {
	return o
}

func (o PlatformOutput) ToPlatformOutputWithContext(ctx context.Context) PlatformOutput {
	return o
}

func (o PlatformOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v Platform) string { return v.Architecture }).(pulumi.StringOutput)
}

func (o PlatformOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v Platform) string { return v.Os }).(pulumi.StringOutput)
}

type RegistryAuth struct {
	// The registry's address (e.g. "docker.io")
	Address string `pulumi:"address"`
	// Password or token for the registry
	Password *string `pulumi:"password"`
	// Username for the registry
	Username *string `pulumi:"username"`
}

// RegistryAuthInput is an input type that accepts RegistryAuthArgs and RegistryAuthOutput values.
// You can construct a concrete instance of `RegistryAuthInput` via:
//
//	RegistryAuthArgs{...}
type RegistryAuthInput interface {
	pulumi.Input

	ToRegistryAuthOutput() RegistryAuthOutput
	ToRegistryAuthOutputWithContext(context.Context) RegistryAuthOutput
}

type RegistryAuthArgs struct {
	// The registry's address (e.g. "docker.io")
	Address pulumi.StringInput `pulumi:"address"`
	// Password or token for the registry
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Username for the registry
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (RegistryAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryAuth)(nil)).Elem()
}

func (i RegistryAuthArgs) ToRegistryAuthOutput() RegistryAuthOutput {
	return i.ToRegistryAuthOutputWithContext(context.Background())
}

func (i RegistryAuthArgs) ToRegistryAuthOutputWithContext(ctx context.Context) RegistryAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryAuthOutput)
}

// RegistryAuthArrayInput is an input type that accepts RegistryAuthArray and RegistryAuthArrayOutput values.
// You can construct a concrete instance of `RegistryAuthArrayInput` via:
//
//	RegistryAuthArray{ RegistryAuthArgs{...} }
type RegistryAuthArrayInput interface {
	pulumi.Input

	ToRegistryAuthArrayOutput() RegistryAuthArrayOutput
	ToRegistryAuthArrayOutputWithContext(context.Context) RegistryAuthArrayOutput
}

type RegistryAuthArray []RegistryAuthInput

func (RegistryAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryAuth)(nil)).Elem()
}

func (i RegistryAuthArray) ToRegistryAuthArrayOutput() RegistryAuthArrayOutput {
	return i.ToRegistryAuthArrayOutputWithContext(context.Background())
}

func (i RegistryAuthArray) ToRegistryAuthArrayOutputWithContext(ctx context.Context) RegistryAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryAuthArrayOutput)
}

type RegistryAuthOutput struct{ *pulumi.OutputState }

func (RegistryAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryAuth)(nil)).Elem()
}

func (o RegistryAuthOutput) ToRegistryAuthOutput() RegistryAuthOutput {
	return o
}

func (o RegistryAuthOutput) ToRegistryAuthOutputWithContext(ctx context.Context) RegistryAuthOutput {
	return o
}

// The registry's address (e.g. "docker.io")
func (o RegistryAuthOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryAuth) string { return v.Address }).(pulumi.StringOutput)
}

// Password or token for the registry
func (o RegistryAuthOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryAuth) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Username for the registry
func (o RegistryAuthOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryAuth) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type RegistryAuthArrayOutput struct{ *pulumi.OutputState }

func (RegistryAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryAuth)(nil)).Elem()
}

func (o RegistryAuthArrayOutput) ToRegistryAuthArrayOutput() RegistryAuthArrayOutput {
	return o
}

func (o RegistryAuthArrayOutput) ToRegistryAuthArrayOutputWithContext(ctx context.Context) RegistryAuthArrayOutput {
	return o
}

func (o RegistryAuthArrayOutput) Index(i pulumi.IntInput) RegistryAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryAuth {
		return vs[0].([]RegistryAuth)[vs[1].(int)]
	}).(RegistryAuthOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManifestInput)(nil)).Elem(), ManifestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManifestArrayInput)(nil)).Elem(), ManifestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlatformInput)(nil)).Elem(), PlatformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryAuthInput)(nil)).Elem(), RegistryAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryAuthArrayInput)(nil)).Elem(), RegistryAuthArray{})
	pulumi.RegisterOutputType(ManifestOutput{})
	pulumi.RegisterOutputType(ManifestArrayOutput{})
	pulumi.RegisterOutputType(PlatformOutput{})
	pulumi.RegisterOutputType(RegistryAuthOutput{})
	pulumi.RegisterOutputType(RegistryAuthArrayOutput{})
}
