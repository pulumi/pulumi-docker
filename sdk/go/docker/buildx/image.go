// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package buildx

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-docker/sdk/v4/go/docker/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Docker image built using Buildkit
type Image struct {
	pulumi.CustomResourceState

	// The image's architecture
	Architecture pulumi.StringPtrOutput `pulumi:"architecture"`
	// Contexts to use while building the image. If omitted, an empty context is used. If more than one value is specified, they should be of the form "name=value"
	Context pulumi.StringArrayOutput `pulumi:"context"`
	// Name and optionally a tag (format: "name:tag"). If outputting to a registry, the name should include the fully qualified registry address.
	Exports pulumi.StringArrayOutput `pulumi:"exports"`
	// Name of the Dockerfile to use (default: "$PATH/Dockerfile").
	File pulumi.StringPtrOutput `pulumi:"file"`
	// The image's operating system
	Os pulumi.StringPtrOutput `pulumi:"os"`
	// Registry digests
	RepoDigests pulumi.StringArrayOutput `pulumi:"repoDigests"`
	// Registry tags
	RepoTags pulumi.StringArrayOutput `pulumi:"repoTags"`
	// Size of the image in bytes
	Size pulumi.IntPtrOutput `pulumi:"size"`
	// Name and optionally a tag (format: "name:tag"). If outputting to a registry, the name should include the fully qualified registry address.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewImage registers a new resource with the given unique name, arguments, and options.
func NewImage(ctx *pulumi.Context,
	name string, args *ImageArgs, opts ...pulumi.ResourceOption) (*Image, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Tags == nil {
		return nil, errors.New("invalid value for required argument 'Tags'")
	}
	if args.File == nil {
		args.File = pulumi.StringPtr("Dockerfile")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Image
	err := ctx.RegisterResource("docker:buildx/image:Image", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImage gets an existing Image resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageState, opts ...pulumi.ResourceOption) (*Image, error) {
	var resource Image
	err := ctx.ReadResource("docker:buildx/image:Image", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Image resources.
type imageState struct {
}

type ImageState struct {
}

func (ImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageState)(nil)).Elem()
}

type imageArgs struct {
	// Contexts to use while building the image. If omitted, an empty context is used. If more than one value is specified, they should be of the form "name=value"
	Context []string `pulumi:"context"`
	// Name and optionally a tag (format: "name:tag"). If outputting to a registry, the name should include the fully qualified registry address.
	Exports []string `pulumi:"exports"`
	// Name of the Dockerfile to use (default: "$PATH/Dockerfile").
	File *string `pulumi:"file"`
	// Name and optionally a tag (format: "name:tag"). If outputting to a registry, the name should include the fully qualified registry address.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a Image resource.
type ImageArgs struct {
	// Contexts to use while building the image. If omitted, an empty context is used. If more than one value is specified, they should be of the form "name=value"
	Context pulumi.StringArrayInput
	// Name and optionally a tag (format: "name:tag"). If outputting to a registry, the name should include the fully qualified registry address.
	Exports pulumi.StringArrayInput
	// Name of the Dockerfile to use (default: "$PATH/Dockerfile").
	File pulumi.StringPtrInput
	// Name and optionally a tag (format: "name:tag"). If outputting to a registry, the name should include the fully qualified registry address.
	Tags pulumi.StringArrayInput
}

func (ImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageArgs)(nil)).Elem()
}

type ImageInput interface {
	pulumi.Input

	ToImageOutput() ImageOutput
	ToImageOutputWithContext(ctx context.Context) ImageOutput
}

func (*Image) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (i *Image) ToImageOutput() ImageOutput {
	return i.ToImageOutputWithContext(context.Background())
}

func (i *Image) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput)
}

// ImageArrayInput is an input type that accepts ImageArray and ImageArrayOutput values.
// You can construct a concrete instance of `ImageArrayInput` via:
//
//	ImageArray{ ImageArgs{...} }
type ImageArrayInput interface {
	pulumi.Input

	ToImageArrayOutput() ImageArrayOutput
	ToImageArrayOutputWithContext(context.Context) ImageArrayOutput
}

type ImageArray []ImageInput

func (ImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (i ImageArray) ToImageArrayOutput() ImageArrayOutput {
	return i.ToImageArrayOutputWithContext(context.Background())
}

func (i ImageArray) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageArrayOutput)
}

// ImageMapInput is an input type that accepts ImageMap and ImageMapOutput values.
// You can construct a concrete instance of `ImageMapInput` via:
//
//	ImageMap{ "key": ImageArgs{...} }
type ImageMapInput interface {
	pulumi.Input

	ToImageMapOutput() ImageMapOutput
	ToImageMapOutputWithContext(context.Context) ImageMapOutput
}

type ImageMap map[string]ImageInput

func (ImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (i ImageMap) ToImageMapOutput() ImageMapOutput {
	return i.ToImageMapOutputWithContext(context.Background())
}

func (i ImageMap) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageMapOutput)
}

type ImageOutput struct{ *pulumi.OutputState }

func (ImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (o ImageOutput) ToImageOutput() ImageOutput {
	return o
}

func (o ImageOutput) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return o
}

// The image's architecture
func (o ImageOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.StringPtrOutput { return v.Architecture }).(pulumi.StringPtrOutput)
}

// Contexts to use while building the image. If omitted, an empty context is used. If more than one value is specified, they should be of the form "name=value"
func (o ImageOutput) Context() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Image) pulumi.StringArrayOutput { return v.Context }).(pulumi.StringArrayOutput)
}

// Name and optionally a tag (format: "name:tag"). If outputting to a registry, the name should include the fully qualified registry address.
func (o ImageOutput) Exports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Image) pulumi.StringArrayOutput { return v.Exports }).(pulumi.StringArrayOutput)
}

// Name of the Dockerfile to use (default: "$PATH/Dockerfile").
func (o ImageOutput) File() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.StringPtrOutput { return v.File }).(pulumi.StringPtrOutput)
}

// The image's operating system
func (o ImageOutput) Os() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.StringPtrOutput { return v.Os }).(pulumi.StringPtrOutput)
}

// Registry digests
func (o ImageOutput) RepoDigests() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Image) pulumi.StringArrayOutput { return v.RepoDigests }).(pulumi.StringArrayOutput)
}

// Registry tags
func (o ImageOutput) RepoTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Image) pulumi.StringArrayOutput { return v.RepoTags }).(pulumi.StringArrayOutput)
}

// Size of the image in bytes
func (o ImageOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.IntPtrOutput { return v.Size }).(pulumi.IntPtrOutput)
}

// Name and optionally a tag (format: "name:tag"). If outputting to a registry, the name should include the fully qualified registry address.
func (o ImageOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Image) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type ImageArrayOutput struct{ *pulumi.OutputState }

func (ImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (o ImageArrayOutput) ToImageArrayOutput() ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) Index(i pulumi.IntInput) ImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Image {
		return vs[0].([]*Image)[vs[1].(int)]
	}).(ImageOutput)
}

type ImageMapOutput struct{ *pulumi.OutputState }

func (ImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (o ImageMapOutput) ToImageMapOutput() ImageMapOutput {
	return o
}

func (o ImageMapOutput) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return o
}

func (o ImageMapOutput) MapIndex(k pulumi.StringInput) ImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Image {
		return vs[0].(map[string]*Image)[vs[1].(string)]
	}).(ImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageInput)(nil)).Elem(), &Image{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageArrayInput)(nil)).Elem(), ImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageMapInput)(nil)).Elem(), ImageMap{})
	pulumi.RegisterOutputType(ImageOutput{})
	pulumi.RegisterOutputType(ImageArrayOutput{})
	pulumi.RegisterOutputType(ImageMapOutput{})
}
