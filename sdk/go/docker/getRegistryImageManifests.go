// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package docker

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-docker/sdk/v4/go/docker/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Reads the image metadata for each manifest in a Docker multi-arch image from a Docker Registry.
func GetRegistryImageManifests(ctx *pulumi.Context, args *GetRegistryImageManifestsArgs, opts ...pulumi.InvokeOption) (*GetRegistryImageManifestsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRegistryImageManifestsResult
	err := ctx.Invoke("docker:index/getRegistryImageManifests:getRegistryImageManifests", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRegistryImageManifests.
type GetRegistryImageManifestsArgs struct {
	// Authentication configuration for the Docker registry. It is only used for this resource.
	AuthConfig *GetRegistryImageManifestsAuthConfig `pulumi:"authConfig"`
	// If `true`, the verification of TLS certificates of the server/registry is disabled. Defaults to `false`
	InsecureSkipVerify *bool `pulumi:"insecureSkipVerify"`
	// The name of the Docker image, including any tags. e.g. `alpine:latest`
	Name string `pulumi:"name"`
}

// A collection of values returned by getRegistryImageManifests.
type GetRegistryImageManifestsResult struct {
	// Authentication configuration for the Docker registry. It is only used for this resource.
	AuthConfig *GetRegistryImageManifestsAuthConfig `pulumi:"authConfig"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// If `true`, the verification of TLS certificates of the server/registry is disabled. Defaults to `false`
	InsecureSkipVerify *bool `pulumi:"insecureSkipVerify"`
	// The metadata for each manifest in the image
	Manifests []GetRegistryImageManifestsManifest `pulumi:"manifests"`
	// The name of the Docker image, including any tags. e.g. `alpine:latest`
	Name string `pulumi:"name"`
}

func GetRegistryImageManifestsOutput(ctx *pulumi.Context, args GetRegistryImageManifestsOutputArgs, opts ...pulumi.InvokeOption) GetRegistryImageManifestsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetRegistryImageManifestsResultOutput, error) {
			args := v.(GetRegistryImageManifestsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("docker:index/getRegistryImageManifests:getRegistryImageManifests", args, GetRegistryImageManifestsResultOutput{}, options).(GetRegistryImageManifestsResultOutput), nil
		}).(GetRegistryImageManifestsResultOutput)
}

// A collection of arguments for invoking getRegistryImageManifests.
type GetRegistryImageManifestsOutputArgs struct {
	// Authentication configuration for the Docker registry. It is only used for this resource.
	AuthConfig GetRegistryImageManifestsAuthConfigPtrInput `pulumi:"authConfig"`
	// If `true`, the verification of TLS certificates of the server/registry is disabled. Defaults to `false`
	InsecureSkipVerify pulumi.BoolPtrInput `pulumi:"insecureSkipVerify"`
	// The name of the Docker image, including any tags. e.g. `alpine:latest`
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetRegistryImageManifestsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistryImageManifestsArgs)(nil)).Elem()
}

// A collection of values returned by getRegistryImageManifests.
type GetRegistryImageManifestsResultOutput struct{ *pulumi.OutputState }

func (GetRegistryImageManifestsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistryImageManifestsResult)(nil)).Elem()
}

func (o GetRegistryImageManifestsResultOutput) ToGetRegistryImageManifestsResultOutput() GetRegistryImageManifestsResultOutput {
	return o
}

func (o GetRegistryImageManifestsResultOutput) ToGetRegistryImageManifestsResultOutputWithContext(ctx context.Context) GetRegistryImageManifestsResultOutput {
	return o
}

// Authentication configuration for the Docker registry. It is only used for this resource.
func (o GetRegistryImageManifestsResultOutput) AuthConfig() GetRegistryImageManifestsAuthConfigPtrOutput {
	return o.ApplyT(func(v GetRegistryImageManifestsResult) *GetRegistryImageManifestsAuthConfig { return v.AuthConfig }).(GetRegistryImageManifestsAuthConfigPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetRegistryImageManifestsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegistryImageManifestsResult) string { return v.Id }).(pulumi.StringOutput)
}

// If `true`, the verification of TLS certificates of the server/registry is disabled. Defaults to `false`
func (o GetRegistryImageManifestsResultOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetRegistryImageManifestsResult) *bool { return v.InsecureSkipVerify }).(pulumi.BoolPtrOutput)
}

// The metadata for each manifest in the image
func (o GetRegistryImageManifestsResultOutput) Manifests() GetRegistryImageManifestsManifestArrayOutput {
	return o.ApplyT(func(v GetRegistryImageManifestsResult) []GetRegistryImageManifestsManifest { return v.Manifests }).(GetRegistryImageManifestsManifestArrayOutput)
}

// The name of the Docker image, including any tags. e.g. `alpine:latest`
func (o GetRegistryImageManifestsResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegistryImageManifestsResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRegistryImageManifestsResultOutput{})
}
