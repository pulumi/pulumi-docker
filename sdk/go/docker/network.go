// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package docker

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Docker Network. This can be used alongside
// [docker\_container](https://www.terraform.io/docs/providers/docker/r/container.html)
// to create virtual networks within the docker environment.
type Network struct {
	s *pulumi.ResourceState
}

// NewNetwork registers a new resource with the given unique name, arguments, and options.
func NewNetwork(ctx *pulumi.Context,
	name string, args *NetworkArgs, opts ...pulumi.ResourceOpt) (*Network, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["attachable"] = nil
		inputs["checkDuplicate"] = nil
		inputs["driver"] = nil
		inputs["ingress"] = nil
		inputs["internal"] = nil
		inputs["ipamConfigs"] = nil
		inputs["ipamDriver"] = nil
		inputs["ipv6"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["options"] = nil
	} else {
		inputs["attachable"] = args.Attachable
		inputs["checkDuplicate"] = args.CheckDuplicate
		inputs["driver"] = args.Driver
		inputs["ingress"] = args.Ingress
		inputs["internal"] = args.Internal
		inputs["ipamConfigs"] = args.IpamConfigs
		inputs["ipamDriver"] = args.IpamDriver
		inputs["ipv6"] = args.Ipv6
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["options"] = args.Options
	}
	inputs["scope"] = nil
	s, err := ctx.RegisterResource("docker:index/network:Network", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Network{s: s}, nil
}

// GetNetwork gets an existing Network resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetwork(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NetworkState, opts ...pulumi.ResourceOpt) (*Network, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["attachable"] = state.Attachable
		inputs["checkDuplicate"] = state.CheckDuplicate
		inputs["driver"] = state.Driver
		inputs["ingress"] = state.Ingress
		inputs["internal"] = state.Internal
		inputs["ipamConfigs"] = state.IpamConfigs
		inputs["ipamDriver"] = state.IpamDriver
		inputs["ipv6"] = state.Ipv6
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["options"] = state.Options
		inputs["scope"] = state.Scope
	}
	s, err := ctx.ReadResource("docker:index/network:Network", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Network{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Network) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Network) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Enable manual container attachment to the network.
// Defaults to `false`.
func (r *Network) Attachable() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["attachable"])
}

// Requests daemon to check for networks
// with same name.
func (r *Network) CheckDuplicate() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["checkDuplicate"])
}

// Name of the network driver to use. Defaults to
// `bridge` driver.
func (r *Network) Driver() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["driver"])
}

// Create swarm routing-mesh network.
// Defaults to `false`.
func (r *Network) Ingress() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["ingress"])
}

// Restrict external access to the network.
// Defaults to `false`.
func (r *Network) Internal() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["internal"])
}

// See IPAM config below for
// details.
func (r *Network) IpamConfigs() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["ipamConfigs"])
}

// Driver used by the custom IP scheme of the
// network.
func (r *Network) IpamDriver() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipamDriver"])
}

// Enable IPv6 networking.
// Defaults to `false`.
func (r *Network) Ipv6() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["ipv6"])
}

// User-defined key/value metadata.
func (r *Network) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

// The name of the Docker network.
func (r *Network) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Network specific options to be used by
// the drivers.
func (r *Network) Options() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["options"])
}

func (r *Network) Scope() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["scope"])
}

// Input properties used for looking up and filtering Network resources.
type NetworkState struct {
	// Enable manual container attachment to the network.
	// Defaults to `false`.
	Attachable interface{}
	// Requests daemon to check for networks
	// with same name.
	CheckDuplicate interface{}
	// Name of the network driver to use. Defaults to
	// `bridge` driver.
	Driver interface{}
	// Create swarm routing-mesh network.
	// Defaults to `false`.
	Ingress interface{}
	// Restrict external access to the network.
	// Defaults to `false`.
	Internal interface{}
	// See IPAM config below for
	// details.
	IpamConfigs interface{}
	// Driver used by the custom IP scheme of the
	// network.
	IpamDriver interface{}
	// Enable IPv6 networking.
	// Defaults to `false`.
	Ipv6 interface{}
	// User-defined key/value metadata.
	Labels interface{}
	// The name of the Docker network.
	Name interface{}
	// Network specific options to be used by
	// the drivers.
	Options interface{}
	Scope interface{}
}

// The set of arguments for constructing a Network resource.
type NetworkArgs struct {
	// Enable manual container attachment to the network.
	// Defaults to `false`.
	Attachable interface{}
	// Requests daemon to check for networks
	// with same name.
	CheckDuplicate interface{}
	// Name of the network driver to use. Defaults to
	// `bridge` driver.
	Driver interface{}
	// Create swarm routing-mesh network.
	// Defaults to `false`.
	Ingress interface{}
	// Restrict external access to the network.
	// Defaults to `false`.
	Internal interface{}
	// See IPAM config below for
	// details.
	IpamConfigs interface{}
	// Driver used by the custom IP scheme of the
	// network.
	IpamDriver interface{}
	// Enable IPv6 networking.
	// Defaults to `false`.
	Ipv6 interface{}
	// User-defined key/value metadata.
	Labels interface{}
	// The name of the Docker network.
	Name interface{}
	// Network specific options to be used by
	// the drivers.
	Options interface{}
}
