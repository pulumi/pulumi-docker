// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package docker

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `RemoteImage` provides details about a specific Docker Image which need to be presend on the Docker Host
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-docker/sdk/v3/go/docker"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := docker.LookupRemoteImage(ctx, &docker.LookupRemoteImageArgs{
// 			Name: "nginx",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = docker.LookupRemoteImage(ctx, &docker.LookupRemoteImageArgs{
// 			Name: "nginx:1.17.6",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = docker.LookupRemoteImage(ctx, &docker.LookupRemoteImageArgs{
// 			Name: "nginx@sha256:36b74457bccb56fbf8b05f79c85569501b721d4db813b684391d63e02287c0b2",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = docker.LookupRemoteImage(ctx, &docker.LookupRemoteImageArgs{
// 			Name: "nginx:1.19.1@sha256:36b74457bccb56fbf8b05f79c85569501b721d4db813b684391d63e02287c0b2",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// <!-- schema generated by tfplugindocs -->
// ## Schema
//
// ### Required
//
// - **name** (String) The name of the Docker image, including any tags or SHA256 repo digests.
//
// ### Optional
//
// - **id** (String) The ID of this resource.
//
// ### Read-Only
//
// - **repo_digest** (String) The image sha256 digest in the form of `repo[:tag]@sha256:<hash>`. It may be empty in the edge case where the local image was pulled from a repo, tagged locally, and then referred to in the data source by that local name/tag.
func LookupRemoteImage(ctx *pulumi.Context, args *LookupRemoteImageArgs, opts ...pulumi.InvokeOption) (*LookupRemoteImageResult, error) {
	var rv LookupRemoteImageResult
	err := ctx.Invoke("docker:index/getRemoteImage:getRemoteImage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRemoteImage.
type LookupRemoteImageArgs struct {
	Name string `pulumi:"name"`
}

// A collection of values returned by getRemoteImage.
type LookupRemoteImageResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	Name       string `pulumi:"name"`
	RepoDigest string `pulumi:"repoDigest"`
}
