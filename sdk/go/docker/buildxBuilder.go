// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package docker

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-docker/sdk/v4/go/docker/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Docker Buildx builder instance. This resource allows you to create a  buildx builder with various configurations such as driver, nodes, and platform settings. Please see https://github.com/docker/buildx/blob/master/docs/reference/buildx_create.md for more documentation
type BuildxBuilder struct {
	pulumi.CustomResourceState

	// Append a node to builder instead of changing it
	Append pulumi.BoolPtrOutput `pulumi:"append"`
	// Automatically boot the builder after creation. Defaults to `false`
	Bootstrap pulumi.BoolPtrOutput `pulumi:"bootstrap"`
	// BuildKit daemon config file
	BuildkitConfig pulumi.StringPtrOutput `pulumi:"buildkitConfig"`
	// BuildKit flags to set for the builder.
	BuildkitFlags pulumi.StringPtrOutput `pulumi:"buildkitFlags"`
	// Configuration block for the Docker-Container driver.
	DockerContainer BuildxBuilderDockerContainerPtrOutput `pulumi:"dockerContainer"`
	// The driver to use for the Buildx builder (e.g., docker-container, kubernetes).
	Driver pulumi.StringPtrOutput `pulumi:"driver"`
	// Additional options for the Buildx driver in the form of `key=value,...`. These options are driver-specific.
	DriverOptions pulumi.StringMapOutput `pulumi:"driverOptions"`
	// The endpoint or context to use for the Buildx builder, where context is the name of a context from docker context ls and endpoint is the address for Docker socket (eg. DOCKER_HOST value). By default, the current Docker configuration is used for determining the context/endpoint value.
	Endpoint pulumi.StringPtrOutput `pulumi:"endpoint"`
	// Configuration block for the Kubernetes driver.
	Kubernetes BuildxBuilderKubernetesPtrOutput `pulumi:"kubernetes"`
	// The name of the Buildx builder. IF not specified, a random name will be generated.
	Name pulumi.StringOutput `pulumi:"name"`
	// Create/modify node with given name
	Node pulumi.StringPtrOutput `pulumi:"node"`
	// Fixed platforms for current node
	Platforms pulumi.StringArrayOutput `pulumi:"platforms"`
	// Configuration block for the Remote driver.
	Remote BuildxBuilderRemotePtrOutput `pulumi:"remote"`
	// Set the current builder instance as the default for the current context.
	Use pulumi.BoolPtrOutput `pulumi:"use"`
}

// NewBuildxBuilder registers a new resource with the given unique name, arguments, and options.
func NewBuildxBuilder(ctx *pulumi.Context,
	name string, args *BuildxBuilderArgs, opts ...pulumi.ResourceOption) (*BuildxBuilder, error) {
	if args == nil {
		args = &BuildxBuilderArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BuildxBuilder
	err := ctx.RegisterResource("docker:index/buildxBuilder:BuildxBuilder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBuildxBuilder gets an existing BuildxBuilder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBuildxBuilder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BuildxBuilderState, opts ...pulumi.ResourceOption) (*BuildxBuilder, error) {
	var resource BuildxBuilder
	err := ctx.ReadResource("docker:index/buildxBuilder:BuildxBuilder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BuildxBuilder resources.
type buildxBuilderState struct {
	// Append a node to builder instead of changing it
	Append *bool `pulumi:"append"`
	// Automatically boot the builder after creation. Defaults to `false`
	Bootstrap *bool `pulumi:"bootstrap"`
	// BuildKit daemon config file
	BuildkitConfig *string `pulumi:"buildkitConfig"`
	// BuildKit flags to set for the builder.
	BuildkitFlags *string `pulumi:"buildkitFlags"`
	// Configuration block for the Docker-Container driver.
	DockerContainer *BuildxBuilderDockerContainer `pulumi:"dockerContainer"`
	// The driver to use for the Buildx builder (e.g., docker-container, kubernetes).
	Driver *string `pulumi:"driver"`
	// Additional options for the Buildx driver in the form of `key=value,...`. These options are driver-specific.
	DriverOptions map[string]string `pulumi:"driverOptions"`
	// The endpoint or context to use for the Buildx builder, where context is the name of a context from docker context ls and endpoint is the address for Docker socket (eg. DOCKER_HOST value). By default, the current Docker configuration is used for determining the context/endpoint value.
	Endpoint *string `pulumi:"endpoint"`
	// Configuration block for the Kubernetes driver.
	Kubernetes *BuildxBuilderKubernetes `pulumi:"kubernetes"`
	// The name of the Buildx builder. IF not specified, a random name will be generated.
	Name *string `pulumi:"name"`
	// Create/modify node with given name
	Node *string `pulumi:"node"`
	// Fixed platforms for current node
	Platforms []string `pulumi:"platforms"`
	// Configuration block for the Remote driver.
	Remote *BuildxBuilderRemote `pulumi:"remote"`
	// Set the current builder instance as the default for the current context.
	Use *bool `pulumi:"use"`
}

type BuildxBuilderState struct {
	// Append a node to builder instead of changing it
	Append pulumi.BoolPtrInput
	// Automatically boot the builder after creation. Defaults to `false`
	Bootstrap pulumi.BoolPtrInput
	// BuildKit daemon config file
	BuildkitConfig pulumi.StringPtrInput
	// BuildKit flags to set for the builder.
	BuildkitFlags pulumi.StringPtrInput
	// Configuration block for the Docker-Container driver.
	DockerContainer BuildxBuilderDockerContainerPtrInput
	// The driver to use for the Buildx builder (e.g., docker-container, kubernetes).
	Driver pulumi.StringPtrInput
	// Additional options for the Buildx driver in the form of `key=value,...`. These options are driver-specific.
	DriverOptions pulumi.StringMapInput
	// The endpoint or context to use for the Buildx builder, where context is the name of a context from docker context ls and endpoint is the address for Docker socket (eg. DOCKER_HOST value). By default, the current Docker configuration is used for determining the context/endpoint value.
	Endpoint pulumi.StringPtrInput
	// Configuration block for the Kubernetes driver.
	Kubernetes BuildxBuilderKubernetesPtrInput
	// The name of the Buildx builder. IF not specified, a random name will be generated.
	Name pulumi.StringPtrInput
	// Create/modify node with given name
	Node pulumi.StringPtrInput
	// Fixed platforms for current node
	Platforms pulumi.StringArrayInput
	// Configuration block for the Remote driver.
	Remote BuildxBuilderRemotePtrInput
	// Set the current builder instance as the default for the current context.
	Use pulumi.BoolPtrInput
}

func (BuildxBuilderState) ElementType() reflect.Type {
	return reflect.TypeOf((*buildxBuilderState)(nil)).Elem()
}

type buildxBuilderArgs struct {
	// Append a node to builder instead of changing it
	Append *bool `pulumi:"append"`
	// Automatically boot the builder after creation. Defaults to `false`
	Bootstrap *bool `pulumi:"bootstrap"`
	// BuildKit daemon config file
	BuildkitConfig *string `pulumi:"buildkitConfig"`
	// BuildKit flags to set for the builder.
	BuildkitFlags *string `pulumi:"buildkitFlags"`
	// Configuration block for the Docker-Container driver.
	DockerContainer *BuildxBuilderDockerContainer `pulumi:"dockerContainer"`
	// The driver to use for the Buildx builder (e.g., docker-container, kubernetes).
	Driver *string `pulumi:"driver"`
	// Additional options for the Buildx driver in the form of `key=value,...`. These options are driver-specific.
	DriverOptions map[string]string `pulumi:"driverOptions"`
	// The endpoint or context to use for the Buildx builder, where context is the name of a context from docker context ls and endpoint is the address for Docker socket (eg. DOCKER_HOST value). By default, the current Docker configuration is used for determining the context/endpoint value.
	Endpoint *string `pulumi:"endpoint"`
	// Configuration block for the Kubernetes driver.
	Kubernetes *BuildxBuilderKubernetes `pulumi:"kubernetes"`
	// The name of the Buildx builder. IF not specified, a random name will be generated.
	Name *string `pulumi:"name"`
	// Create/modify node with given name
	Node *string `pulumi:"node"`
	// Fixed platforms for current node
	Platforms []string `pulumi:"platforms"`
	// Configuration block for the Remote driver.
	Remote *BuildxBuilderRemote `pulumi:"remote"`
	// Set the current builder instance as the default for the current context.
	Use *bool `pulumi:"use"`
}

// The set of arguments for constructing a BuildxBuilder resource.
type BuildxBuilderArgs struct {
	// Append a node to builder instead of changing it
	Append pulumi.BoolPtrInput
	// Automatically boot the builder after creation. Defaults to `false`
	Bootstrap pulumi.BoolPtrInput
	// BuildKit daemon config file
	BuildkitConfig pulumi.StringPtrInput
	// BuildKit flags to set for the builder.
	BuildkitFlags pulumi.StringPtrInput
	// Configuration block for the Docker-Container driver.
	DockerContainer BuildxBuilderDockerContainerPtrInput
	// The driver to use for the Buildx builder (e.g., docker-container, kubernetes).
	Driver pulumi.StringPtrInput
	// Additional options for the Buildx driver in the form of `key=value,...`. These options are driver-specific.
	DriverOptions pulumi.StringMapInput
	// The endpoint or context to use for the Buildx builder, where context is the name of a context from docker context ls and endpoint is the address for Docker socket (eg. DOCKER_HOST value). By default, the current Docker configuration is used for determining the context/endpoint value.
	Endpoint pulumi.StringPtrInput
	// Configuration block for the Kubernetes driver.
	Kubernetes BuildxBuilderKubernetesPtrInput
	// The name of the Buildx builder. IF not specified, a random name will be generated.
	Name pulumi.StringPtrInput
	// Create/modify node with given name
	Node pulumi.StringPtrInput
	// Fixed platforms for current node
	Platforms pulumi.StringArrayInput
	// Configuration block for the Remote driver.
	Remote BuildxBuilderRemotePtrInput
	// Set the current builder instance as the default for the current context.
	Use pulumi.BoolPtrInput
}

func (BuildxBuilderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*buildxBuilderArgs)(nil)).Elem()
}

type BuildxBuilderInput interface {
	pulumi.Input

	ToBuildxBuilderOutput() BuildxBuilderOutput
	ToBuildxBuilderOutputWithContext(ctx context.Context) BuildxBuilderOutput
}

func (*BuildxBuilder) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildxBuilder)(nil)).Elem()
}

func (i *BuildxBuilder) ToBuildxBuilderOutput() BuildxBuilderOutput {
	return i.ToBuildxBuilderOutputWithContext(context.Background())
}

func (i *BuildxBuilder) ToBuildxBuilderOutputWithContext(ctx context.Context) BuildxBuilderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildxBuilderOutput)
}

// BuildxBuilderArrayInput is an input type that accepts BuildxBuilderArray and BuildxBuilderArrayOutput values.
// You can construct a concrete instance of `BuildxBuilderArrayInput` via:
//
//	BuildxBuilderArray{ BuildxBuilderArgs{...} }
type BuildxBuilderArrayInput interface {
	pulumi.Input

	ToBuildxBuilderArrayOutput() BuildxBuilderArrayOutput
	ToBuildxBuilderArrayOutputWithContext(context.Context) BuildxBuilderArrayOutput
}

type BuildxBuilderArray []BuildxBuilderInput

func (BuildxBuilderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BuildxBuilder)(nil)).Elem()
}

func (i BuildxBuilderArray) ToBuildxBuilderArrayOutput() BuildxBuilderArrayOutput {
	return i.ToBuildxBuilderArrayOutputWithContext(context.Background())
}

func (i BuildxBuilderArray) ToBuildxBuilderArrayOutputWithContext(ctx context.Context) BuildxBuilderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildxBuilderArrayOutput)
}

// BuildxBuilderMapInput is an input type that accepts BuildxBuilderMap and BuildxBuilderMapOutput values.
// You can construct a concrete instance of `BuildxBuilderMapInput` via:
//
//	BuildxBuilderMap{ "key": BuildxBuilderArgs{...} }
type BuildxBuilderMapInput interface {
	pulumi.Input

	ToBuildxBuilderMapOutput() BuildxBuilderMapOutput
	ToBuildxBuilderMapOutputWithContext(context.Context) BuildxBuilderMapOutput
}

type BuildxBuilderMap map[string]BuildxBuilderInput

func (BuildxBuilderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BuildxBuilder)(nil)).Elem()
}

func (i BuildxBuilderMap) ToBuildxBuilderMapOutput() BuildxBuilderMapOutput {
	return i.ToBuildxBuilderMapOutputWithContext(context.Background())
}

func (i BuildxBuilderMap) ToBuildxBuilderMapOutputWithContext(ctx context.Context) BuildxBuilderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildxBuilderMapOutput)
}

type BuildxBuilderOutput struct{ *pulumi.OutputState }

func (BuildxBuilderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildxBuilder)(nil)).Elem()
}

func (o BuildxBuilderOutput) ToBuildxBuilderOutput() BuildxBuilderOutput {
	return o
}

func (o BuildxBuilderOutput) ToBuildxBuilderOutputWithContext(ctx context.Context) BuildxBuilderOutput {
	return o
}

// Append a node to builder instead of changing it
func (o BuildxBuilderOutput) Append() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BuildxBuilder) pulumi.BoolPtrOutput { return v.Append }).(pulumi.BoolPtrOutput)
}

// Automatically boot the builder after creation. Defaults to `false`
func (o BuildxBuilderOutput) Bootstrap() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BuildxBuilder) pulumi.BoolPtrOutput { return v.Bootstrap }).(pulumi.BoolPtrOutput)
}

// BuildKit daemon config file
func (o BuildxBuilderOutput) BuildkitConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildxBuilder) pulumi.StringPtrOutput { return v.BuildkitConfig }).(pulumi.StringPtrOutput)
}

// BuildKit flags to set for the builder.
func (o BuildxBuilderOutput) BuildkitFlags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildxBuilder) pulumi.StringPtrOutput { return v.BuildkitFlags }).(pulumi.StringPtrOutput)
}

// Configuration block for the Docker-Container driver.
func (o BuildxBuilderOutput) DockerContainer() BuildxBuilderDockerContainerPtrOutput {
	return o.ApplyT(func(v *BuildxBuilder) BuildxBuilderDockerContainerPtrOutput { return v.DockerContainer }).(BuildxBuilderDockerContainerPtrOutput)
}

// The driver to use for the Buildx builder (e.g., docker-container, kubernetes).
func (o BuildxBuilderOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildxBuilder) pulumi.StringPtrOutput { return v.Driver }).(pulumi.StringPtrOutput)
}

// Additional options for the Buildx driver in the form of `key=value,...`. These options are driver-specific.
func (o BuildxBuilderOutput) DriverOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BuildxBuilder) pulumi.StringMapOutput { return v.DriverOptions }).(pulumi.StringMapOutput)
}

// The endpoint or context to use for the Buildx builder, where context is the name of a context from docker context ls and endpoint is the address for Docker socket (eg. DOCKER_HOST value). By default, the current Docker configuration is used for determining the context/endpoint value.
func (o BuildxBuilderOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildxBuilder) pulumi.StringPtrOutput { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Configuration block for the Kubernetes driver.
func (o BuildxBuilderOutput) Kubernetes() BuildxBuilderKubernetesPtrOutput {
	return o.ApplyT(func(v *BuildxBuilder) BuildxBuilderKubernetesPtrOutput { return v.Kubernetes }).(BuildxBuilderKubernetesPtrOutput)
}

// The name of the Buildx builder. IF not specified, a random name will be generated.
func (o BuildxBuilderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BuildxBuilder) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Create/modify node with given name
func (o BuildxBuilderOutput) Node() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildxBuilder) pulumi.StringPtrOutput { return v.Node }).(pulumi.StringPtrOutput)
}

// Fixed platforms for current node
func (o BuildxBuilderOutput) Platforms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BuildxBuilder) pulumi.StringArrayOutput { return v.Platforms }).(pulumi.StringArrayOutput)
}

// Configuration block for the Remote driver.
func (o BuildxBuilderOutput) Remote() BuildxBuilderRemotePtrOutput {
	return o.ApplyT(func(v *BuildxBuilder) BuildxBuilderRemotePtrOutput { return v.Remote }).(BuildxBuilderRemotePtrOutput)
}

// Set the current builder instance as the default for the current context.
func (o BuildxBuilderOutput) Use() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BuildxBuilder) pulumi.BoolPtrOutput { return v.Use }).(pulumi.BoolPtrOutput)
}

type BuildxBuilderArrayOutput struct{ *pulumi.OutputState }

func (BuildxBuilderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BuildxBuilder)(nil)).Elem()
}

func (o BuildxBuilderArrayOutput) ToBuildxBuilderArrayOutput() BuildxBuilderArrayOutput {
	return o
}

func (o BuildxBuilderArrayOutput) ToBuildxBuilderArrayOutputWithContext(ctx context.Context) BuildxBuilderArrayOutput {
	return o
}

func (o BuildxBuilderArrayOutput) Index(i pulumi.IntInput) BuildxBuilderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BuildxBuilder {
		return vs[0].([]*BuildxBuilder)[vs[1].(int)]
	}).(BuildxBuilderOutput)
}

type BuildxBuilderMapOutput struct{ *pulumi.OutputState }

func (BuildxBuilderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BuildxBuilder)(nil)).Elem()
}

func (o BuildxBuilderMapOutput) ToBuildxBuilderMapOutput() BuildxBuilderMapOutput {
	return o
}

func (o BuildxBuilderMapOutput) ToBuildxBuilderMapOutputWithContext(ctx context.Context) BuildxBuilderMapOutput {
	return o
}

func (o BuildxBuilderMapOutput) MapIndex(k pulumi.StringInput) BuildxBuilderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BuildxBuilder {
		return vs[0].(map[string]*BuildxBuilder)[vs[1].(string)]
	}).(BuildxBuilderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BuildxBuilderInput)(nil)).Elem(), &BuildxBuilder{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildxBuilderArrayInput)(nil)).Elem(), BuildxBuilderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildxBuilderMapInput)(nil)).Elem(), BuildxBuilderMap{})
	pulumi.RegisterOutputType(BuildxBuilderOutput{})
	pulumi.RegisterOutputType(BuildxBuilderArrayOutput{})
	pulumi.RegisterOutputType(BuildxBuilderMapOutput{})
}
