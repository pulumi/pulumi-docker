// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package docker

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Reads the local Docker plugin. The plugin must be installed locally.
//
// ## Example Usage
//
// ### With alias
// data "Plugin" "byAlias" {
//   alias = "sample-volume-plugin:latest"
// }
func LookupPlugin(ctx *pulumi.Context, args *LookupPluginArgs, opts ...pulumi.InvokeOption) (*LookupPluginResult, error) {
	var rv LookupPluginResult
	err := ctx.Invoke("docker:index/getPlugin:getPlugin", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPlugin.
type LookupPluginArgs struct {
	Alias *string `pulumi:"alias"`
	Id    *string `pulumi:"id"`
}

// A collection of values returned by getPlugin.
type LookupPluginResult struct {
	Alias               *string  `pulumi:"alias"`
	Enabled             bool     `pulumi:"enabled"`
	Envs                []string `pulumi:"envs"`
	GrantAllPermissions bool     `pulumi:"grantAllPermissions"`
	Id                  *string  `pulumi:"id"`
	Name                string   `pulumi:"name"`
	PluginReference     string   `pulumi:"pluginReference"`
}

func LookupPluginOutput(ctx *pulumi.Context, args LookupPluginOutputArgs, opts ...pulumi.InvokeOption) LookupPluginResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPluginResult, error) {
			args := v.(LookupPluginArgs)
			r, err := LookupPlugin(ctx, &args, opts...)
			var s LookupPluginResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPluginResultOutput)
}

// A collection of arguments for invoking getPlugin.
type LookupPluginOutputArgs struct {
	Alias pulumi.StringPtrInput `pulumi:"alias"`
	Id    pulumi.StringPtrInput `pulumi:"id"`
}

func (LookupPluginOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPluginArgs)(nil)).Elem()
}

// A collection of values returned by getPlugin.
type LookupPluginResultOutput struct{ *pulumi.OutputState }

func (LookupPluginResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPluginResult)(nil)).Elem()
}

func (o LookupPluginResultOutput) ToLookupPluginResultOutput() LookupPluginResultOutput {
	return o
}

func (o LookupPluginResultOutput) ToLookupPluginResultOutputWithContext(ctx context.Context) LookupPluginResultOutput {
	return o
}

func (o LookupPluginResultOutput) Alias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPluginResult) *string { return v.Alias }).(pulumi.StringPtrOutput)
}

func (o LookupPluginResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPluginResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o LookupPluginResultOutput) Envs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPluginResult) []string { return v.Envs }).(pulumi.StringArrayOutput)
}

func (o LookupPluginResultOutput) GrantAllPermissions() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPluginResult) bool { return v.GrantAllPermissions }).(pulumi.BoolOutput)
}

func (o LookupPluginResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPluginResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupPluginResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPluginResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupPluginResultOutput) PluginReference() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPluginResult) string { return v.PluginReference }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPluginResultOutput{})
}
