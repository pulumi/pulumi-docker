// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package docker

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-docker/sdk/v4/go/docker/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Reads the local Docker plugin. The plugin must be installed locally.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-docker/sdk/v4/go/docker"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// ## With alias
//			_, err := docker.LookupPlugin(ctx, &docker.LookupPluginArgs{
//				Alias: pulumi.StringRef("sample-volume-plugin:latest"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// ## With ID
//			_, err = docker.LookupPlugin(ctx, &docker.LookupPluginArgs{
//				Id: pulumi.StringRef("e9a9db917b3bfd6706b5d3a66d4bceb9f"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupPlugin(ctx *pulumi.Context, args *LookupPluginArgs, opts ...pulumi.InvokeOption) (*LookupPluginResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPluginResult
	err := ctx.Invoke("docker:index/getPlugin:getPlugin", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPlugin.
type LookupPluginArgs struct {
	// The alias of the Docker plugin. If the tag is omitted, `:latest` is complemented to the attribute value.
	Alias *string `pulumi:"alias"`
	// The ID of the plugin, which has precedence over the `alias` of both are given
	Id *string `pulumi:"id"`
}

// A collection of values returned by getPlugin.
type LookupPluginResult struct {
	// The alias of the Docker plugin. If the tag is omitted, `:latest` is complemented to the attribute value.
	Alias *string `pulumi:"alias"`
	// If `true` the plugin is enabled
	Enabled bool `pulumi:"enabled"`
	// The environment variables in the form of `KEY=VALUE`, e.g. `DEBUG=0`
	Envs []string `pulumi:"envs"`
	// If true, grant all permissions necessary to run the plugin
	GrantAllPermissions bool `pulumi:"grantAllPermissions"`
	// The ID of the plugin, which has precedence over the `alias` of both are given
	Id *string `pulumi:"id"`
	// The plugin name. If the tag is omitted, `:latest` is complemented to the attribute value.
	Name string `pulumi:"name"`
	// The Docker Plugin Reference
	PluginReference string `pulumi:"pluginReference"`
}

func LookupPluginOutput(ctx *pulumi.Context, args LookupPluginOutputArgs, opts ...pulumi.InvokeOption) LookupPluginResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPluginResultOutput, error) {
			args := v.(LookupPluginArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("docker:index/getPlugin:getPlugin", args, LookupPluginResultOutput{}, options).(LookupPluginResultOutput), nil
		}).(LookupPluginResultOutput)
}

// A collection of arguments for invoking getPlugin.
type LookupPluginOutputArgs struct {
	// The alias of the Docker plugin. If the tag is omitted, `:latest` is complemented to the attribute value.
	Alias pulumi.StringPtrInput `pulumi:"alias"`
	// The ID of the plugin, which has precedence over the `alias` of both are given
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (LookupPluginOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPluginArgs)(nil)).Elem()
}

// A collection of values returned by getPlugin.
type LookupPluginResultOutput struct{ *pulumi.OutputState }

func (LookupPluginResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPluginResult)(nil)).Elem()
}

func (o LookupPluginResultOutput) ToLookupPluginResultOutput() LookupPluginResultOutput {
	return o
}

func (o LookupPluginResultOutput) ToLookupPluginResultOutputWithContext(ctx context.Context) LookupPluginResultOutput {
	return o
}

// The alias of the Docker plugin. If the tag is omitted, `:latest` is complemented to the attribute value.
func (o LookupPluginResultOutput) Alias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPluginResult) *string { return v.Alias }).(pulumi.StringPtrOutput)
}

// If `true` the plugin is enabled
func (o LookupPluginResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPluginResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The environment variables in the form of `KEY=VALUE`, e.g. `DEBUG=0`
func (o LookupPluginResultOutput) Envs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPluginResult) []string { return v.Envs }).(pulumi.StringArrayOutput)
}

// If true, grant all permissions necessary to run the plugin
func (o LookupPluginResultOutput) GrantAllPermissions() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPluginResult) bool { return v.GrantAllPermissions }).(pulumi.BoolOutput)
}

// The ID of the plugin, which has precedence over the `alias` of both are given
func (o LookupPluginResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPluginResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The plugin name. If the tag is omitted, `:latest` is complemented to the attribute value.
func (o LookupPluginResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPluginResult) string { return v.Name }).(pulumi.StringOutput)
}

// The Docker Plugin Reference
func (o LookupPluginResultOutput) PluginReference() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPluginResult) string { return v.PluginReference }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPluginResultOutput{})
}
