// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package docker

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Reads the local Docker plugin. The plugin must be installed locally.
//
// ## Example Usage
//
// ### With alias
// data "Plugin" "byAlias" {
//   alias = "sample-volume-plugin:latest"
// }
// ## Schema
//
// ### Optional
//
// - **alias** (String) The alias of the Docker plugin. If the tag is omitted, `:latest` is complemented to the attribute value.
// - **id** (String) The ID of the plugin, which has precedence over the `alias` of both are given
//
// ### Read-Only
//
// - **enabled** (Boolean) If `true` the plugin is enabled
// - **env** (Set of String) The environment variables in the form of `KEY=VALUE`, e.g. `DEBUG=0`
// - **grant_all_permissions** (Boolean) If true, grant all permissions necessary to run the plugin
// - **name** (String) The plugin name. If the tag is omitted, `:latest` is complemented to the attribute value.
// - **plugin_reference** (String) The Docker Plugin Reference
func LookupPlugin(ctx *pulumi.Context, args *LookupPluginArgs, opts ...pulumi.InvokeOption) (*LookupPluginResult, error) {
	var rv LookupPluginResult
	err := ctx.Invoke("docker:index/getPlugin:getPlugin", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPlugin.
type LookupPluginArgs struct {
	Alias *string `pulumi:"alias"`
	Id    *string `pulumi:"id"`
}

// A collection of values returned by getPlugin.
type LookupPluginResult struct {
	Alias               *string  `pulumi:"alias"`
	Enabled             bool     `pulumi:"enabled"`
	Envs                []string `pulumi:"envs"`
	GrantAllPermissions bool     `pulumi:"grantAllPermissions"`
	Id                  *string  `pulumi:"id"`
	Name                string   `pulumi:"name"`
	PluginReference     string   `pulumi:"pluginReference"`
}
