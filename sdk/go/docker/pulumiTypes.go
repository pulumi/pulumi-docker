// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package docker

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-docker/sdk/v4/go/docker/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ContainerCapabilities struct {
	// List of linux capabilities to add.
	Adds []string `pulumi:"adds"`
	// List of linux capabilities to drop.
	Drops []string `pulumi:"drops"`
}

// ContainerCapabilitiesInput is an input type that accepts ContainerCapabilitiesArgs and ContainerCapabilitiesOutput values.
// You can construct a concrete instance of `ContainerCapabilitiesInput` via:
//
//	ContainerCapabilitiesArgs{...}
type ContainerCapabilitiesInput interface {
	pulumi.Input

	ToContainerCapabilitiesOutput() ContainerCapabilitiesOutput
	ToContainerCapabilitiesOutputWithContext(context.Context) ContainerCapabilitiesOutput
}

type ContainerCapabilitiesArgs struct {
	// List of linux capabilities to add.
	Adds pulumi.StringArrayInput `pulumi:"adds"`
	// List of linux capabilities to drop.
	Drops pulumi.StringArrayInput `pulumi:"drops"`
}

func (ContainerCapabilitiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerCapabilities)(nil)).Elem()
}

func (i ContainerCapabilitiesArgs) ToContainerCapabilitiesOutput() ContainerCapabilitiesOutput {
	return i.ToContainerCapabilitiesOutputWithContext(context.Background())
}

func (i ContainerCapabilitiesArgs) ToContainerCapabilitiesOutputWithContext(ctx context.Context) ContainerCapabilitiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerCapabilitiesOutput)
}

func (i ContainerCapabilitiesArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerCapabilities] {
	return pulumix.Output[ContainerCapabilities]{
		OutputState: i.ToContainerCapabilitiesOutputWithContext(ctx).OutputState,
	}
}

func (i ContainerCapabilitiesArgs) ToContainerCapabilitiesPtrOutput() ContainerCapabilitiesPtrOutput {
	return i.ToContainerCapabilitiesPtrOutputWithContext(context.Background())
}

func (i ContainerCapabilitiesArgs) ToContainerCapabilitiesPtrOutputWithContext(ctx context.Context) ContainerCapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerCapabilitiesOutput).ToContainerCapabilitiesPtrOutputWithContext(ctx)
}

// ContainerCapabilitiesPtrInput is an input type that accepts ContainerCapabilitiesArgs, ContainerCapabilitiesPtr and ContainerCapabilitiesPtrOutput values.
// You can construct a concrete instance of `ContainerCapabilitiesPtrInput` via:
//
//	        ContainerCapabilitiesArgs{...}
//
//	or:
//
//	        nil
type ContainerCapabilitiesPtrInput interface {
	pulumi.Input

	ToContainerCapabilitiesPtrOutput() ContainerCapabilitiesPtrOutput
	ToContainerCapabilitiesPtrOutputWithContext(context.Context) ContainerCapabilitiesPtrOutput
}

type containerCapabilitiesPtrType ContainerCapabilitiesArgs

func ContainerCapabilitiesPtr(v *ContainerCapabilitiesArgs) ContainerCapabilitiesPtrInput {
	return (*containerCapabilitiesPtrType)(v)
}

func (*containerCapabilitiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerCapabilities)(nil)).Elem()
}

func (i *containerCapabilitiesPtrType) ToContainerCapabilitiesPtrOutput() ContainerCapabilitiesPtrOutput {
	return i.ToContainerCapabilitiesPtrOutputWithContext(context.Background())
}

func (i *containerCapabilitiesPtrType) ToContainerCapabilitiesPtrOutputWithContext(ctx context.Context) ContainerCapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerCapabilitiesPtrOutput)
}

func (i *containerCapabilitiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*ContainerCapabilities] {
	return pulumix.Output[*ContainerCapabilities]{
		OutputState: i.ToContainerCapabilitiesPtrOutputWithContext(ctx).OutputState,
	}
}

type ContainerCapabilitiesOutput struct{ *pulumi.OutputState }

func (ContainerCapabilitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerCapabilities)(nil)).Elem()
}

func (o ContainerCapabilitiesOutput) ToContainerCapabilitiesOutput() ContainerCapabilitiesOutput {
	return o
}

func (o ContainerCapabilitiesOutput) ToContainerCapabilitiesOutputWithContext(ctx context.Context) ContainerCapabilitiesOutput {
	return o
}

func (o ContainerCapabilitiesOutput) ToContainerCapabilitiesPtrOutput() ContainerCapabilitiesPtrOutput {
	return o.ToContainerCapabilitiesPtrOutputWithContext(context.Background())
}

func (o ContainerCapabilitiesOutput) ToContainerCapabilitiesPtrOutputWithContext(ctx context.Context) ContainerCapabilitiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerCapabilities) *ContainerCapabilities {
		return &v
	}).(ContainerCapabilitiesPtrOutput)
}

func (o ContainerCapabilitiesOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerCapabilities] {
	return pulumix.Output[ContainerCapabilities]{
		OutputState: o.OutputState,
	}
}

// List of linux capabilities to add.
func (o ContainerCapabilitiesOutput) Adds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerCapabilities) []string { return v.Adds }).(pulumi.StringArrayOutput)
}

// List of linux capabilities to drop.
func (o ContainerCapabilitiesOutput) Drops() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerCapabilities) []string { return v.Drops }).(pulumi.StringArrayOutput)
}

type ContainerCapabilitiesPtrOutput struct{ *pulumi.OutputState }

func (ContainerCapabilitiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerCapabilities)(nil)).Elem()
}

func (o ContainerCapabilitiesPtrOutput) ToContainerCapabilitiesPtrOutput() ContainerCapabilitiesPtrOutput {
	return o
}

func (o ContainerCapabilitiesPtrOutput) ToContainerCapabilitiesPtrOutputWithContext(ctx context.Context) ContainerCapabilitiesPtrOutput {
	return o
}

func (o ContainerCapabilitiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerCapabilities] {
	return pulumix.Output[*ContainerCapabilities]{
		OutputState: o.OutputState,
	}
}

func (o ContainerCapabilitiesPtrOutput) Elem() ContainerCapabilitiesOutput {
	return o.ApplyT(func(v *ContainerCapabilities) ContainerCapabilities {
		if v != nil {
			return *v
		}
		var ret ContainerCapabilities
		return ret
	}).(ContainerCapabilitiesOutput)
}

// List of linux capabilities to add.
func (o ContainerCapabilitiesPtrOutput) Adds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerCapabilities) []string {
		if v == nil {
			return nil
		}
		return v.Adds
	}).(pulumi.StringArrayOutput)
}

// List of linux capabilities to drop.
func (o ContainerCapabilitiesPtrOutput) Drops() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerCapabilities) []string {
		if v == nil {
			return nil
		}
		return v.Drops
	}).(pulumi.StringArrayOutput)
}

type ContainerDevice struct {
	// The path in the container where the device will be bound.
	ContainerPath *string `pulumi:"containerPath"`
	// The path on the host where the device is located.
	HostPath string `pulumi:"hostPath"`
	// The cgroup permissions given to the container to access the device. Defaults to `rwm`.
	Permissions *string `pulumi:"permissions"`
}

// ContainerDeviceInput is an input type that accepts ContainerDeviceArgs and ContainerDeviceOutput values.
// You can construct a concrete instance of `ContainerDeviceInput` via:
//
//	ContainerDeviceArgs{...}
type ContainerDeviceInput interface {
	pulumi.Input

	ToContainerDeviceOutput() ContainerDeviceOutput
	ToContainerDeviceOutputWithContext(context.Context) ContainerDeviceOutput
}

type ContainerDeviceArgs struct {
	// The path in the container where the device will be bound.
	ContainerPath pulumi.StringPtrInput `pulumi:"containerPath"`
	// The path on the host where the device is located.
	HostPath pulumi.StringInput `pulumi:"hostPath"`
	// The cgroup permissions given to the container to access the device. Defaults to `rwm`.
	Permissions pulumi.StringPtrInput `pulumi:"permissions"`
}

func (ContainerDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerDevice)(nil)).Elem()
}

func (i ContainerDeviceArgs) ToContainerDeviceOutput() ContainerDeviceOutput {
	return i.ToContainerDeviceOutputWithContext(context.Background())
}

func (i ContainerDeviceArgs) ToContainerDeviceOutputWithContext(ctx context.Context) ContainerDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerDeviceOutput)
}

func (i ContainerDeviceArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerDevice] {
	return pulumix.Output[ContainerDevice]{
		OutputState: i.ToContainerDeviceOutputWithContext(ctx).OutputState,
	}
}

// ContainerDeviceArrayInput is an input type that accepts ContainerDeviceArray and ContainerDeviceArrayOutput values.
// You can construct a concrete instance of `ContainerDeviceArrayInput` via:
//
//	ContainerDeviceArray{ ContainerDeviceArgs{...} }
type ContainerDeviceArrayInput interface {
	pulumi.Input

	ToContainerDeviceArrayOutput() ContainerDeviceArrayOutput
	ToContainerDeviceArrayOutputWithContext(context.Context) ContainerDeviceArrayOutput
}

type ContainerDeviceArray []ContainerDeviceInput

func (ContainerDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerDevice)(nil)).Elem()
}

func (i ContainerDeviceArray) ToContainerDeviceArrayOutput() ContainerDeviceArrayOutput {
	return i.ToContainerDeviceArrayOutputWithContext(context.Background())
}

func (i ContainerDeviceArray) ToContainerDeviceArrayOutputWithContext(ctx context.Context) ContainerDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerDeviceArrayOutput)
}

func (i ContainerDeviceArray) ToOutput(ctx context.Context) pulumix.Output[[]ContainerDevice] {
	return pulumix.Output[[]ContainerDevice]{
		OutputState: i.ToContainerDeviceArrayOutputWithContext(ctx).OutputState,
	}
}

type ContainerDeviceOutput struct{ *pulumi.OutputState }

func (ContainerDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerDevice)(nil)).Elem()
}

func (o ContainerDeviceOutput) ToContainerDeviceOutput() ContainerDeviceOutput {
	return o
}

func (o ContainerDeviceOutput) ToContainerDeviceOutputWithContext(ctx context.Context) ContainerDeviceOutput {
	return o
}

func (o ContainerDeviceOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerDevice] {
	return pulumix.Output[ContainerDevice]{
		OutputState: o.OutputState,
	}
}

// The path in the container where the device will be bound.
func (o ContainerDeviceOutput) ContainerPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerDevice) *string { return v.ContainerPath }).(pulumi.StringPtrOutput)
}

// The path on the host where the device is located.
func (o ContainerDeviceOutput) HostPath() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerDevice) string { return v.HostPath }).(pulumi.StringOutput)
}

// The cgroup permissions given to the container to access the device. Defaults to `rwm`.
func (o ContainerDeviceOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerDevice) *string { return v.Permissions }).(pulumi.StringPtrOutput)
}

type ContainerDeviceArrayOutput struct{ *pulumi.OutputState }

func (ContainerDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerDevice)(nil)).Elem()
}

func (o ContainerDeviceArrayOutput) ToContainerDeviceArrayOutput() ContainerDeviceArrayOutput {
	return o
}

func (o ContainerDeviceArrayOutput) ToContainerDeviceArrayOutputWithContext(ctx context.Context) ContainerDeviceArrayOutput {
	return o
}

func (o ContainerDeviceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerDevice] {
	return pulumix.Output[[]ContainerDevice]{
		OutputState: o.OutputState,
	}
}

func (o ContainerDeviceArrayOutput) Index(i pulumi.IntInput) ContainerDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerDevice {
		return vs[0].([]ContainerDevice)[vs[1].(int)]
	}).(ContainerDeviceOutput)
}

type ContainerHealthcheck struct {
	// Time between running the check (ms|s|m|h). Defaults to `0s`.
	Interval *string `pulumi:"interval"`
	// Consecutive failures needed to report unhealthy. Defaults to `0`.
	Retries *int `pulumi:"retries"`
	// Start period for the container to initialize before counting retries towards unstable (ms|s|m|h). Defaults to `0s`.
	StartPeriod *string `pulumi:"startPeriod"`
	// Command to run to check health. For example, to run `curl -f localhost/health` set the command to be `["CMD", "curl", "-f", "localhost/health"]`.
	Tests []string `pulumi:"tests"`
	// Maximum time to allow one check to run (ms|s|m|h). Defaults to `0s`.
	Timeout *string `pulumi:"timeout"`
}

// ContainerHealthcheckInput is an input type that accepts ContainerHealthcheckArgs and ContainerHealthcheckOutput values.
// You can construct a concrete instance of `ContainerHealthcheckInput` via:
//
//	ContainerHealthcheckArgs{...}
type ContainerHealthcheckInput interface {
	pulumi.Input

	ToContainerHealthcheckOutput() ContainerHealthcheckOutput
	ToContainerHealthcheckOutputWithContext(context.Context) ContainerHealthcheckOutput
}

type ContainerHealthcheckArgs struct {
	// Time between running the check (ms|s|m|h). Defaults to `0s`.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// Consecutive failures needed to report unhealthy. Defaults to `0`.
	Retries pulumi.IntPtrInput `pulumi:"retries"`
	// Start period for the container to initialize before counting retries towards unstable (ms|s|m|h). Defaults to `0s`.
	StartPeriod pulumi.StringPtrInput `pulumi:"startPeriod"`
	// Command to run to check health. For example, to run `curl -f localhost/health` set the command to be `["CMD", "curl", "-f", "localhost/health"]`.
	Tests pulumi.StringArrayInput `pulumi:"tests"`
	// Maximum time to allow one check to run (ms|s|m|h). Defaults to `0s`.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (ContainerHealthcheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerHealthcheck)(nil)).Elem()
}

func (i ContainerHealthcheckArgs) ToContainerHealthcheckOutput() ContainerHealthcheckOutput {
	return i.ToContainerHealthcheckOutputWithContext(context.Background())
}

func (i ContainerHealthcheckArgs) ToContainerHealthcheckOutputWithContext(ctx context.Context) ContainerHealthcheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerHealthcheckOutput)
}

func (i ContainerHealthcheckArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerHealthcheck] {
	return pulumix.Output[ContainerHealthcheck]{
		OutputState: i.ToContainerHealthcheckOutputWithContext(ctx).OutputState,
	}
}

func (i ContainerHealthcheckArgs) ToContainerHealthcheckPtrOutput() ContainerHealthcheckPtrOutput {
	return i.ToContainerHealthcheckPtrOutputWithContext(context.Background())
}

func (i ContainerHealthcheckArgs) ToContainerHealthcheckPtrOutputWithContext(ctx context.Context) ContainerHealthcheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerHealthcheckOutput).ToContainerHealthcheckPtrOutputWithContext(ctx)
}

// ContainerHealthcheckPtrInput is an input type that accepts ContainerHealthcheckArgs, ContainerHealthcheckPtr and ContainerHealthcheckPtrOutput values.
// You can construct a concrete instance of `ContainerHealthcheckPtrInput` via:
//
//	        ContainerHealthcheckArgs{...}
//
//	or:
//
//	        nil
type ContainerHealthcheckPtrInput interface {
	pulumi.Input

	ToContainerHealthcheckPtrOutput() ContainerHealthcheckPtrOutput
	ToContainerHealthcheckPtrOutputWithContext(context.Context) ContainerHealthcheckPtrOutput
}

type containerHealthcheckPtrType ContainerHealthcheckArgs

func ContainerHealthcheckPtr(v *ContainerHealthcheckArgs) ContainerHealthcheckPtrInput {
	return (*containerHealthcheckPtrType)(v)
}

func (*containerHealthcheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerHealthcheck)(nil)).Elem()
}

func (i *containerHealthcheckPtrType) ToContainerHealthcheckPtrOutput() ContainerHealthcheckPtrOutput {
	return i.ToContainerHealthcheckPtrOutputWithContext(context.Background())
}

func (i *containerHealthcheckPtrType) ToContainerHealthcheckPtrOutputWithContext(ctx context.Context) ContainerHealthcheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerHealthcheckPtrOutput)
}

func (i *containerHealthcheckPtrType) ToOutput(ctx context.Context) pulumix.Output[*ContainerHealthcheck] {
	return pulumix.Output[*ContainerHealthcheck]{
		OutputState: i.ToContainerHealthcheckPtrOutputWithContext(ctx).OutputState,
	}
}

type ContainerHealthcheckOutput struct{ *pulumi.OutputState }

func (ContainerHealthcheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerHealthcheck)(nil)).Elem()
}

func (o ContainerHealthcheckOutput) ToContainerHealthcheckOutput() ContainerHealthcheckOutput {
	return o
}

func (o ContainerHealthcheckOutput) ToContainerHealthcheckOutputWithContext(ctx context.Context) ContainerHealthcheckOutput {
	return o
}

func (o ContainerHealthcheckOutput) ToContainerHealthcheckPtrOutput() ContainerHealthcheckPtrOutput {
	return o.ToContainerHealthcheckPtrOutputWithContext(context.Background())
}

func (o ContainerHealthcheckOutput) ToContainerHealthcheckPtrOutputWithContext(ctx context.Context) ContainerHealthcheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerHealthcheck) *ContainerHealthcheck {
		return &v
	}).(ContainerHealthcheckPtrOutput)
}

func (o ContainerHealthcheckOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerHealthcheck] {
	return pulumix.Output[ContainerHealthcheck]{
		OutputState: o.OutputState,
	}
}

// Time between running the check (ms|s|m|h). Defaults to `0s`.
func (o ContainerHealthcheckOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerHealthcheck) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// Consecutive failures needed to report unhealthy. Defaults to `0`.
func (o ContainerHealthcheckOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerHealthcheck) *int { return v.Retries }).(pulumi.IntPtrOutput)
}

// Start period for the container to initialize before counting retries towards unstable (ms|s|m|h). Defaults to `0s`.
func (o ContainerHealthcheckOutput) StartPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerHealthcheck) *string { return v.StartPeriod }).(pulumi.StringPtrOutput)
}

// Command to run to check health. For example, to run `curl -f localhost/health` set the command to be `["CMD", "curl", "-f", "localhost/health"]`.
func (o ContainerHealthcheckOutput) Tests() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerHealthcheck) []string { return v.Tests }).(pulumi.StringArrayOutput)
}

// Maximum time to allow one check to run (ms|s|m|h). Defaults to `0s`.
func (o ContainerHealthcheckOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerHealthcheck) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type ContainerHealthcheckPtrOutput struct{ *pulumi.OutputState }

func (ContainerHealthcheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerHealthcheck)(nil)).Elem()
}

func (o ContainerHealthcheckPtrOutput) ToContainerHealthcheckPtrOutput() ContainerHealthcheckPtrOutput {
	return o
}

func (o ContainerHealthcheckPtrOutput) ToContainerHealthcheckPtrOutputWithContext(ctx context.Context) ContainerHealthcheckPtrOutput {
	return o
}

func (o ContainerHealthcheckPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerHealthcheck] {
	return pulumix.Output[*ContainerHealthcheck]{
		OutputState: o.OutputState,
	}
}

func (o ContainerHealthcheckPtrOutput) Elem() ContainerHealthcheckOutput {
	return o.ApplyT(func(v *ContainerHealthcheck) ContainerHealthcheck {
		if v != nil {
			return *v
		}
		var ret ContainerHealthcheck
		return ret
	}).(ContainerHealthcheckOutput)
}

// Time between running the check (ms|s|m|h). Defaults to `0s`.
func (o ContainerHealthcheckPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerHealthcheck) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Consecutive failures needed to report unhealthy. Defaults to `0`.
func (o ContainerHealthcheckPtrOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerHealthcheck) *int {
		if v == nil {
			return nil
		}
		return v.Retries
	}).(pulumi.IntPtrOutput)
}

// Start period for the container to initialize before counting retries towards unstable (ms|s|m|h). Defaults to `0s`.
func (o ContainerHealthcheckPtrOutput) StartPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerHealthcheck) *string {
		if v == nil {
			return nil
		}
		return v.StartPeriod
	}).(pulumi.StringPtrOutput)
}

// Command to run to check health. For example, to run `curl -f localhost/health` set the command to be `["CMD", "curl", "-f", "localhost/health"]`.
func (o ContainerHealthcheckPtrOutput) Tests() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerHealthcheck) []string {
		if v == nil {
			return nil
		}
		return v.Tests
	}).(pulumi.StringArrayOutput)
}

// Maximum time to allow one check to run (ms|s|m|h). Defaults to `0s`.
func (o ContainerHealthcheckPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerHealthcheck) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

type ContainerHost struct {
	// Hostname to add
	Host string `pulumi:"host"`
	// IP address this hostname should resolve to.
	Ip string `pulumi:"ip"`
}

// ContainerHostInput is an input type that accepts ContainerHostArgs and ContainerHostOutput values.
// You can construct a concrete instance of `ContainerHostInput` via:
//
//	ContainerHostArgs{...}
type ContainerHostInput interface {
	pulumi.Input

	ToContainerHostOutput() ContainerHostOutput
	ToContainerHostOutputWithContext(context.Context) ContainerHostOutput
}

type ContainerHostArgs struct {
	// Hostname to add
	Host pulumi.StringInput `pulumi:"host"`
	// IP address this hostname should resolve to.
	Ip pulumi.StringInput `pulumi:"ip"`
}

func (ContainerHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerHost)(nil)).Elem()
}

func (i ContainerHostArgs) ToContainerHostOutput() ContainerHostOutput {
	return i.ToContainerHostOutputWithContext(context.Background())
}

func (i ContainerHostArgs) ToContainerHostOutputWithContext(ctx context.Context) ContainerHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerHostOutput)
}

func (i ContainerHostArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerHost] {
	return pulumix.Output[ContainerHost]{
		OutputState: i.ToContainerHostOutputWithContext(ctx).OutputState,
	}
}

// ContainerHostArrayInput is an input type that accepts ContainerHostArray and ContainerHostArrayOutput values.
// You can construct a concrete instance of `ContainerHostArrayInput` via:
//
//	ContainerHostArray{ ContainerHostArgs{...} }
type ContainerHostArrayInput interface {
	pulumi.Input

	ToContainerHostArrayOutput() ContainerHostArrayOutput
	ToContainerHostArrayOutputWithContext(context.Context) ContainerHostArrayOutput
}

type ContainerHostArray []ContainerHostInput

func (ContainerHostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerHost)(nil)).Elem()
}

func (i ContainerHostArray) ToContainerHostArrayOutput() ContainerHostArrayOutput {
	return i.ToContainerHostArrayOutputWithContext(context.Background())
}

func (i ContainerHostArray) ToContainerHostArrayOutputWithContext(ctx context.Context) ContainerHostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerHostArrayOutput)
}

func (i ContainerHostArray) ToOutput(ctx context.Context) pulumix.Output[[]ContainerHost] {
	return pulumix.Output[[]ContainerHost]{
		OutputState: i.ToContainerHostArrayOutputWithContext(ctx).OutputState,
	}
}

type ContainerHostOutput struct{ *pulumi.OutputState }

func (ContainerHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerHost)(nil)).Elem()
}

func (o ContainerHostOutput) ToContainerHostOutput() ContainerHostOutput {
	return o
}

func (o ContainerHostOutput) ToContainerHostOutputWithContext(ctx context.Context) ContainerHostOutput {
	return o
}

func (o ContainerHostOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerHost] {
	return pulumix.Output[ContainerHost]{
		OutputState: o.OutputState,
	}
}

// Hostname to add
func (o ContainerHostOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerHost) string { return v.Host }).(pulumi.StringOutput)
}

// IP address this hostname should resolve to.
func (o ContainerHostOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerHost) string { return v.Ip }).(pulumi.StringOutput)
}

type ContainerHostArrayOutput struct{ *pulumi.OutputState }

func (ContainerHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerHost)(nil)).Elem()
}

func (o ContainerHostArrayOutput) ToContainerHostArrayOutput() ContainerHostArrayOutput {
	return o
}

func (o ContainerHostArrayOutput) ToContainerHostArrayOutputWithContext(ctx context.Context) ContainerHostArrayOutput {
	return o
}

func (o ContainerHostArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerHost] {
	return pulumix.Output[[]ContainerHost]{
		OutputState: o.OutputState,
	}
}

func (o ContainerHostArrayOutput) Index(i pulumi.IntInput) ContainerHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerHost {
		return vs[0].([]ContainerHost)[vs[1].(int)]
	}).(ContainerHostOutput)
}

type ContainerLabel struct {
	// Name of the label
	Label string `pulumi:"label"`
	// Value of the label
	Value string `pulumi:"value"`
}

// ContainerLabelInput is an input type that accepts ContainerLabelArgs and ContainerLabelOutput values.
// You can construct a concrete instance of `ContainerLabelInput` via:
//
//	ContainerLabelArgs{...}
type ContainerLabelInput interface {
	pulumi.Input

	ToContainerLabelOutput() ContainerLabelOutput
	ToContainerLabelOutputWithContext(context.Context) ContainerLabelOutput
}

type ContainerLabelArgs struct {
	// Name of the label
	Label pulumi.StringInput `pulumi:"label"`
	// Value of the label
	Value pulumi.StringInput `pulumi:"value"`
}

func (ContainerLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerLabel)(nil)).Elem()
}

func (i ContainerLabelArgs) ToContainerLabelOutput() ContainerLabelOutput {
	return i.ToContainerLabelOutputWithContext(context.Background())
}

func (i ContainerLabelArgs) ToContainerLabelOutputWithContext(ctx context.Context) ContainerLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerLabelOutput)
}

func (i ContainerLabelArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerLabel] {
	return pulumix.Output[ContainerLabel]{
		OutputState: i.ToContainerLabelOutputWithContext(ctx).OutputState,
	}
}

// ContainerLabelArrayInput is an input type that accepts ContainerLabelArray and ContainerLabelArrayOutput values.
// You can construct a concrete instance of `ContainerLabelArrayInput` via:
//
//	ContainerLabelArray{ ContainerLabelArgs{...} }
type ContainerLabelArrayInput interface {
	pulumi.Input

	ToContainerLabelArrayOutput() ContainerLabelArrayOutput
	ToContainerLabelArrayOutputWithContext(context.Context) ContainerLabelArrayOutput
}

type ContainerLabelArray []ContainerLabelInput

func (ContainerLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerLabel)(nil)).Elem()
}

func (i ContainerLabelArray) ToContainerLabelArrayOutput() ContainerLabelArrayOutput {
	return i.ToContainerLabelArrayOutputWithContext(context.Background())
}

func (i ContainerLabelArray) ToContainerLabelArrayOutputWithContext(ctx context.Context) ContainerLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerLabelArrayOutput)
}

func (i ContainerLabelArray) ToOutput(ctx context.Context) pulumix.Output[[]ContainerLabel] {
	return pulumix.Output[[]ContainerLabel]{
		OutputState: i.ToContainerLabelArrayOutputWithContext(ctx).OutputState,
	}
}

type ContainerLabelOutput struct{ *pulumi.OutputState }

func (ContainerLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerLabel)(nil)).Elem()
}

func (o ContainerLabelOutput) ToContainerLabelOutput() ContainerLabelOutput {
	return o
}

func (o ContainerLabelOutput) ToContainerLabelOutputWithContext(ctx context.Context) ContainerLabelOutput {
	return o
}

func (o ContainerLabelOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerLabel] {
	return pulumix.Output[ContainerLabel]{
		OutputState: o.OutputState,
	}
}

// Name of the label
func (o ContainerLabelOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerLabel) string { return v.Label }).(pulumi.StringOutput)
}

// Value of the label
func (o ContainerLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerLabel) string { return v.Value }).(pulumi.StringOutput)
}

type ContainerLabelArrayOutput struct{ *pulumi.OutputState }

func (ContainerLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerLabel)(nil)).Elem()
}

func (o ContainerLabelArrayOutput) ToContainerLabelArrayOutput() ContainerLabelArrayOutput {
	return o
}

func (o ContainerLabelArrayOutput) ToContainerLabelArrayOutputWithContext(ctx context.Context) ContainerLabelArrayOutput {
	return o
}

func (o ContainerLabelArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerLabel] {
	return pulumix.Output[[]ContainerLabel]{
		OutputState: o.OutputState,
	}
}

func (o ContainerLabelArrayOutput) Index(i pulumi.IntInput) ContainerLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerLabel {
		return vs[0].([]ContainerLabel)[vs[1].(int)]
	}).(ContainerLabelOutput)
}

type ContainerMount struct {
	// Optional configuration for the bind type.
	BindOptions *ContainerMountBindOptions `pulumi:"bindOptions"`
	// Whether the mount should be read-only.
	ReadOnly *bool `pulumi:"readOnly"`
	// Mount source (e.g. a volume name, a host path).
	Source *string `pulumi:"source"`
	// Container path
	Target string `pulumi:"target"`
	// Optional configuration for the tmpfs type.
	TmpfsOptions *ContainerMountTmpfsOptions `pulumi:"tmpfsOptions"`
	// The mount type
	Type string `pulumi:"type"`
	// Optional configuration for the volume type.
	VolumeOptions *ContainerMountVolumeOptions `pulumi:"volumeOptions"`
}

// ContainerMountInput is an input type that accepts ContainerMountArgs and ContainerMountOutput values.
// You can construct a concrete instance of `ContainerMountInput` via:
//
//	ContainerMountArgs{...}
type ContainerMountInput interface {
	pulumi.Input

	ToContainerMountOutput() ContainerMountOutput
	ToContainerMountOutputWithContext(context.Context) ContainerMountOutput
}

type ContainerMountArgs struct {
	// Optional configuration for the bind type.
	BindOptions ContainerMountBindOptionsPtrInput `pulumi:"bindOptions"`
	// Whether the mount should be read-only.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// Mount source (e.g. a volume name, a host path).
	Source pulumi.StringPtrInput `pulumi:"source"`
	// Container path
	Target pulumi.StringInput `pulumi:"target"`
	// Optional configuration for the tmpfs type.
	TmpfsOptions ContainerMountTmpfsOptionsPtrInput `pulumi:"tmpfsOptions"`
	// The mount type
	Type pulumi.StringInput `pulumi:"type"`
	// Optional configuration for the volume type.
	VolumeOptions ContainerMountVolumeOptionsPtrInput `pulumi:"volumeOptions"`
}

func (ContainerMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerMount)(nil)).Elem()
}

func (i ContainerMountArgs) ToContainerMountOutput() ContainerMountOutput {
	return i.ToContainerMountOutputWithContext(context.Background())
}

func (i ContainerMountArgs) ToContainerMountOutputWithContext(ctx context.Context) ContainerMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerMountOutput)
}

func (i ContainerMountArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerMount] {
	return pulumix.Output[ContainerMount]{
		OutputState: i.ToContainerMountOutputWithContext(ctx).OutputState,
	}
}

// ContainerMountArrayInput is an input type that accepts ContainerMountArray and ContainerMountArrayOutput values.
// You can construct a concrete instance of `ContainerMountArrayInput` via:
//
//	ContainerMountArray{ ContainerMountArgs{...} }
type ContainerMountArrayInput interface {
	pulumi.Input

	ToContainerMountArrayOutput() ContainerMountArrayOutput
	ToContainerMountArrayOutputWithContext(context.Context) ContainerMountArrayOutput
}

type ContainerMountArray []ContainerMountInput

func (ContainerMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerMount)(nil)).Elem()
}

func (i ContainerMountArray) ToContainerMountArrayOutput() ContainerMountArrayOutput {
	return i.ToContainerMountArrayOutputWithContext(context.Background())
}

func (i ContainerMountArray) ToContainerMountArrayOutputWithContext(ctx context.Context) ContainerMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerMountArrayOutput)
}

func (i ContainerMountArray) ToOutput(ctx context.Context) pulumix.Output[[]ContainerMount] {
	return pulumix.Output[[]ContainerMount]{
		OutputState: i.ToContainerMountArrayOutputWithContext(ctx).OutputState,
	}
}

type ContainerMountOutput struct{ *pulumi.OutputState }

func (ContainerMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerMount)(nil)).Elem()
}

func (o ContainerMountOutput) ToContainerMountOutput() ContainerMountOutput {
	return o
}

func (o ContainerMountOutput) ToContainerMountOutputWithContext(ctx context.Context) ContainerMountOutput {
	return o
}

func (o ContainerMountOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerMount] {
	return pulumix.Output[ContainerMount]{
		OutputState: o.OutputState,
	}
}

// Optional configuration for the bind type.
func (o ContainerMountOutput) BindOptions() ContainerMountBindOptionsPtrOutput {
	return o.ApplyT(func(v ContainerMount) *ContainerMountBindOptions { return v.BindOptions }).(ContainerMountBindOptionsPtrOutput)
}

// Whether the mount should be read-only.
func (o ContainerMountOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerMount) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// Mount source (e.g. a volume name, a host path).
func (o ContainerMountOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerMount) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// Container path
func (o ContainerMountOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerMount) string { return v.Target }).(pulumi.StringOutput)
}

// Optional configuration for the tmpfs type.
func (o ContainerMountOutput) TmpfsOptions() ContainerMountTmpfsOptionsPtrOutput {
	return o.ApplyT(func(v ContainerMount) *ContainerMountTmpfsOptions { return v.TmpfsOptions }).(ContainerMountTmpfsOptionsPtrOutput)
}

// The mount type
func (o ContainerMountOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerMount) string { return v.Type }).(pulumi.StringOutput)
}

// Optional configuration for the volume type.
func (o ContainerMountOutput) VolumeOptions() ContainerMountVolumeOptionsPtrOutput {
	return o.ApplyT(func(v ContainerMount) *ContainerMountVolumeOptions { return v.VolumeOptions }).(ContainerMountVolumeOptionsPtrOutput)
}

type ContainerMountArrayOutput struct{ *pulumi.OutputState }

func (ContainerMountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerMount)(nil)).Elem()
}

func (o ContainerMountArrayOutput) ToContainerMountArrayOutput() ContainerMountArrayOutput {
	return o
}

func (o ContainerMountArrayOutput) ToContainerMountArrayOutputWithContext(ctx context.Context) ContainerMountArrayOutput {
	return o
}

func (o ContainerMountArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerMount] {
	return pulumix.Output[[]ContainerMount]{
		OutputState: o.OutputState,
	}
}

func (o ContainerMountArrayOutput) Index(i pulumi.IntInput) ContainerMountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerMount {
		return vs[0].([]ContainerMount)[vs[1].(int)]
	}).(ContainerMountOutput)
}

type ContainerMountBindOptions struct {
	Propagation *string `pulumi:"propagation"`
}

// ContainerMountBindOptionsInput is an input type that accepts ContainerMountBindOptionsArgs and ContainerMountBindOptionsOutput values.
// You can construct a concrete instance of `ContainerMountBindOptionsInput` via:
//
//	ContainerMountBindOptionsArgs{...}
type ContainerMountBindOptionsInput interface {
	pulumi.Input

	ToContainerMountBindOptionsOutput() ContainerMountBindOptionsOutput
	ToContainerMountBindOptionsOutputWithContext(context.Context) ContainerMountBindOptionsOutput
}

type ContainerMountBindOptionsArgs struct {
	Propagation pulumi.StringPtrInput `pulumi:"propagation"`
}

func (ContainerMountBindOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerMountBindOptions)(nil)).Elem()
}

func (i ContainerMountBindOptionsArgs) ToContainerMountBindOptionsOutput() ContainerMountBindOptionsOutput {
	return i.ToContainerMountBindOptionsOutputWithContext(context.Background())
}

func (i ContainerMountBindOptionsArgs) ToContainerMountBindOptionsOutputWithContext(ctx context.Context) ContainerMountBindOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerMountBindOptionsOutput)
}

func (i ContainerMountBindOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerMountBindOptions] {
	return pulumix.Output[ContainerMountBindOptions]{
		OutputState: i.ToContainerMountBindOptionsOutputWithContext(ctx).OutputState,
	}
}

func (i ContainerMountBindOptionsArgs) ToContainerMountBindOptionsPtrOutput() ContainerMountBindOptionsPtrOutput {
	return i.ToContainerMountBindOptionsPtrOutputWithContext(context.Background())
}

func (i ContainerMountBindOptionsArgs) ToContainerMountBindOptionsPtrOutputWithContext(ctx context.Context) ContainerMountBindOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerMountBindOptionsOutput).ToContainerMountBindOptionsPtrOutputWithContext(ctx)
}

// ContainerMountBindOptionsPtrInput is an input type that accepts ContainerMountBindOptionsArgs, ContainerMountBindOptionsPtr and ContainerMountBindOptionsPtrOutput values.
// You can construct a concrete instance of `ContainerMountBindOptionsPtrInput` via:
//
//	        ContainerMountBindOptionsArgs{...}
//
//	or:
//
//	        nil
type ContainerMountBindOptionsPtrInput interface {
	pulumi.Input

	ToContainerMountBindOptionsPtrOutput() ContainerMountBindOptionsPtrOutput
	ToContainerMountBindOptionsPtrOutputWithContext(context.Context) ContainerMountBindOptionsPtrOutput
}

type containerMountBindOptionsPtrType ContainerMountBindOptionsArgs

func ContainerMountBindOptionsPtr(v *ContainerMountBindOptionsArgs) ContainerMountBindOptionsPtrInput {
	return (*containerMountBindOptionsPtrType)(v)
}

func (*containerMountBindOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerMountBindOptions)(nil)).Elem()
}

func (i *containerMountBindOptionsPtrType) ToContainerMountBindOptionsPtrOutput() ContainerMountBindOptionsPtrOutput {
	return i.ToContainerMountBindOptionsPtrOutputWithContext(context.Background())
}

func (i *containerMountBindOptionsPtrType) ToContainerMountBindOptionsPtrOutputWithContext(ctx context.Context) ContainerMountBindOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerMountBindOptionsPtrOutput)
}

func (i *containerMountBindOptionsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ContainerMountBindOptions] {
	return pulumix.Output[*ContainerMountBindOptions]{
		OutputState: i.ToContainerMountBindOptionsPtrOutputWithContext(ctx).OutputState,
	}
}

type ContainerMountBindOptionsOutput struct{ *pulumi.OutputState }

func (ContainerMountBindOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerMountBindOptions)(nil)).Elem()
}

func (o ContainerMountBindOptionsOutput) ToContainerMountBindOptionsOutput() ContainerMountBindOptionsOutput {
	return o
}

func (o ContainerMountBindOptionsOutput) ToContainerMountBindOptionsOutputWithContext(ctx context.Context) ContainerMountBindOptionsOutput {
	return o
}

func (o ContainerMountBindOptionsOutput) ToContainerMountBindOptionsPtrOutput() ContainerMountBindOptionsPtrOutput {
	return o.ToContainerMountBindOptionsPtrOutputWithContext(context.Background())
}

func (o ContainerMountBindOptionsOutput) ToContainerMountBindOptionsPtrOutputWithContext(ctx context.Context) ContainerMountBindOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerMountBindOptions) *ContainerMountBindOptions {
		return &v
	}).(ContainerMountBindOptionsPtrOutput)
}

func (o ContainerMountBindOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerMountBindOptions] {
	return pulumix.Output[ContainerMountBindOptions]{
		OutputState: o.OutputState,
	}
}

func (o ContainerMountBindOptionsOutput) Propagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerMountBindOptions) *string { return v.Propagation }).(pulumi.StringPtrOutput)
}

type ContainerMountBindOptionsPtrOutput struct{ *pulumi.OutputState }

func (ContainerMountBindOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerMountBindOptions)(nil)).Elem()
}

func (o ContainerMountBindOptionsPtrOutput) ToContainerMountBindOptionsPtrOutput() ContainerMountBindOptionsPtrOutput {
	return o
}

func (o ContainerMountBindOptionsPtrOutput) ToContainerMountBindOptionsPtrOutputWithContext(ctx context.Context) ContainerMountBindOptionsPtrOutput {
	return o
}

func (o ContainerMountBindOptionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerMountBindOptions] {
	return pulumix.Output[*ContainerMountBindOptions]{
		OutputState: o.OutputState,
	}
}

func (o ContainerMountBindOptionsPtrOutput) Elem() ContainerMountBindOptionsOutput {
	return o.ApplyT(func(v *ContainerMountBindOptions) ContainerMountBindOptions {
		if v != nil {
			return *v
		}
		var ret ContainerMountBindOptions
		return ret
	}).(ContainerMountBindOptionsOutput)
}

func (o ContainerMountBindOptionsPtrOutput) Propagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerMountBindOptions) *string {
		if v == nil {
			return nil
		}
		return v.Propagation
	}).(pulumi.StringPtrOutput)
}

type ContainerMountTmpfsOptions struct {
	Mode      *int `pulumi:"mode"`
	SizeBytes *int `pulumi:"sizeBytes"`
}

// ContainerMountTmpfsOptionsInput is an input type that accepts ContainerMountTmpfsOptionsArgs and ContainerMountTmpfsOptionsOutput values.
// You can construct a concrete instance of `ContainerMountTmpfsOptionsInput` via:
//
//	ContainerMountTmpfsOptionsArgs{...}
type ContainerMountTmpfsOptionsInput interface {
	pulumi.Input

	ToContainerMountTmpfsOptionsOutput() ContainerMountTmpfsOptionsOutput
	ToContainerMountTmpfsOptionsOutputWithContext(context.Context) ContainerMountTmpfsOptionsOutput
}

type ContainerMountTmpfsOptionsArgs struct {
	Mode      pulumi.IntPtrInput `pulumi:"mode"`
	SizeBytes pulumi.IntPtrInput `pulumi:"sizeBytes"`
}

func (ContainerMountTmpfsOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerMountTmpfsOptions)(nil)).Elem()
}

func (i ContainerMountTmpfsOptionsArgs) ToContainerMountTmpfsOptionsOutput() ContainerMountTmpfsOptionsOutput {
	return i.ToContainerMountTmpfsOptionsOutputWithContext(context.Background())
}

func (i ContainerMountTmpfsOptionsArgs) ToContainerMountTmpfsOptionsOutputWithContext(ctx context.Context) ContainerMountTmpfsOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerMountTmpfsOptionsOutput)
}

func (i ContainerMountTmpfsOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerMountTmpfsOptions] {
	return pulumix.Output[ContainerMountTmpfsOptions]{
		OutputState: i.ToContainerMountTmpfsOptionsOutputWithContext(ctx).OutputState,
	}
}

func (i ContainerMountTmpfsOptionsArgs) ToContainerMountTmpfsOptionsPtrOutput() ContainerMountTmpfsOptionsPtrOutput {
	return i.ToContainerMountTmpfsOptionsPtrOutputWithContext(context.Background())
}

func (i ContainerMountTmpfsOptionsArgs) ToContainerMountTmpfsOptionsPtrOutputWithContext(ctx context.Context) ContainerMountTmpfsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerMountTmpfsOptionsOutput).ToContainerMountTmpfsOptionsPtrOutputWithContext(ctx)
}

// ContainerMountTmpfsOptionsPtrInput is an input type that accepts ContainerMountTmpfsOptionsArgs, ContainerMountTmpfsOptionsPtr and ContainerMountTmpfsOptionsPtrOutput values.
// You can construct a concrete instance of `ContainerMountTmpfsOptionsPtrInput` via:
//
//	        ContainerMountTmpfsOptionsArgs{...}
//
//	or:
//
//	        nil
type ContainerMountTmpfsOptionsPtrInput interface {
	pulumi.Input

	ToContainerMountTmpfsOptionsPtrOutput() ContainerMountTmpfsOptionsPtrOutput
	ToContainerMountTmpfsOptionsPtrOutputWithContext(context.Context) ContainerMountTmpfsOptionsPtrOutput
}

type containerMountTmpfsOptionsPtrType ContainerMountTmpfsOptionsArgs

func ContainerMountTmpfsOptionsPtr(v *ContainerMountTmpfsOptionsArgs) ContainerMountTmpfsOptionsPtrInput {
	return (*containerMountTmpfsOptionsPtrType)(v)
}

func (*containerMountTmpfsOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerMountTmpfsOptions)(nil)).Elem()
}

func (i *containerMountTmpfsOptionsPtrType) ToContainerMountTmpfsOptionsPtrOutput() ContainerMountTmpfsOptionsPtrOutput {
	return i.ToContainerMountTmpfsOptionsPtrOutputWithContext(context.Background())
}

func (i *containerMountTmpfsOptionsPtrType) ToContainerMountTmpfsOptionsPtrOutputWithContext(ctx context.Context) ContainerMountTmpfsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerMountTmpfsOptionsPtrOutput)
}

func (i *containerMountTmpfsOptionsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ContainerMountTmpfsOptions] {
	return pulumix.Output[*ContainerMountTmpfsOptions]{
		OutputState: i.ToContainerMountTmpfsOptionsPtrOutputWithContext(ctx).OutputState,
	}
}

type ContainerMountTmpfsOptionsOutput struct{ *pulumi.OutputState }

func (ContainerMountTmpfsOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerMountTmpfsOptions)(nil)).Elem()
}

func (o ContainerMountTmpfsOptionsOutput) ToContainerMountTmpfsOptionsOutput() ContainerMountTmpfsOptionsOutput {
	return o
}

func (o ContainerMountTmpfsOptionsOutput) ToContainerMountTmpfsOptionsOutputWithContext(ctx context.Context) ContainerMountTmpfsOptionsOutput {
	return o
}

func (o ContainerMountTmpfsOptionsOutput) ToContainerMountTmpfsOptionsPtrOutput() ContainerMountTmpfsOptionsPtrOutput {
	return o.ToContainerMountTmpfsOptionsPtrOutputWithContext(context.Background())
}

func (o ContainerMountTmpfsOptionsOutput) ToContainerMountTmpfsOptionsPtrOutputWithContext(ctx context.Context) ContainerMountTmpfsOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerMountTmpfsOptions) *ContainerMountTmpfsOptions {
		return &v
	}).(ContainerMountTmpfsOptionsPtrOutput)
}

func (o ContainerMountTmpfsOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerMountTmpfsOptions] {
	return pulumix.Output[ContainerMountTmpfsOptions]{
		OutputState: o.OutputState,
	}
}

func (o ContainerMountTmpfsOptionsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerMountTmpfsOptions) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

func (o ContainerMountTmpfsOptionsOutput) SizeBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerMountTmpfsOptions) *int { return v.SizeBytes }).(pulumi.IntPtrOutput)
}

type ContainerMountTmpfsOptionsPtrOutput struct{ *pulumi.OutputState }

func (ContainerMountTmpfsOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerMountTmpfsOptions)(nil)).Elem()
}

func (o ContainerMountTmpfsOptionsPtrOutput) ToContainerMountTmpfsOptionsPtrOutput() ContainerMountTmpfsOptionsPtrOutput {
	return o
}

func (o ContainerMountTmpfsOptionsPtrOutput) ToContainerMountTmpfsOptionsPtrOutputWithContext(ctx context.Context) ContainerMountTmpfsOptionsPtrOutput {
	return o
}

func (o ContainerMountTmpfsOptionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerMountTmpfsOptions] {
	return pulumix.Output[*ContainerMountTmpfsOptions]{
		OutputState: o.OutputState,
	}
}

func (o ContainerMountTmpfsOptionsPtrOutput) Elem() ContainerMountTmpfsOptionsOutput {
	return o.ApplyT(func(v *ContainerMountTmpfsOptions) ContainerMountTmpfsOptions {
		if v != nil {
			return *v
		}
		var ret ContainerMountTmpfsOptions
		return ret
	}).(ContainerMountTmpfsOptionsOutput)
}

func (o ContainerMountTmpfsOptionsPtrOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerMountTmpfsOptions) *int {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.IntPtrOutput)
}

func (o ContainerMountTmpfsOptionsPtrOutput) SizeBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerMountTmpfsOptions) *int {
		if v == nil {
			return nil
		}
		return v.SizeBytes
	}).(pulumi.IntPtrOutput)
}

type ContainerMountVolumeOptions struct {
	DriverName    *string           `pulumi:"driverName"`
	DriverOptions map[string]string `pulumi:"driverOptions"`
	// User-defined key/value metadata
	Labels []ContainerMountVolumeOptionsLabel `pulumi:"labels"`
	NoCopy *bool                              `pulumi:"noCopy"`
}

// ContainerMountVolumeOptionsInput is an input type that accepts ContainerMountVolumeOptionsArgs and ContainerMountVolumeOptionsOutput values.
// You can construct a concrete instance of `ContainerMountVolumeOptionsInput` via:
//
//	ContainerMountVolumeOptionsArgs{...}
type ContainerMountVolumeOptionsInput interface {
	pulumi.Input

	ToContainerMountVolumeOptionsOutput() ContainerMountVolumeOptionsOutput
	ToContainerMountVolumeOptionsOutputWithContext(context.Context) ContainerMountVolumeOptionsOutput
}

type ContainerMountVolumeOptionsArgs struct {
	DriverName    pulumi.StringPtrInput `pulumi:"driverName"`
	DriverOptions pulumi.StringMapInput `pulumi:"driverOptions"`
	// User-defined key/value metadata
	Labels ContainerMountVolumeOptionsLabelArrayInput `pulumi:"labels"`
	NoCopy pulumi.BoolPtrInput                        `pulumi:"noCopy"`
}

func (ContainerMountVolumeOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerMountVolumeOptions)(nil)).Elem()
}

func (i ContainerMountVolumeOptionsArgs) ToContainerMountVolumeOptionsOutput() ContainerMountVolumeOptionsOutput {
	return i.ToContainerMountVolumeOptionsOutputWithContext(context.Background())
}

func (i ContainerMountVolumeOptionsArgs) ToContainerMountVolumeOptionsOutputWithContext(ctx context.Context) ContainerMountVolumeOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerMountVolumeOptionsOutput)
}

func (i ContainerMountVolumeOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerMountVolumeOptions] {
	return pulumix.Output[ContainerMountVolumeOptions]{
		OutputState: i.ToContainerMountVolumeOptionsOutputWithContext(ctx).OutputState,
	}
}

func (i ContainerMountVolumeOptionsArgs) ToContainerMountVolumeOptionsPtrOutput() ContainerMountVolumeOptionsPtrOutput {
	return i.ToContainerMountVolumeOptionsPtrOutputWithContext(context.Background())
}

func (i ContainerMountVolumeOptionsArgs) ToContainerMountVolumeOptionsPtrOutputWithContext(ctx context.Context) ContainerMountVolumeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerMountVolumeOptionsOutput).ToContainerMountVolumeOptionsPtrOutputWithContext(ctx)
}

// ContainerMountVolumeOptionsPtrInput is an input type that accepts ContainerMountVolumeOptionsArgs, ContainerMountVolumeOptionsPtr and ContainerMountVolumeOptionsPtrOutput values.
// You can construct a concrete instance of `ContainerMountVolumeOptionsPtrInput` via:
//
//	        ContainerMountVolumeOptionsArgs{...}
//
//	or:
//
//	        nil
type ContainerMountVolumeOptionsPtrInput interface {
	pulumi.Input

	ToContainerMountVolumeOptionsPtrOutput() ContainerMountVolumeOptionsPtrOutput
	ToContainerMountVolumeOptionsPtrOutputWithContext(context.Context) ContainerMountVolumeOptionsPtrOutput
}

type containerMountVolumeOptionsPtrType ContainerMountVolumeOptionsArgs

func ContainerMountVolumeOptionsPtr(v *ContainerMountVolumeOptionsArgs) ContainerMountVolumeOptionsPtrInput {
	return (*containerMountVolumeOptionsPtrType)(v)
}

func (*containerMountVolumeOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerMountVolumeOptions)(nil)).Elem()
}

func (i *containerMountVolumeOptionsPtrType) ToContainerMountVolumeOptionsPtrOutput() ContainerMountVolumeOptionsPtrOutput {
	return i.ToContainerMountVolumeOptionsPtrOutputWithContext(context.Background())
}

func (i *containerMountVolumeOptionsPtrType) ToContainerMountVolumeOptionsPtrOutputWithContext(ctx context.Context) ContainerMountVolumeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerMountVolumeOptionsPtrOutput)
}

func (i *containerMountVolumeOptionsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ContainerMountVolumeOptions] {
	return pulumix.Output[*ContainerMountVolumeOptions]{
		OutputState: i.ToContainerMountVolumeOptionsPtrOutputWithContext(ctx).OutputState,
	}
}

type ContainerMountVolumeOptionsOutput struct{ *pulumi.OutputState }

func (ContainerMountVolumeOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerMountVolumeOptions)(nil)).Elem()
}

func (o ContainerMountVolumeOptionsOutput) ToContainerMountVolumeOptionsOutput() ContainerMountVolumeOptionsOutput {
	return o
}

func (o ContainerMountVolumeOptionsOutput) ToContainerMountVolumeOptionsOutputWithContext(ctx context.Context) ContainerMountVolumeOptionsOutput {
	return o
}

func (o ContainerMountVolumeOptionsOutput) ToContainerMountVolumeOptionsPtrOutput() ContainerMountVolumeOptionsPtrOutput {
	return o.ToContainerMountVolumeOptionsPtrOutputWithContext(context.Background())
}

func (o ContainerMountVolumeOptionsOutput) ToContainerMountVolumeOptionsPtrOutputWithContext(ctx context.Context) ContainerMountVolumeOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerMountVolumeOptions) *ContainerMountVolumeOptions {
		return &v
	}).(ContainerMountVolumeOptionsPtrOutput)
}

func (o ContainerMountVolumeOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerMountVolumeOptions] {
	return pulumix.Output[ContainerMountVolumeOptions]{
		OutputState: o.OutputState,
	}
}

func (o ContainerMountVolumeOptionsOutput) DriverName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerMountVolumeOptions) *string { return v.DriverName }).(pulumi.StringPtrOutput)
}

func (o ContainerMountVolumeOptionsOutput) DriverOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContainerMountVolumeOptions) map[string]string { return v.DriverOptions }).(pulumi.StringMapOutput)
}

// User-defined key/value metadata
func (o ContainerMountVolumeOptionsOutput) Labels() ContainerMountVolumeOptionsLabelArrayOutput {
	return o.ApplyT(func(v ContainerMountVolumeOptions) []ContainerMountVolumeOptionsLabel { return v.Labels }).(ContainerMountVolumeOptionsLabelArrayOutput)
}

func (o ContainerMountVolumeOptionsOutput) NoCopy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerMountVolumeOptions) *bool { return v.NoCopy }).(pulumi.BoolPtrOutput)
}

type ContainerMountVolumeOptionsPtrOutput struct{ *pulumi.OutputState }

func (ContainerMountVolumeOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerMountVolumeOptions)(nil)).Elem()
}

func (o ContainerMountVolumeOptionsPtrOutput) ToContainerMountVolumeOptionsPtrOutput() ContainerMountVolumeOptionsPtrOutput {
	return o
}

func (o ContainerMountVolumeOptionsPtrOutput) ToContainerMountVolumeOptionsPtrOutputWithContext(ctx context.Context) ContainerMountVolumeOptionsPtrOutput {
	return o
}

func (o ContainerMountVolumeOptionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerMountVolumeOptions] {
	return pulumix.Output[*ContainerMountVolumeOptions]{
		OutputState: o.OutputState,
	}
}

func (o ContainerMountVolumeOptionsPtrOutput) Elem() ContainerMountVolumeOptionsOutput {
	return o.ApplyT(func(v *ContainerMountVolumeOptions) ContainerMountVolumeOptions {
		if v != nil {
			return *v
		}
		var ret ContainerMountVolumeOptions
		return ret
	}).(ContainerMountVolumeOptionsOutput)
}

func (o ContainerMountVolumeOptionsPtrOutput) DriverName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerMountVolumeOptions) *string {
		if v == nil {
			return nil
		}
		return v.DriverName
	}).(pulumi.StringPtrOutput)
}

func (o ContainerMountVolumeOptionsPtrOutput) DriverOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ContainerMountVolumeOptions) map[string]string {
		if v == nil {
			return nil
		}
		return v.DriverOptions
	}).(pulumi.StringMapOutput)
}

// User-defined key/value metadata
func (o ContainerMountVolumeOptionsPtrOutput) Labels() ContainerMountVolumeOptionsLabelArrayOutput {
	return o.ApplyT(func(v *ContainerMountVolumeOptions) []ContainerMountVolumeOptionsLabel {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(ContainerMountVolumeOptionsLabelArrayOutput)
}

func (o ContainerMountVolumeOptionsPtrOutput) NoCopy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerMountVolumeOptions) *bool {
		if v == nil {
			return nil
		}
		return v.NoCopy
	}).(pulumi.BoolPtrOutput)
}

type ContainerMountVolumeOptionsLabel struct {
	// Name of the label
	Label string `pulumi:"label"`
	// Value of the label
	Value string `pulumi:"value"`
}

// ContainerMountVolumeOptionsLabelInput is an input type that accepts ContainerMountVolumeOptionsLabelArgs and ContainerMountVolumeOptionsLabelOutput values.
// You can construct a concrete instance of `ContainerMountVolumeOptionsLabelInput` via:
//
//	ContainerMountVolumeOptionsLabelArgs{...}
type ContainerMountVolumeOptionsLabelInput interface {
	pulumi.Input

	ToContainerMountVolumeOptionsLabelOutput() ContainerMountVolumeOptionsLabelOutput
	ToContainerMountVolumeOptionsLabelOutputWithContext(context.Context) ContainerMountVolumeOptionsLabelOutput
}

type ContainerMountVolumeOptionsLabelArgs struct {
	// Name of the label
	Label pulumi.StringInput `pulumi:"label"`
	// Value of the label
	Value pulumi.StringInput `pulumi:"value"`
}

func (ContainerMountVolumeOptionsLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerMountVolumeOptionsLabel)(nil)).Elem()
}

func (i ContainerMountVolumeOptionsLabelArgs) ToContainerMountVolumeOptionsLabelOutput() ContainerMountVolumeOptionsLabelOutput {
	return i.ToContainerMountVolumeOptionsLabelOutputWithContext(context.Background())
}

func (i ContainerMountVolumeOptionsLabelArgs) ToContainerMountVolumeOptionsLabelOutputWithContext(ctx context.Context) ContainerMountVolumeOptionsLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerMountVolumeOptionsLabelOutput)
}

func (i ContainerMountVolumeOptionsLabelArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerMountVolumeOptionsLabel] {
	return pulumix.Output[ContainerMountVolumeOptionsLabel]{
		OutputState: i.ToContainerMountVolumeOptionsLabelOutputWithContext(ctx).OutputState,
	}
}

// ContainerMountVolumeOptionsLabelArrayInput is an input type that accepts ContainerMountVolumeOptionsLabelArray and ContainerMountVolumeOptionsLabelArrayOutput values.
// You can construct a concrete instance of `ContainerMountVolumeOptionsLabelArrayInput` via:
//
//	ContainerMountVolumeOptionsLabelArray{ ContainerMountVolumeOptionsLabelArgs{...} }
type ContainerMountVolumeOptionsLabelArrayInput interface {
	pulumi.Input

	ToContainerMountVolumeOptionsLabelArrayOutput() ContainerMountVolumeOptionsLabelArrayOutput
	ToContainerMountVolumeOptionsLabelArrayOutputWithContext(context.Context) ContainerMountVolumeOptionsLabelArrayOutput
}

type ContainerMountVolumeOptionsLabelArray []ContainerMountVolumeOptionsLabelInput

func (ContainerMountVolumeOptionsLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerMountVolumeOptionsLabel)(nil)).Elem()
}

func (i ContainerMountVolumeOptionsLabelArray) ToContainerMountVolumeOptionsLabelArrayOutput() ContainerMountVolumeOptionsLabelArrayOutput {
	return i.ToContainerMountVolumeOptionsLabelArrayOutputWithContext(context.Background())
}

func (i ContainerMountVolumeOptionsLabelArray) ToContainerMountVolumeOptionsLabelArrayOutputWithContext(ctx context.Context) ContainerMountVolumeOptionsLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerMountVolumeOptionsLabelArrayOutput)
}

func (i ContainerMountVolumeOptionsLabelArray) ToOutput(ctx context.Context) pulumix.Output[[]ContainerMountVolumeOptionsLabel] {
	return pulumix.Output[[]ContainerMountVolumeOptionsLabel]{
		OutputState: i.ToContainerMountVolumeOptionsLabelArrayOutputWithContext(ctx).OutputState,
	}
}

type ContainerMountVolumeOptionsLabelOutput struct{ *pulumi.OutputState }

func (ContainerMountVolumeOptionsLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerMountVolumeOptionsLabel)(nil)).Elem()
}

func (o ContainerMountVolumeOptionsLabelOutput) ToContainerMountVolumeOptionsLabelOutput() ContainerMountVolumeOptionsLabelOutput {
	return o
}

func (o ContainerMountVolumeOptionsLabelOutput) ToContainerMountVolumeOptionsLabelOutputWithContext(ctx context.Context) ContainerMountVolumeOptionsLabelOutput {
	return o
}

func (o ContainerMountVolumeOptionsLabelOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerMountVolumeOptionsLabel] {
	return pulumix.Output[ContainerMountVolumeOptionsLabel]{
		OutputState: o.OutputState,
	}
}

// Name of the label
func (o ContainerMountVolumeOptionsLabelOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerMountVolumeOptionsLabel) string { return v.Label }).(pulumi.StringOutput)
}

// Value of the label
func (o ContainerMountVolumeOptionsLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerMountVolumeOptionsLabel) string { return v.Value }).(pulumi.StringOutput)
}

type ContainerMountVolumeOptionsLabelArrayOutput struct{ *pulumi.OutputState }

func (ContainerMountVolumeOptionsLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerMountVolumeOptionsLabel)(nil)).Elem()
}

func (o ContainerMountVolumeOptionsLabelArrayOutput) ToContainerMountVolumeOptionsLabelArrayOutput() ContainerMountVolumeOptionsLabelArrayOutput {
	return o
}

func (o ContainerMountVolumeOptionsLabelArrayOutput) ToContainerMountVolumeOptionsLabelArrayOutputWithContext(ctx context.Context) ContainerMountVolumeOptionsLabelArrayOutput {
	return o
}

func (o ContainerMountVolumeOptionsLabelArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerMountVolumeOptionsLabel] {
	return pulumix.Output[[]ContainerMountVolumeOptionsLabel]{
		OutputState: o.OutputState,
	}
}

func (o ContainerMountVolumeOptionsLabelArrayOutput) Index(i pulumi.IntInput) ContainerMountVolumeOptionsLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerMountVolumeOptionsLabel {
		return vs[0].([]ContainerMountVolumeOptionsLabel)[vs[1].(int)]
	}).(ContainerMountVolumeOptionsLabelOutput)
}

type ContainerNetworkData struct {
	Gateway                *string `pulumi:"gateway"`
	GlobalIpv6Address      *string `pulumi:"globalIpv6Address"`
	GlobalIpv6PrefixLength *int    `pulumi:"globalIpv6PrefixLength"`
	IpAddress              *string `pulumi:"ipAddress"`
	IpPrefixLength         *int    `pulumi:"ipPrefixLength"`
	Ipv6Gateway            *string `pulumi:"ipv6Gateway"`
	MacAddress             *string `pulumi:"macAddress"`
	NetworkName            *string `pulumi:"networkName"`
}

// ContainerNetworkDataInput is an input type that accepts ContainerNetworkDataArgs and ContainerNetworkDataOutput values.
// You can construct a concrete instance of `ContainerNetworkDataInput` via:
//
//	ContainerNetworkDataArgs{...}
type ContainerNetworkDataInput interface {
	pulumi.Input

	ToContainerNetworkDataOutput() ContainerNetworkDataOutput
	ToContainerNetworkDataOutputWithContext(context.Context) ContainerNetworkDataOutput
}

type ContainerNetworkDataArgs struct {
	Gateway                pulumi.StringPtrInput `pulumi:"gateway"`
	GlobalIpv6Address      pulumi.StringPtrInput `pulumi:"globalIpv6Address"`
	GlobalIpv6PrefixLength pulumi.IntPtrInput    `pulumi:"globalIpv6PrefixLength"`
	IpAddress              pulumi.StringPtrInput `pulumi:"ipAddress"`
	IpPrefixLength         pulumi.IntPtrInput    `pulumi:"ipPrefixLength"`
	Ipv6Gateway            pulumi.StringPtrInput `pulumi:"ipv6Gateway"`
	MacAddress             pulumi.StringPtrInput `pulumi:"macAddress"`
	NetworkName            pulumi.StringPtrInput `pulumi:"networkName"`
}

func (ContainerNetworkDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerNetworkData)(nil)).Elem()
}

func (i ContainerNetworkDataArgs) ToContainerNetworkDataOutput() ContainerNetworkDataOutput {
	return i.ToContainerNetworkDataOutputWithContext(context.Background())
}

func (i ContainerNetworkDataArgs) ToContainerNetworkDataOutputWithContext(ctx context.Context) ContainerNetworkDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerNetworkDataOutput)
}

func (i ContainerNetworkDataArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerNetworkData] {
	return pulumix.Output[ContainerNetworkData]{
		OutputState: i.ToContainerNetworkDataOutputWithContext(ctx).OutputState,
	}
}

// ContainerNetworkDataArrayInput is an input type that accepts ContainerNetworkDataArray and ContainerNetworkDataArrayOutput values.
// You can construct a concrete instance of `ContainerNetworkDataArrayInput` via:
//
//	ContainerNetworkDataArray{ ContainerNetworkDataArgs{...} }
type ContainerNetworkDataArrayInput interface {
	pulumi.Input

	ToContainerNetworkDataArrayOutput() ContainerNetworkDataArrayOutput
	ToContainerNetworkDataArrayOutputWithContext(context.Context) ContainerNetworkDataArrayOutput
}

type ContainerNetworkDataArray []ContainerNetworkDataInput

func (ContainerNetworkDataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerNetworkData)(nil)).Elem()
}

func (i ContainerNetworkDataArray) ToContainerNetworkDataArrayOutput() ContainerNetworkDataArrayOutput {
	return i.ToContainerNetworkDataArrayOutputWithContext(context.Background())
}

func (i ContainerNetworkDataArray) ToContainerNetworkDataArrayOutputWithContext(ctx context.Context) ContainerNetworkDataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerNetworkDataArrayOutput)
}

func (i ContainerNetworkDataArray) ToOutput(ctx context.Context) pulumix.Output[[]ContainerNetworkData] {
	return pulumix.Output[[]ContainerNetworkData]{
		OutputState: i.ToContainerNetworkDataArrayOutputWithContext(ctx).OutputState,
	}
}

type ContainerNetworkDataOutput struct{ *pulumi.OutputState }

func (ContainerNetworkDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerNetworkData)(nil)).Elem()
}

func (o ContainerNetworkDataOutput) ToContainerNetworkDataOutput() ContainerNetworkDataOutput {
	return o
}

func (o ContainerNetworkDataOutput) ToContainerNetworkDataOutputWithContext(ctx context.Context) ContainerNetworkDataOutput {
	return o
}

func (o ContainerNetworkDataOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerNetworkData] {
	return pulumix.Output[ContainerNetworkData]{
		OutputState: o.OutputState,
	}
}

func (o ContainerNetworkDataOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerNetworkData) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

func (o ContainerNetworkDataOutput) GlobalIpv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerNetworkData) *string { return v.GlobalIpv6Address }).(pulumi.StringPtrOutput)
}

func (o ContainerNetworkDataOutput) GlobalIpv6PrefixLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerNetworkData) *int { return v.GlobalIpv6PrefixLength }).(pulumi.IntPtrOutput)
}

func (o ContainerNetworkDataOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerNetworkData) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

func (o ContainerNetworkDataOutput) IpPrefixLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerNetworkData) *int { return v.IpPrefixLength }).(pulumi.IntPtrOutput)
}

func (o ContainerNetworkDataOutput) Ipv6Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerNetworkData) *string { return v.Ipv6Gateway }).(pulumi.StringPtrOutput)
}

func (o ContainerNetworkDataOutput) MacAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerNetworkData) *string { return v.MacAddress }).(pulumi.StringPtrOutput)
}

func (o ContainerNetworkDataOutput) NetworkName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerNetworkData) *string { return v.NetworkName }).(pulumi.StringPtrOutput)
}

type ContainerNetworkDataArrayOutput struct{ *pulumi.OutputState }

func (ContainerNetworkDataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerNetworkData)(nil)).Elem()
}

func (o ContainerNetworkDataArrayOutput) ToContainerNetworkDataArrayOutput() ContainerNetworkDataArrayOutput {
	return o
}

func (o ContainerNetworkDataArrayOutput) ToContainerNetworkDataArrayOutputWithContext(ctx context.Context) ContainerNetworkDataArrayOutput {
	return o
}

func (o ContainerNetworkDataArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerNetworkData] {
	return pulumix.Output[[]ContainerNetworkData]{
		OutputState: o.OutputState,
	}
}

func (o ContainerNetworkDataArrayOutput) Index(i pulumi.IntInput) ContainerNetworkDataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerNetworkData {
		return vs[0].([]ContainerNetworkData)[vs[1].(int)]
	}).(ContainerNetworkDataOutput)
}

type ContainerNetworksAdvanced struct {
	// The network aliases of the container in the specific network.
	Aliases []string `pulumi:"aliases"`
	// The IPV4 address of the container in the specific network.
	Ipv4Address *string `pulumi:"ipv4Address"`
	// The IPV6 address of the container in the specific network.
	Ipv6Address *string `pulumi:"ipv6Address"`
	// The name or id of the network to use. You can use `name` or `id` attribute from a `Network` resource.
	Name string `pulumi:"name"`
}

// ContainerNetworksAdvancedInput is an input type that accepts ContainerNetworksAdvancedArgs and ContainerNetworksAdvancedOutput values.
// You can construct a concrete instance of `ContainerNetworksAdvancedInput` via:
//
//	ContainerNetworksAdvancedArgs{...}
type ContainerNetworksAdvancedInput interface {
	pulumi.Input

	ToContainerNetworksAdvancedOutput() ContainerNetworksAdvancedOutput
	ToContainerNetworksAdvancedOutputWithContext(context.Context) ContainerNetworksAdvancedOutput
}

type ContainerNetworksAdvancedArgs struct {
	// The network aliases of the container in the specific network.
	Aliases pulumi.StringArrayInput `pulumi:"aliases"`
	// The IPV4 address of the container in the specific network.
	Ipv4Address pulumi.StringPtrInput `pulumi:"ipv4Address"`
	// The IPV6 address of the container in the specific network.
	Ipv6Address pulumi.StringPtrInput `pulumi:"ipv6Address"`
	// The name or id of the network to use. You can use `name` or `id` attribute from a `Network` resource.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ContainerNetworksAdvancedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerNetworksAdvanced)(nil)).Elem()
}

func (i ContainerNetworksAdvancedArgs) ToContainerNetworksAdvancedOutput() ContainerNetworksAdvancedOutput {
	return i.ToContainerNetworksAdvancedOutputWithContext(context.Background())
}

func (i ContainerNetworksAdvancedArgs) ToContainerNetworksAdvancedOutputWithContext(ctx context.Context) ContainerNetworksAdvancedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerNetworksAdvancedOutput)
}

func (i ContainerNetworksAdvancedArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerNetworksAdvanced] {
	return pulumix.Output[ContainerNetworksAdvanced]{
		OutputState: i.ToContainerNetworksAdvancedOutputWithContext(ctx).OutputState,
	}
}

// ContainerNetworksAdvancedArrayInput is an input type that accepts ContainerNetworksAdvancedArray and ContainerNetworksAdvancedArrayOutput values.
// You can construct a concrete instance of `ContainerNetworksAdvancedArrayInput` via:
//
//	ContainerNetworksAdvancedArray{ ContainerNetworksAdvancedArgs{...} }
type ContainerNetworksAdvancedArrayInput interface {
	pulumi.Input

	ToContainerNetworksAdvancedArrayOutput() ContainerNetworksAdvancedArrayOutput
	ToContainerNetworksAdvancedArrayOutputWithContext(context.Context) ContainerNetworksAdvancedArrayOutput
}

type ContainerNetworksAdvancedArray []ContainerNetworksAdvancedInput

func (ContainerNetworksAdvancedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerNetworksAdvanced)(nil)).Elem()
}

func (i ContainerNetworksAdvancedArray) ToContainerNetworksAdvancedArrayOutput() ContainerNetworksAdvancedArrayOutput {
	return i.ToContainerNetworksAdvancedArrayOutputWithContext(context.Background())
}

func (i ContainerNetworksAdvancedArray) ToContainerNetworksAdvancedArrayOutputWithContext(ctx context.Context) ContainerNetworksAdvancedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerNetworksAdvancedArrayOutput)
}

func (i ContainerNetworksAdvancedArray) ToOutput(ctx context.Context) pulumix.Output[[]ContainerNetworksAdvanced] {
	return pulumix.Output[[]ContainerNetworksAdvanced]{
		OutputState: i.ToContainerNetworksAdvancedArrayOutputWithContext(ctx).OutputState,
	}
}

type ContainerNetworksAdvancedOutput struct{ *pulumi.OutputState }

func (ContainerNetworksAdvancedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerNetworksAdvanced)(nil)).Elem()
}

func (o ContainerNetworksAdvancedOutput) ToContainerNetworksAdvancedOutput() ContainerNetworksAdvancedOutput {
	return o
}

func (o ContainerNetworksAdvancedOutput) ToContainerNetworksAdvancedOutputWithContext(ctx context.Context) ContainerNetworksAdvancedOutput {
	return o
}

func (o ContainerNetworksAdvancedOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerNetworksAdvanced] {
	return pulumix.Output[ContainerNetworksAdvanced]{
		OutputState: o.OutputState,
	}
}

// The network aliases of the container in the specific network.
func (o ContainerNetworksAdvancedOutput) Aliases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerNetworksAdvanced) []string { return v.Aliases }).(pulumi.StringArrayOutput)
}

// The IPV4 address of the container in the specific network.
func (o ContainerNetworksAdvancedOutput) Ipv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerNetworksAdvanced) *string { return v.Ipv4Address }).(pulumi.StringPtrOutput)
}

// The IPV6 address of the container in the specific network.
func (o ContainerNetworksAdvancedOutput) Ipv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerNetworksAdvanced) *string { return v.Ipv6Address }).(pulumi.StringPtrOutput)
}

// The name or id of the network to use. You can use `name` or `id` attribute from a `Network` resource.
func (o ContainerNetworksAdvancedOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerNetworksAdvanced) string { return v.Name }).(pulumi.StringOutput)
}

type ContainerNetworksAdvancedArrayOutput struct{ *pulumi.OutputState }

func (ContainerNetworksAdvancedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerNetworksAdvanced)(nil)).Elem()
}

func (o ContainerNetworksAdvancedArrayOutput) ToContainerNetworksAdvancedArrayOutput() ContainerNetworksAdvancedArrayOutput {
	return o
}

func (o ContainerNetworksAdvancedArrayOutput) ToContainerNetworksAdvancedArrayOutputWithContext(ctx context.Context) ContainerNetworksAdvancedArrayOutput {
	return o
}

func (o ContainerNetworksAdvancedArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerNetworksAdvanced] {
	return pulumix.Output[[]ContainerNetworksAdvanced]{
		OutputState: o.OutputState,
	}
}

func (o ContainerNetworksAdvancedArrayOutput) Index(i pulumi.IntInput) ContainerNetworksAdvancedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerNetworksAdvanced {
		return vs[0].([]ContainerNetworksAdvanced)[vs[1].(int)]
	}).(ContainerNetworksAdvancedOutput)
}

type ContainerPort struct {
	// Port exposed out of the container. If not given a free random port `>= 32768` will be used.
	External *int `pulumi:"external"`
	// Port within the container.
	Internal int `pulumi:"internal"`
	// IP address/mask that can access this port. Defaults to `0.0.0.0`.
	Ip *string `pulumi:"ip"`
	// Protocol that can be used over this port. Defaults to `tcp`.
	Protocol *string `pulumi:"protocol"`
}

// ContainerPortInput is an input type that accepts ContainerPortArgs and ContainerPortOutput values.
// You can construct a concrete instance of `ContainerPortInput` via:
//
//	ContainerPortArgs{...}
type ContainerPortInput interface {
	pulumi.Input

	ToContainerPortOutput() ContainerPortOutput
	ToContainerPortOutputWithContext(context.Context) ContainerPortOutput
}

type ContainerPortArgs struct {
	// Port exposed out of the container. If not given a free random port `>= 32768` will be used.
	External pulumi.IntPtrInput `pulumi:"external"`
	// Port within the container.
	Internal pulumi.IntInput `pulumi:"internal"`
	// IP address/mask that can access this port. Defaults to `0.0.0.0`.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// Protocol that can be used over this port. Defaults to `tcp`.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (ContainerPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPort)(nil)).Elem()
}

func (i ContainerPortArgs) ToContainerPortOutput() ContainerPortOutput {
	return i.ToContainerPortOutputWithContext(context.Background())
}

func (i ContainerPortArgs) ToContainerPortOutputWithContext(ctx context.Context) ContainerPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPortOutput)
}

func (i ContainerPortArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerPort] {
	return pulumix.Output[ContainerPort]{
		OutputState: i.ToContainerPortOutputWithContext(ctx).OutputState,
	}
}

// ContainerPortArrayInput is an input type that accepts ContainerPortArray and ContainerPortArrayOutput values.
// You can construct a concrete instance of `ContainerPortArrayInput` via:
//
//	ContainerPortArray{ ContainerPortArgs{...} }
type ContainerPortArrayInput interface {
	pulumi.Input

	ToContainerPortArrayOutput() ContainerPortArrayOutput
	ToContainerPortArrayOutputWithContext(context.Context) ContainerPortArrayOutput
}

type ContainerPortArray []ContainerPortInput

func (ContainerPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerPort)(nil)).Elem()
}

func (i ContainerPortArray) ToContainerPortArrayOutput() ContainerPortArrayOutput {
	return i.ToContainerPortArrayOutputWithContext(context.Background())
}

func (i ContainerPortArray) ToContainerPortArrayOutputWithContext(ctx context.Context) ContainerPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPortArrayOutput)
}

func (i ContainerPortArray) ToOutput(ctx context.Context) pulumix.Output[[]ContainerPort] {
	return pulumix.Output[[]ContainerPort]{
		OutputState: i.ToContainerPortArrayOutputWithContext(ctx).OutputState,
	}
}

type ContainerPortOutput struct{ *pulumi.OutputState }

func (ContainerPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPort)(nil)).Elem()
}

func (o ContainerPortOutput) ToContainerPortOutput() ContainerPortOutput {
	return o
}

func (o ContainerPortOutput) ToContainerPortOutputWithContext(ctx context.Context) ContainerPortOutput {
	return o
}

func (o ContainerPortOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerPort] {
	return pulumix.Output[ContainerPort]{
		OutputState: o.OutputState,
	}
}

// Port exposed out of the container. If not given a free random port `>= 32768` will be used.
func (o ContainerPortOutput) External() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerPort) *int { return v.External }).(pulumi.IntPtrOutput)
}

// Port within the container.
func (o ContainerPortOutput) Internal() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerPort) int { return v.Internal }).(pulumi.IntOutput)
}

// IP address/mask that can access this port. Defaults to `0.0.0.0`.
func (o ContainerPortOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerPort) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// Protocol that can be used over this port. Defaults to `tcp`.
func (o ContainerPortOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerPort) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type ContainerPortArrayOutput struct{ *pulumi.OutputState }

func (ContainerPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerPort)(nil)).Elem()
}

func (o ContainerPortArrayOutput) ToContainerPortArrayOutput() ContainerPortArrayOutput {
	return o
}

func (o ContainerPortArrayOutput) ToContainerPortArrayOutputWithContext(ctx context.Context) ContainerPortArrayOutput {
	return o
}

func (o ContainerPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerPort] {
	return pulumix.Output[[]ContainerPort]{
		OutputState: o.OutputState,
	}
}

func (o ContainerPortArrayOutput) Index(i pulumi.IntInput) ContainerPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerPort {
		return vs[0].([]ContainerPort)[vs[1].(int)]
	}).(ContainerPortOutput)
}

type ContainerUlimit struct {
	// The hard limit
	Hard int `pulumi:"hard"`
	// The name of the ulimit
	Name string `pulumi:"name"`
	// The soft limit
	Soft int `pulumi:"soft"`
}

// ContainerUlimitInput is an input type that accepts ContainerUlimitArgs and ContainerUlimitOutput values.
// You can construct a concrete instance of `ContainerUlimitInput` via:
//
//	ContainerUlimitArgs{...}
type ContainerUlimitInput interface {
	pulumi.Input

	ToContainerUlimitOutput() ContainerUlimitOutput
	ToContainerUlimitOutputWithContext(context.Context) ContainerUlimitOutput
}

type ContainerUlimitArgs struct {
	// The hard limit
	Hard pulumi.IntInput `pulumi:"hard"`
	// The name of the ulimit
	Name pulumi.StringInput `pulumi:"name"`
	// The soft limit
	Soft pulumi.IntInput `pulumi:"soft"`
}

func (ContainerUlimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerUlimit)(nil)).Elem()
}

func (i ContainerUlimitArgs) ToContainerUlimitOutput() ContainerUlimitOutput {
	return i.ToContainerUlimitOutputWithContext(context.Background())
}

func (i ContainerUlimitArgs) ToContainerUlimitOutputWithContext(ctx context.Context) ContainerUlimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerUlimitOutput)
}

func (i ContainerUlimitArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerUlimit] {
	return pulumix.Output[ContainerUlimit]{
		OutputState: i.ToContainerUlimitOutputWithContext(ctx).OutputState,
	}
}

// ContainerUlimitArrayInput is an input type that accepts ContainerUlimitArray and ContainerUlimitArrayOutput values.
// You can construct a concrete instance of `ContainerUlimitArrayInput` via:
//
//	ContainerUlimitArray{ ContainerUlimitArgs{...} }
type ContainerUlimitArrayInput interface {
	pulumi.Input

	ToContainerUlimitArrayOutput() ContainerUlimitArrayOutput
	ToContainerUlimitArrayOutputWithContext(context.Context) ContainerUlimitArrayOutput
}

type ContainerUlimitArray []ContainerUlimitInput

func (ContainerUlimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerUlimit)(nil)).Elem()
}

func (i ContainerUlimitArray) ToContainerUlimitArrayOutput() ContainerUlimitArrayOutput {
	return i.ToContainerUlimitArrayOutputWithContext(context.Background())
}

func (i ContainerUlimitArray) ToContainerUlimitArrayOutputWithContext(ctx context.Context) ContainerUlimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerUlimitArrayOutput)
}

func (i ContainerUlimitArray) ToOutput(ctx context.Context) pulumix.Output[[]ContainerUlimit] {
	return pulumix.Output[[]ContainerUlimit]{
		OutputState: i.ToContainerUlimitArrayOutputWithContext(ctx).OutputState,
	}
}

type ContainerUlimitOutput struct{ *pulumi.OutputState }

func (ContainerUlimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerUlimit)(nil)).Elem()
}

func (o ContainerUlimitOutput) ToContainerUlimitOutput() ContainerUlimitOutput {
	return o
}

func (o ContainerUlimitOutput) ToContainerUlimitOutputWithContext(ctx context.Context) ContainerUlimitOutput {
	return o
}

func (o ContainerUlimitOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerUlimit] {
	return pulumix.Output[ContainerUlimit]{
		OutputState: o.OutputState,
	}
}

// The hard limit
func (o ContainerUlimitOutput) Hard() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerUlimit) int { return v.Hard }).(pulumi.IntOutput)
}

// The name of the ulimit
func (o ContainerUlimitOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerUlimit) string { return v.Name }).(pulumi.StringOutput)
}

// The soft limit
func (o ContainerUlimitOutput) Soft() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerUlimit) int { return v.Soft }).(pulumi.IntOutput)
}

type ContainerUlimitArrayOutput struct{ *pulumi.OutputState }

func (ContainerUlimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerUlimit)(nil)).Elem()
}

func (o ContainerUlimitArrayOutput) ToContainerUlimitArrayOutput() ContainerUlimitArrayOutput {
	return o
}

func (o ContainerUlimitArrayOutput) ToContainerUlimitArrayOutputWithContext(ctx context.Context) ContainerUlimitArrayOutput {
	return o
}

func (o ContainerUlimitArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerUlimit] {
	return pulumix.Output[[]ContainerUlimit]{
		OutputState: o.OutputState,
	}
}

func (o ContainerUlimitArrayOutput) Index(i pulumi.IntInput) ContainerUlimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerUlimit {
		return vs[0].([]ContainerUlimit)[vs[1].(int)]
	}).(ContainerUlimitOutput)
}

type ContainerUpload struct {
	// Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text. Conflicts with `contentBase64` & `source`
	Content       *string `pulumi:"content"`
	ContentBase64 *string `pulumi:"contentBase64"`
	// If `true`, the file will be uploaded with user executable permission. Defaults to `false`.
	Executable *bool `pulumi:"executable"`
	// Path to the file in the container where is upload goes to
	File string `pulumi:"file"`
	// A filename that references a file which will be uploaded as the object content. This allows for large file uploads that do not get stored in state. Conflicts with `content` & `contentBase64`
	Source *string `pulumi:"source"`
	// If using `source`, this will force an update if the file content has updated but the filename has not.
	SourceHash *string `pulumi:"sourceHash"`
}

// ContainerUploadInput is an input type that accepts ContainerUploadArgs and ContainerUploadOutput values.
// You can construct a concrete instance of `ContainerUploadInput` via:
//
//	ContainerUploadArgs{...}
type ContainerUploadInput interface {
	pulumi.Input

	ToContainerUploadOutput() ContainerUploadOutput
	ToContainerUploadOutputWithContext(context.Context) ContainerUploadOutput
}

type ContainerUploadArgs struct {
	// Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text. Conflicts with `contentBase64` & `source`
	Content       pulumi.StringPtrInput `pulumi:"content"`
	ContentBase64 pulumi.StringPtrInput `pulumi:"contentBase64"`
	// If `true`, the file will be uploaded with user executable permission. Defaults to `false`.
	Executable pulumi.BoolPtrInput `pulumi:"executable"`
	// Path to the file in the container where is upload goes to
	File pulumi.StringInput `pulumi:"file"`
	// A filename that references a file which will be uploaded as the object content. This allows for large file uploads that do not get stored in state. Conflicts with `content` & `contentBase64`
	Source pulumi.StringPtrInput `pulumi:"source"`
	// If using `source`, this will force an update if the file content has updated but the filename has not.
	SourceHash pulumi.StringPtrInput `pulumi:"sourceHash"`
}

func (ContainerUploadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerUpload)(nil)).Elem()
}

func (i ContainerUploadArgs) ToContainerUploadOutput() ContainerUploadOutput {
	return i.ToContainerUploadOutputWithContext(context.Background())
}

func (i ContainerUploadArgs) ToContainerUploadOutputWithContext(ctx context.Context) ContainerUploadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerUploadOutput)
}

func (i ContainerUploadArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerUpload] {
	return pulumix.Output[ContainerUpload]{
		OutputState: i.ToContainerUploadOutputWithContext(ctx).OutputState,
	}
}

// ContainerUploadArrayInput is an input type that accepts ContainerUploadArray and ContainerUploadArrayOutput values.
// You can construct a concrete instance of `ContainerUploadArrayInput` via:
//
//	ContainerUploadArray{ ContainerUploadArgs{...} }
type ContainerUploadArrayInput interface {
	pulumi.Input

	ToContainerUploadArrayOutput() ContainerUploadArrayOutput
	ToContainerUploadArrayOutputWithContext(context.Context) ContainerUploadArrayOutput
}

type ContainerUploadArray []ContainerUploadInput

func (ContainerUploadArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerUpload)(nil)).Elem()
}

func (i ContainerUploadArray) ToContainerUploadArrayOutput() ContainerUploadArrayOutput {
	return i.ToContainerUploadArrayOutputWithContext(context.Background())
}

func (i ContainerUploadArray) ToContainerUploadArrayOutputWithContext(ctx context.Context) ContainerUploadArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerUploadArrayOutput)
}

func (i ContainerUploadArray) ToOutput(ctx context.Context) pulumix.Output[[]ContainerUpload] {
	return pulumix.Output[[]ContainerUpload]{
		OutputState: i.ToContainerUploadArrayOutputWithContext(ctx).OutputState,
	}
}

type ContainerUploadOutput struct{ *pulumi.OutputState }

func (ContainerUploadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerUpload)(nil)).Elem()
}

func (o ContainerUploadOutput) ToContainerUploadOutput() ContainerUploadOutput {
	return o
}

func (o ContainerUploadOutput) ToContainerUploadOutputWithContext(ctx context.Context) ContainerUploadOutput {
	return o
}

func (o ContainerUploadOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerUpload] {
	return pulumix.Output[ContainerUpload]{
		OutputState: o.OutputState,
	}
}

// Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text. Conflicts with `contentBase64` & `source`
func (o ContainerUploadOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerUpload) *string { return v.Content }).(pulumi.StringPtrOutput)
}

func (o ContainerUploadOutput) ContentBase64() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerUpload) *string { return v.ContentBase64 }).(pulumi.StringPtrOutput)
}

// If `true`, the file will be uploaded with user executable permission. Defaults to `false`.
func (o ContainerUploadOutput) Executable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerUpload) *bool { return v.Executable }).(pulumi.BoolPtrOutput)
}

// Path to the file in the container where is upload goes to
func (o ContainerUploadOutput) File() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerUpload) string { return v.File }).(pulumi.StringOutput)
}

// A filename that references a file which will be uploaded as the object content. This allows for large file uploads that do not get stored in state. Conflicts with `content` & `contentBase64`
func (o ContainerUploadOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerUpload) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// If using `source`, this will force an update if the file content has updated but the filename has not.
func (o ContainerUploadOutput) SourceHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerUpload) *string { return v.SourceHash }).(pulumi.StringPtrOutput)
}

type ContainerUploadArrayOutput struct{ *pulumi.OutputState }

func (ContainerUploadArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerUpload)(nil)).Elem()
}

func (o ContainerUploadArrayOutput) ToContainerUploadArrayOutput() ContainerUploadArrayOutput {
	return o
}

func (o ContainerUploadArrayOutput) ToContainerUploadArrayOutputWithContext(ctx context.Context) ContainerUploadArrayOutput {
	return o
}

func (o ContainerUploadArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerUpload] {
	return pulumix.Output[[]ContainerUpload]{
		OutputState: o.OutputState,
	}
}

func (o ContainerUploadArrayOutput) Index(i pulumi.IntInput) ContainerUploadOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerUpload {
		return vs[0].([]ContainerUpload)[vs[1].(int)]
	}).(ContainerUploadOutput)
}

type ContainerVolume struct {
	// The path in the container where the volume will be mounted.
	ContainerPath *string `pulumi:"containerPath"`
	// The container where the volume is coming from.
	FromContainer *string `pulumi:"fromContainer"`
	// The path on the host where the volume is coming from.
	HostPath *string `pulumi:"hostPath"`
	// If `true`, this volume will be readonly. Defaults to `false`.
	ReadOnly *bool `pulumi:"readOnly"`
	// The name of the docker volume which should be mounted.
	VolumeName *string `pulumi:"volumeName"`
}

// ContainerVolumeInput is an input type that accepts ContainerVolumeArgs and ContainerVolumeOutput values.
// You can construct a concrete instance of `ContainerVolumeInput` via:
//
//	ContainerVolumeArgs{...}
type ContainerVolumeInput interface {
	pulumi.Input

	ToContainerVolumeOutput() ContainerVolumeOutput
	ToContainerVolumeOutputWithContext(context.Context) ContainerVolumeOutput
}

type ContainerVolumeArgs struct {
	// The path in the container where the volume will be mounted.
	ContainerPath pulumi.StringPtrInput `pulumi:"containerPath"`
	// The container where the volume is coming from.
	FromContainer pulumi.StringPtrInput `pulumi:"fromContainer"`
	// The path on the host where the volume is coming from.
	HostPath pulumi.StringPtrInput `pulumi:"hostPath"`
	// If `true`, this volume will be readonly. Defaults to `false`.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// The name of the docker volume which should be mounted.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (ContainerVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerVolume)(nil)).Elem()
}

func (i ContainerVolumeArgs) ToContainerVolumeOutput() ContainerVolumeOutput {
	return i.ToContainerVolumeOutputWithContext(context.Background())
}

func (i ContainerVolumeArgs) ToContainerVolumeOutputWithContext(ctx context.Context) ContainerVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerVolumeOutput)
}

func (i ContainerVolumeArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerVolume] {
	return pulumix.Output[ContainerVolume]{
		OutputState: i.ToContainerVolumeOutputWithContext(ctx).OutputState,
	}
}

// ContainerVolumeArrayInput is an input type that accepts ContainerVolumeArray and ContainerVolumeArrayOutput values.
// You can construct a concrete instance of `ContainerVolumeArrayInput` via:
//
//	ContainerVolumeArray{ ContainerVolumeArgs{...} }
type ContainerVolumeArrayInput interface {
	pulumi.Input

	ToContainerVolumeArrayOutput() ContainerVolumeArrayOutput
	ToContainerVolumeArrayOutputWithContext(context.Context) ContainerVolumeArrayOutput
}

type ContainerVolumeArray []ContainerVolumeInput

func (ContainerVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerVolume)(nil)).Elem()
}

func (i ContainerVolumeArray) ToContainerVolumeArrayOutput() ContainerVolumeArrayOutput {
	return i.ToContainerVolumeArrayOutputWithContext(context.Background())
}

func (i ContainerVolumeArray) ToContainerVolumeArrayOutputWithContext(ctx context.Context) ContainerVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerVolumeArrayOutput)
}

func (i ContainerVolumeArray) ToOutput(ctx context.Context) pulumix.Output[[]ContainerVolume] {
	return pulumix.Output[[]ContainerVolume]{
		OutputState: i.ToContainerVolumeArrayOutputWithContext(ctx).OutputState,
	}
}

type ContainerVolumeOutput struct{ *pulumi.OutputState }

func (ContainerVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerVolume)(nil)).Elem()
}

func (o ContainerVolumeOutput) ToContainerVolumeOutput() ContainerVolumeOutput {
	return o
}

func (o ContainerVolumeOutput) ToContainerVolumeOutputWithContext(ctx context.Context) ContainerVolumeOutput {
	return o
}

func (o ContainerVolumeOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerVolume] {
	return pulumix.Output[ContainerVolume]{
		OutputState: o.OutputState,
	}
}

// The path in the container where the volume will be mounted.
func (o ContainerVolumeOutput) ContainerPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerVolume) *string { return v.ContainerPath }).(pulumi.StringPtrOutput)
}

// The container where the volume is coming from.
func (o ContainerVolumeOutput) FromContainer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerVolume) *string { return v.FromContainer }).(pulumi.StringPtrOutput)
}

// The path on the host where the volume is coming from.
func (o ContainerVolumeOutput) HostPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerVolume) *string { return v.HostPath }).(pulumi.StringPtrOutput)
}

// If `true`, this volume will be readonly. Defaults to `false`.
func (o ContainerVolumeOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerVolume) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// The name of the docker volume which should be mounted.
func (o ContainerVolumeOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerVolume) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type ContainerVolumeArrayOutput struct{ *pulumi.OutputState }

func (ContainerVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerVolume)(nil)).Elem()
}

func (o ContainerVolumeArrayOutput) ToContainerVolumeArrayOutput() ContainerVolumeArrayOutput {
	return o
}

func (o ContainerVolumeArrayOutput) ToContainerVolumeArrayOutputWithContext(ctx context.Context) ContainerVolumeArrayOutput {
	return o
}

func (o ContainerVolumeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerVolume] {
	return pulumix.Output[[]ContainerVolume]{
		OutputState: o.OutputState,
	}
}

func (o ContainerVolumeArrayOutput) Index(i pulumi.IntInput) ContainerVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerVolume {
		return vs[0].([]ContainerVolume)[vs[1].(int)]
	}).(ContainerVolumeOutput)
}

type NetworkIpamConfig struct {
	// Auxiliary IPv4 or IPv6 addresses used by Network driver
	AuxAddress map[string]interface{} `pulumi:"auxAddress"`
	// The IP address of the gateway
	Gateway *string `pulumi:"gateway"`
	// The ip range in CIDR form
	IpRange *string `pulumi:"ipRange"`
	// The subnet in CIDR form
	Subnet *string `pulumi:"subnet"`
}

// NetworkIpamConfigInput is an input type that accepts NetworkIpamConfigArgs and NetworkIpamConfigOutput values.
// You can construct a concrete instance of `NetworkIpamConfigInput` via:
//
//	NetworkIpamConfigArgs{...}
type NetworkIpamConfigInput interface {
	pulumi.Input

	ToNetworkIpamConfigOutput() NetworkIpamConfigOutput
	ToNetworkIpamConfigOutputWithContext(context.Context) NetworkIpamConfigOutput
}

type NetworkIpamConfigArgs struct {
	// Auxiliary IPv4 or IPv6 addresses used by Network driver
	AuxAddress pulumi.MapInput `pulumi:"auxAddress"`
	// The IP address of the gateway
	Gateway pulumi.StringPtrInput `pulumi:"gateway"`
	// The ip range in CIDR form
	IpRange pulumi.StringPtrInput `pulumi:"ipRange"`
	// The subnet in CIDR form
	Subnet pulumi.StringPtrInput `pulumi:"subnet"`
}

func (NetworkIpamConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkIpamConfig)(nil)).Elem()
}

func (i NetworkIpamConfigArgs) ToNetworkIpamConfigOutput() NetworkIpamConfigOutput {
	return i.ToNetworkIpamConfigOutputWithContext(context.Background())
}

func (i NetworkIpamConfigArgs) ToNetworkIpamConfigOutputWithContext(ctx context.Context) NetworkIpamConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkIpamConfigOutput)
}

func (i NetworkIpamConfigArgs) ToOutput(ctx context.Context) pulumix.Output[NetworkIpamConfig] {
	return pulumix.Output[NetworkIpamConfig]{
		OutputState: i.ToNetworkIpamConfigOutputWithContext(ctx).OutputState,
	}
}

// NetworkIpamConfigArrayInput is an input type that accepts NetworkIpamConfigArray and NetworkIpamConfigArrayOutput values.
// You can construct a concrete instance of `NetworkIpamConfigArrayInput` via:
//
//	NetworkIpamConfigArray{ NetworkIpamConfigArgs{...} }
type NetworkIpamConfigArrayInput interface {
	pulumi.Input

	ToNetworkIpamConfigArrayOutput() NetworkIpamConfigArrayOutput
	ToNetworkIpamConfigArrayOutputWithContext(context.Context) NetworkIpamConfigArrayOutput
}

type NetworkIpamConfigArray []NetworkIpamConfigInput

func (NetworkIpamConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkIpamConfig)(nil)).Elem()
}

func (i NetworkIpamConfigArray) ToNetworkIpamConfigArrayOutput() NetworkIpamConfigArrayOutput {
	return i.ToNetworkIpamConfigArrayOutputWithContext(context.Background())
}

func (i NetworkIpamConfigArray) ToNetworkIpamConfigArrayOutputWithContext(ctx context.Context) NetworkIpamConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkIpamConfigArrayOutput)
}

func (i NetworkIpamConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]NetworkIpamConfig] {
	return pulumix.Output[[]NetworkIpamConfig]{
		OutputState: i.ToNetworkIpamConfigArrayOutputWithContext(ctx).OutputState,
	}
}

type NetworkIpamConfigOutput struct{ *pulumi.OutputState }

func (NetworkIpamConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkIpamConfig)(nil)).Elem()
}

func (o NetworkIpamConfigOutput) ToNetworkIpamConfigOutput() NetworkIpamConfigOutput {
	return o
}

func (o NetworkIpamConfigOutput) ToNetworkIpamConfigOutputWithContext(ctx context.Context) NetworkIpamConfigOutput {
	return o
}

func (o NetworkIpamConfigOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkIpamConfig] {
	return pulumix.Output[NetworkIpamConfig]{
		OutputState: o.OutputState,
	}
}

// Auxiliary IPv4 or IPv6 addresses used by Network driver
func (o NetworkIpamConfigOutput) AuxAddress() pulumi.MapOutput {
	return o.ApplyT(func(v NetworkIpamConfig) map[string]interface{} { return v.AuxAddress }).(pulumi.MapOutput)
}

// The IP address of the gateway
func (o NetworkIpamConfigOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkIpamConfig) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

// The ip range in CIDR form
func (o NetworkIpamConfigOutput) IpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkIpamConfig) *string { return v.IpRange }).(pulumi.StringPtrOutput)
}

// The subnet in CIDR form
func (o NetworkIpamConfigOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkIpamConfig) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

type NetworkIpamConfigArrayOutput struct{ *pulumi.OutputState }

func (NetworkIpamConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkIpamConfig)(nil)).Elem()
}

func (o NetworkIpamConfigArrayOutput) ToNetworkIpamConfigArrayOutput() NetworkIpamConfigArrayOutput {
	return o
}

func (o NetworkIpamConfigArrayOutput) ToNetworkIpamConfigArrayOutputWithContext(ctx context.Context) NetworkIpamConfigArrayOutput {
	return o
}

func (o NetworkIpamConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]NetworkIpamConfig] {
	return pulumix.Output[[]NetworkIpamConfig]{
		OutputState: o.OutputState,
	}
}

func (o NetworkIpamConfigArrayOutput) Index(i pulumi.IntInput) NetworkIpamConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkIpamConfig {
		return vs[0].([]NetworkIpamConfig)[vs[1].(int)]
	}).(NetworkIpamConfigOutput)
}

type NetworkLabel struct {
	// Name of the label
	Label string `pulumi:"label"`
	// Value of the label
	Value string `pulumi:"value"`
}

// NetworkLabelInput is an input type that accepts NetworkLabelArgs and NetworkLabelOutput values.
// You can construct a concrete instance of `NetworkLabelInput` via:
//
//	NetworkLabelArgs{...}
type NetworkLabelInput interface {
	pulumi.Input

	ToNetworkLabelOutput() NetworkLabelOutput
	ToNetworkLabelOutputWithContext(context.Context) NetworkLabelOutput
}

type NetworkLabelArgs struct {
	// Name of the label
	Label pulumi.StringInput `pulumi:"label"`
	// Value of the label
	Value pulumi.StringInput `pulumi:"value"`
}

func (NetworkLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkLabel)(nil)).Elem()
}

func (i NetworkLabelArgs) ToNetworkLabelOutput() NetworkLabelOutput {
	return i.ToNetworkLabelOutputWithContext(context.Background())
}

func (i NetworkLabelArgs) ToNetworkLabelOutputWithContext(ctx context.Context) NetworkLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLabelOutput)
}

func (i NetworkLabelArgs) ToOutput(ctx context.Context) pulumix.Output[NetworkLabel] {
	return pulumix.Output[NetworkLabel]{
		OutputState: i.ToNetworkLabelOutputWithContext(ctx).OutputState,
	}
}

// NetworkLabelArrayInput is an input type that accepts NetworkLabelArray and NetworkLabelArrayOutput values.
// You can construct a concrete instance of `NetworkLabelArrayInput` via:
//
//	NetworkLabelArray{ NetworkLabelArgs{...} }
type NetworkLabelArrayInput interface {
	pulumi.Input

	ToNetworkLabelArrayOutput() NetworkLabelArrayOutput
	ToNetworkLabelArrayOutputWithContext(context.Context) NetworkLabelArrayOutput
}

type NetworkLabelArray []NetworkLabelInput

func (NetworkLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkLabel)(nil)).Elem()
}

func (i NetworkLabelArray) ToNetworkLabelArrayOutput() NetworkLabelArrayOutput {
	return i.ToNetworkLabelArrayOutputWithContext(context.Background())
}

func (i NetworkLabelArray) ToNetworkLabelArrayOutputWithContext(ctx context.Context) NetworkLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLabelArrayOutput)
}

func (i NetworkLabelArray) ToOutput(ctx context.Context) pulumix.Output[[]NetworkLabel] {
	return pulumix.Output[[]NetworkLabel]{
		OutputState: i.ToNetworkLabelArrayOutputWithContext(ctx).OutputState,
	}
}

type NetworkLabelOutput struct{ *pulumi.OutputState }

func (NetworkLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkLabel)(nil)).Elem()
}

func (o NetworkLabelOutput) ToNetworkLabelOutput() NetworkLabelOutput {
	return o
}

func (o NetworkLabelOutput) ToNetworkLabelOutputWithContext(ctx context.Context) NetworkLabelOutput {
	return o
}

func (o NetworkLabelOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkLabel] {
	return pulumix.Output[NetworkLabel]{
		OutputState: o.OutputState,
	}
}

// Name of the label
func (o NetworkLabelOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkLabel) string { return v.Label }).(pulumi.StringOutput)
}

// Value of the label
func (o NetworkLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkLabel) string { return v.Value }).(pulumi.StringOutput)
}

type NetworkLabelArrayOutput struct{ *pulumi.OutputState }

func (NetworkLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkLabel)(nil)).Elem()
}

func (o NetworkLabelArrayOutput) ToNetworkLabelArrayOutput() NetworkLabelArrayOutput {
	return o
}

func (o NetworkLabelArrayOutput) ToNetworkLabelArrayOutputWithContext(ctx context.Context) NetworkLabelArrayOutput {
	return o
}

func (o NetworkLabelArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]NetworkLabel] {
	return pulumix.Output[[]NetworkLabel]{
		OutputState: o.OutputState,
	}
}

func (o NetworkLabelArrayOutput) Index(i pulumi.IntInput) NetworkLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkLabel {
		return vs[0].([]NetworkLabel)[vs[1].(int)]
	}).(NetworkLabelOutput)
}

type PluginGrantPermission struct {
	// The name of the permission
	Name string `pulumi:"name"`
	// The value of the permission
	Values []string `pulumi:"values"`
}

// PluginGrantPermissionInput is an input type that accepts PluginGrantPermissionArgs and PluginGrantPermissionOutput values.
// You can construct a concrete instance of `PluginGrantPermissionInput` via:
//
//	PluginGrantPermissionArgs{...}
type PluginGrantPermissionInput interface {
	pulumi.Input

	ToPluginGrantPermissionOutput() PluginGrantPermissionOutput
	ToPluginGrantPermissionOutputWithContext(context.Context) PluginGrantPermissionOutput
}

type PluginGrantPermissionArgs struct {
	// The name of the permission
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the permission
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PluginGrantPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PluginGrantPermission)(nil)).Elem()
}

func (i PluginGrantPermissionArgs) ToPluginGrantPermissionOutput() PluginGrantPermissionOutput {
	return i.ToPluginGrantPermissionOutputWithContext(context.Background())
}

func (i PluginGrantPermissionArgs) ToPluginGrantPermissionOutputWithContext(ctx context.Context) PluginGrantPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluginGrantPermissionOutput)
}

func (i PluginGrantPermissionArgs) ToOutput(ctx context.Context) pulumix.Output[PluginGrantPermission] {
	return pulumix.Output[PluginGrantPermission]{
		OutputState: i.ToPluginGrantPermissionOutputWithContext(ctx).OutputState,
	}
}

// PluginGrantPermissionArrayInput is an input type that accepts PluginGrantPermissionArray and PluginGrantPermissionArrayOutput values.
// You can construct a concrete instance of `PluginGrantPermissionArrayInput` via:
//
//	PluginGrantPermissionArray{ PluginGrantPermissionArgs{...} }
type PluginGrantPermissionArrayInput interface {
	pulumi.Input

	ToPluginGrantPermissionArrayOutput() PluginGrantPermissionArrayOutput
	ToPluginGrantPermissionArrayOutputWithContext(context.Context) PluginGrantPermissionArrayOutput
}

type PluginGrantPermissionArray []PluginGrantPermissionInput

func (PluginGrantPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PluginGrantPermission)(nil)).Elem()
}

func (i PluginGrantPermissionArray) ToPluginGrantPermissionArrayOutput() PluginGrantPermissionArrayOutput {
	return i.ToPluginGrantPermissionArrayOutputWithContext(context.Background())
}

func (i PluginGrantPermissionArray) ToPluginGrantPermissionArrayOutputWithContext(ctx context.Context) PluginGrantPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluginGrantPermissionArrayOutput)
}

func (i PluginGrantPermissionArray) ToOutput(ctx context.Context) pulumix.Output[[]PluginGrantPermission] {
	return pulumix.Output[[]PluginGrantPermission]{
		OutputState: i.ToPluginGrantPermissionArrayOutputWithContext(ctx).OutputState,
	}
}

type PluginGrantPermissionOutput struct{ *pulumi.OutputState }

func (PluginGrantPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PluginGrantPermission)(nil)).Elem()
}

func (o PluginGrantPermissionOutput) ToPluginGrantPermissionOutput() PluginGrantPermissionOutput {
	return o
}

func (o PluginGrantPermissionOutput) ToPluginGrantPermissionOutputWithContext(ctx context.Context) PluginGrantPermissionOutput {
	return o
}

func (o PluginGrantPermissionOutput) ToOutput(ctx context.Context) pulumix.Output[PluginGrantPermission] {
	return pulumix.Output[PluginGrantPermission]{
		OutputState: o.OutputState,
	}
}

// The name of the permission
func (o PluginGrantPermissionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PluginGrantPermission) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the permission
func (o PluginGrantPermissionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PluginGrantPermission) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type PluginGrantPermissionArrayOutput struct{ *pulumi.OutputState }

func (PluginGrantPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PluginGrantPermission)(nil)).Elem()
}

func (o PluginGrantPermissionArrayOutput) ToPluginGrantPermissionArrayOutput() PluginGrantPermissionArrayOutput {
	return o
}

func (o PluginGrantPermissionArrayOutput) ToPluginGrantPermissionArrayOutputWithContext(ctx context.Context) PluginGrantPermissionArrayOutput {
	return o
}

func (o PluginGrantPermissionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PluginGrantPermission] {
	return pulumix.Output[[]PluginGrantPermission]{
		OutputState: o.OutputState,
	}
}

func (o PluginGrantPermissionArrayOutput) Index(i pulumi.IntInput) PluginGrantPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PluginGrantPermission {
		return vs[0].([]PluginGrantPermission)[vs[1].(int)]
	}).(PluginGrantPermissionOutput)
}

type ProviderRegistryAuth struct {
	Address           string  `pulumi:"address"`
	AuthDisabled      *bool   `pulumi:"authDisabled"`
	ConfigFile        *string `pulumi:"configFile"`
	ConfigFileContent *string `pulumi:"configFileContent"`
	Password          *string `pulumi:"password"`
	Username          *string `pulumi:"username"`
}

// ProviderRegistryAuthInput is an input type that accepts ProviderRegistryAuthArgs and ProviderRegistryAuthOutput values.
// You can construct a concrete instance of `ProviderRegistryAuthInput` via:
//
//	ProviderRegistryAuthArgs{...}
type ProviderRegistryAuthInput interface {
	pulumi.Input

	ToProviderRegistryAuthOutput() ProviderRegistryAuthOutput
	ToProviderRegistryAuthOutputWithContext(context.Context) ProviderRegistryAuthOutput
}

type ProviderRegistryAuthArgs struct {
	Address           pulumi.StringInput    `pulumi:"address"`
	AuthDisabled      pulumi.BoolPtrInput   `pulumi:"authDisabled"`
	ConfigFile        pulumi.StringPtrInput `pulumi:"configFile"`
	ConfigFileContent pulumi.StringPtrInput `pulumi:"configFileContent"`
	Password          pulumi.StringPtrInput `pulumi:"password"`
	Username          pulumi.StringPtrInput `pulumi:"username"`
}

func (ProviderRegistryAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderRegistryAuth)(nil)).Elem()
}

func (i ProviderRegistryAuthArgs) ToProviderRegistryAuthOutput() ProviderRegistryAuthOutput {
	return i.ToProviderRegistryAuthOutputWithContext(context.Background())
}

func (i ProviderRegistryAuthArgs) ToProviderRegistryAuthOutputWithContext(ctx context.Context) ProviderRegistryAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderRegistryAuthOutput)
}

func (i ProviderRegistryAuthArgs) ToOutput(ctx context.Context) pulumix.Output[ProviderRegistryAuth] {
	return pulumix.Output[ProviderRegistryAuth]{
		OutputState: i.ToProviderRegistryAuthOutputWithContext(ctx).OutputState,
	}
}

// ProviderRegistryAuthArrayInput is an input type that accepts ProviderRegistryAuthArray and ProviderRegistryAuthArrayOutput values.
// You can construct a concrete instance of `ProviderRegistryAuthArrayInput` via:
//
//	ProviderRegistryAuthArray{ ProviderRegistryAuthArgs{...} }
type ProviderRegistryAuthArrayInput interface {
	pulumi.Input

	ToProviderRegistryAuthArrayOutput() ProviderRegistryAuthArrayOutput
	ToProviderRegistryAuthArrayOutputWithContext(context.Context) ProviderRegistryAuthArrayOutput
}

type ProviderRegistryAuthArray []ProviderRegistryAuthInput

func (ProviderRegistryAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderRegistryAuth)(nil)).Elem()
}

func (i ProviderRegistryAuthArray) ToProviderRegistryAuthArrayOutput() ProviderRegistryAuthArrayOutput {
	return i.ToProviderRegistryAuthArrayOutputWithContext(context.Background())
}

func (i ProviderRegistryAuthArray) ToProviderRegistryAuthArrayOutputWithContext(ctx context.Context) ProviderRegistryAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderRegistryAuthArrayOutput)
}

func (i ProviderRegistryAuthArray) ToOutput(ctx context.Context) pulumix.Output[[]ProviderRegistryAuth] {
	return pulumix.Output[[]ProviderRegistryAuth]{
		OutputState: i.ToProviderRegistryAuthArrayOutputWithContext(ctx).OutputState,
	}
}

type ProviderRegistryAuthOutput struct{ *pulumi.OutputState }

func (ProviderRegistryAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderRegistryAuth)(nil)).Elem()
}

func (o ProviderRegistryAuthOutput) ToProviderRegistryAuthOutput() ProviderRegistryAuthOutput {
	return o
}

func (o ProviderRegistryAuthOutput) ToProviderRegistryAuthOutputWithContext(ctx context.Context) ProviderRegistryAuthOutput {
	return o
}

func (o ProviderRegistryAuthOutput) ToOutput(ctx context.Context) pulumix.Output[ProviderRegistryAuth] {
	return pulumix.Output[ProviderRegistryAuth]{
		OutputState: o.OutputState,
	}
}

func (o ProviderRegistryAuthOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderRegistryAuth) string { return v.Address }).(pulumi.StringOutput)
}

func (o ProviderRegistryAuthOutput) AuthDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProviderRegistryAuth) *bool { return v.AuthDisabled }).(pulumi.BoolPtrOutput)
}

func (o ProviderRegistryAuthOutput) ConfigFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderRegistryAuth) *string { return v.ConfigFile }).(pulumi.StringPtrOutput)
}

func (o ProviderRegistryAuthOutput) ConfigFileContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderRegistryAuth) *string { return v.ConfigFileContent }).(pulumi.StringPtrOutput)
}

func (o ProviderRegistryAuthOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderRegistryAuth) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o ProviderRegistryAuthOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderRegistryAuth) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ProviderRegistryAuthArrayOutput struct{ *pulumi.OutputState }

func (ProviderRegistryAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderRegistryAuth)(nil)).Elem()
}

func (o ProviderRegistryAuthArrayOutput) ToProviderRegistryAuthArrayOutput() ProviderRegistryAuthArrayOutput {
	return o
}

func (o ProviderRegistryAuthArrayOutput) ToProviderRegistryAuthArrayOutputWithContext(ctx context.Context) ProviderRegistryAuthArrayOutput {
	return o
}

func (o ProviderRegistryAuthArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ProviderRegistryAuth] {
	return pulumix.Output[[]ProviderRegistryAuth]{
		OutputState: o.OutputState,
	}
}

func (o ProviderRegistryAuthArrayOutput) Index(i pulumi.IntInput) ProviderRegistryAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProviderRegistryAuth {
		return vs[0].([]ProviderRegistryAuth)[vs[1].(int)]
	}).(ProviderRegistryAuthOutput)
}

type RemoteImageBuild struct {
	// The configuration for the authentication
	AuthConfigs []RemoteImageBuildAuthConfig `pulumi:"authConfigs"`
	// Set build-time variables
	BuildArg map[string]string `pulumi:"buildArg"`
	// Pairs for build-time variables in the form TODO
	BuildArgs map[string]string `pulumi:"buildArgs"`
	// BuildID is an optional identifier that can be passed together with the build request. The same identifier can be used to gracefully cancel the build with the cancel request.
	BuildId *string `pulumi:"buildId"`
	// Images to consider as cache sources
	CacheFroms []string `pulumi:"cacheFroms"`
	// Optional parent cgroup for the container
	CgroupParent *string `pulumi:"cgroupParent"`
	// Value to specify the build context. Currently, only a `PATH` context is supported. You can use the helper function '${path.cwd}/context-dir'. Please see https://docs.docker.com/build/building/context/ for more information about build contexts.
	Context string `pulumi:"context"`
	// The length of a CPU period in microseconds
	CpuPeriod *int `pulumi:"cpuPeriod"`
	// Microseconds of CPU time that the container can get in a CPU period
	CpuQuota *int `pulumi:"cpuQuota"`
	// CPUs in which to allow execution (e.g., `0-3`, `0`, `1`)
	CpuSetCpus *string `pulumi:"cpuSetCpus"`
	// MEMs in which to allow execution (`0-3`, `0`, `1`)
	CpuSetMems *string `pulumi:"cpuSetMems"`
	// CPU shares (relative weight)
	CpuShares *int `pulumi:"cpuShares"`
	// Name of the Dockerfile. Defaults to `Dockerfile`.
	Dockerfile *string `pulumi:"dockerfile"`
	// A list of hostnames/IP mappings to add to the container’s /etc/hosts file. Specified in the form ["hostname:IP"]
	ExtraHosts []string `pulumi:"extraHosts"`
	// Always remove intermediate containers
	ForceRemove *bool `pulumi:"forceRemove"`
	// Isolation represents the isolation technology of a container. The supported values are
	Isolation *string `pulumi:"isolation"`
	// Set metadata for an image
	Label map[string]string `pulumi:"label"`
	// User-defined key/value metadata
	Labels map[string]string `pulumi:"labels"`
	// Set memory limit for build
	Memory *int `pulumi:"memory"`
	// Total memory (memory + swap), -1 to enable unlimited swap
	MemorySwap *int `pulumi:"memorySwap"`
	// Set the networking mode for the RUN instructions during build
	NetworkMode *string `pulumi:"networkMode"`
	// Do not use the cache when building the image
	NoCache *bool `pulumi:"noCache"`
	// Set platform if server is multi-platform capable
	Platform *string `pulumi:"platform"`
	// Attempt to pull the image even if an older image exists locally
	PullParent *bool `pulumi:"pullParent"`
	// A Git repository URI or HTTP/HTTPS context URI
	RemoteContext *string `pulumi:"remoteContext"`
	// Remove intermediate containers after a successful build. Defaults to `true`.
	Remove *bool `pulumi:"remove"`
	// The security options
	SecurityOpts []string `pulumi:"securityOpts"`
	// Set an ID for the build session
	SessionId *string `pulumi:"sessionId"`
	// Size of /dev/shm in bytes. The size must be greater than 0
	ShmSize *int `pulumi:"shmSize"`
	// If true the new layers are squashed into a new image with a single new layer
	Squash *bool `pulumi:"squash"`
	// Suppress the build output and print image ID on success
	SuppressOutput *bool `pulumi:"suppressOutput"`
	// Name and optionally a tag in the 'name:tag' format
	Tags []string `pulumi:"tags"`
	// Set the target build stage to build
	Target *string `pulumi:"target"`
	// Configuration for ulimits
	Ulimits []RemoteImageBuildUlimit `pulumi:"ulimits"`
	// Version of the underlying builder to use
	Version *string `pulumi:"version"`
}

// RemoteImageBuildInput is an input type that accepts RemoteImageBuildArgs and RemoteImageBuildOutput values.
// You can construct a concrete instance of `RemoteImageBuildInput` via:
//
//	RemoteImageBuildArgs{...}
type RemoteImageBuildInput interface {
	pulumi.Input

	ToRemoteImageBuildOutput() RemoteImageBuildOutput
	ToRemoteImageBuildOutputWithContext(context.Context) RemoteImageBuildOutput
}

type RemoteImageBuildArgs struct {
	// The configuration for the authentication
	AuthConfigs RemoteImageBuildAuthConfigArrayInput `pulumi:"authConfigs"`
	// Set build-time variables
	BuildArg pulumi.StringMapInput `pulumi:"buildArg"`
	// Pairs for build-time variables in the form TODO
	BuildArgs pulumi.StringMapInput `pulumi:"buildArgs"`
	// BuildID is an optional identifier that can be passed together with the build request. The same identifier can be used to gracefully cancel the build with the cancel request.
	BuildId pulumi.StringPtrInput `pulumi:"buildId"`
	// Images to consider as cache sources
	CacheFroms pulumi.StringArrayInput `pulumi:"cacheFroms"`
	// Optional parent cgroup for the container
	CgroupParent pulumi.StringPtrInput `pulumi:"cgroupParent"`
	// Value to specify the build context. Currently, only a `PATH` context is supported. You can use the helper function '${path.cwd}/context-dir'. Please see https://docs.docker.com/build/building/context/ for more information about build contexts.
	Context pulumi.StringInput `pulumi:"context"`
	// The length of a CPU period in microseconds
	CpuPeriod pulumi.IntPtrInput `pulumi:"cpuPeriod"`
	// Microseconds of CPU time that the container can get in a CPU period
	CpuQuota pulumi.IntPtrInput `pulumi:"cpuQuota"`
	// CPUs in which to allow execution (e.g., `0-3`, `0`, `1`)
	CpuSetCpus pulumi.StringPtrInput `pulumi:"cpuSetCpus"`
	// MEMs in which to allow execution (`0-3`, `0`, `1`)
	CpuSetMems pulumi.StringPtrInput `pulumi:"cpuSetMems"`
	// CPU shares (relative weight)
	CpuShares pulumi.IntPtrInput `pulumi:"cpuShares"`
	// Name of the Dockerfile. Defaults to `Dockerfile`.
	Dockerfile pulumi.StringPtrInput `pulumi:"dockerfile"`
	// A list of hostnames/IP mappings to add to the container’s /etc/hosts file. Specified in the form ["hostname:IP"]
	ExtraHosts pulumi.StringArrayInput `pulumi:"extraHosts"`
	// Always remove intermediate containers
	ForceRemove pulumi.BoolPtrInput `pulumi:"forceRemove"`
	// Isolation represents the isolation technology of a container. The supported values are
	Isolation pulumi.StringPtrInput `pulumi:"isolation"`
	// Set metadata for an image
	Label pulumi.StringMapInput `pulumi:"label"`
	// User-defined key/value metadata
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Set memory limit for build
	Memory pulumi.IntPtrInput `pulumi:"memory"`
	// Total memory (memory + swap), -1 to enable unlimited swap
	MemorySwap pulumi.IntPtrInput `pulumi:"memorySwap"`
	// Set the networking mode for the RUN instructions during build
	NetworkMode pulumi.StringPtrInput `pulumi:"networkMode"`
	// Do not use the cache when building the image
	NoCache pulumi.BoolPtrInput `pulumi:"noCache"`
	// Set platform if server is multi-platform capable
	Platform pulumi.StringPtrInput `pulumi:"platform"`
	// Attempt to pull the image even if an older image exists locally
	PullParent pulumi.BoolPtrInput `pulumi:"pullParent"`
	// A Git repository URI or HTTP/HTTPS context URI
	RemoteContext pulumi.StringPtrInput `pulumi:"remoteContext"`
	// Remove intermediate containers after a successful build. Defaults to `true`.
	Remove pulumi.BoolPtrInput `pulumi:"remove"`
	// The security options
	SecurityOpts pulumi.StringArrayInput `pulumi:"securityOpts"`
	// Set an ID for the build session
	SessionId pulumi.StringPtrInput `pulumi:"sessionId"`
	// Size of /dev/shm in bytes. The size must be greater than 0
	ShmSize pulumi.IntPtrInput `pulumi:"shmSize"`
	// If true the new layers are squashed into a new image with a single new layer
	Squash pulumi.BoolPtrInput `pulumi:"squash"`
	// Suppress the build output and print image ID on success
	SuppressOutput pulumi.BoolPtrInput `pulumi:"suppressOutput"`
	// Name and optionally a tag in the 'name:tag' format
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// Set the target build stage to build
	Target pulumi.StringPtrInput `pulumi:"target"`
	// Configuration for ulimits
	Ulimits RemoteImageBuildUlimitArrayInput `pulumi:"ulimits"`
	// Version of the underlying builder to use
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (RemoteImageBuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteImageBuild)(nil)).Elem()
}

func (i RemoteImageBuildArgs) ToRemoteImageBuildOutput() RemoteImageBuildOutput {
	return i.ToRemoteImageBuildOutputWithContext(context.Background())
}

func (i RemoteImageBuildArgs) ToRemoteImageBuildOutputWithContext(ctx context.Context) RemoteImageBuildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteImageBuildOutput)
}

func (i RemoteImageBuildArgs) ToOutput(ctx context.Context) pulumix.Output[RemoteImageBuild] {
	return pulumix.Output[RemoteImageBuild]{
		OutputState: i.ToRemoteImageBuildOutputWithContext(ctx).OutputState,
	}
}

func (i RemoteImageBuildArgs) ToRemoteImageBuildPtrOutput() RemoteImageBuildPtrOutput {
	return i.ToRemoteImageBuildPtrOutputWithContext(context.Background())
}

func (i RemoteImageBuildArgs) ToRemoteImageBuildPtrOutputWithContext(ctx context.Context) RemoteImageBuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteImageBuildOutput).ToRemoteImageBuildPtrOutputWithContext(ctx)
}

// RemoteImageBuildPtrInput is an input type that accepts RemoteImageBuildArgs, RemoteImageBuildPtr and RemoteImageBuildPtrOutput values.
// You can construct a concrete instance of `RemoteImageBuildPtrInput` via:
//
//	        RemoteImageBuildArgs{...}
//
//	or:
//
//	        nil
type RemoteImageBuildPtrInput interface {
	pulumi.Input

	ToRemoteImageBuildPtrOutput() RemoteImageBuildPtrOutput
	ToRemoteImageBuildPtrOutputWithContext(context.Context) RemoteImageBuildPtrOutput
}

type remoteImageBuildPtrType RemoteImageBuildArgs

func RemoteImageBuildPtr(v *RemoteImageBuildArgs) RemoteImageBuildPtrInput {
	return (*remoteImageBuildPtrType)(v)
}

func (*remoteImageBuildPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteImageBuild)(nil)).Elem()
}

func (i *remoteImageBuildPtrType) ToRemoteImageBuildPtrOutput() RemoteImageBuildPtrOutput {
	return i.ToRemoteImageBuildPtrOutputWithContext(context.Background())
}

func (i *remoteImageBuildPtrType) ToRemoteImageBuildPtrOutputWithContext(ctx context.Context) RemoteImageBuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteImageBuildPtrOutput)
}

func (i *remoteImageBuildPtrType) ToOutput(ctx context.Context) pulumix.Output[*RemoteImageBuild] {
	return pulumix.Output[*RemoteImageBuild]{
		OutputState: i.ToRemoteImageBuildPtrOutputWithContext(ctx).OutputState,
	}
}

type RemoteImageBuildOutput struct{ *pulumi.OutputState }

func (RemoteImageBuildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteImageBuild)(nil)).Elem()
}

func (o RemoteImageBuildOutput) ToRemoteImageBuildOutput() RemoteImageBuildOutput {
	return o
}

func (o RemoteImageBuildOutput) ToRemoteImageBuildOutputWithContext(ctx context.Context) RemoteImageBuildOutput {
	return o
}

func (o RemoteImageBuildOutput) ToRemoteImageBuildPtrOutput() RemoteImageBuildPtrOutput {
	return o.ToRemoteImageBuildPtrOutputWithContext(context.Background())
}

func (o RemoteImageBuildOutput) ToRemoteImageBuildPtrOutputWithContext(ctx context.Context) RemoteImageBuildPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteImageBuild) *RemoteImageBuild {
		return &v
	}).(RemoteImageBuildPtrOutput)
}

func (o RemoteImageBuildOutput) ToOutput(ctx context.Context) pulumix.Output[RemoteImageBuild] {
	return pulumix.Output[RemoteImageBuild]{
		OutputState: o.OutputState,
	}
}

// The configuration for the authentication
func (o RemoteImageBuildOutput) AuthConfigs() RemoteImageBuildAuthConfigArrayOutput {
	return o.ApplyT(func(v RemoteImageBuild) []RemoteImageBuildAuthConfig { return v.AuthConfigs }).(RemoteImageBuildAuthConfigArrayOutput)
}

// Set build-time variables
func (o RemoteImageBuildOutput) BuildArg() pulumi.StringMapOutput {
	return o.ApplyT(func(v RemoteImageBuild) map[string]string { return v.BuildArg }).(pulumi.StringMapOutput)
}

// Pairs for build-time variables in the form TODO
func (o RemoteImageBuildOutput) BuildArgs() pulumi.StringMapOutput {
	return o.ApplyT(func(v RemoteImageBuild) map[string]string { return v.BuildArgs }).(pulumi.StringMapOutput)
}

// BuildID is an optional identifier that can be passed together with the build request. The same identifier can be used to gracefully cancel the build with the cancel request.
func (o RemoteImageBuildOutput) BuildId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteImageBuild) *string { return v.BuildId }).(pulumi.StringPtrOutput)
}

// Images to consider as cache sources
func (o RemoteImageBuildOutput) CacheFroms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RemoteImageBuild) []string { return v.CacheFroms }).(pulumi.StringArrayOutput)
}

// Optional parent cgroup for the container
func (o RemoteImageBuildOutput) CgroupParent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteImageBuild) *string { return v.CgroupParent }).(pulumi.StringPtrOutput)
}

// Value to specify the build context. Currently, only a `PATH` context is supported. You can use the helper function '${path.cwd}/context-dir'. Please see https://docs.docker.com/build/building/context/ for more information about build contexts.
func (o RemoteImageBuildOutput) Context() pulumi.StringOutput {
	return o.ApplyT(func(v RemoteImageBuild) string { return v.Context }).(pulumi.StringOutput)
}

// The length of a CPU period in microseconds
func (o RemoteImageBuildOutput) CpuPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RemoteImageBuild) *int { return v.CpuPeriod }).(pulumi.IntPtrOutput)
}

// Microseconds of CPU time that the container can get in a CPU period
func (o RemoteImageBuildOutput) CpuQuota() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RemoteImageBuild) *int { return v.CpuQuota }).(pulumi.IntPtrOutput)
}

// CPUs in which to allow execution (e.g., `0-3`, `0`, `1`)
func (o RemoteImageBuildOutput) CpuSetCpus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteImageBuild) *string { return v.CpuSetCpus }).(pulumi.StringPtrOutput)
}

// MEMs in which to allow execution (`0-3`, `0`, `1`)
func (o RemoteImageBuildOutput) CpuSetMems() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteImageBuild) *string { return v.CpuSetMems }).(pulumi.StringPtrOutput)
}

// CPU shares (relative weight)
func (o RemoteImageBuildOutput) CpuShares() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RemoteImageBuild) *int { return v.CpuShares }).(pulumi.IntPtrOutput)
}

// Name of the Dockerfile. Defaults to `Dockerfile`.
func (o RemoteImageBuildOutput) Dockerfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteImageBuild) *string { return v.Dockerfile }).(pulumi.StringPtrOutput)
}

// A list of hostnames/IP mappings to add to the container’s /etc/hosts file. Specified in the form ["hostname:IP"]
func (o RemoteImageBuildOutput) ExtraHosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RemoteImageBuild) []string { return v.ExtraHosts }).(pulumi.StringArrayOutput)
}

// Always remove intermediate containers
func (o RemoteImageBuildOutput) ForceRemove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteImageBuild) *bool { return v.ForceRemove }).(pulumi.BoolPtrOutput)
}

// Isolation represents the isolation technology of a container. The supported values are
func (o RemoteImageBuildOutput) Isolation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteImageBuild) *string { return v.Isolation }).(pulumi.StringPtrOutput)
}

// Set metadata for an image
func (o RemoteImageBuildOutput) Label() pulumi.StringMapOutput {
	return o.ApplyT(func(v RemoteImageBuild) map[string]string { return v.Label }).(pulumi.StringMapOutput)
}

// User-defined key/value metadata
func (o RemoteImageBuildOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v RemoteImageBuild) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Set memory limit for build
func (o RemoteImageBuildOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RemoteImageBuild) *int { return v.Memory }).(pulumi.IntPtrOutput)
}

// Total memory (memory + swap), -1 to enable unlimited swap
func (o RemoteImageBuildOutput) MemorySwap() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RemoteImageBuild) *int { return v.MemorySwap }).(pulumi.IntPtrOutput)
}

// Set the networking mode for the RUN instructions during build
func (o RemoteImageBuildOutput) NetworkMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteImageBuild) *string { return v.NetworkMode }).(pulumi.StringPtrOutput)
}

// Do not use the cache when building the image
func (o RemoteImageBuildOutput) NoCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteImageBuild) *bool { return v.NoCache }).(pulumi.BoolPtrOutput)
}

// Set platform if server is multi-platform capable
func (o RemoteImageBuildOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteImageBuild) *string { return v.Platform }).(pulumi.StringPtrOutput)
}

// Attempt to pull the image even if an older image exists locally
func (o RemoteImageBuildOutput) PullParent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteImageBuild) *bool { return v.PullParent }).(pulumi.BoolPtrOutput)
}

// A Git repository URI or HTTP/HTTPS context URI
func (o RemoteImageBuildOutput) RemoteContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteImageBuild) *string { return v.RemoteContext }).(pulumi.StringPtrOutput)
}

// Remove intermediate containers after a successful build. Defaults to `true`.
func (o RemoteImageBuildOutput) Remove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteImageBuild) *bool { return v.Remove }).(pulumi.BoolPtrOutput)
}

// The security options
func (o RemoteImageBuildOutput) SecurityOpts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RemoteImageBuild) []string { return v.SecurityOpts }).(pulumi.StringArrayOutput)
}

// Set an ID for the build session
func (o RemoteImageBuildOutput) SessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteImageBuild) *string { return v.SessionId }).(pulumi.StringPtrOutput)
}

// Size of /dev/shm in bytes. The size must be greater than 0
func (o RemoteImageBuildOutput) ShmSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RemoteImageBuild) *int { return v.ShmSize }).(pulumi.IntPtrOutput)
}

// If true the new layers are squashed into a new image with a single new layer
func (o RemoteImageBuildOutput) Squash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteImageBuild) *bool { return v.Squash }).(pulumi.BoolPtrOutput)
}

// Suppress the build output and print image ID on success
func (o RemoteImageBuildOutput) SuppressOutput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RemoteImageBuild) *bool { return v.SuppressOutput }).(pulumi.BoolPtrOutput)
}

// Name and optionally a tag in the 'name:tag' format
func (o RemoteImageBuildOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RemoteImageBuild) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Set the target build stage to build
func (o RemoteImageBuildOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteImageBuild) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Configuration for ulimits
func (o RemoteImageBuildOutput) Ulimits() RemoteImageBuildUlimitArrayOutput {
	return o.ApplyT(func(v RemoteImageBuild) []RemoteImageBuildUlimit { return v.Ulimits }).(RemoteImageBuildUlimitArrayOutput)
}

// Version of the underlying builder to use
func (o RemoteImageBuildOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteImageBuild) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type RemoteImageBuildPtrOutput struct{ *pulumi.OutputState }

func (RemoteImageBuildPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteImageBuild)(nil)).Elem()
}

func (o RemoteImageBuildPtrOutput) ToRemoteImageBuildPtrOutput() RemoteImageBuildPtrOutput {
	return o
}

func (o RemoteImageBuildPtrOutput) ToRemoteImageBuildPtrOutputWithContext(ctx context.Context) RemoteImageBuildPtrOutput {
	return o
}

func (o RemoteImageBuildPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RemoteImageBuild] {
	return pulumix.Output[*RemoteImageBuild]{
		OutputState: o.OutputState,
	}
}

func (o RemoteImageBuildPtrOutput) Elem() RemoteImageBuildOutput {
	return o.ApplyT(func(v *RemoteImageBuild) RemoteImageBuild {
		if v != nil {
			return *v
		}
		var ret RemoteImageBuild
		return ret
	}).(RemoteImageBuildOutput)
}

// The configuration for the authentication
func (o RemoteImageBuildPtrOutput) AuthConfigs() RemoteImageBuildAuthConfigArrayOutput {
	return o.ApplyT(func(v *RemoteImageBuild) []RemoteImageBuildAuthConfig {
		if v == nil {
			return nil
		}
		return v.AuthConfigs
	}).(RemoteImageBuildAuthConfigArrayOutput)
}

// Set build-time variables
func (o RemoteImageBuildPtrOutput) BuildArg() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RemoteImageBuild) map[string]string {
		if v == nil {
			return nil
		}
		return v.BuildArg
	}).(pulumi.StringMapOutput)
}

// Pairs for build-time variables in the form TODO
func (o RemoteImageBuildPtrOutput) BuildArgs() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RemoteImageBuild) map[string]string {
		if v == nil {
			return nil
		}
		return v.BuildArgs
	}).(pulumi.StringMapOutput)
}

// BuildID is an optional identifier that can be passed together with the build request. The same identifier can be used to gracefully cancel the build with the cancel request.
func (o RemoteImageBuildPtrOutput) BuildId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteImageBuild) *string {
		if v == nil {
			return nil
		}
		return v.BuildId
	}).(pulumi.StringPtrOutput)
}

// Images to consider as cache sources
func (o RemoteImageBuildPtrOutput) CacheFroms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RemoteImageBuild) []string {
		if v == nil {
			return nil
		}
		return v.CacheFroms
	}).(pulumi.StringArrayOutput)
}

// Optional parent cgroup for the container
func (o RemoteImageBuildPtrOutput) CgroupParent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteImageBuild) *string {
		if v == nil {
			return nil
		}
		return v.CgroupParent
	}).(pulumi.StringPtrOutput)
}

// Value to specify the build context. Currently, only a `PATH` context is supported. You can use the helper function '${path.cwd}/context-dir'. Please see https://docs.docker.com/build/building/context/ for more information about build contexts.
func (o RemoteImageBuildPtrOutput) Context() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteImageBuild) *string {
		if v == nil {
			return nil
		}
		return &v.Context
	}).(pulumi.StringPtrOutput)
}

// The length of a CPU period in microseconds
func (o RemoteImageBuildPtrOutput) CpuPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RemoteImageBuild) *int {
		if v == nil {
			return nil
		}
		return v.CpuPeriod
	}).(pulumi.IntPtrOutput)
}

// Microseconds of CPU time that the container can get in a CPU period
func (o RemoteImageBuildPtrOutput) CpuQuota() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RemoteImageBuild) *int {
		if v == nil {
			return nil
		}
		return v.CpuQuota
	}).(pulumi.IntPtrOutput)
}

// CPUs in which to allow execution (e.g., `0-3`, `0`, `1`)
func (o RemoteImageBuildPtrOutput) CpuSetCpus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteImageBuild) *string {
		if v == nil {
			return nil
		}
		return v.CpuSetCpus
	}).(pulumi.StringPtrOutput)
}

// MEMs in which to allow execution (`0-3`, `0`, `1`)
func (o RemoteImageBuildPtrOutput) CpuSetMems() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteImageBuild) *string {
		if v == nil {
			return nil
		}
		return v.CpuSetMems
	}).(pulumi.StringPtrOutput)
}

// CPU shares (relative weight)
func (o RemoteImageBuildPtrOutput) CpuShares() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RemoteImageBuild) *int {
		if v == nil {
			return nil
		}
		return v.CpuShares
	}).(pulumi.IntPtrOutput)
}

// Name of the Dockerfile. Defaults to `Dockerfile`.
func (o RemoteImageBuildPtrOutput) Dockerfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteImageBuild) *string {
		if v == nil {
			return nil
		}
		return v.Dockerfile
	}).(pulumi.StringPtrOutput)
}

// A list of hostnames/IP mappings to add to the container’s /etc/hosts file. Specified in the form ["hostname:IP"]
func (o RemoteImageBuildPtrOutput) ExtraHosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RemoteImageBuild) []string {
		if v == nil {
			return nil
		}
		return v.ExtraHosts
	}).(pulumi.StringArrayOutput)
}

// Always remove intermediate containers
func (o RemoteImageBuildPtrOutput) ForceRemove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteImageBuild) *bool {
		if v == nil {
			return nil
		}
		return v.ForceRemove
	}).(pulumi.BoolPtrOutput)
}

// Isolation represents the isolation technology of a container. The supported values are
func (o RemoteImageBuildPtrOutput) Isolation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteImageBuild) *string {
		if v == nil {
			return nil
		}
		return v.Isolation
	}).(pulumi.StringPtrOutput)
}

// Set metadata for an image
func (o RemoteImageBuildPtrOutput) Label() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RemoteImageBuild) map[string]string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringMapOutput)
}

// User-defined key/value metadata
func (o RemoteImageBuildPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RemoteImageBuild) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Set memory limit for build
func (o RemoteImageBuildPtrOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RemoteImageBuild) *int {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.IntPtrOutput)
}

// Total memory (memory + swap), -1 to enable unlimited swap
func (o RemoteImageBuildPtrOutput) MemorySwap() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RemoteImageBuild) *int {
		if v == nil {
			return nil
		}
		return v.MemorySwap
	}).(pulumi.IntPtrOutput)
}

// Set the networking mode for the RUN instructions during build
func (o RemoteImageBuildPtrOutput) NetworkMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteImageBuild) *string {
		if v == nil {
			return nil
		}
		return v.NetworkMode
	}).(pulumi.StringPtrOutput)
}

// Do not use the cache when building the image
func (o RemoteImageBuildPtrOutput) NoCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteImageBuild) *bool {
		if v == nil {
			return nil
		}
		return v.NoCache
	}).(pulumi.BoolPtrOutput)
}

// Set platform if server is multi-platform capable
func (o RemoteImageBuildPtrOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteImageBuild) *string {
		if v == nil {
			return nil
		}
		return v.Platform
	}).(pulumi.StringPtrOutput)
}

// Attempt to pull the image even if an older image exists locally
func (o RemoteImageBuildPtrOutput) PullParent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteImageBuild) *bool {
		if v == nil {
			return nil
		}
		return v.PullParent
	}).(pulumi.BoolPtrOutput)
}

// A Git repository URI or HTTP/HTTPS context URI
func (o RemoteImageBuildPtrOutput) RemoteContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteImageBuild) *string {
		if v == nil {
			return nil
		}
		return v.RemoteContext
	}).(pulumi.StringPtrOutput)
}

// Remove intermediate containers after a successful build. Defaults to `true`.
func (o RemoteImageBuildPtrOutput) Remove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteImageBuild) *bool {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.BoolPtrOutput)
}

// The security options
func (o RemoteImageBuildPtrOutput) SecurityOpts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RemoteImageBuild) []string {
		if v == nil {
			return nil
		}
		return v.SecurityOpts
	}).(pulumi.StringArrayOutput)
}

// Set an ID for the build session
func (o RemoteImageBuildPtrOutput) SessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteImageBuild) *string {
		if v == nil {
			return nil
		}
		return v.SessionId
	}).(pulumi.StringPtrOutput)
}

// Size of /dev/shm in bytes. The size must be greater than 0
func (o RemoteImageBuildPtrOutput) ShmSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RemoteImageBuild) *int {
		if v == nil {
			return nil
		}
		return v.ShmSize
	}).(pulumi.IntPtrOutput)
}

// If true the new layers are squashed into a new image with a single new layer
func (o RemoteImageBuildPtrOutput) Squash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteImageBuild) *bool {
		if v == nil {
			return nil
		}
		return v.Squash
	}).(pulumi.BoolPtrOutput)
}

// Suppress the build output and print image ID on success
func (o RemoteImageBuildPtrOutput) SuppressOutput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RemoteImageBuild) *bool {
		if v == nil {
			return nil
		}
		return v.SuppressOutput
	}).(pulumi.BoolPtrOutput)
}

// Name and optionally a tag in the 'name:tag' format
func (o RemoteImageBuildPtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RemoteImageBuild) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

// Set the target build stage to build
func (o RemoteImageBuildPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteImageBuild) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// Configuration for ulimits
func (o RemoteImageBuildPtrOutput) Ulimits() RemoteImageBuildUlimitArrayOutput {
	return o.ApplyT(func(v *RemoteImageBuild) []RemoteImageBuildUlimit {
		if v == nil {
			return nil
		}
		return v.Ulimits
	}).(RemoteImageBuildUlimitArrayOutput)
}

// Version of the underlying builder to use
func (o RemoteImageBuildPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteImageBuild) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type RemoteImageBuildAuthConfig struct {
	Auth          *string `pulumi:"auth"`
	Email         *string `pulumi:"email"`
	HostName      string  `pulumi:"hostName"`
	IdentityToken *string `pulumi:"identityToken"`
	Password      *string `pulumi:"password"`
	RegistryToken *string `pulumi:"registryToken"`
	ServerAddress *string `pulumi:"serverAddress"`
	UserName      *string `pulumi:"userName"`
}

// RemoteImageBuildAuthConfigInput is an input type that accepts RemoteImageBuildAuthConfigArgs and RemoteImageBuildAuthConfigOutput values.
// You can construct a concrete instance of `RemoteImageBuildAuthConfigInput` via:
//
//	RemoteImageBuildAuthConfigArgs{...}
type RemoteImageBuildAuthConfigInput interface {
	pulumi.Input

	ToRemoteImageBuildAuthConfigOutput() RemoteImageBuildAuthConfigOutput
	ToRemoteImageBuildAuthConfigOutputWithContext(context.Context) RemoteImageBuildAuthConfigOutput
}

type RemoteImageBuildAuthConfigArgs struct {
	Auth          pulumi.StringPtrInput `pulumi:"auth"`
	Email         pulumi.StringPtrInput `pulumi:"email"`
	HostName      pulumi.StringInput    `pulumi:"hostName"`
	IdentityToken pulumi.StringPtrInput `pulumi:"identityToken"`
	Password      pulumi.StringPtrInput `pulumi:"password"`
	RegistryToken pulumi.StringPtrInput `pulumi:"registryToken"`
	ServerAddress pulumi.StringPtrInput `pulumi:"serverAddress"`
	UserName      pulumi.StringPtrInput `pulumi:"userName"`
}

func (RemoteImageBuildAuthConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteImageBuildAuthConfig)(nil)).Elem()
}

func (i RemoteImageBuildAuthConfigArgs) ToRemoteImageBuildAuthConfigOutput() RemoteImageBuildAuthConfigOutput {
	return i.ToRemoteImageBuildAuthConfigOutputWithContext(context.Background())
}

func (i RemoteImageBuildAuthConfigArgs) ToRemoteImageBuildAuthConfigOutputWithContext(ctx context.Context) RemoteImageBuildAuthConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteImageBuildAuthConfigOutput)
}

func (i RemoteImageBuildAuthConfigArgs) ToOutput(ctx context.Context) pulumix.Output[RemoteImageBuildAuthConfig] {
	return pulumix.Output[RemoteImageBuildAuthConfig]{
		OutputState: i.ToRemoteImageBuildAuthConfigOutputWithContext(ctx).OutputState,
	}
}

// RemoteImageBuildAuthConfigArrayInput is an input type that accepts RemoteImageBuildAuthConfigArray and RemoteImageBuildAuthConfigArrayOutput values.
// You can construct a concrete instance of `RemoteImageBuildAuthConfigArrayInput` via:
//
//	RemoteImageBuildAuthConfigArray{ RemoteImageBuildAuthConfigArgs{...} }
type RemoteImageBuildAuthConfigArrayInput interface {
	pulumi.Input

	ToRemoteImageBuildAuthConfigArrayOutput() RemoteImageBuildAuthConfigArrayOutput
	ToRemoteImageBuildAuthConfigArrayOutputWithContext(context.Context) RemoteImageBuildAuthConfigArrayOutput
}

type RemoteImageBuildAuthConfigArray []RemoteImageBuildAuthConfigInput

func (RemoteImageBuildAuthConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RemoteImageBuildAuthConfig)(nil)).Elem()
}

func (i RemoteImageBuildAuthConfigArray) ToRemoteImageBuildAuthConfigArrayOutput() RemoteImageBuildAuthConfigArrayOutput {
	return i.ToRemoteImageBuildAuthConfigArrayOutputWithContext(context.Background())
}

func (i RemoteImageBuildAuthConfigArray) ToRemoteImageBuildAuthConfigArrayOutputWithContext(ctx context.Context) RemoteImageBuildAuthConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteImageBuildAuthConfigArrayOutput)
}

func (i RemoteImageBuildAuthConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]RemoteImageBuildAuthConfig] {
	return pulumix.Output[[]RemoteImageBuildAuthConfig]{
		OutputState: i.ToRemoteImageBuildAuthConfigArrayOutputWithContext(ctx).OutputState,
	}
}

type RemoteImageBuildAuthConfigOutput struct{ *pulumi.OutputState }

func (RemoteImageBuildAuthConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteImageBuildAuthConfig)(nil)).Elem()
}

func (o RemoteImageBuildAuthConfigOutput) ToRemoteImageBuildAuthConfigOutput() RemoteImageBuildAuthConfigOutput {
	return o
}

func (o RemoteImageBuildAuthConfigOutput) ToRemoteImageBuildAuthConfigOutputWithContext(ctx context.Context) RemoteImageBuildAuthConfigOutput {
	return o
}

func (o RemoteImageBuildAuthConfigOutput) ToOutput(ctx context.Context) pulumix.Output[RemoteImageBuildAuthConfig] {
	return pulumix.Output[RemoteImageBuildAuthConfig]{
		OutputState: o.OutputState,
	}
}

func (o RemoteImageBuildAuthConfigOutput) Auth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteImageBuildAuthConfig) *string { return v.Auth }).(pulumi.StringPtrOutput)
}

func (o RemoteImageBuildAuthConfigOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteImageBuildAuthConfig) *string { return v.Email }).(pulumi.StringPtrOutput)
}

func (o RemoteImageBuildAuthConfigOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v RemoteImageBuildAuthConfig) string { return v.HostName }).(pulumi.StringOutput)
}

func (o RemoteImageBuildAuthConfigOutput) IdentityToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteImageBuildAuthConfig) *string { return v.IdentityToken }).(pulumi.StringPtrOutput)
}

func (o RemoteImageBuildAuthConfigOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteImageBuildAuthConfig) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o RemoteImageBuildAuthConfigOutput) RegistryToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteImageBuildAuthConfig) *string { return v.RegistryToken }).(pulumi.StringPtrOutput)
}

func (o RemoteImageBuildAuthConfigOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteImageBuildAuthConfig) *string { return v.ServerAddress }).(pulumi.StringPtrOutput)
}

func (o RemoteImageBuildAuthConfigOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteImageBuildAuthConfig) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type RemoteImageBuildAuthConfigArrayOutput struct{ *pulumi.OutputState }

func (RemoteImageBuildAuthConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RemoteImageBuildAuthConfig)(nil)).Elem()
}

func (o RemoteImageBuildAuthConfigArrayOutput) ToRemoteImageBuildAuthConfigArrayOutput() RemoteImageBuildAuthConfigArrayOutput {
	return o
}

func (o RemoteImageBuildAuthConfigArrayOutput) ToRemoteImageBuildAuthConfigArrayOutputWithContext(ctx context.Context) RemoteImageBuildAuthConfigArrayOutput {
	return o
}

func (o RemoteImageBuildAuthConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RemoteImageBuildAuthConfig] {
	return pulumix.Output[[]RemoteImageBuildAuthConfig]{
		OutputState: o.OutputState,
	}
}

func (o RemoteImageBuildAuthConfigArrayOutput) Index(i pulumi.IntInput) RemoteImageBuildAuthConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RemoteImageBuildAuthConfig {
		return vs[0].([]RemoteImageBuildAuthConfig)[vs[1].(int)]
	}).(RemoteImageBuildAuthConfigOutput)
}

type RemoteImageBuildUlimit struct {
	Hard int `pulumi:"hard"`
	// The name of the Docker image, including any tags or SHA256 repo digests.
	Name string `pulumi:"name"`
	Soft int    `pulumi:"soft"`
}

// RemoteImageBuildUlimitInput is an input type that accepts RemoteImageBuildUlimitArgs and RemoteImageBuildUlimitOutput values.
// You can construct a concrete instance of `RemoteImageBuildUlimitInput` via:
//
//	RemoteImageBuildUlimitArgs{...}
type RemoteImageBuildUlimitInput interface {
	pulumi.Input

	ToRemoteImageBuildUlimitOutput() RemoteImageBuildUlimitOutput
	ToRemoteImageBuildUlimitOutputWithContext(context.Context) RemoteImageBuildUlimitOutput
}

type RemoteImageBuildUlimitArgs struct {
	Hard pulumi.IntInput `pulumi:"hard"`
	// The name of the Docker image, including any tags or SHA256 repo digests.
	Name pulumi.StringInput `pulumi:"name"`
	Soft pulumi.IntInput    `pulumi:"soft"`
}

func (RemoteImageBuildUlimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteImageBuildUlimit)(nil)).Elem()
}

func (i RemoteImageBuildUlimitArgs) ToRemoteImageBuildUlimitOutput() RemoteImageBuildUlimitOutput {
	return i.ToRemoteImageBuildUlimitOutputWithContext(context.Background())
}

func (i RemoteImageBuildUlimitArgs) ToRemoteImageBuildUlimitOutputWithContext(ctx context.Context) RemoteImageBuildUlimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteImageBuildUlimitOutput)
}

func (i RemoteImageBuildUlimitArgs) ToOutput(ctx context.Context) pulumix.Output[RemoteImageBuildUlimit] {
	return pulumix.Output[RemoteImageBuildUlimit]{
		OutputState: i.ToRemoteImageBuildUlimitOutputWithContext(ctx).OutputState,
	}
}

// RemoteImageBuildUlimitArrayInput is an input type that accepts RemoteImageBuildUlimitArray and RemoteImageBuildUlimitArrayOutput values.
// You can construct a concrete instance of `RemoteImageBuildUlimitArrayInput` via:
//
//	RemoteImageBuildUlimitArray{ RemoteImageBuildUlimitArgs{...} }
type RemoteImageBuildUlimitArrayInput interface {
	pulumi.Input

	ToRemoteImageBuildUlimitArrayOutput() RemoteImageBuildUlimitArrayOutput
	ToRemoteImageBuildUlimitArrayOutputWithContext(context.Context) RemoteImageBuildUlimitArrayOutput
}

type RemoteImageBuildUlimitArray []RemoteImageBuildUlimitInput

func (RemoteImageBuildUlimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RemoteImageBuildUlimit)(nil)).Elem()
}

func (i RemoteImageBuildUlimitArray) ToRemoteImageBuildUlimitArrayOutput() RemoteImageBuildUlimitArrayOutput {
	return i.ToRemoteImageBuildUlimitArrayOutputWithContext(context.Background())
}

func (i RemoteImageBuildUlimitArray) ToRemoteImageBuildUlimitArrayOutputWithContext(ctx context.Context) RemoteImageBuildUlimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteImageBuildUlimitArrayOutput)
}

func (i RemoteImageBuildUlimitArray) ToOutput(ctx context.Context) pulumix.Output[[]RemoteImageBuildUlimit] {
	return pulumix.Output[[]RemoteImageBuildUlimit]{
		OutputState: i.ToRemoteImageBuildUlimitArrayOutputWithContext(ctx).OutputState,
	}
}

type RemoteImageBuildUlimitOutput struct{ *pulumi.OutputState }

func (RemoteImageBuildUlimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteImageBuildUlimit)(nil)).Elem()
}

func (o RemoteImageBuildUlimitOutput) ToRemoteImageBuildUlimitOutput() RemoteImageBuildUlimitOutput {
	return o
}

func (o RemoteImageBuildUlimitOutput) ToRemoteImageBuildUlimitOutputWithContext(ctx context.Context) RemoteImageBuildUlimitOutput {
	return o
}

func (o RemoteImageBuildUlimitOutput) ToOutput(ctx context.Context) pulumix.Output[RemoteImageBuildUlimit] {
	return pulumix.Output[RemoteImageBuildUlimit]{
		OutputState: o.OutputState,
	}
}

func (o RemoteImageBuildUlimitOutput) Hard() pulumi.IntOutput {
	return o.ApplyT(func(v RemoteImageBuildUlimit) int { return v.Hard }).(pulumi.IntOutput)
}

// The name of the Docker image, including any tags or SHA256 repo digests.
func (o RemoteImageBuildUlimitOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RemoteImageBuildUlimit) string { return v.Name }).(pulumi.StringOutput)
}

func (o RemoteImageBuildUlimitOutput) Soft() pulumi.IntOutput {
	return o.ApplyT(func(v RemoteImageBuildUlimit) int { return v.Soft }).(pulumi.IntOutput)
}

type RemoteImageBuildUlimitArrayOutput struct{ *pulumi.OutputState }

func (RemoteImageBuildUlimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RemoteImageBuildUlimit)(nil)).Elem()
}

func (o RemoteImageBuildUlimitArrayOutput) ToRemoteImageBuildUlimitArrayOutput() RemoteImageBuildUlimitArrayOutput {
	return o
}

func (o RemoteImageBuildUlimitArrayOutput) ToRemoteImageBuildUlimitArrayOutputWithContext(ctx context.Context) RemoteImageBuildUlimitArrayOutput {
	return o
}

func (o RemoteImageBuildUlimitArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RemoteImageBuildUlimit] {
	return pulumix.Output[[]RemoteImageBuildUlimit]{
		OutputState: o.OutputState,
	}
}

func (o RemoteImageBuildUlimitArrayOutput) Index(i pulumi.IntInput) RemoteImageBuildUlimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RemoteImageBuildUlimit {
		return vs[0].([]RemoteImageBuildUlimit)[vs[1].(int)]
	}).(RemoteImageBuildUlimitOutput)
}

type SecretLabel struct {
	// Name of the label
	Label string `pulumi:"label"`
	// Value of the label
	Value string `pulumi:"value"`
}

// SecretLabelInput is an input type that accepts SecretLabelArgs and SecretLabelOutput values.
// You can construct a concrete instance of `SecretLabelInput` via:
//
//	SecretLabelArgs{...}
type SecretLabelInput interface {
	pulumi.Input

	ToSecretLabelOutput() SecretLabelOutput
	ToSecretLabelOutputWithContext(context.Context) SecretLabelOutput
}

type SecretLabelArgs struct {
	// Name of the label
	Label pulumi.StringInput `pulumi:"label"`
	// Value of the label
	Value pulumi.StringInput `pulumi:"value"`
}

func (SecretLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretLabel)(nil)).Elem()
}

func (i SecretLabelArgs) ToSecretLabelOutput() SecretLabelOutput {
	return i.ToSecretLabelOutputWithContext(context.Background())
}

func (i SecretLabelArgs) ToSecretLabelOutputWithContext(ctx context.Context) SecretLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretLabelOutput)
}

func (i SecretLabelArgs) ToOutput(ctx context.Context) pulumix.Output[SecretLabel] {
	return pulumix.Output[SecretLabel]{
		OutputState: i.ToSecretLabelOutputWithContext(ctx).OutputState,
	}
}

// SecretLabelArrayInput is an input type that accepts SecretLabelArray and SecretLabelArrayOutput values.
// You can construct a concrete instance of `SecretLabelArrayInput` via:
//
//	SecretLabelArray{ SecretLabelArgs{...} }
type SecretLabelArrayInput interface {
	pulumi.Input

	ToSecretLabelArrayOutput() SecretLabelArrayOutput
	ToSecretLabelArrayOutputWithContext(context.Context) SecretLabelArrayOutput
}

type SecretLabelArray []SecretLabelInput

func (SecretLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretLabel)(nil)).Elem()
}

func (i SecretLabelArray) ToSecretLabelArrayOutput() SecretLabelArrayOutput {
	return i.ToSecretLabelArrayOutputWithContext(context.Background())
}

func (i SecretLabelArray) ToSecretLabelArrayOutputWithContext(ctx context.Context) SecretLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretLabelArrayOutput)
}

func (i SecretLabelArray) ToOutput(ctx context.Context) pulumix.Output[[]SecretLabel] {
	return pulumix.Output[[]SecretLabel]{
		OutputState: i.ToSecretLabelArrayOutputWithContext(ctx).OutputState,
	}
}

type SecretLabelOutput struct{ *pulumi.OutputState }

func (SecretLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretLabel)(nil)).Elem()
}

func (o SecretLabelOutput) ToSecretLabelOutput() SecretLabelOutput {
	return o
}

func (o SecretLabelOutput) ToSecretLabelOutputWithContext(ctx context.Context) SecretLabelOutput {
	return o
}

func (o SecretLabelOutput) ToOutput(ctx context.Context) pulumix.Output[SecretLabel] {
	return pulumix.Output[SecretLabel]{
		OutputState: o.OutputState,
	}
}

// Name of the label
func (o SecretLabelOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v SecretLabel) string { return v.Label }).(pulumi.StringOutput)
}

// Value of the label
func (o SecretLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SecretLabel) string { return v.Value }).(pulumi.StringOutput)
}

type SecretLabelArrayOutput struct{ *pulumi.OutputState }

func (SecretLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretLabel)(nil)).Elem()
}

func (o SecretLabelArrayOutput) ToSecretLabelArrayOutput() SecretLabelArrayOutput {
	return o
}

func (o SecretLabelArrayOutput) ToSecretLabelArrayOutputWithContext(ctx context.Context) SecretLabelArrayOutput {
	return o
}

func (o SecretLabelArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SecretLabel] {
	return pulumix.Output[[]SecretLabel]{
		OutputState: o.OutputState,
	}
}

func (o SecretLabelArrayOutput) Index(i pulumi.IntInput) SecretLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretLabel {
		return vs[0].([]SecretLabel)[vs[1].(int)]
	}).(SecretLabelOutput)
}

type ServiceAuth struct {
	// The password
	Password *string `pulumi:"password"`
	// The address of the server for the authentication
	ServerAddress string `pulumi:"serverAddress"`
	// The username
	Username *string `pulumi:"username"`
}

// ServiceAuthInput is an input type that accepts ServiceAuthArgs and ServiceAuthOutput values.
// You can construct a concrete instance of `ServiceAuthInput` via:
//
//	ServiceAuthArgs{...}
type ServiceAuthInput interface {
	pulumi.Input

	ToServiceAuthOutput() ServiceAuthOutput
	ToServiceAuthOutputWithContext(context.Context) ServiceAuthOutput
}

type ServiceAuthArgs struct {
	// The password
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The address of the server for the authentication
	ServerAddress pulumi.StringInput `pulumi:"serverAddress"`
	// The username
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ServiceAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAuth)(nil)).Elem()
}

func (i ServiceAuthArgs) ToServiceAuthOutput() ServiceAuthOutput {
	return i.ToServiceAuthOutputWithContext(context.Background())
}

func (i ServiceAuthArgs) ToServiceAuthOutputWithContext(ctx context.Context) ServiceAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAuthOutput)
}

func (i ServiceAuthArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceAuth] {
	return pulumix.Output[ServiceAuth]{
		OutputState: i.ToServiceAuthOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceAuthArgs) ToServiceAuthPtrOutput() ServiceAuthPtrOutput {
	return i.ToServiceAuthPtrOutputWithContext(context.Background())
}

func (i ServiceAuthArgs) ToServiceAuthPtrOutputWithContext(ctx context.Context) ServiceAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAuthOutput).ToServiceAuthPtrOutputWithContext(ctx)
}

// ServiceAuthPtrInput is an input type that accepts ServiceAuthArgs, ServiceAuthPtr and ServiceAuthPtrOutput values.
// You can construct a concrete instance of `ServiceAuthPtrInput` via:
//
//	        ServiceAuthArgs{...}
//
//	or:
//
//	        nil
type ServiceAuthPtrInput interface {
	pulumi.Input

	ToServiceAuthPtrOutput() ServiceAuthPtrOutput
	ToServiceAuthPtrOutputWithContext(context.Context) ServiceAuthPtrOutput
}

type serviceAuthPtrType ServiceAuthArgs

func ServiceAuthPtr(v *ServiceAuthArgs) ServiceAuthPtrInput {
	return (*serviceAuthPtrType)(v)
}

func (*serviceAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAuth)(nil)).Elem()
}

func (i *serviceAuthPtrType) ToServiceAuthPtrOutput() ServiceAuthPtrOutput {
	return i.ToServiceAuthPtrOutputWithContext(context.Background())
}

func (i *serviceAuthPtrType) ToServiceAuthPtrOutputWithContext(ctx context.Context) ServiceAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAuthPtrOutput)
}

func (i *serviceAuthPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceAuth] {
	return pulumix.Output[*ServiceAuth]{
		OutputState: i.ToServiceAuthPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceAuthOutput struct{ *pulumi.OutputState }

func (ServiceAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAuth)(nil)).Elem()
}

func (o ServiceAuthOutput) ToServiceAuthOutput() ServiceAuthOutput {
	return o
}

func (o ServiceAuthOutput) ToServiceAuthOutputWithContext(ctx context.Context) ServiceAuthOutput {
	return o
}

func (o ServiceAuthOutput) ToServiceAuthPtrOutput() ServiceAuthPtrOutput {
	return o.ToServiceAuthPtrOutputWithContext(context.Background())
}

func (o ServiceAuthOutput) ToServiceAuthPtrOutputWithContext(ctx context.Context) ServiceAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceAuth) *ServiceAuth {
		return &v
	}).(ServiceAuthPtrOutput)
}

func (o ServiceAuthOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceAuth] {
	return pulumix.Output[ServiceAuth]{
		OutputState: o.OutputState,
	}
}

// The password
func (o ServiceAuthOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAuth) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The address of the server for the authentication
func (o ServiceAuthOutput) ServerAddress() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAuth) string { return v.ServerAddress }).(pulumi.StringOutput)
}

// The username
func (o ServiceAuthOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAuth) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ServiceAuthPtrOutput struct{ *pulumi.OutputState }

func (ServiceAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAuth)(nil)).Elem()
}

func (o ServiceAuthPtrOutput) ToServiceAuthPtrOutput() ServiceAuthPtrOutput {
	return o
}

func (o ServiceAuthPtrOutput) ToServiceAuthPtrOutputWithContext(ctx context.Context) ServiceAuthPtrOutput {
	return o
}

func (o ServiceAuthPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceAuth] {
	return pulumix.Output[*ServiceAuth]{
		OutputState: o.OutputState,
	}
}

func (o ServiceAuthPtrOutput) Elem() ServiceAuthOutput {
	return o.ApplyT(func(v *ServiceAuth) ServiceAuth {
		if v != nil {
			return *v
		}
		var ret ServiceAuth
		return ret
	}).(ServiceAuthOutput)
}

// The password
func (o ServiceAuthPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAuth) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The address of the server for the authentication
func (o ServiceAuthPtrOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAuth) *string {
		if v == nil {
			return nil
		}
		return &v.ServerAddress
	}).(pulumi.StringPtrOutput)
}

// The username
func (o ServiceAuthPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAuth) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ServiceConvergeConfig struct {
	// The interval to check if the desired state is reached `(ms|s)`. Defaults to `7s`.
	Delay *string `pulumi:"delay"`
	// The timeout of the service to reach the desired state `(s|m)`. Defaults to `3m`
	Timeout *string `pulumi:"timeout"`
}

// ServiceConvergeConfigInput is an input type that accepts ServiceConvergeConfigArgs and ServiceConvergeConfigOutput values.
// You can construct a concrete instance of `ServiceConvergeConfigInput` via:
//
//	ServiceConvergeConfigArgs{...}
type ServiceConvergeConfigInput interface {
	pulumi.Input

	ToServiceConvergeConfigOutput() ServiceConvergeConfigOutput
	ToServiceConvergeConfigOutputWithContext(context.Context) ServiceConvergeConfigOutput
}

type ServiceConvergeConfigArgs struct {
	// The interval to check if the desired state is reached `(ms|s)`. Defaults to `7s`.
	Delay pulumi.StringPtrInput `pulumi:"delay"`
	// The timeout of the service to reach the desired state `(s|m)`. Defaults to `3m`
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (ServiceConvergeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConvergeConfig)(nil)).Elem()
}

func (i ServiceConvergeConfigArgs) ToServiceConvergeConfigOutput() ServiceConvergeConfigOutput {
	return i.ToServiceConvergeConfigOutputWithContext(context.Background())
}

func (i ServiceConvergeConfigArgs) ToServiceConvergeConfigOutputWithContext(ctx context.Context) ServiceConvergeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConvergeConfigOutput)
}

func (i ServiceConvergeConfigArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceConvergeConfig] {
	return pulumix.Output[ServiceConvergeConfig]{
		OutputState: i.ToServiceConvergeConfigOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceConvergeConfigArgs) ToServiceConvergeConfigPtrOutput() ServiceConvergeConfigPtrOutput {
	return i.ToServiceConvergeConfigPtrOutputWithContext(context.Background())
}

func (i ServiceConvergeConfigArgs) ToServiceConvergeConfigPtrOutputWithContext(ctx context.Context) ServiceConvergeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConvergeConfigOutput).ToServiceConvergeConfigPtrOutputWithContext(ctx)
}

// ServiceConvergeConfigPtrInput is an input type that accepts ServiceConvergeConfigArgs, ServiceConvergeConfigPtr and ServiceConvergeConfigPtrOutput values.
// You can construct a concrete instance of `ServiceConvergeConfigPtrInput` via:
//
//	        ServiceConvergeConfigArgs{...}
//
//	or:
//
//	        nil
type ServiceConvergeConfigPtrInput interface {
	pulumi.Input

	ToServiceConvergeConfigPtrOutput() ServiceConvergeConfigPtrOutput
	ToServiceConvergeConfigPtrOutputWithContext(context.Context) ServiceConvergeConfigPtrOutput
}

type serviceConvergeConfigPtrType ServiceConvergeConfigArgs

func ServiceConvergeConfigPtr(v *ServiceConvergeConfigArgs) ServiceConvergeConfigPtrInput {
	return (*serviceConvergeConfigPtrType)(v)
}

func (*serviceConvergeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConvergeConfig)(nil)).Elem()
}

func (i *serviceConvergeConfigPtrType) ToServiceConvergeConfigPtrOutput() ServiceConvergeConfigPtrOutput {
	return i.ToServiceConvergeConfigPtrOutputWithContext(context.Background())
}

func (i *serviceConvergeConfigPtrType) ToServiceConvergeConfigPtrOutputWithContext(ctx context.Context) ServiceConvergeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConvergeConfigPtrOutput)
}

func (i *serviceConvergeConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceConvergeConfig] {
	return pulumix.Output[*ServiceConvergeConfig]{
		OutputState: i.ToServiceConvergeConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceConvergeConfigOutput struct{ *pulumi.OutputState }

func (ServiceConvergeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConvergeConfig)(nil)).Elem()
}

func (o ServiceConvergeConfigOutput) ToServiceConvergeConfigOutput() ServiceConvergeConfigOutput {
	return o
}

func (o ServiceConvergeConfigOutput) ToServiceConvergeConfigOutputWithContext(ctx context.Context) ServiceConvergeConfigOutput {
	return o
}

func (o ServiceConvergeConfigOutput) ToServiceConvergeConfigPtrOutput() ServiceConvergeConfigPtrOutput {
	return o.ToServiceConvergeConfigPtrOutputWithContext(context.Background())
}

func (o ServiceConvergeConfigOutput) ToServiceConvergeConfigPtrOutputWithContext(ctx context.Context) ServiceConvergeConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceConvergeConfig) *ServiceConvergeConfig {
		return &v
	}).(ServiceConvergeConfigPtrOutput)
}

func (o ServiceConvergeConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceConvergeConfig] {
	return pulumix.Output[ServiceConvergeConfig]{
		OutputState: o.OutputState,
	}
}

// The interval to check if the desired state is reached `(ms|s)`. Defaults to `7s`.
func (o ServiceConvergeConfigOutput) Delay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceConvergeConfig) *string { return v.Delay }).(pulumi.StringPtrOutput)
}

// The timeout of the service to reach the desired state `(s|m)`. Defaults to `3m`
func (o ServiceConvergeConfigOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceConvergeConfig) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type ServiceConvergeConfigPtrOutput struct{ *pulumi.OutputState }

func (ServiceConvergeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConvergeConfig)(nil)).Elem()
}

func (o ServiceConvergeConfigPtrOutput) ToServiceConvergeConfigPtrOutput() ServiceConvergeConfigPtrOutput {
	return o
}

func (o ServiceConvergeConfigPtrOutput) ToServiceConvergeConfigPtrOutputWithContext(ctx context.Context) ServiceConvergeConfigPtrOutput {
	return o
}

func (o ServiceConvergeConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceConvergeConfig] {
	return pulumix.Output[*ServiceConvergeConfig]{
		OutputState: o.OutputState,
	}
}

func (o ServiceConvergeConfigPtrOutput) Elem() ServiceConvergeConfigOutput {
	return o.ApplyT(func(v *ServiceConvergeConfig) ServiceConvergeConfig {
		if v != nil {
			return *v
		}
		var ret ServiceConvergeConfig
		return ret
	}).(ServiceConvergeConfigOutput)
}

// The interval to check if the desired state is reached `(ms|s)`. Defaults to `7s`.
func (o ServiceConvergeConfigPtrOutput) Delay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceConvergeConfig) *string {
		if v == nil {
			return nil
		}
		return v.Delay
	}).(pulumi.StringPtrOutput)
}

// The timeout of the service to reach the desired state `(s|m)`. Defaults to `3m`
func (o ServiceConvergeConfigPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceConvergeConfig) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

type ServiceEndpointSpec struct {
	// The mode of resolution to use for internal load balancing between tasks
	Mode *string `pulumi:"mode"`
	// List of exposed ports that this service is accessible on from the outside. Ports can only be provided if 'vip' resolution mode is used
	Ports []ServiceEndpointSpecPort `pulumi:"ports"`
}

// ServiceEndpointSpecInput is an input type that accepts ServiceEndpointSpecArgs and ServiceEndpointSpecOutput values.
// You can construct a concrete instance of `ServiceEndpointSpecInput` via:
//
//	ServiceEndpointSpecArgs{...}
type ServiceEndpointSpecInput interface {
	pulumi.Input

	ToServiceEndpointSpecOutput() ServiceEndpointSpecOutput
	ToServiceEndpointSpecOutputWithContext(context.Context) ServiceEndpointSpecOutput
}

type ServiceEndpointSpecArgs struct {
	// The mode of resolution to use for internal load balancing between tasks
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// List of exposed ports that this service is accessible on from the outside. Ports can only be provided if 'vip' resolution mode is used
	Ports ServiceEndpointSpecPortArrayInput `pulumi:"ports"`
}

func (ServiceEndpointSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEndpointSpec)(nil)).Elem()
}

func (i ServiceEndpointSpecArgs) ToServiceEndpointSpecOutput() ServiceEndpointSpecOutput {
	return i.ToServiceEndpointSpecOutputWithContext(context.Background())
}

func (i ServiceEndpointSpecArgs) ToServiceEndpointSpecOutputWithContext(ctx context.Context) ServiceEndpointSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointSpecOutput)
}

func (i ServiceEndpointSpecArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceEndpointSpec] {
	return pulumix.Output[ServiceEndpointSpec]{
		OutputState: i.ToServiceEndpointSpecOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceEndpointSpecArgs) ToServiceEndpointSpecPtrOutput() ServiceEndpointSpecPtrOutput {
	return i.ToServiceEndpointSpecPtrOutputWithContext(context.Background())
}

func (i ServiceEndpointSpecArgs) ToServiceEndpointSpecPtrOutputWithContext(ctx context.Context) ServiceEndpointSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointSpecOutput).ToServiceEndpointSpecPtrOutputWithContext(ctx)
}

// ServiceEndpointSpecPtrInput is an input type that accepts ServiceEndpointSpecArgs, ServiceEndpointSpecPtr and ServiceEndpointSpecPtrOutput values.
// You can construct a concrete instance of `ServiceEndpointSpecPtrInput` via:
//
//	        ServiceEndpointSpecArgs{...}
//
//	or:
//
//	        nil
type ServiceEndpointSpecPtrInput interface {
	pulumi.Input

	ToServiceEndpointSpecPtrOutput() ServiceEndpointSpecPtrOutput
	ToServiceEndpointSpecPtrOutputWithContext(context.Context) ServiceEndpointSpecPtrOutput
}

type serviceEndpointSpecPtrType ServiceEndpointSpecArgs

func ServiceEndpointSpecPtr(v *ServiceEndpointSpecArgs) ServiceEndpointSpecPtrInput {
	return (*serviceEndpointSpecPtrType)(v)
}

func (*serviceEndpointSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEndpointSpec)(nil)).Elem()
}

func (i *serviceEndpointSpecPtrType) ToServiceEndpointSpecPtrOutput() ServiceEndpointSpecPtrOutput {
	return i.ToServiceEndpointSpecPtrOutputWithContext(context.Background())
}

func (i *serviceEndpointSpecPtrType) ToServiceEndpointSpecPtrOutputWithContext(ctx context.Context) ServiceEndpointSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointSpecPtrOutput)
}

func (i *serviceEndpointSpecPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceEndpointSpec] {
	return pulumix.Output[*ServiceEndpointSpec]{
		OutputState: i.ToServiceEndpointSpecPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceEndpointSpecOutput struct{ *pulumi.OutputState }

func (ServiceEndpointSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEndpointSpec)(nil)).Elem()
}

func (o ServiceEndpointSpecOutput) ToServiceEndpointSpecOutput() ServiceEndpointSpecOutput {
	return o
}

func (o ServiceEndpointSpecOutput) ToServiceEndpointSpecOutputWithContext(ctx context.Context) ServiceEndpointSpecOutput {
	return o
}

func (o ServiceEndpointSpecOutput) ToServiceEndpointSpecPtrOutput() ServiceEndpointSpecPtrOutput {
	return o.ToServiceEndpointSpecPtrOutputWithContext(context.Background())
}

func (o ServiceEndpointSpecOutput) ToServiceEndpointSpecPtrOutputWithContext(ctx context.Context) ServiceEndpointSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceEndpointSpec) *ServiceEndpointSpec {
		return &v
	}).(ServiceEndpointSpecPtrOutput)
}

func (o ServiceEndpointSpecOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceEndpointSpec] {
	return pulumix.Output[ServiceEndpointSpec]{
		OutputState: o.OutputState,
	}
}

// The mode of resolution to use for internal load balancing between tasks
func (o ServiceEndpointSpecOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEndpointSpec) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// List of exposed ports that this service is accessible on from the outside. Ports can only be provided if 'vip' resolution mode is used
func (o ServiceEndpointSpecOutput) Ports() ServiceEndpointSpecPortArrayOutput {
	return o.ApplyT(func(v ServiceEndpointSpec) []ServiceEndpointSpecPort { return v.Ports }).(ServiceEndpointSpecPortArrayOutput)
}

type ServiceEndpointSpecPtrOutput struct{ *pulumi.OutputState }

func (ServiceEndpointSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEndpointSpec)(nil)).Elem()
}

func (o ServiceEndpointSpecPtrOutput) ToServiceEndpointSpecPtrOutput() ServiceEndpointSpecPtrOutput {
	return o
}

func (o ServiceEndpointSpecPtrOutput) ToServiceEndpointSpecPtrOutputWithContext(ctx context.Context) ServiceEndpointSpecPtrOutput {
	return o
}

func (o ServiceEndpointSpecPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceEndpointSpec] {
	return pulumix.Output[*ServiceEndpointSpec]{
		OutputState: o.OutputState,
	}
}

func (o ServiceEndpointSpecPtrOutput) Elem() ServiceEndpointSpecOutput {
	return o.ApplyT(func(v *ServiceEndpointSpec) ServiceEndpointSpec {
		if v != nil {
			return *v
		}
		var ret ServiceEndpointSpec
		return ret
	}).(ServiceEndpointSpecOutput)
}

// The mode of resolution to use for internal load balancing between tasks
func (o ServiceEndpointSpecPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceEndpointSpec) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// List of exposed ports that this service is accessible on from the outside. Ports can only be provided if 'vip' resolution mode is used
func (o ServiceEndpointSpecPtrOutput) Ports() ServiceEndpointSpecPortArrayOutput {
	return o.ApplyT(func(v *ServiceEndpointSpec) []ServiceEndpointSpecPort {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(ServiceEndpointSpecPortArrayOutput)
}

type ServiceEndpointSpecPort struct {
	// Name of the service
	Name          *string `pulumi:"name"`
	Protocol      *string `pulumi:"protocol"`
	PublishMode   *string `pulumi:"publishMode"`
	PublishedPort *int    `pulumi:"publishedPort"`
	TargetPort    int     `pulumi:"targetPort"`
}

// ServiceEndpointSpecPortInput is an input type that accepts ServiceEndpointSpecPortArgs and ServiceEndpointSpecPortOutput values.
// You can construct a concrete instance of `ServiceEndpointSpecPortInput` via:
//
//	ServiceEndpointSpecPortArgs{...}
type ServiceEndpointSpecPortInput interface {
	pulumi.Input

	ToServiceEndpointSpecPortOutput() ServiceEndpointSpecPortOutput
	ToServiceEndpointSpecPortOutputWithContext(context.Context) ServiceEndpointSpecPortOutput
}

type ServiceEndpointSpecPortArgs struct {
	// Name of the service
	Name          pulumi.StringPtrInput `pulumi:"name"`
	Protocol      pulumi.StringPtrInput `pulumi:"protocol"`
	PublishMode   pulumi.StringPtrInput `pulumi:"publishMode"`
	PublishedPort pulumi.IntPtrInput    `pulumi:"publishedPort"`
	TargetPort    pulumi.IntInput       `pulumi:"targetPort"`
}

func (ServiceEndpointSpecPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEndpointSpecPort)(nil)).Elem()
}

func (i ServiceEndpointSpecPortArgs) ToServiceEndpointSpecPortOutput() ServiceEndpointSpecPortOutput {
	return i.ToServiceEndpointSpecPortOutputWithContext(context.Background())
}

func (i ServiceEndpointSpecPortArgs) ToServiceEndpointSpecPortOutputWithContext(ctx context.Context) ServiceEndpointSpecPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointSpecPortOutput)
}

func (i ServiceEndpointSpecPortArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceEndpointSpecPort] {
	return pulumix.Output[ServiceEndpointSpecPort]{
		OutputState: i.ToServiceEndpointSpecPortOutputWithContext(ctx).OutputState,
	}
}

// ServiceEndpointSpecPortArrayInput is an input type that accepts ServiceEndpointSpecPortArray and ServiceEndpointSpecPortArrayOutput values.
// You can construct a concrete instance of `ServiceEndpointSpecPortArrayInput` via:
//
//	ServiceEndpointSpecPortArray{ ServiceEndpointSpecPortArgs{...} }
type ServiceEndpointSpecPortArrayInput interface {
	pulumi.Input

	ToServiceEndpointSpecPortArrayOutput() ServiceEndpointSpecPortArrayOutput
	ToServiceEndpointSpecPortArrayOutputWithContext(context.Context) ServiceEndpointSpecPortArrayOutput
}

type ServiceEndpointSpecPortArray []ServiceEndpointSpecPortInput

func (ServiceEndpointSpecPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEndpointSpecPort)(nil)).Elem()
}

func (i ServiceEndpointSpecPortArray) ToServiceEndpointSpecPortArrayOutput() ServiceEndpointSpecPortArrayOutput {
	return i.ToServiceEndpointSpecPortArrayOutputWithContext(context.Background())
}

func (i ServiceEndpointSpecPortArray) ToServiceEndpointSpecPortArrayOutputWithContext(ctx context.Context) ServiceEndpointSpecPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointSpecPortArrayOutput)
}

func (i ServiceEndpointSpecPortArray) ToOutput(ctx context.Context) pulumix.Output[[]ServiceEndpointSpecPort] {
	return pulumix.Output[[]ServiceEndpointSpecPort]{
		OutputState: i.ToServiceEndpointSpecPortArrayOutputWithContext(ctx).OutputState,
	}
}

type ServiceEndpointSpecPortOutput struct{ *pulumi.OutputState }

func (ServiceEndpointSpecPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEndpointSpecPort)(nil)).Elem()
}

func (o ServiceEndpointSpecPortOutput) ToServiceEndpointSpecPortOutput() ServiceEndpointSpecPortOutput {
	return o
}

func (o ServiceEndpointSpecPortOutput) ToServiceEndpointSpecPortOutputWithContext(ctx context.Context) ServiceEndpointSpecPortOutput {
	return o
}

func (o ServiceEndpointSpecPortOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceEndpointSpecPort] {
	return pulumix.Output[ServiceEndpointSpecPort]{
		OutputState: o.OutputState,
	}
}

// Name of the service
func (o ServiceEndpointSpecPortOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEndpointSpecPort) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ServiceEndpointSpecPortOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEndpointSpecPort) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o ServiceEndpointSpecPortOutput) PublishMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEndpointSpecPort) *string { return v.PublishMode }).(pulumi.StringPtrOutput)
}

func (o ServiceEndpointSpecPortOutput) PublishedPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceEndpointSpecPort) *int { return v.PublishedPort }).(pulumi.IntPtrOutput)
}

func (o ServiceEndpointSpecPortOutput) TargetPort() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceEndpointSpecPort) int { return v.TargetPort }).(pulumi.IntOutput)
}

type ServiceEndpointSpecPortArrayOutput struct{ *pulumi.OutputState }

func (ServiceEndpointSpecPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEndpointSpecPort)(nil)).Elem()
}

func (o ServiceEndpointSpecPortArrayOutput) ToServiceEndpointSpecPortArrayOutput() ServiceEndpointSpecPortArrayOutput {
	return o
}

func (o ServiceEndpointSpecPortArrayOutput) ToServiceEndpointSpecPortArrayOutputWithContext(ctx context.Context) ServiceEndpointSpecPortArrayOutput {
	return o
}

func (o ServiceEndpointSpecPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceEndpointSpecPort] {
	return pulumix.Output[[]ServiceEndpointSpecPort]{
		OutputState: o.OutputState,
	}
}

func (o ServiceEndpointSpecPortArrayOutput) Index(i pulumi.IntInput) ServiceEndpointSpecPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceEndpointSpecPort {
		return vs[0].([]ServiceEndpointSpecPort)[vs[1].(int)]
	}).(ServiceEndpointSpecPortOutput)
}

type ServiceLabel struct {
	// Name of the label
	Label string `pulumi:"label"`
	// Value of the label
	Value string `pulumi:"value"`
}

// ServiceLabelInput is an input type that accepts ServiceLabelArgs and ServiceLabelOutput values.
// You can construct a concrete instance of `ServiceLabelInput` via:
//
//	ServiceLabelArgs{...}
type ServiceLabelInput interface {
	pulumi.Input

	ToServiceLabelOutput() ServiceLabelOutput
	ToServiceLabelOutputWithContext(context.Context) ServiceLabelOutput
}

type ServiceLabelArgs struct {
	// Name of the label
	Label pulumi.StringInput `pulumi:"label"`
	// Value of the label
	Value pulumi.StringInput `pulumi:"value"`
}

func (ServiceLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLabel)(nil)).Elem()
}

func (i ServiceLabelArgs) ToServiceLabelOutput() ServiceLabelOutput {
	return i.ToServiceLabelOutputWithContext(context.Background())
}

func (i ServiceLabelArgs) ToServiceLabelOutputWithContext(ctx context.Context) ServiceLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLabelOutput)
}

func (i ServiceLabelArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceLabel] {
	return pulumix.Output[ServiceLabel]{
		OutputState: i.ToServiceLabelOutputWithContext(ctx).OutputState,
	}
}

// ServiceLabelArrayInput is an input type that accepts ServiceLabelArray and ServiceLabelArrayOutput values.
// You can construct a concrete instance of `ServiceLabelArrayInput` via:
//
//	ServiceLabelArray{ ServiceLabelArgs{...} }
type ServiceLabelArrayInput interface {
	pulumi.Input

	ToServiceLabelArrayOutput() ServiceLabelArrayOutput
	ToServiceLabelArrayOutputWithContext(context.Context) ServiceLabelArrayOutput
}

type ServiceLabelArray []ServiceLabelInput

func (ServiceLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceLabel)(nil)).Elem()
}

func (i ServiceLabelArray) ToServiceLabelArrayOutput() ServiceLabelArrayOutput {
	return i.ToServiceLabelArrayOutputWithContext(context.Background())
}

func (i ServiceLabelArray) ToServiceLabelArrayOutputWithContext(ctx context.Context) ServiceLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLabelArrayOutput)
}

func (i ServiceLabelArray) ToOutput(ctx context.Context) pulumix.Output[[]ServiceLabel] {
	return pulumix.Output[[]ServiceLabel]{
		OutputState: i.ToServiceLabelArrayOutputWithContext(ctx).OutputState,
	}
}

type ServiceLabelOutput struct{ *pulumi.OutputState }

func (ServiceLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLabel)(nil)).Elem()
}

func (o ServiceLabelOutput) ToServiceLabelOutput() ServiceLabelOutput {
	return o
}

func (o ServiceLabelOutput) ToServiceLabelOutputWithContext(ctx context.Context) ServiceLabelOutput {
	return o
}

func (o ServiceLabelOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceLabel] {
	return pulumix.Output[ServiceLabel]{
		OutputState: o.OutputState,
	}
}

// Name of the label
func (o ServiceLabelOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceLabel) string { return v.Label }).(pulumi.StringOutput)
}

// Value of the label
func (o ServiceLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceLabel) string { return v.Value }).(pulumi.StringOutput)
}

type ServiceLabelArrayOutput struct{ *pulumi.OutputState }

func (ServiceLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceLabel)(nil)).Elem()
}

func (o ServiceLabelArrayOutput) ToServiceLabelArrayOutput() ServiceLabelArrayOutput {
	return o
}

func (o ServiceLabelArrayOutput) ToServiceLabelArrayOutputWithContext(ctx context.Context) ServiceLabelArrayOutput {
	return o
}

func (o ServiceLabelArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceLabel] {
	return pulumix.Output[[]ServiceLabel]{
		OutputState: o.OutputState,
	}
}

func (o ServiceLabelArrayOutput) Index(i pulumi.IntInput) ServiceLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceLabel {
		return vs[0].([]ServiceLabel)[vs[1].(int)]
	}).(ServiceLabelOutput)
}

type ServiceMode struct {
	// The global service mode. Defaults to `false`
	Global *bool `pulumi:"global"`
	// The replicated service mode
	Replicated *ServiceModeReplicated `pulumi:"replicated"`
}

// ServiceModeInput is an input type that accepts ServiceModeArgs and ServiceModeOutput values.
// You can construct a concrete instance of `ServiceModeInput` via:
//
//	ServiceModeArgs{...}
type ServiceModeInput interface {
	pulumi.Input

	ToServiceModeOutput() ServiceModeOutput
	ToServiceModeOutputWithContext(context.Context) ServiceModeOutput
}

type ServiceModeArgs struct {
	// The global service mode. Defaults to `false`
	Global pulumi.BoolPtrInput `pulumi:"global"`
	// The replicated service mode
	Replicated ServiceModeReplicatedPtrInput `pulumi:"replicated"`
}

func (ServiceModeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMode)(nil)).Elem()
}

func (i ServiceModeArgs) ToServiceModeOutput() ServiceModeOutput {
	return i.ToServiceModeOutputWithContext(context.Background())
}

func (i ServiceModeArgs) ToServiceModeOutputWithContext(ctx context.Context) ServiceModeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceModeOutput)
}

func (i ServiceModeArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceMode] {
	return pulumix.Output[ServiceMode]{
		OutputState: i.ToServiceModeOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceModeArgs) ToServiceModePtrOutput() ServiceModePtrOutput {
	return i.ToServiceModePtrOutputWithContext(context.Background())
}

func (i ServiceModeArgs) ToServiceModePtrOutputWithContext(ctx context.Context) ServiceModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceModeOutput).ToServiceModePtrOutputWithContext(ctx)
}

// ServiceModePtrInput is an input type that accepts ServiceModeArgs, ServiceModePtr and ServiceModePtrOutput values.
// You can construct a concrete instance of `ServiceModePtrInput` via:
//
//	        ServiceModeArgs{...}
//
//	or:
//
//	        nil
type ServiceModePtrInput interface {
	pulumi.Input

	ToServiceModePtrOutput() ServiceModePtrOutput
	ToServiceModePtrOutputWithContext(context.Context) ServiceModePtrOutput
}

type serviceModePtrType ServiceModeArgs

func ServiceModePtr(v *ServiceModeArgs) ServiceModePtrInput {
	return (*serviceModePtrType)(v)
}

func (*serviceModePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceMode)(nil)).Elem()
}

func (i *serviceModePtrType) ToServiceModePtrOutput() ServiceModePtrOutput {
	return i.ToServiceModePtrOutputWithContext(context.Background())
}

func (i *serviceModePtrType) ToServiceModePtrOutputWithContext(ctx context.Context) ServiceModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceModePtrOutput)
}

func (i *serviceModePtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceMode] {
	return pulumix.Output[*ServiceMode]{
		OutputState: i.ToServiceModePtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceModeOutput struct{ *pulumi.OutputState }

func (ServiceModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMode)(nil)).Elem()
}

func (o ServiceModeOutput) ToServiceModeOutput() ServiceModeOutput {
	return o
}

func (o ServiceModeOutput) ToServiceModeOutputWithContext(ctx context.Context) ServiceModeOutput {
	return o
}

func (o ServiceModeOutput) ToServiceModePtrOutput() ServiceModePtrOutput {
	return o.ToServiceModePtrOutputWithContext(context.Background())
}

func (o ServiceModeOutput) ToServiceModePtrOutputWithContext(ctx context.Context) ServiceModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceMode) *ServiceMode {
		return &v
	}).(ServiceModePtrOutput)
}

func (o ServiceModeOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceMode] {
	return pulumix.Output[ServiceMode]{
		OutputState: o.OutputState,
	}
}

// The global service mode. Defaults to `false`
func (o ServiceModeOutput) Global() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceMode) *bool { return v.Global }).(pulumi.BoolPtrOutput)
}

// The replicated service mode
func (o ServiceModeOutput) Replicated() ServiceModeReplicatedPtrOutput {
	return o.ApplyT(func(v ServiceMode) *ServiceModeReplicated { return v.Replicated }).(ServiceModeReplicatedPtrOutput)
}

type ServiceModePtrOutput struct{ *pulumi.OutputState }

func (ServiceModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceMode)(nil)).Elem()
}

func (o ServiceModePtrOutput) ToServiceModePtrOutput() ServiceModePtrOutput {
	return o
}

func (o ServiceModePtrOutput) ToServiceModePtrOutputWithContext(ctx context.Context) ServiceModePtrOutput {
	return o
}

func (o ServiceModePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceMode] {
	return pulumix.Output[*ServiceMode]{
		OutputState: o.OutputState,
	}
}

func (o ServiceModePtrOutput) Elem() ServiceModeOutput {
	return o.ApplyT(func(v *ServiceMode) ServiceMode {
		if v != nil {
			return *v
		}
		var ret ServiceMode
		return ret
	}).(ServiceModeOutput)
}

// The global service mode. Defaults to `false`
func (o ServiceModePtrOutput) Global() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceMode) *bool {
		if v == nil {
			return nil
		}
		return v.Global
	}).(pulumi.BoolPtrOutput)
}

// The replicated service mode
func (o ServiceModePtrOutput) Replicated() ServiceModeReplicatedPtrOutput {
	return o.ApplyT(func(v *ServiceMode) *ServiceModeReplicated {
		if v == nil {
			return nil
		}
		return v.Replicated
	}).(ServiceModeReplicatedPtrOutput)
}

type ServiceModeReplicated struct {
	Replicas *int `pulumi:"replicas"`
}

// ServiceModeReplicatedInput is an input type that accepts ServiceModeReplicatedArgs and ServiceModeReplicatedOutput values.
// You can construct a concrete instance of `ServiceModeReplicatedInput` via:
//
//	ServiceModeReplicatedArgs{...}
type ServiceModeReplicatedInput interface {
	pulumi.Input

	ToServiceModeReplicatedOutput() ServiceModeReplicatedOutput
	ToServiceModeReplicatedOutputWithContext(context.Context) ServiceModeReplicatedOutput
}

type ServiceModeReplicatedArgs struct {
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
}

func (ServiceModeReplicatedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceModeReplicated)(nil)).Elem()
}

func (i ServiceModeReplicatedArgs) ToServiceModeReplicatedOutput() ServiceModeReplicatedOutput {
	return i.ToServiceModeReplicatedOutputWithContext(context.Background())
}

func (i ServiceModeReplicatedArgs) ToServiceModeReplicatedOutputWithContext(ctx context.Context) ServiceModeReplicatedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceModeReplicatedOutput)
}

func (i ServiceModeReplicatedArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceModeReplicated] {
	return pulumix.Output[ServiceModeReplicated]{
		OutputState: i.ToServiceModeReplicatedOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceModeReplicatedArgs) ToServiceModeReplicatedPtrOutput() ServiceModeReplicatedPtrOutput {
	return i.ToServiceModeReplicatedPtrOutputWithContext(context.Background())
}

func (i ServiceModeReplicatedArgs) ToServiceModeReplicatedPtrOutputWithContext(ctx context.Context) ServiceModeReplicatedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceModeReplicatedOutput).ToServiceModeReplicatedPtrOutputWithContext(ctx)
}

// ServiceModeReplicatedPtrInput is an input type that accepts ServiceModeReplicatedArgs, ServiceModeReplicatedPtr and ServiceModeReplicatedPtrOutput values.
// You can construct a concrete instance of `ServiceModeReplicatedPtrInput` via:
//
//	        ServiceModeReplicatedArgs{...}
//
//	or:
//
//	        nil
type ServiceModeReplicatedPtrInput interface {
	pulumi.Input

	ToServiceModeReplicatedPtrOutput() ServiceModeReplicatedPtrOutput
	ToServiceModeReplicatedPtrOutputWithContext(context.Context) ServiceModeReplicatedPtrOutput
}

type serviceModeReplicatedPtrType ServiceModeReplicatedArgs

func ServiceModeReplicatedPtr(v *ServiceModeReplicatedArgs) ServiceModeReplicatedPtrInput {
	return (*serviceModeReplicatedPtrType)(v)
}

func (*serviceModeReplicatedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceModeReplicated)(nil)).Elem()
}

func (i *serviceModeReplicatedPtrType) ToServiceModeReplicatedPtrOutput() ServiceModeReplicatedPtrOutput {
	return i.ToServiceModeReplicatedPtrOutputWithContext(context.Background())
}

func (i *serviceModeReplicatedPtrType) ToServiceModeReplicatedPtrOutputWithContext(ctx context.Context) ServiceModeReplicatedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceModeReplicatedPtrOutput)
}

func (i *serviceModeReplicatedPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceModeReplicated] {
	return pulumix.Output[*ServiceModeReplicated]{
		OutputState: i.ToServiceModeReplicatedPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceModeReplicatedOutput struct{ *pulumi.OutputState }

func (ServiceModeReplicatedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceModeReplicated)(nil)).Elem()
}

func (o ServiceModeReplicatedOutput) ToServiceModeReplicatedOutput() ServiceModeReplicatedOutput {
	return o
}

func (o ServiceModeReplicatedOutput) ToServiceModeReplicatedOutputWithContext(ctx context.Context) ServiceModeReplicatedOutput {
	return o
}

func (o ServiceModeReplicatedOutput) ToServiceModeReplicatedPtrOutput() ServiceModeReplicatedPtrOutput {
	return o.ToServiceModeReplicatedPtrOutputWithContext(context.Background())
}

func (o ServiceModeReplicatedOutput) ToServiceModeReplicatedPtrOutputWithContext(ctx context.Context) ServiceModeReplicatedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceModeReplicated) *ServiceModeReplicated {
		return &v
	}).(ServiceModeReplicatedPtrOutput)
}

func (o ServiceModeReplicatedOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceModeReplicated] {
	return pulumix.Output[ServiceModeReplicated]{
		OutputState: o.OutputState,
	}
}

func (o ServiceModeReplicatedOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceModeReplicated) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

type ServiceModeReplicatedPtrOutput struct{ *pulumi.OutputState }

func (ServiceModeReplicatedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceModeReplicated)(nil)).Elem()
}

func (o ServiceModeReplicatedPtrOutput) ToServiceModeReplicatedPtrOutput() ServiceModeReplicatedPtrOutput {
	return o
}

func (o ServiceModeReplicatedPtrOutput) ToServiceModeReplicatedPtrOutputWithContext(ctx context.Context) ServiceModeReplicatedPtrOutput {
	return o
}

func (o ServiceModeReplicatedPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceModeReplicated] {
	return pulumix.Output[*ServiceModeReplicated]{
		OutputState: o.OutputState,
	}
}

func (o ServiceModeReplicatedPtrOutput) Elem() ServiceModeReplicatedOutput {
	return o.ApplyT(func(v *ServiceModeReplicated) ServiceModeReplicated {
		if v != nil {
			return *v
		}
		var ret ServiceModeReplicated
		return ret
	}).(ServiceModeReplicatedOutput)
}

func (o ServiceModeReplicatedPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceModeReplicated) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

type ServiceRollbackConfig struct {
	// Delay between task rollbacks (ns|us|ms|s|m|h). Defaults to `0s`.
	Delay *string `pulumi:"delay"`
	// Action on rollback failure: pause | continue. Defaults to `pause`.
	FailureAction *string `pulumi:"failureAction"`
	// Failure rate to tolerate during a rollback. Defaults to `0.0`.
	MaxFailureRatio *string `pulumi:"maxFailureRatio"`
	// Duration after each task rollback to monitor for failure (ns|us|ms|s|m|h). Defaults to `5s`.
	Monitor *string `pulumi:"monitor"`
	// Rollback order: either 'stop-first' or 'start-first'. Defaults to `stop-first`.
	Order *string `pulumi:"order"`
	// Maximum number of tasks to be rollbacked in one iteration. Defaults to `1`
	Parallelism *int `pulumi:"parallelism"`
}

// ServiceRollbackConfigInput is an input type that accepts ServiceRollbackConfigArgs and ServiceRollbackConfigOutput values.
// You can construct a concrete instance of `ServiceRollbackConfigInput` via:
//
//	ServiceRollbackConfigArgs{...}
type ServiceRollbackConfigInput interface {
	pulumi.Input

	ToServiceRollbackConfigOutput() ServiceRollbackConfigOutput
	ToServiceRollbackConfigOutputWithContext(context.Context) ServiceRollbackConfigOutput
}

type ServiceRollbackConfigArgs struct {
	// Delay between task rollbacks (ns|us|ms|s|m|h). Defaults to `0s`.
	Delay pulumi.StringPtrInput `pulumi:"delay"`
	// Action on rollback failure: pause | continue. Defaults to `pause`.
	FailureAction pulumi.StringPtrInput `pulumi:"failureAction"`
	// Failure rate to tolerate during a rollback. Defaults to `0.0`.
	MaxFailureRatio pulumi.StringPtrInput `pulumi:"maxFailureRatio"`
	// Duration after each task rollback to monitor for failure (ns|us|ms|s|m|h). Defaults to `5s`.
	Monitor pulumi.StringPtrInput `pulumi:"monitor"`
	// Rollback order: either 'stop-first' or 'start-first'. Defaults to `stop-first`.
	Order pulumi.StringPtrInput `pulumi:"order"`
	// Maximum number of tasks to be rollbacked in one iteration. Defaults to `1`
	Parallelism pulumi.IntPtrInput `pulumi:"parallelism"`
}

func (ServiceRollbackConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceRollbackConfig)(nil)).Elem()
}

func (i ServiceRollbackConfigArgs) ToServiceRollbackConfigOutput() ServiceRollbackConfigOutput {
	return i.ToServiceRollbackConfigOutputWithContext(context.Background())
}

func (i ServiceRollbackConfigArgs) ToServiceRollbackConfigOutputWithContext(ctx context.Context) ServiceRollbackConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceRollbackConfigOutput)
}

func (i ServiceRollbackConfigArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceRollbackConfig] {
	return pulumix.Output[ServiceRollbackConfig]{
		OutputState: i.ToServiceRollbackConfigOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceRollbackConfigArgs) ToServiceRollbackConfigPtrOutput() ServiceRollbackConfigPtrOutput {
	return i.ToServiceRollbackConfigPtrOutputWithContext(context.Background())
}

func (i ServiceRollbackConfigArgs) ToServiceRollbackConfigPtrOutputWithContext(ctx context.Context) ServiceRollbackConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceRollbackConfigOutput).ToServiceRollbackConfigPtrOutputWithContext(ctx)
}

// ServiceRollbackConfigPtrInput is an input type that accepts ServiceRollbackConfigArgs, ServiceRollbackConfigPtr and ServiceRollbackConfigPtrOutput values.
// You can construct a concrete instance of `ServiceRollbackConfigPtrInput` via:
//
//	        ServiceRollbackConfigArgs{...}
//
//	or:
//
//	        nil
type ServiceRollbackConfigPtrInput interface {
	pulumi.Input

	ToServiceRollbackConfigPtrOutput() ServiceRollbackConfigPtrOutput
	ToServiceRollbackConfigPtrOutputWithContext(context.Context) ServiceRollbackConfigPtrOutput
}

type serviceRollbackConfigPtrType ServiceRollbackConfigArgs

func ServiceRollbackConfigPtr(v *ServiceRollbackConfigArgs) ServiceRollbackConfigPtrInput {
	return (*serviceRollbackConfigPtrType)(v)
}

func (*serviceRollbackConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceRollbackConfig)(nil)).Elem()
}

func (i *serviceRollbackConfigPtrType) ToServiceRollbackConfigPtrOutput() ServiceRollbackConfigPtrOutput {
	return i.ToServiceRollbackConfigPtrOutputWithContext(context.Background())
}

func (i *serviceRollbackConfigPtrType) ToServiceRollbackConfigPtrOutputWithContext(ctx context.Context) ServiceRollbackConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceRollbackConfigPtrOutput)
}

func (i *serviceRollbackConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceRollbackConfig] {
	return pulumix.Output[*ServiceRollbackConfig]{
		OutputState: i.ToServiceRollbackConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceRollbackConfigOutput struct{ *pulumi.OutputState }

func (ServiceRollbackConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceRollbackConfig)(nil)).Elem()
}

func (o ServiceRollbackConfigOutput) ToServiceRollbackConfigOutput() ServiceRollbackConfigOutput {
	return o
}

func (o ServiceRollbackConfigOutput) ToServiceRollbackConfigOutputWithContext(ctx context.Context) ServiceRollbackConfigOutput {
	return o
}

func (o ServiceRollbackConfigOutput) ToServiceRollbackConfigPtrOutput() ServiceRollbackConfigPtrOutput {
	return o.ToServiceRollbackConfigPtrOutputWithContext(context.Background())
}

func (o ServiceRollbackConfigOutput) ToServiceRollbackConfigPtrOutputWithContext(ctx context.Context) ServiceRollbackConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceRollbackConfig) *ServiceRollbackConfig {
		return &v
	}).(ServiceRollbackConfigPtrOutput)
}

func (o ServiceRollbackConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceRollbackConfig] {
	return pulumix.Output[ServiceRollbackConfig]{
		OutputState: o.OutputState,
	}
}

// Delay between task rollbacks (ns|us|ms|s|m|h). Defaults to `0s`.
func (o ServiceRollbackConfigOutput) Delay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceRollbackConfig) *string { return v.Delay }).(pulumi.StringPtrOutput)
}

// Action on rollback failure: pause | continue. Defaults to `pause`.
func (o ServiceRollbackConfigOutput) FailureAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceRollbackConfig) *string { return v.FailureAction }).(pulumi.StringPtrOutput)
}

// Failure rate to tolerate during a rollback. Defaults to `0.0`.
func (o ServiceRollbackConfigOutput) MaxFailureRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceRollbackConfig) *string { return v.MaxFailureRatio }).(pulumi.StringPtrOutput)
}

// Duration after each task rollback to monitor for failure (ns|us|ms|s|m|h). Defaults to `5s`.
func (o ServiceRollbackConfigOutput) Monitor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceRollbackConfig) *string { return v.Monitor }).(pulumi.StringPtrOutput)
}

// Rollback order: either 'stop-first' or 'start-first'. Defaults to `stop-first`.
func (o ServiceRollbackConfigOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceRollbackConfig) *string { return v.Order }).(pulumi.StringPtrOutput)
}

// Maximum number of tasks to be rollbacked in one iteration. Defaults to `1`
func (o ServiceRollbackConfigOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceRollbackConfig) *int { return v.Parallelism }).(pulumi.IntPtrOutput)
}

type ServiceRollbackConfigPtrOutput struct{ *pulumi.OutputState }

func (ServiceRollbackConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceRollbackConfig)(nil)).Elem()
}

func (o ServiceRollbackConfigPtrOutput) ToServiceRollbackConfigPtrOutput() ServiceRollbackConfigPtrOutput {
	return o
}

func (o ServiceRollbackConfigPtrOutput) ToServiceRollbackConfigPtrOutputWithContext(ctx context.Context) ServiceRollbackConfigPtrOutput {
	return o
}

func (o ServiceRollbackConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceRollbackConfig] {
	return pulumix.Output[*ServiceRollbackConfig]{
		OutputState: o.OutputState,
	}
}

func (o ServiceRollbackConfigPtrOutput) Elem() ServiceRollbackConfigOutput {
	return o.ApplyT(func(v *ServiceRollbackConfig) ServiceRollbackConfig {
		if v != nil {
			return *v
		}
		var ret ServiceRollbackConfig
		return ret
	}).(ServiceRollbackConfigOutput)
}

// Delay between task rollbacks (ns|us|ms|s|m|h). Defaults to `0s`.
func (o ServiceRollbackConfigPtrOutput) Delay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceRollbackConfig) *string {
		if v == nil {
			return nil
		}
		return v.Delay
	}).(pulumi.StringPtrOutput)
}

// Action on rollback failure: pause | continue. Defaults to `pause`.
func (o ServiceRollbackConfigPtrOutput) FailureAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceRollbackConfig) *string {
		if v == nil {
			return nil
		}
		return v.FailureAction
	}).(pulumi.StringPtrOutput)
}

// Failure rate to tolerate during a rollback. Defaults to `0.0`.
func (o ServiceRollbackConfigPtrOutput) MaxFailureRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceRollbackConfig) *string {
		if v == nil {
			return nil
		}
		return v.MaxFailureRatio
	}).(pulumi.StringPtrOutput)
}

// Duration after each task rollback to monitor for failure (ns|us|ms|s|m|h). Defaults to `5s`.
func (o ServiceRollbackConfigPtrOutput) Monitor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceRollbackConfig) *string {
		if v == nil {
			return nil
		}
		return v.Monitor
	}).(pulumi.StringPtrOutput)
}

// Rollback order: either 'stop-first' or 'start-first'. Defaults to `stop-first`.
func (o ServiceRollbackConfigPtrOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceRollbackConfig) *string {
		if v == nil {
			return nil
		}
		return v.Order
	}).(pulumi.StringPtrOutput)
}

// Maximum number of tasks to be rollbacked in one iteration. Defaults to `1`
func (o ServiceRollbackConfigPtrOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceRollbackConfig) *int {
		if v == nil {
			return nil
		}
		return v.Parallelism
	}).(pulumi.IntPtrOutput)
}

type ServiceTaskSpec struct {
	// The spec for each container
	ContainerSpec ServiceTaskSpecContainerSpec `pulumi:"containerSpec"`
	// A counter that triggers an update even if no relevant parameters have been changed. See the [spec](https://github.com/docker/swarmkit/blob/master/api/specs.proto#L126).
	ForceUpdate *int `pulumi:"forceUpdate"`
	// Specifies the log driver to use for tasks created from this spec. If not present, the default one for the swarm will be used, finally falling back to the engine default if not specified
	LogDriver *ServiceTaskSpecLogDriver `pulumi:"logDriver"`
	// The networks the container is attached to
	NetworksAdvanceds []ServiceTaskSpecNetworksAdvanced `pulumi:"networksAdvanceds"`
	// The placement preferences
	Placement *ServiceTaskSpecPlacement `pulumi:"placement"`
	// Resource requirements which apply to each individual container created as part of the service
	Resources *ServiceTaskSpecResources `pulumi:"resources"`
	// Specification for the restart policy which applies to containers created as part of this service.
	RestartPolicy *ServiceTaskSpecRestartPolicy `pulumi:"restartPolicy"`
	// Runtime is the type of runtime specified for the task executor. See the [types](https://github.com/moby/moby/blob/master/api/types/swarm/runtime.go).
	Runtime *string `pulumi:"runtime"`
}

// ServiceTaskSpecInput is an input type that accepts ServiceTaskSpecArgs and ServiceTaskSpecOutput values.
// You can construct a concrete instance of `ServiceTaskSpecInput` via:
//
//	ServiceTaskSpecArgs{...}
type ServiceTaskSpecInput interface {
	pulumi.Input

	ToServiceTaskSpecOutput() ServiceTaskSpecOutput
	ToServiceTaskSpecOutputWithContext(context.Context) ServiceTaskSpecOutput
}

type ServiceTaskSpecArgs struct {
	// The spec for each container
	ContainerSpec ServiceTaskSpecContainerSpecInput `pulumi:"containerSpec"`
	// A counter that triggers an update even if no relevant parameters have been changed. See the [spec](https://github.com/docker/swarmkit/blob/master/api/specs.proto#L126).
	ForceUpdate pulumi.IntPtrInput `pulumi:"forceUpdate"`
	// Specifies the log driver to use for tasks created from this spec. If not present, the default one for the swarm will be used, finally falling back to the engine default if not specified
	LogDriver ServiceTaskSpecLogDriverPtrInput `pulumi:"logDriver"`
	// The networks the container is attached to
	NetworksAdvanceds ServiceTaskSpecNetworksAdvancedArrayInput `pulumi:"networksAdvanceds"`
	// The placement preferences
	Placement ServiceTaskSpecPlacementPtrInput `pulumi:"placement"`
	// Resource requirements which apply to each individual container created as part of the service
	Resources ServiceTaskSpecResourcesPtrInput `pulumi:"resources"`
	// Specification for the restart policy which applies to containers created as part of this service.
	RestartPolicy ServiceTaskSpecRestartPolicyPtrInput `pulumi:"restartPolicy"`
	// Runtime is the type of runtime specified for the task executor. See the [types](https://github.com/moby/moby/blob/master/api/types/swarm/runtime.go).
	Runtime pulumi.StringPtrInput `pulumi:"runtime"`
}

func (ServiceTaskSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpec)(nil)).Elem()
}

func (i ServiceTaskSpecArgs) ToServiceTaskSpecOutput() ServiceTaskSpecOutput {
	return i.ToServiceTaskSpecOutputWithContext(context.Background())
}

func (i ServiceTaskSpecArgs) ToServiceTaskSpecOutputWithContext(ctx context.Context) ServiceTaskSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecOutput)
}

func (i ServiceTaskSpecArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpec] {
	return pulumix.Output[ServiceTaskSpec]{
		OutputState: i.ToServiceTaskSpecOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceTaskSpecArgs) ToServiceTaskSpecPtrOutput() ServiceTaskSpecPtrOutput {
	return i.ToServiceTaskSpecPtrOutputWithContext(context.Background())
}

func (i ServiceTaskSpecArgs) ToServiceTaskSpecPtrOutputWithContext(ctx context.Context) ServiceTaskSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecOutput).ToServiceTaskSpecPtrOutputWithContext(ctx)
}

// ServiceTaskSpecPtrInput is an input type that accepts ServiceTaskSpecArgs, ServiceTaskSpecPtr and ServiceTaskSpecPtrOutput values.
// You can construct a concrete instance of `ServiceTaskSpecPtrInput` via:
//
//	        ServiceTaskSpecArgs{...}
//
//	or:
//
//	        nil
type ServiceTaskSpecPtrInput interface {
	pulumi.Input

	ToServiceTaskSpecPtrOutput() ServiceTaskSpecPtrOutput
	ToServiceTaskSpecPtrOutputWithContext(context.Context) ServiceTaskSpecPtrOutput
}

type serviceTaskSpecPtrType ServiceTaskSpecArgs

func ServiceTaskSpecPtr(v *ServiceTaskSpecArgs) ServiceTaskSpecPtrInput {
	return (*serviceTaskSpecPtrType)(v)
}

func (*serviceTaskSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpec)(nil)).Elem()
}

func (i *serviceTaskSpecPtrType) ToServiceTaskSpecPtrOutput() ServiceTaskSpecPtrOutput {
	return i.ToServiceTaskSpecPtrOutputWithContext(context.Background())
}

func (i *serviceTaskSpecPtrType) ToServiceTaskSpecPtrOutputWithContext(ctx context.Context) ServiceTaskSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecPtrOutput)
}

func (i *serviceTaskSpecPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpec] {
	return pulumix.Output[*ServiceTaskSpec]{
		OutputState: i.ToServiceTaskSpecPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceTaskSpecOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpec)(nil)).Elem()
}

func (o ServiceTaskSpecOutput) ToServiceTaskSpecOutput() ServiceTaskSpecOutput {
	return o
}

func (o ServiceTaskSpecOutput) ToServiceTaskSpecOutputWithContext(ctx context.Context) ServiceTaskSpecOutput {
	return o
}

func (o ServiceTaskSpecOutput) ToServiceTaskSpecPtrOutput() ServiceTaskSpecPtrOutput {
	return o.ToServiceTaskSpecPtrOutputWithContext(context.Background())
}

func (o ServiceTaskSpecOutput) ToServiceTaskSpecPtrOutputWithContext(ctx context.Context) ServiceTaskSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceTaskSpec) *ServiceTaskSpec {
		return &v
	}).(ServiceTaskSpecPtrOutput)
}

func (o ServiceTaskSpecOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpec] {
	return pulumix.Output[ServiceTaskSpec]{
		OutputState: o.OutputState,
	}
}

// The spec for each container
func (o ServiceTaskSpecOutput) ContainerSpec() ServiceTaskSpecContainerSpecOutput {
	return o.ApplyT(func(v ServiceTaskSpec) ServiceTaskSpecContainerSpec { return v.ContainerSpec }).(ServiceTaskSpecContainerSpecOutput)
}

// A counter that triggers an update even if no relevant parameters have been changed. See the [spec](https://github.com/docker/swarmkit/blob/master/api/specs.proto#L126).
func (o ServiceTaskSpecOutput) ForceUpdate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpec) *int { return v.ForceUpdate }).(pulumi.IntPtrOutput)
}

// Specifies the log driver to use for tasks created from this spec. If not present, the default one for the swarm will be used, finally falling back to the engine default if not specified
func (o ServiceTaskSpecOutput) LogDriver() ServiceTaskSpecLogDriverPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpec) *ServiceTaskSpecLogDriver { return v.LogDriver }).(ServiceTaskSpecLogDriverPtrOutput)
}

// The networks the container is attached to
func (o ServiceTaskSpecOutput) NetworksAdvanceds() ServiceTaskSpecNetworksAdvancedArrayOutput {
	return o.ApplyT(func(v ServiceTaskSpec) []ServiceTaskSpecNetworksAdvanced { return v.NetworksAdvanceds }).(ServiceTaskSpecNetworksAdvancedArrayOutput)
}

// The placement preferences
func (o ServiceTaskSpecOutput) Placement() ServiceTaskSpecPlacementPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpec) *ServiceTaskSpecPlacement { return v.Placement }).(ServiceTaskSpecPlacementPtrOutput)
}

// Resource requirements which apply to each individual container created as part of the service
func (o ServiceTaskSpecOutput) Resources() ServiceTaskSpecResourcesPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpec) *ServiceTaskSpecResources { return v.Resources }).(ServiceTaskSpecResourcesPtrOutput)
}

// Specification for the restart policy which applies to containers created as part of this service.
func (o ServiceTaskSpecOutput) RestartPolicy() ServiceTaskSpecRestartPolicyPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpec) *ServiceTaskSpecRestartPolicy { return v.RestartPolicy }).(ServiceTaskSpecRestartPolicyPtrOutput)
}

// Runtime is the type of runtime specified for the task executor. See the [types](https://github.com/moby/moby/blob/master/api/types/swarm/runtime.go).
func (o ServiceTaskSpecOutput) Runtime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpec) *string { return v.Runtime }).(pulumi.StringPtrOutput)
}

type ServiceTaskSpecPtrOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpec)(nil)).Elem()
}

func (o ServiceTaskSpecPtrOutput) ToServiceTaskSpecPtrOutput() ServiceTaskSpecPtrOutput {
	return o
}

func (o ServiceTaskSpecPtrOutput) ToServiceTaskSpecPtrOutputWithContext(ctx context.Context) ServiceTaskSpecPtrOutput {
	return o
}

func (o ServiceTaskSpecPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpec] {
	return pulumix.Output[*ServiceTaskSpec]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecPtrOutput) Elem() ServiceTaskSpecOutput {
	return o.ApplyT(func(v *ServiceTaskSpec) ServiceTaskSpec {
		if v != nil {
			return *v
		}
		var ret ServiceTaskSpec
		return ret
	}).(ServiceTaskSpecOutput)
}

// The spec for each container
func (o ServiceTaskSpecPtrOutput) ContainerSpec() ServiceTaskSpecContainerSpecPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpec) *ServiceTaskSpecContainerSpec {
		if v == nil {
			return nil
		}
		return &v.ContainerSpec
	}).(ServiceTaskSpecContainerSpecPtrOutput)
}

// A counter that triggers an update even if no relevant parameters have been changed. See the [spec](https://github.com/docker/swarmkit/blob/master/api/specs.proto#L126).
func (o ServiceTaskSpecPtrOutput) ForceUpdate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpec) *int {
		if v == nil {
			return nil
		}
		return v.ForceUpdate
	}).(pulumi.IntPtrOutput)
}

// Specifies the log driver to use for tasks created from this spec. If not present, the default one for the swarm will be used, finally falling back to the engine default if not specified
func (o ServiceTaskSpecPtrOutput) LogDriver() ServiceTaskSpecLogDriverPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpec) *ServiceTaskSpecLogDriver {
		if v == nil {
			return nil
		}
		return v.LogDriver
	}).(ServiceTaskSpecLogDriverPtrOutput)
}

// The networks the container is attached to
func (o ServiceTaskSpecPtrOutput) NetworksAdvanceds() ServiceTaskSpecNetworksAdvancedArrayOutput {
	return o.ApplyT(func(v *ServiceTaskSpec) []ServiceTaskSpecNetworksAdvanced {
		if v == nil {
			return nil
		}
		return v.NetworksAdvanceds
	}).(ServiceTaskSpecNetworksAdvancedArrayOutput)
}

// The placement preferences
func (o ServiceTaskSpecPtrOutput) Placement() ServiceTaskSpecPlacementPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpec) *ServiceTaskSpecPlacement {
		if v == nil {
			return nil
		}
		return v.Placement
	}).(ServiceTaskSpecPlacementPtrOutput)
}

// Resource requirements which apply to each individual container created as part of the service
func (o ServiceTaskSpecPtrOutput) Resources() ServiceTaskSpecResourcesPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpec) *ServiceTaskSpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ServiceTaskSpecResourcesPtrOutput)
}

// Specification for the restart policy which applies to containers created as part of this service.
func (o ServiceTaskSpecPtrOutput) RestartPolicy() ServiceTaskSpecRestartPolicyPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpec) *ServiceTaskSpecRestartPolicy {
		if v == nil {
			return nil
		}
		return v.RestartPolicy
	}).(ServiceTaskSpecRestartPolicyPtrOutput)
}

// Runtime is the type of runtime specified for the task executor. See the [types](https://github.com/moby/moby/blob/master/api/types/swarm/runtime.go).
func (o ServiceTaskSpecPtrOutput) Runtime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpec) *string {
		if v == nil {
			return nil
		}
		return v.Runtime
	}).(pulumi.StringPtrOutput)
}

type ServiceTaskSpecContainerSpec struct {
	Args        []string                                 `pulumi:"args"`
	Commands    []string                                 `pulumi:"commands"`
	Configs     []ServiceTaskSpecContainerSpecConfig     `pulumi:"configs"`
	Dir         *string                                  `pulumi:"dir"`
	DnsConfig   *ServiceTaskSpecContainerSpecDnsConfig   `pulumi:"dnsConfig"`
	Env         map[string]string                        `pulumi:"env"`
	Groups      []string                                 `pulumi:"groups"`
	Healthcheck *ServiceTaskSpecContainerSpecHealthcheck `pulumi:"healthcheck"`
	Hostname    *string                                  `pulumi:"hostname"`
	Hosts       []ServiceTaskSpecContainerSpecHost       `pulumi:"hosts"`
	Image       string                                   `pulumi:"image"`
	Isolation   *string                                  `pulumi:"isolation"`
	// User-defined key/value metadata
	Labels          []ServiceTaskSpecContainerSpecLabel     `pulumi:"labels"`
	Mounts          []ServiceTaskSpecContainerSpecMount     `pulumi:"mounts"`
	Privileges      *ServiceTaskSpecContainerSpecPrivileges `pulumi:"privileges"`
	ReadOnly        *bool                                   `pulumi:"readOnly"`
	Secrets         []ServiceTaskSpecContainerSpecSecret    `pulumi:"secrets"`
	StopGracePeriod *string                                 `pulumi:"stopGracePeriod"`
	StopSignal      *string                                 `pulumi:"stopSignal"`
	Sysctl          map[string]interface{}                  `pulumi:"sysctl"`
	User            *string                                 `pulumi:"user"`
}

// ServiceTaskSpecContainerSpecInput is an input type that accepts ServiceTaskSpecContainerSpecArgs and ServiceTaskSpecContainerSpecOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecInput` via:
//
//	ServiceTaskSpecContainerSpecArgs{...}
type ServiceTaskSpecContainerSpecInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecOutput() ServiceTaskSpecContainerSpecOutput
	ToServiceTaskSpecContainerSpecOutputWithContext(context.Context) ServiceTaskSpecContainerSpecOutput
}

type ServiceTaskSpecContainerSpecArgs struct {
	Args        pulumi.StringArrayInput                         `pulumi:"args"`
	Commands    pulumi.StringArrayInput                         `pulumi:"commands"`
	Configs     ServiceTaskSpecContainerSpecConfigArrayInput    `pulumi:"configs"`
	Dir         pulumi.StringPtrInput                           `pulumi:"dir"`
	DnsConfig   ServiceTaskSpecContainerSpecDnsConfigPtrInput   `pulumi:"dnsConfig"`
	Env         pulumi.StringMapInput                           `pulumi:"env"`
	Groups      pulumi.StringArrayInput                         `pulumi:"groups"`
	Healthcheck ServiceTaskSpecContainerSpecHealthcheckPtrInput `pulumi:"healthcheck"`
	Hostname    pulumi.StringPtrInput                           `pulumi:"hostname"`
	Hosts       ServiceTaskSpecContainerSpecHostArrayInput      `pulumi:"hosts"`
	Image       pulumi.StringInput                              `pulumi:"image"`
	Isolation   pulumi.StringPtrInput                           `pulumi:"isolation"`
	// User-defined key/value metadata
	Labels          ServiceTaskSpecContainerSpecLabelArrayInput    `pulumi:"labels"`
	Mounts          ServiceTaskSpecContainerSpecMountArrayInput    `pulumi:"mounts"`
	Privileges      ServiceTaskSpecContainerSpecPrivilegesPtrInput `pulumi:"privileges"`
	ReadOnly        pulumi.BoolPtrInput                            `pulumi:"readOnly"`
	Secrets         ServiceTaskSpecContainerSpecSecretArrayInput   `pulumi:"secrets"`
	StopGracePeriod pulumi.StringPtrInput                          `pulumi:"stopGracePeriod"`
	StopSignal      pulumi.StringPtrInput                          `pulumi:"stopSignal"`
	Sysctl          pulumi.MapInput                                `pulumi:"sysctl"`
	User            pulumi.StringPtrInput                          `pulumi:"user"`
}

func (ServiceTaskSpecContainerSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpec)(nil)).Elem()
}

func (i ServiceTaskSpecContainerSpecArgs) ToServiceTaskSpecContainerSpecOutput() ServiceTaskSpecContainerSpecOutput {
	return i.ToServiceTaskSpecContainerSpecOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecArgs) ToServiceTaskSpecContainerSpecOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecOutput)
}

func (i ServiceTaskSpecContainerSpecArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpec] {
	return pulumix.Output[ServiceTaskSpecContainerSpec]{
		OutputState: i.ToServiceTaskSpecContainerSpecOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceTaskSpecContainerSpecArgs) ToServiceTaskSpecContainerSpecPtrOutput() ServiceTaskSpecContainerSpecPtrOutput {
	return i.ToServiceTaskSpecContainerSpecPtrOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecArgs) ToServiceTaskSpecContainerSpecPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecOutput).ToServiceTaskSpecContainerSpecPtrOutputWithContext(ctx)
}

// ServiceTaskSpecContainerSpecPtrInput is an input type that accepts ServiceTaskSpecContainerSpecArgs, ServiceTaskSpecContainerSpecPtr and ServiceTaskSpecContainerSpecPtrOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecPtrInput` via:
//
//	        ServiceTaskSpecContainerSpecArgs{...}
//
//	or:
//
//	        nil
type ServiceTaskSpecContainerSpecPtrInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecPtrOutput() ServiceTaskSpecContainerSpecPtrOutput
	ToServiceTaskSpecContainerSpecPtrOutputWithContext(context.Context) ServiceTaskSpecContainerSpecPtrOutput
}

type serviceTaskSpecContainerSpecPtrType ServiceTaskSpecContainerSpecArgs

func ServiceTaskSpecContainerSpecPtr(v *ServiceTaskSpecContainerSpecArgs) ServiceTaskSpecContainerSpecPtrInput {
	return (*serviceTaskSpecContainerSpecPtrType)(v)
}

func (*serviceTaskSpecContainerSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecContainerSpec)(nil)).Elem()
}

func (i *serviceTaskSpecContainerSpecPtrType) ToServiceTaskSpecContainerSpecPtrOutput() ServiceTaskSpecContainerSpecPtrOutput {
	return i.ToServiceTaskSpecContainerSpecPtrOutputWithContext(context.Background())
}

func (i *serviceTaskSpecContainerSpecPtrType) ToServiceTaskSpecContainerSpecPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecPtrOutput)
}

func (i *serviceTaskSpecContainerSpecPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecContainerSpec] {
	return pulumix.Output[*ServiceTaskSpecContainerSpec]{
		OutputState: i.ToServiceTaskSpecContainerSpecPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceTaskSpecContainerSpecOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpec)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecOutput) ToServiceTaskSpecContainerSpecOutput() ServiceTaskSpecContainerSpecOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecOutput) ToServiceTaskSpecContainerSpecOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecOutput) ToServiceTaskSpecContainerSpecPtrOutput() ServiceTaskSpecContainerSpecPtrOutput {
	return o.ToServiceTaskSpecContainerSpecPtrOutputWithContext(context.Background())
}

func (o ServiceTaskSpecContainerSpecOutput) ToServiceTaskSpecContainerSpecPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceTaskSpecContainerSpec) *ServiceTaskSpecContainerSpec {
		return &v
	}).(ServiceTaskSpecContainerSpecPtrOutput)
}

func (o ServiceTaskSpecContainerSpecOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpec] {
	return pulumix.Output[ServiceTaskSpecContainerSpec]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpec) []string { return v.Args }).(pulumi.StringArrayOutput)
}

func (o ServiceTaskSpecContainerSpecOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpec) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

func (o ServiceTaskSpecContainerSpecOutput) Configs() ServiceTaskSpecContainerSpecConfigArrayOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpec) []ServiceTaskSpecContainerSpecConfig { return v.Configs }).(ServiceTaskSpecContainerSpecConfigArrayOutput)
}

func (o ServiceTaskSpecContainerSpecOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpec) *string { return v.Dir }).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecOutput) DnsConfig() ServiceTaskSpecContainerSpecDnsConfigPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpec) *ServiceTaskSpecContainerSpecDnsConfig { return v.DnsConfig }).(ServiceTaskSpecContainerSpecDnsConfigPtrOutput)
}

func (o ServiceTaskSpecContainerSpecOutput) Env() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpec) map[string]string { return v.Env }).(pulumi.StringMapOutput)
}

func (o ServiceTaskSpecContainerSpecOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpec) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

func (o ServiceTaskSpecContainerSpecOutput) Healthcheck() ServiceTaskSpecContainerSpecHealthcheckPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpec) *ServiceTaskSpecContainerSpecHealthcheck { return v.Healthcheck }).(ServiceTaskSpecContainerSpecHealthcheckPtrOutput)
}

func (o ServiceTaskSpecContainerSpecOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpec) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecOutput) Hosts() ServiceTaskSpecContainerSpecHostArrayOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpec) []ServiceTaskSpecContainerSpecHost { return v.Hosts }).(ServiceTaskSpecContainerSpecHostArrayOutput)
}

func (o ServiceTaskSpecContainerSpecOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpec) string { return v.Image }).(pulumi.StringOutput)
}

func (o ServiceTaskSpecContainerSpecOutput) Isolation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpec) *string { return v.Isolation }).(pulumi.StringPtrOutput)
}

// User-defined key/value metadata
func (o ServiceTaskSpecContainerSpecOutput) Labels() ServiceTaskSpecContainerSpecLabelArrayOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpec) []ServiceTaskSpecContainerSpecLabel { return v.Labels }).(ServiceTaskSpecContainerSpecLabelArrayOutput)
}

func (o ServiceTaskSpecContainerSpecOutput) Mounts() ServiceTaskSpecContainerSpecMountArrayOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpec) []ServiceTaskSpecContainerSpecMount { return v.Mounts }).(ServiceTaskSpecContainerSpecMountArrayOutput)
}

func (o ServiceTaskSpecContainerSpecOutput) Privileges() ServiceTaskSpecContainerSpecPrivilegesPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpec) *ServiceTaskSpecContainerSpecPrivileges { return v.Privileges }).(ServiceTaskSpecContainerSpecPrivilegesPtrOutput)
}

func (o ServiceTaskSpecContainerSpecOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpec) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

func (o ServiceTaskSpecContainerSpecOutput) Secrets() ServiceTaskSpecContainerSpecSecretArrayOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpec) []ServiceTaskSpecContainerSpecSecret { return v.Secrets }).(ServiceTaskSpecContainerSpecSecretArrayOutput)
}

func (o ServiceTaskSpecContainerSpecOutput) StopGracePeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpec) *string { return v.StopGracePeriod }).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecOutput) StopSignal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpec) *string { return v.StopSignal }).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecOutput) Sysctl() pulumi.MapOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpec) map[string]interface{} { return v.Sysctl }).(pulumi.MapOutput)
}

func (o ServiceTaskSpecContainerSpecOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpec) *string { return v.User }).(pulumi.StringPtrOutput)
}

type ServiceTaskSpecContainerSpecPtrOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecContainerSpec)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecPtrOutput) ToServiceTaskSpecContainerSpecPtrOutput() ServiceTaskSpecContainerSpecPtrOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecPtrOutput) ToServiceTaskSpecContainerSpecPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecPtrOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecContainerSpec] {
	return pulumix.Output[*ServiceTaskSpecContainerSpec]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecPtrOutput) Elem() ServiceTaskSpecContainerSpecOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpec) ServiceTaskSpecContainerSpec {
		if v != nil {
			return *v
		}
		var ret ServiceTaskSpecContainerSpec
		return ret
	}).(ServiceTaskSpecContainerSpecOutput)
}

func (o ServiceTaskSpecContainerSpecPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpec) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

func (o ServiceTaskSpecContainerSpecPtrOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpec) []string {
		if v == nil {
			return nil
		}
		return v.Commands
	}).(pulumi.StringArrayOutput)
}

func (o ServiceTaskSpecContainerSpecPtrOutput) Configs() ServiceTaskSpecContainerSpecConfigArrayOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpec) []ServiceTaskSpecContainerSpecConfig {
		if v == nil {
			return nil
		}
		return v.Configs
	}).(ServiceTaskSpecContainerSpecConfigArrayOutput)
}

func (o ServiceTaskSpecContainerSpecPtrOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpec) *string {
		if v == nil {
			return nil
		}
		return v.Dir
	}).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecPtrOutput) DnsConfig() ServiceTaskSpecContainerSpecDnsConfigPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpec) *ServiceTaskSpecContainerSpecDnsConfig {
		if v == nil {
			return nil
		}
		return v.DnsConfig
	}).(ServiceTaskSpecContainerSpecDnsConfigPtrOutput)
}

func (o ServiceTaskSpecContainerSpecPtrOutput) Env() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Env
	}).(pulumi.StringMapOutput)
}

func (o ServiceTaskSpecContainerSpecPtrOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpec) []string {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(pulumi.StringArrayOutput)
}

func (o ServiceTaskSpecContainerSpecPtrOutput) Healthcheck() ServiceTaskSpecContainerSpecHealthcheckPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpec) *ServiceTaskSpecContainerSpecHealthcheck {
		if v == nil {
			return nil
		}
		return v.Healthcheck
	}).(ServiceTaskSpecContainerSpecHealthcheckPtrOutput)
}

func (o ServiceTaskSpecContainerSpecPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpec) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecPtrOutput) Hosts() ServiceTaskSpecContainerSpecHostArrayOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpec) []ServiceTaskSpecContainerSpecHost {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(ServiceTaskSpecContainerSpecHostArrayOutput)
}

func (o ServiceTaskSpecContainerSpecPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Image
	}).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecPtrOutput) Isolation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpec) *string {
		if v == nil {
			return nil
		}
		return v.Isolation
	}).(pulumi.StringPtrOutput)
}

// User-defined key/value metadata
func (o ServiceTaskSpecContainerSpecPtrOutput) Labels() ServiceTaskSpecContainerSpecLabelArrayOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpec) []ServiceTaskSpecContainerSpecLabel {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(ServiceTaskSpecContainerSpecLabelArrayOutput)
}

func (o ServiceTaskSpecContainerSpecPtrOutput) Mounts() ServiceTaskSpecContainerSpecMountArrayOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpec) []ServiceTaskSpecContainerSpecMount {
		if v == nil {
			return nil
		}
		return v.Mounts
	}).(ServiceTaskSpecContainerSpecMountArrayOutput)
}

func (o ServiceTaskSpecContainerSpecPtrOutput) Privileges() ServiceTaskSpecContainerSpecPrivilegesPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpec) *ServiceTaskSpecContainerSpecPrivileges {
		if v == nil {
			return nil
		}
		return v.Privileges
	}).(ServiceTaskSpecContainerSpecPrivilegesPtrOutput)
}

func (o ServiceTaskSpecContainerSpecPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpec) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

func (o ServiceTaskSpecContainerSpecPtrOutput) Secrets() ServiceTaskSpecContainerSpecSecretArrayOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpec) []ServiceTaskSpecContainerSpecSecret {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(ServiceTaskSpecContainerSpecSecretArrayOutput)
}

func (o ServiceTaskSpecContainerSpecPtrOutput) StopGracePeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpec) *string {
		if v == nil {
			return nil
		}
		return v.StopGracePeriod
	}).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecPtrOutput) StopSignal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpec) *string {
		if v == nil {
			return nil
		}
		return v.StopSignal
	}).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecPtrOutput) Sysctl() pulumi.MapOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Sysctl
	}).(pulumi.MapOutput)
}

func (o ServiceTaskSpecContainerSpecPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpec) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

type ServiceTaskSpecContainerSpecConfig struct {
	ConfigId   string  `pulumi:"configId"`
	ConfigName *string `pulumi:"configName"`
	FileGid    *string `pulumi:"fileGid"`
	FileMode   *int    `pulumi:"fileMode"`
	FileName   string  `pulumi:"fileName"`
	FileUid    *string `pulumi:"fileUid"`
}

// ServiceTaskSpecContainerSpecConfigInput is an input type that accepts ServiceTaskSpecContainerSpecConfigArgs and ServiceTaskSpecContainerSpecConfigOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecConfigInput` via:
//
//	ServiceTaskSpecContainerSpecConfigArgs{...}
type ServiceTaskSpecContainerSpecConfigInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecConfigOutput() ServiceTaskSpecContainerSpecConfigOutput
	ToServiceTaskSpecContainerSpecConfigOutputWithContext(context.Context) ServiceTaskSpecContainerSpecConfigOutput
}

type ServiceTaskSpecContainerSpecConfigArgs struct {
	ConfigId   pulumi.StringInput    `pulumi:"configId"`
	ConfigName pulumi.StringPtrInput `pulumi:"configName"`
	FileGid    pulumi.StringPtrInput `pulumi:"fileGid"`
	FileMode   pulumi.IntPtrInput    `pulumi:"fileMode"`
	FileName   pulumi.StringInput    `pulumi:"fileName"`
	FileUid    pulumi.StringPtrInput `pulumi:"fileUid"`
}

func (ServiceTaskSpecContainerSpecConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecConfig)(nil)).Elem()
}

func (i ServiceTaskSpecContainerSpecConfigArgs) ToServiceTaskSpecContainerSpecConfigOutput() ServiceTaskSpecContainerSpecConfigOutput {
	return i.ToServiceTaskSpecContainerSpecConfigOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecConfigArgs) ToServiceTaskSpecContainerSpecConfigOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecConfigOutput)
}

func (i ServiceTaskSpecContainerSpecConfigArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecConfig] {
	return pulumix.Output[ServiceTaskSpecContainerSpecConfig]{
		OutputState: i.ToServiceTaskSpecContainerSpecConfigOutputWithContext(ctx).OutputState,
	}
}

// ServiceTaskSpecContainerSpecConfigArrayInput is an input type that accepts ServiceTaskSpecContainerSpecConfigArray and ServiceTaskSpecContainerSpecConfigArrayOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecConfigArrayInput` via:
//
//	ServiceTaskSpecContainerSpecConfigArray{ ServiceTaskSpecContainerSpecConfigArgs{...} }
type ServiceTaskSpecContainerSpecConfigArrayInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecConfigArrayOutput() ServiceTaskSpecContainerSpecConfigArrayOutput
	ToServiceTaskSpecContainerSpecConfigArrayOutputWithContext(context.Context) ServiceTaskSpecContainerSpecConfigArrayOutput
}

type ServiceTaskSpecContainerSpecConfigArray []ServiceTaskSpecContainerSpecConfigInput

func (ServiceTaskSpecContainerSpecConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTaskSpecContainerSpecConfig)(nil)).Elem()
}

func (i ServiceTaskSpecContainerSpecConfigArray) ToServiceTaskSpecContainerSpecConfigArrayOutput() ServiceTaskSpecContainerSpecConfigArrayOutput {
	return i.ToServiceTaskSpecContainerSpecConfigArrayOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecConfigArray) ToServiceTaskSpecContainerSpecConfigArrayOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecConfigArrayOutput)
}

func (i ServiceTaskSpecContainerSpecConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]ServiceTaskSpecContainerSpecConfig] {
	return pulumix.Output[[]ServiceTaskSpecContainerSpecConfig]{
		OutputState: i.ToServiceTaskSpecContainerSpecConfigArrayOutputWithContext(ctx).OutputState,
	}
}

type ServiceTaskSpecContainerSpecConfigOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecConfig)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecConfigOutput) ToServiceTaskSpecContainerSpecConfigOutput() ServiceTaskSpecContainerSpecConfigOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecConfigOutput) ToServiceTaskSpecContainerSpecConfigOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecConfigOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecConfig] {
	return pulumix.Output[ServiceTaskSpecContainerSpecConfig]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecConfigOutput) ConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecConfig) string { return v.ConfigId }).(pulumi.StringOutput)
}

func (o ServiceTaskSpecContainerSpecConfigOutput) ConfigName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecConfig) *string { return v.ConfigName }).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecConfigOutput) FileGid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecConfig) *string { return v.FileGid }).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecConfigOutput) FileMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecConfig) *int { return v.FileMode }).(pulumi.IntPtrOutput)
}

func (o ServiceTaskSpecContainerSpecConfigOutput) FileName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecConfig) string { return v.FileName }).(pulumi.StringOutput)
}

func (o ServiceTaskSpecContainerSpecConfigOutput) FileUid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecConfig) *string { return v.FileUid }).(pulumi.StringPtrOutput)
}

type ServiceTaskSpecContainerSpecConfigArrayOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTaskSpecContainerSpecConfig)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecConfigArrayOutput) ToServiceTaskSpecContainerSpecConfigArrayOutput() ServiceTaskSpecContainerSpecConfigArrayOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecConfigArrayOutput) ToServiceTaskSpecContainerSpecConfigArrayOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecConfigArrayOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceTaskSpecContainerSpecConfig] {
	return pulumix.Output[[]ServiceTaskSpecContainerSpecConfig]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecConfigArrayOutput) Index(i pulumi.IntInput) ServiceTaskSpecContainerSpecConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceTaskSpecContainerSpecConfig {
		return vs[0].([]ServiceTaskSpecContainerSpecConfig)[vs[1].(int)]
	}).(ServiceTaskSpecContainerSpecConfigOutput)
}

type ServiceTaskSpecContainerSpecDnsConfig struct {
	Nameservers []string `pulumi:"nameservers"`
	Options     []string `pulumi:"options"`
	Searches    []string `pulumi:"searches"`
}

// ServiceTaskSpecContainerSpecDnsConfigInput is an input type that accepts ServiceTaskSpecContainerSpecDnsConfigArgs and ServiceTaskSpecContainerSpecDnsConfigOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecDnsConfigInput` via:
//
//	ServiceTaskSpecContainerSpecDnsConfigArgs{...}
type ServiceTaskSpecContainerSpecDnsConfigInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecDnsConfigOutput() ServiceTaskSpecContainerSpecDnsConfigOutput
	ToServiceTaskSpecContainerSpecDnsConfigOutputWithContext(context.Context) ServiceTaskSpecContainerSpecDnsConfigOutput
}

type ServiceTaskSpecContainerSpecDnsConfigArgs struct {
	Nameservers pulumi.StringArrayInput `pulumi:"nameservers"`
	Options     pulumi.StringArrayInput `pulumi:"options"`
	Searches    pulumi.StringArrayInput `pulumi:"searches"`
}

func (ServiceTaskSpecContainerSpecDnsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecDnsConfig)(nil)).Elem()
}

func (i ServiceTaskSpecContainerSpecDnsConfigArgs) ToServiceTaskSpecContainerSpecDnsConfigOutput() ServiceTaskSpecContainerSpecDnsConfigOutput {
	return i.ToServiceTaskSpecContainerSpecDnsConfigOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecDnsConfigArgs) ToServiceTaskSpecContainerSpecDnsConfigOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecDnsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecDnsConfigOutput)
}

func (i ServiceTaskSpecContainerSpecDnsConfigArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecDnsConfig] {
	return pulumix.Output[ServiceTaskSpecContainerSpecDnsConfig]{
		OutputState: i.ToServiceTaskSpecContainerSpecDnsConfigOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceTaskSpecContainerSpecDnsConfigArgs) ToServiceTaskSpecContainerSpecDnsConfigPtrOutput() ServiceTaskSpecContainerSpecDnsConfigPtrOutput {
	return i.ToServiceTaskSpecContainerSpecDnsConfigPtrOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecDnsConfigArgs) ToServiceTaskSpecContainerSpecDnsConfigPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecDnsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecDnsConfigOutput).ToServiceTaskSpecContainerSpecDnsConfigPtrOutputWithContext(ctx)
}

// ServiceTaskSpecContainerSpecDnsConfigPtrInput is an input type that accepts ServiceTaskSpecContainerSpecDnsConfigArgs, ServiceTaskSpecContainerSpecDnsConfigPtr and ServiceTaskSpecContainerSpecDnsConfigPtrOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecDnsConfigPtrInput` via:
//
//	        ServiceTaskSpecContainerSpecDnsConfigArgs{...}
//
//	or:
//
//	        nil
type ServiceTaskSpecContainerSpecDnsConfigPtrInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecDnsConfigPtrOutput() ServiceTaskSpecContainerSpecDnsConfigPtrOutput
	ToServiceTaskSpecContainerSpecDnsConfigPtrOutputWithContext(context.Context) ServiceTaskSpecContainerSpecDnsConfigPtrOutput
}

type serviceTaskSpecContainerSpecDnsConfigPtrType ServiceTaskSpecContainerSpecDnsConfigArgs

func ServiceTaskSpecContainerSpecDnsConfigPtr(v *ServiceTaskSpecContainerSpecDnsConfigArgs) ServiceTaskSpecContainerSpecDnsConfigPtrInput {
	return (*serviceTaskSpecContainerSpecDnsConfigPtrType)(v)
}

func (*serviceTaskSpecContainerSpecDnsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecContainerSpecDnsConfig)(nil)).Elem()
}

func (i *serviceTaskSpecContainerSpecDnsConfigPtrType) ToServiceTaskSpecContainerSpecDnsConfigPtrOutput() ServiceTaskSpecContainerSpecDnsConfigPtrOutput {
	return i.ToServiceTaskSpecContainerSpecDnsConfigPtrOutputWithContext(context.Background())
}

func (i *serviceTaskSpecContainerSpecDnsConfigPtrType) ToServiceTaskSpecContainerSpecDnsConfigPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecDnsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecDnsConfigPtrOutput)
}

func (i *serviceTaskSpecContainerSpecDnsConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecContainerSpecDnsConfig] {
	return pulumix.Output[*ServiceTaskSpecContainerSpecDnsConfig]{
		OutputState: i.ToServiceTaskSpecContainerSpecDnsConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceTaskSpecContainerSpecDnsConfigOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecDnsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecDnsConfig)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecDnsConfigOutput) ToServiceTaskSpecContainerSpecDnsConfigOutput() ServiceTaskSpecContainerSpecDnsConfigOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecDnsConfigOutput) ToServiceTaskSpecContainerSpecDnsConfigOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecDnsConfigOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecDnsConfigOutput) ToServiceTaskSpecContainerSpecDnsConfigPtrOutput() ServiceTaskSpecContainerSpecDnsConfigPtrOutput {
	return o.ToServiceTaskSpecContainerSpecDnsConfigPtrOutputWithContext(context.Background())
}

func (o ServiceTaskSpecContainerSpecDnsConfigOutput) ToServiceTaskSpecContainerSpecDnsConfigPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecDnsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceTaskSpecContainerSpecDnsConfig) *ServiceTaskSpecContainerSpecDnsConfig {
		return &v
	}).(ServiceTaskSpecContainerSpecDnsConfigPtrOutput)
}

func (o ServiceTaskSpecContainerSpecDnsConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecDnsConfig] {
	return pulumix.Output[ServiceTaskSpecContainerSpecDnsConfig]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecDnsConfigOutput) Nameservers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecDnsConfig) []string { return v.Nameservers }).(pulumi.StringArrayOutput)
}

func (o ServiceTaskSpecContainerSpecDnsConfigOutput) Options() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecDnsConfig) []string { return v.Options }).(pulumi.StringArrayOutput)
}

func (o ServiceTaskSpecContainerSpecDnsConfigOutput) Searches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecDnsConfig) []string { return v.Searches }).(pulumi.StringArrayOutput)
}

type ServiceTaskSpecContainerSpecDnsConfigPtrOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecDnsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecContainerSpecDnsConfig)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecDnsConfigPtrOutput) ToServiceTaskSpecContainerSpecDnsConfigPtrOutput() ServiceTaskSpecContainerSpecDnsConfigPtrOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecDnsConfigPtrOutput) ToServiceTaskSpecContainerSpecDnsConfigPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecDnsConfigPtrOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecDnsConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecContainerSpecDnsConfig] {
	return pulumix.Output[*ServiceTaskSpecContainerSpecDnsConfig]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecDnsConfigPtrOutput) Elem() ServiceTaskSpecContainerSpecDnsConfigOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecDnsConfig) ServiceTaskSpecContainerSpecDnsConfig {
		if v != nil {
			return *v
		}
		var ret ServiceTaskSpecContainerSpecDnsConfig
		return ret
	}).(ServiceTaskSpecContainerSpecDnsConfigOutput)
}

func (o ServiceTaskSpecContainerSpecDnsConfigPtrOutput) Nameservers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecDnsConfig) []string {
		if v == nil {
			return nil
		}
		return v.Nameservers
	}).(pulumi.StringArrayOutput)
}

func (o ServiceTaskSpecContainerSpecDnsConfigPtrOutput) Options() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecDnsConfig) []string {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.StringArrayOutput)
}

func (o ServiceTaskSpecContainerSpecDnsConfigPtrOutput) Searches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecDnsConfig) []string {
		if v == nil {
			return nil
		}
		return v.Searches
	}).(pulumi.StringArrayOutput)
}

type ServiceTaskSpecContainerSpecHealthcheck struct {
	Interval    *string  `pulumi:"interval"`
	Retries     *int     `pulumi:"retries"`
	StartPeriod *string  `pulumi:"startPeriod"`
	Tests       []string `pulumi:"tests"`
	Timeout     *string  `pulumi:"timeout"`
}

// ServiceTaskSpecContainerSpecHealthcheckInput is an input type that accepts ServiceTaskSpecContainerSpecHealthcheckArgs and ServiceTaskSpecContainerSpecHealthcheckOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecHealthcheckInput` via:
//
//	ServiceTaskSpecContainerSpecHealthcheckArgs{...}
type ServiceTaskSpecContainerSpecHealthcheckInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecHealthcheckOutput() ServiceTaskSpecContainerSpecHealthcheckOutput
	ToServiceTaskSpecContainerSpecHealthcheckOutputWithContext(context.Context) ServiceTaskSpecContainerSpecHealthcheckOutput
}

type ServiceTaskSpecContainerSpecHealthcheckArgs struct {
	Interval    pulumi.StringPtrInput   `pulumi:"interval"`
	Retries     pulumi.IntPtrInput      `pulumi:"retries"`
	StartPeriod pulumi.StringPtrInput   `pulumi:"startPeriod"`
	Tests       pulumi.StringArrayInput `pulumi:"tests"`
	Timeout     pulumi.StringPtrInput   `pulumi:"timeout"`
}

func (ServiceTaskSpecContainerSpecHealthcheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecHealthcheck)(nil)).Elem()
}

func (i ServiceTaskSpecContainerSpecHealthcheckArgs) ToServiceTaskSpecContainerSpecHealthcheckOutput() ServiceTaskSpecContainerSpecHealthcheckOutput {
	return i.ToServiceTaskSpecContainerSpecHealthcheckOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecHealthcheckArgs) ToServiceTaskSpecContainerSpecHealthcheckOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecHealthcheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecHealthcheckOutput)
}

func (i ServiceTaskSpecContainerSpecHealthcheckArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecHealthcheck] {
	return pulumix.Output[ServiceTaskSpecContainerSpecHealthcheck]{
		OutputState: i.ToServiceTaskSpecContainerSpecHealthcheckOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceTaskSpecContainerSpecHealthcheckArgs) ToServiceTaskSpecContainerSpecHealthcheckPtrOutput() ServiceTaskSpecContainerSpecHealthcheckPtrOutput {
	return i.ToServiceTaskSpecContainerSpecHealthcheckPtrOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecHealthcheckArgs) ToServiceTaskSpecContainerSpecHealthcheckPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecHealthcheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecHealthcheckOutput).ToServiceTaskSpecContainerSpecHealthcheckPtrOutputWithContext(ctx)
}

// ServiceTaskSpecContainerSpecHealthcheckPtrInput is an input type that accepts ServiceTaskSpecContainerSpecHealthcheckArgs, ServiceTaskSpecContainerSpecHealthcheckPtr and ServiceTaskSpecContainerSpecHealthcheckPtrOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecHealthcheckPtrInput` via:
//
//	        ServiceTaskSpecContainerSpecHealthcheckArgs{...}
//
//	or:
//
//	        nil
type ServiceTaskSpecContainerSpecHealthcheckPtrInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecHealthcheckPtrOutput() ServiceTaskSpecContainerSpecHealthcheckPtrOutput
	ToServiceTaskSpecContainerSpecHealthcheckPtrOutputWithContext(context.Context) ServiceTaskSpecContainerSpecHealthcheckPtrOutput
}

type serviceTaskSpecContainerSpecHealthcheckPtrType ServiceTaskSpecContainerSpecHealthcheckArgs

func ServiceTaskSpecContainerSpecHealthcheckPtr(v *ServiceTaskSpecContainerSpecHealthcheckArgs) ServiceTaskSpecContainerSpecHealthcheckPtrInput {
	return (*serviceTaskSpecContainerSpecHealthcheckPtrType)(v)
}

func (*serviceTaskSpecContainerSpecHealthcheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecContainerSpecHealthcheck)(nil)).Elem()
}

func (i *serviceTaskSpecContainerSpecHealthcheckPtrType) ToServiceTaskSpecContainerSpecHealthcheckPtrOutput() ServiceTaskSpecContainerSpecHealthcheckPtrOutput {
	return i.ToServiceTaskSpecContainerSpecHealthcheckPtrOutputWithContext(context.Background())
}

func (i *serviceTaskSpecContainerSpecHealthcheckPtrType) ToServiceTaskSpecContainerSpecHealthcheckPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecHealthcheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecHealthcheckPtrOutput)
}

func (i *serviceTaskSpecContainerSpecHealthcheckPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecContainerSpecHealthcheck] {
	return pulumix.Output[*ServiceTaskSpecContainerSpecHealthcheck]{
		OutputState: i.ToServiceTaskSpecContainerSpecHealthcheckPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceTaskSpecContainerSpecHealthcheckOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecHealthcheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecHealthcheck)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecHealthcheckOutput) ToServiceTaskSpecContainerSpecHealthcheckOutput() ServiceTaskSpecContainerSpecHealthcheckOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecHealthcheckOutput) ToServiceTaskSpecContainerSpecHealthcheckOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecHealthcheckOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecHealthcheckOutput) ToServiceTaskSpecContainerSpecHealthcheckPtrOutput() ServiceTaskSpecContainerSpecHealthcheckPtrOutput {
	return o.ToServiceTaskSpecContainerSpecHealthcheckPtrOutputWithContext(context.Background())
}

func (o ServiceTaskSpecContainerSpecHealthcheckOutput) ToServiceTaskSpecContainerSpecHealthcheckPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecHealthcheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceTaskSpecContainerSpecHealthcheck) *ServiceTaskSpecContainerSpecHealthcheck {
		return &v
	}).(ServiceTaskSpecContainerSpecHealthcheckPtrOutput)
}

func (o ServiceTaskSpecContainerSpecHealthcheckOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecHealthcheck] {
	return pulumix.Output[ServiceTaskSpecContainerSpecHealthcheck]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecHealthcheckOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecHealthcheck) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecHealthcheckOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecHealthcheck) *int { return v.Retries }).(pulumi.IntPtrOutput)
}

func (o ServiceTaskSpecContainerSpecHealthcheckOutput) StartPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecHealthcheck) *string { return v.StartPeriod }).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecHealthcheckOutput) Tests() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecHealthcheck) []string { return v.Tests }).(pulumi.StringArrayOutput)
}

func (o ServiceTaskSpecContainerSpecHealthcheckOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecHealthcheck) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type ServiceTaskSpecContainerSpecHealthcheckPtrOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecHealthcheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecContainerSpecHealthcheck)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecHealthcheckPtrOutput) ToServiceTaskSpecContainerSpecHealthcheckPtrOutput() ServiceTaskSpecContainerSpecHealthcheckPtrOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecHealthcheckPtrOutput) ToServiceTaskSpecContainerSpecHealthcheckPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecHealthcheckPtrOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecHealthcheckPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecContainerSpecHealthcheck] {
	return pulumix.Output[*ServiceTaskSpecContainerSpecHealthcheck]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecHealthcheckPtrOutput) Elem() ServiceTaskSpecContainerSpecHealthcheckOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecHealthcheck) ServiceTaskSpecContainerSpecHealthcheck {
		if v != nil {
			return *v
		}
		var ret ServiceTaskSpecContainerSpecHealthcheck
		return ret
	}).(ServiceTaskSpecContainerSpecHealthcheckOutput)
}

func (o ServiceTaskSpecContainerSpecHealthcheckPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecHealthcheck) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecHealthcheckPtrOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecHealthcheck) *int {
		if v == nil {
			return nil
		}
		return v.Retries
	}).(pulumi.IntPtrOutput)
}

func (o ServiceTaskSpecContainerSpecHealthcheckPtrOutput) StartPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecHealthcheck) *string {
		if v == nil {
			return nil
		}
		return v.StartPeriod
	}).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecHealthcheckPtrOutput) Tests() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecHealthcheck) []string {
		if v == nil {
			return nil
		}
		return v.Tests
	}).(pulumi.StringArrayOutput)
}

func (o ServiceTaskSpecContainerSpecHealthcheckPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecHealthcheck) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

type ServiceTaskSpecContainerSpecHost struct {
	Host string `pulumi:"host"`
	Ip   string `pulumi:"ip"`
}

// ServiceTaskSpecContainerSpecHostInput is an input type that accepts ServiceTaskSpecContainerSpecHostArgs and ServiceTaskSpecContainerSpecHostOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecHostInput` via:
//
//	ServiceTaskSpecContainerSpecHostArgs{...}
type ServiceTaskSpecContainerSpecHostInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecHostOutput() ServiceTaskSpecContainerSpecHostOutput
	ToServiceTaskSpecContainerSpecHostOutputWithContext(context.Context) ServiceTaskSpecContainerSpecHostOutput
}

type ServiceTaskSpecContainerSpecHostArgs struct {
	Host pulumi.StringInput `pulumi:"host"`
	Ip   pulumi.StringInput `pulumi:"ip"`
}

func (ServiceTaskSpecContainerSpecHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecHost)(nil)).Elem()
}

func (i ServiceTaskSpecContainerSpecHostArgs) ToServiceTaskSpecContainerSpecHostOutput() ServiceTaskSpecContainerSpecHostOutput {
	return i.ToServiceTaskSpecContainerSpecHostOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecHostArgs) ToServiceTaskSpecContainerSpecHostOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecHostOutput)
}

func (i ServiceTaskSpecContainerSpecHostArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecHost] {
	return pulumix.Output[ServiceTaskSpecContainerSpecHost]{
		OutputState: i.ToServiceTaskSpecContainerSpecHostOutputWithContext(ctx).OutputState,
	}
}

// ServiceTaskSpecContainerSpecHostArrayInput is an input type that accepts ServiceTaskSpecContainerSpecHostArray and ServiceTaskSpecContainerSpecHostArrayOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecHostArrayInput` via:
//
//	ServiceTaskSpecContainerSpecHostArray{ ServiceTaskSpecContainerSpecHostArgs{...} }
type ServiceTaskSpecContainerSpecHostArrayInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecHostArrayOutput() ServiceTaskSpecContainerSpecHostArrayOutput
	ToServiceTaskSpecContainerSpecHostArrayOutputWithContext(context.Context) ServiceTaskSpecContainerSpecHostArrayOutput
}

type ServiceTaskSpecContainerSpecHostArray []ServiceTaskSpecContainerSpecHostInput

func (ServiceTaskSpecContainerSpecHostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTaskSpecContainerSpecHost)(nil)).Elem()
}

func (i ServiceTaskSpecContainerSpecHostArray) ToServiceTaskSpecContainerSpecHostArrayOutput() ServiceTaskSpecContainerSpecHostArrayOutput {
	return i.ToServiceTaskSpecContainerSpecHostArrayOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecHostArray) ToServiceTaskSpecContainerSpecHostArrayOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecHostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecHostArrayOutput)
}

func (i ServiceTaskSpecContainerSpecHostArray) ToOutput(ctx context.Context) pulumix.Output[[]ServiceTaskSpecContainerSpecHost] {
	return pulumix.Output[[]ServiceTaskSpecContainerSpecHost]{
		OutputState: i.ToServiceTaskSpecContainerSpecHostArrayOutputWithContext(ctx).OutputState,
	}
}

type ServiceTaskSpecContainerSpecHostOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecHost)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecHostOutput) ToServiceTaskSpecContainerSpecHostOutput() ServiceTaskSpecContainerSpecHostOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecHostOutput) ToServiceTaskSpecContainerSpecHostOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecHostOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecHostOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecHost] {
	return pulumix.Output[ServiceTaskSpecContainerSpecHost]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecHostOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecHost) string { return v.Host }).(pulumi.StringOutput)
}

func (o ServiceTaskSpecContainerSpecHostOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecHost) string { return v.Ip }).(pulumi.StringOutput)
}

type ServiceTaskSpecContainerSpecHostArrayOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTaskSpecContainerSpecHost)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecHostArrayOutput) ToServiceTaskSpecContainerSpecHostArrayOutput() ServiceTaskSpecContainerSpecHostArrayOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecHostArrayOutput) ToServiceTaskSpecContainerSpecHostArrayOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecHostArrayOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecHostArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceTaskSpecContainerSpecHost] {
	return pulumix.Output[[]ServiceTaskSpecContainerSpecHost]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecHostArrayOutput) Index(i pulumi.IntInput) ServiceTaskSpecContainerSpecHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceTaskSpecContainerSpecHost {
		return vs[0].([]ServiceTaskSpecContainerSpecHost)[vs[1].(int)]
	}).(ServiceTaskSpecContainerSpecHostOutput)
}

type ServiceTaskSpecContainerSpecLabel struct {
	// Name of the label
	Label string `pulumi:"label"`
	// Value of the label
	Value string `pulumi:"value"`
}

// ServiceTaskSpecContainerSpecLabelInput is an input type that accepts ServiceTaskSpecContainerSpecLabelArgs and ServiceTaskSpecContainerSpecLabelOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecLabelInput` via:
//
//	ServiceTaskSpecContainerSpecLabelArgs{...}
type ServiceTaskSpecContainerSpecLabelInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecLabelOutput() ServiceTaskSpecContainerSpecLabelOutput
	ToServiceTaskSpecContainerSpecLabelOutputWithContext(context.Context) ServiceTaskSpecContainerSpecLabelOutput
}

type ServiceTaskSpecContainerSpecLabelArgs struct {
	// Name of the label
	Label pulumi.StringInput `pulumi:"label"`
	// Value of the label
	Value pulumi.StringInput `pulumi:"value"`
}

func (ServiceTaskSpecContainerSpecLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecLabel)(nil)).Elem()
}

func (i ServiceTaskSpecContainerSpecLabelArgs) ToServiceTaskSpecContainerSpecLabelOutput() ServiceTaskSpecContainerSpecLabelOutput {
	return i.ToServiceTaskSpecContainerSpecLabelOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecLabelArgs) ToServiceTaskSpecContainerSpecLabelOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecLabelOutput)
}

func (i ServiceTaskSpecContainerSpecLabelArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecLabel] {
	return pulumix.Output[ServiceTaskSpecContainerSpecLabel]{
		OutputState: i.ToServiceTaskSpecContainerSpecLabelOutputWithContext(ctx).OutputState,
	}
}

// ServiceTaskSpecContainerSpecLabelArrayInput is an input type that accepts ServiceTaskSpecContainerSpecLabelArray and ServiceTaskSpecContainerSpecLabelArrayOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecLabelArrayInput` via:
//
//	ServiceTaskSpecContainerSpecLabelArray{ ServiceTaskSpecContainerSpecLabelArgs{...} }
type ServiceTaskSpecContainerSpecLabelArrayInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecLabelArrayOutput() ServiceTaskSpecContainerSpecLabelArrayOutput
	ToServiceTaskSpecContainerSpecLabelArrayOutputWithContext(context.Context) ServiceTaskSpecContainerSpecLabelArrayOutput
}

type ServiceTaskSpecContainerSpecLabelArray []ServiceTaskSpecContainerSpecLabelInput

func (ServiceTaskSpecContainerSpecLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTaskSpecContainerSpecLabel)(nil)).Elem()
}

func (i ServiceTaskSpecContainerSpecLabelArray) ToServiceTaskSpecContainerSpecLabelArrayOutput() ServiceTaskSpecContainerSpecLabelArrayOutput {
	return i.ToServiceTaskSpecContainerSpecLabelArrayOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecLabelArray) ToServiceTaskSpecContainerSpecLabelArrayOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecLabelArrayOutput)
}

func (i ServiceTaskSpecContainerSpecLabelArray) ToOutput(ctx context.Context) pulumix.Output[[]ServiceTaskSpecContainerSpecLabel] {
	return pulumix.Output[[]ServiceTaskSpecContainerSpecLabel]{
		OutputState: i.ToServiceTaskSpecContainerSpecLabelArrayOutputWithContext(ctx).OutputState,
	}
}

type ServiceTaskSpecContainerSpecLabelOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecLabel)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecLabelOutput) ToServiceTaskSpecContainerSpecLabelOutput() ServiceTaskSpecContainerSpecLabelOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecLabelOutput) ToServiceTaskSpecContainerSpecLabelOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecLabelOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecLabelOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecLabel] {
	return pulumix.Output[ServiceTaskSpecContainerSpecLabel]{
		OutputState: o.OutputState,
	}
}

// Name of the label
func (o ServiceTaskSpecContainerSpecLabelOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecLabel) string { return v.Label }).(pulumi.StringOutput)
}

// Value of the label
func (o ServiceTaskSpecContainerSpecLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecLabel) string { return v.Value }).(pulumi.StringOutput)
}

type ServiceTaskSpecContainerSpecLabelArrayOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTaskSpecContainerSpecLabel)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecLabelArrayOutput) ToServiceTaskSpecContainerSpecLabelArrayOutput() ServiceTaskSpecContainerSpecLabelArrayOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecLabelArrayOutput) ToServiceTaskSpecContainerSpecLabelArrayOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecLabelArrayOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecLabelArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceTaskSpecContainerSpecLabel] {
	return pulumix.Output[[]ServiceTaskSpecContainerSpecLabel]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecLabelArrayOutput) Index(i pulumi.IntInput) ServiceTaskSpecContainerSpecLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceTaskSpecContainerSpecLabel {
		return vs[0].([]ServiceTaskSpecContainerSpecLabel)[vs[1].(int)]
	}).(ServiceTaskSpecContainerSpecLabelOutput)
}

type ServiceTaskSpecContainerSpecMount struct {
	BindOptions   *ServiceTaskSpecContainerSpecMountBindOptions   `pulumi:"bindOptions"`
	ReadOnly      *bool                                           `pulumi:"readOnly"`
	Source        *string                                         `pulumi:"source"`
	Target        string                                          `pulumi:"target"`
	TmpfsOptions  *ServiceTaskSpecContainerSpecMountTmpfsOptions  `pulumi:"tmpfsOptions"`
	Type          string                                          `pulumi:"type"`
	VolumeOptions *ServiceTaskSpecContainerSpecMountVolumeOptions `pulumi:"volumeOptions"`
}

// ServiceTaskSpecContainerSpecMountInput is an input type that accepts ServiceTaskSpecContainerSpecMountArgs and ServiceTaskSpecContainerSpecMountOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecMountInput` via:
//
//	ServiceTaskSpecContainerSpecMountArgs{...}
type ServiceTaskSpecContainerSpecMountInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecMountOutput() ServiceTaskSpecContainerSpecMountOutput
	ToServiceTaskSpecContainerSpecMountOutputWithContext(context.Context) ServiceTaskSpecContainerSpecMountOutput
}

type ServiceTaskSpecContainerSpecMountArgs struct {
	BindOptions   ServiceTaskSpecContainerSpecMountBindOptionsPtrInput   `pulumi:"bindOptions"`
	ReadOnly      pulumi.BoolPtrInput                                    `pulumi:"readOnly"`
	Source        pulumi.StringPtrInput                                  `pulumi:"source"`
	Target        pulumi.StringInput                                     `pulumi:"target"`
	TmpfsOptions  ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrInput  `pulumi:"tmpfsOptions"`
	Type          pulumi.StringInput                                     `pulumi:"type"`
	VolumeOptions ServiceTaskSpecContainerSpecMountVolumeOptionsPtrInput `pulumi:"volumeOptions"`
}

func (ServiceTaskSpecContainerSpecMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecMount)(nil)).Elem()
}

func (i ServiceTaskSpecContainerSpecMountArgs) ToServiceTaskSpecContainerSpecMountOutput() ServiceTaskSpecContainerSpecMountOutput {
	return i.ToServiceTaskSpecContainerSpecMountOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecMountArgs) ToServiceTaskSpecContainerSpecMountOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecMountOutput)
}

func (i ServiceTaskSpecContainerSpecMountArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecMount] {
	return pulumix.Output[ServiceTaskSpecContainerSpecMount]{
		OutputState: i.ToServiceTaskSpecContainerSpecMountOutputWithContext(ctx).OutputState,
	}
}

// ServiceTaskSpecContainerSpecMountArrayInput is an input type that accepts ServiceTaskSpecContainerSpecMountArray and ServiceTaskSpecContainerSpecMountArrayOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecMountArrayInput` via:
//
//	ServiceTaskSpecContainerSpecMountArray{ ServiceTaskSpecContainerSpecMountArgs{...} }
type ServiceTaskSpecContainerSpecMountArrayInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecMountArrayOutput() ServiceTaskSpecContainerSpecMountArrayOutput
	ToServiceTaskSpecContainerSpecMountArrayOutputWithContext(context.Context) ServiceTaskSpecContainerSpecMountArrayOutput
}

type ServiceTaskSpecContainerSpecMountArray []ServiceTaskSpecContainerSpecMountInput

func (ServiceTaskSpecContainerSpecMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTaskSpecContainerSpecMount)(nil)).Elem()
}

func (i ServiceTaskSpecContainerSpecMountArray) ToServiceTaskSpecContainerSpecMountArrayOutput() ServiceTaskSpecContainerSpecMountArrayOutput {
	return i.ToServiceTaskSpecContainerSpecMountArrayOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecMountArray) ToServiceTaskSpecContainerSpecMountArrayOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecMountArrayOutput)
}

func (i ServiceTaskSpecContainerSpecMountArray) ToOutput(ctx context.Context) pulumix.Output[[]ServiceTaskSpecContainerSpecMount] {
	return pulumix.Output[[]ServiceTaskSpecContainerSpecMount]{
		OutputState: i.ToServiceTaskSpecContainerSpecMountArrayOutputWithContext(ctx).OutputState,
	}
}

type ServiceTaskSpecContainerSpecMountOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecMount)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecMountOutput) ToServiceTaskSpecContainerSpecMountOutput() ServiceTaskSpecContainerSpecMountOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecMountOutput) ToServiceTaskSpecContainerSpecMountOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecMountOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecMountOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecMount] {
	return pulumix.Output[ServiceTaskSpecContainerSpecMount]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecMountOutput) BindOptions() ServiceTaskSpecContainerSpecMountBindOptionsPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecMount) *ServiceTaskSpecContainerSpecMountBindOptions {
		return v.BindOptions
	}).(ServiceTaskSpecContainerSpecMountBindOptionsPtrOutput)
}

func (o ServiceTaskSpecContainerSpecMountOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecMount) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

func (o ServiceTaskSpecContainerSpecMountOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecMount) *string { return v.Source }).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecMountOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecMount) string { return v.Target }).(pulumi.StringOutput)
}

func (o ServiceTaskSpecContainerSpecMountOutput) TmpfsOptions() ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecMount) *ServiceTaskSpecContainerSpecMountTmpfsOptions {
		return v.TmpfsOptions
	}).(ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput)
}

func (o ServiceTaskSpecContainerSpecMountOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecMount) string { return v.Type }).(pulumi.StringOutput)
}

func (o ServiceTaskSpecContainerSpecMountOutput) VolumeOptions() ServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecMount) *ServiceTaskSpecContainerSpecMountVolumeOptions {
		return v.VolumeOptions
	}).(ServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput)
}

type ServiceTaskSpecContainerSpecMountArrayOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecMountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTaskSpecContainerSpecMount)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecMountArrayOutput) ToServiceTaskSpecContainerSpecMountArrayOutput() ServiceTaskSpecContainerSpecMountArrayOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecMountArrayOutput) ToServiceTaskSpecContainerSpecMountArrayOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecMountArrayOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecMountArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceTaskSpecContainerSpecMount] {
	return pulumix.Output[[]ServiceTaskSpecContainerSpecMount]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecMountArrayOutput) Index(i pulumi.IntInput) ServiceTaskSpecContainerSpecMountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceTaskSpecContainerSpecMount {
		return vs[0].([]ServiceTaskSpecContainerSpecMount)[vs[1].(int)]
	}).(ServiceTaskSpecContainerSpecMountOutput)
}

type ServiceTaskSpecContainerSpecMountBindOptions struct {
	Propagation *string `pulumi:"propagation"`
}

// ServiceTaskSpecContainerSpecMountBindOptionsInput is an input type that accepts ServiceTaskSpecContainerSpecMountBindOptionsArgs and ServiceTaskSpecContainerSpecMountBindOptionsOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecMountBindOptionsInput` via:
//
//	ServiceTaskSpecContainerSpecMountBindOptionsArgs{...}
type ServiceTaskSpecContainerSpecMountBindOptionsInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecMountBindOptionsOutput() ServiceTaskSpecContainerSpecMountBindOptionsOutput
	ToServiceTaskSpecContainerSpecMountBindOptionsOutputWithContext(context.Context) ServiceTaskSpecContainerSpecMountBindOptionsOutput
}

type ServiceTaskSpecContainerSpecMountBindOptionsArgs struct {
	Propagation pulumi.StringPtrInput `pulumi:"propagation"`
}

func (ServiceTaskSpecContainerSpecMountBindOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecMountBindOptions)(nil)).Elem()
}

func (i ServiceTaskSpecContainerSpecMountBindOptionsArgs) ToServiceTaskSpecContainerSpecMountBindOptionsOutput() ServiceTaskSpecContainerSpecMountBindOptionsOutput {
	return i.ToServiceTaskSpecContainerSpecMountBindOptionsOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecMountBindOptionsArgs) ToServiceTaskSpecContainerSpecMountBindOptionsOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecMountBindOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecMountBindOptionsOutput)
}

func (i ServiceTaskSpecContainerSpecMountBindOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecMountBindOptions] {
	return pulumix.Output[ServiceTaskSpecContainerSpecMountBindOptions]{
		OutputState: i.ToServiceTaskSpecContainerSpecMountBindOptionsOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceTaskSpecContainerSpecMountBindOptionsArgs) ToServiceTaskSpecContainerSpecMountBindOptionsPtrOutput() ServiceTaskSpecContainerSpecMountBindOptionsPtrOutput {
	return i.ToServiceTaskSpecContainerSpecMountBindOptionsPtrOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecMountBindOptionsArgs) ToServiceTaskSpecContainerSpecMountBindOptionsPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecMountBindOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecMountBindOptionsOutput).ToServiceTaskSpecContainerSpecMountBindOptionsPtrOutputWithContext(ctx)
}

// ServiceTaskSpecContainerSpecMountBindOptionsPtrInput is an input type that accepts ServiceTaskSpecContainerSpecMountBindOptionsArgs, ServiceTaskSpecContainerSpecMountBindOptionsPtr and ServiceTaskSpecContainerSpecMountBindOptionsPtrOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecMountBindOptionsPtrInput` via:
//
//	        ServiceTaskSpecContainerSpecMountBindOptionsArgs{...}
//
//	or:
//
//	        nil
type ServiceTaskSpecContainerSpecMountBindOptionsPtrInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecMountBindOptionsPtrOutput() ServiceTaskSpecContainerSpecMountBindOptionsPtrOutput
	ToServiceTaskSpecContainerSpecMountBindOptionsPtrOutputWithContext(context.Context) ServiceTaskSpecContainerSpecMountBindOptionsPtrOutput
}

type serviceTaskSpecContainerSpecMountBindOptionsPtrType ServiceTaskSpecContainerSpecMountBindOptionsArgs

func ServiceTaskSpecContainerSpecMountBindOptionsPtr(v *ServiceTaskSpecContainerSpecMountBindOptionsArgs) ServiceTaskSpecContainerSpecMountBindOptionsPtrInput {
	return (*serviceTaskSpecContainerSpecMountBindOptionsPtrType)(v)
}

func (*serviceTaskSpecContainerSpecMountBindOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecContainerSpecMountBindOptions)(nil)).Elem()
}

func (i *serviceTaskSpecContainerSpecMountBindOptionsPtrType) ToServiceTaskSpecContainerSpecMountBindOptionsPtrOutput() ServiceTaskSpecContainerSpecMountBindOptionsPtrOutput {
	return i.ToServiceTaskSpecContainerSpecMountBindOptionsPtrOutputWithContext(context.Background())
}

func (i *serviceTaskSpecContainerSpecMountBindOptionsPtrType) ToServiceTaskSpecContainerSpecMountBindOptionsPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecMountBindOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecMountBindOptionsPtrOutput)
}

func (i *serviceTaskSpecContainerSpecMountBindOptionsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecContainerSpecMountBindOptions] {
	return pulumix.Output[*ServiceTaskSpecContainerSpecMountBindOptions]{
		OutputState: i.ToServiceTaskSpecContainerSpecMountBindOptionsPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceTaskSpecContainerSpecMountBindOptionsOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecMountBindOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecMountBindOptions)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecMountBindOptionsOutput) ToServiceTaskSpecContainerSpecMountBindOptionsOutput() ServiceTaskSpecContainerSpecMountBindOptionsOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecMountBindOptionsOutput) ToServiceTaskSpecContainerSpecMountBindOptionsOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecMountBindOptionsOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecMountBindOptionsOutput) ToServiceTaskSpecContainerSpecMountBindOptionsPtrOutput() ServiceTaskSpecContainerSpecMountBindOptionsPtrOutput {
	return o.ToServiceTaskSpecContainerSpecMountBindOptionsPtrOutputWithContext(context.Background())
}

func (o ServiceTaskSpecContainerSpecMountBindOptionsOutput) ToServiceTaskSpecContainerSpecMountBindOptionsPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecMountBindOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceTaskSpecContainerSpecMountBindOptions) *ServiceTaskSpecContainerSpecMountBindOptions {
		return &v
	}).(ServiceTaskSpecContainerSpecMountBindOptionsPtrOutput)
}

func (o ServiceTaskSpecContainerSpecMountBindOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecMountBindOptions] {
	return pulumix.Output[ServiceTaskSpecContainerSpecMountBindOptions]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecMountBindOptionsOutput) Propagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecMountBindOptions) *string { return v.Propagation }).(pulumi.StringPtrOutput)
}

type ServiceTaskSpecContainerSpecMountBindOptionsPtrOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecMountBindOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecContainerSpecMountBindOptions)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecMountBindOptionsPtrOutput) ToServiceTaskSpecContainerSpecMountBindOptionsPtrOutput() ServiceTaskSpecContainerSpecMountBindOptionsPtrOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecMountBindOptionsPtrOutput) ToServiceTaskSpecContainerSpecMountBindOptionsPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecMountBindOptionsPtrOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecMountBindOptionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecContainerSpecMountBindOptions] {
	return pulumix.Output[*ServiceTaskSpecContainerSpecMountBindOptions]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecMountBindOptionsPtrOutput) Elem() ServiceTaskSpecContainerSpecMountBindOptionsOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecMountBindOptions) ServiceTaskSpecContainerSpecMountBindOptions {
		if v != nil {
			return *v
		}
		var ret ServiceTaskSpecContainerSpecMountBindOptions
		return ret
	}).(ServiceTaskSpecContainerSpecMountBindOptionsOutput)
}

func (o ServiceTaskSpecContainerSpecMountBindOptionsPtrOutput) Propagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecMountBindOptions) *string {
		if v == nil {
			return nil
		}
		return v.Propagation
	}).(pulumi.StringPtrOutput)
}

type ServiceTaskSpecContainerSpecMountTmpfsOptions struct {
	// Scheduling mode for the service
	Mode      *int `pulumi:"mode"`
	SizeBytes *int `pulumi:"sizeBytes"`
}

// ServiceTaskSpecContainerSpecMountTmpfsOptionsInput is an input type that accepts ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs and ServiceTaskSpecContainerSpecMountTmpfsOptionsOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecMountTmpfsOptionsInput` via:
//
//	ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs{...}
type ServiceTaskSpecContainerSpecMountTmpfsOptionsInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecMountTmpfsOptionsOutput() ServiceTaskSpecContainerSpecMountTmpfsOptionsOutput
	ToServiceTaskSpecContainerSpecMountTmpfsOptionsOutputWithContext(context.Context) ServiceTaskSpecContainerSpecMountTmpfsOptionsOutput
}

type ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs struct {
	// Scheduling mode for the service
	Mode      pulumi.IntPtrInput `pulumi:"mode"`
	SizeBytes pulumi.IntPtrInput `pulumi:"sizeBytes"`
}

func (ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecMountTmpfsOptions)(nil)).Elem()
}

func (i ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs) ToServiceTaskSpecContainerSpecMountTmpfsOptionsOutput() ServiceTaskSpecContainerSpecMountTmpfsOptionsOutput {
	return i.ToServiceTaskSpecContainerSpecMountTmpfsOptionsOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs) ToServiceTaskSpecContainerSpecMountTmpfsOptionsOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecMountTmpfsOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecMountTmpfsOptionsOutput)
}

func (i ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecMountTmpfsOptions] {
	return pulumix.Output[ServiceTaskSpecContainerSpecMountTmpfsOptions]{
		OutputState: i.ToServiceTaskSpecContainerSpecMountTmpfsOptionsOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs) ToServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput() ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput {
	return i.ToServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs) ToServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecMountTmpfsOptionsOutput).ToServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutputWithContext(ctx)
}

// ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrInput is an input type that accepts ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs, ServiceTaskSpecContainerSpecMountTmpfsOptionsPtr and ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrInput` via:
//
//	        ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs{...}
//
//	or:
//
//	        nil
type ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput() ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput
	ToServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutputWithContext(context.Context) ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput
}

type serviceTaskSpecContainerSpecMountTmpfsOptionsPtrType ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs

func ServiceTaskSpecContainerSpecMountTmpfsOptionsPtr(v *ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs) ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrInput {
	return (*serviceTaskSpecContainerSpecMountTmpfsOptionsPtrType)(v)
}

func (*serviceTaskSpecContainerSpecMountTmpfsOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecContainerSpecMountTmpfsOptions)(nil)).Elem()
}

func (i *serviceTaskSpecContainerSpecMountTmpfsOptionsPtrType) ToServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput() ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput {
	return i.ToServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutputWithContext(context.Background())
}

func (i *serviceTaskSpecContainerSpecMountTmpfsOptionsPtrType) ToServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput)
}

func (i *serviceTaskSpecContainerSpecMountTmpfsOptionsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecContainerSpecMountTmpfsOptions] {
	return pulumix.Output[*ServiceTaskSpecContainerSpecMountTmpfsOptions]{
		OutputState: i.ToServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceTaskSpecContainerSpecMountTmpfsOptionsOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecMountTmpfsOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecMountTmpfsOptions)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecMountTmpfsOptionsOutput) ToServiceTaskSpecContainerSpecMountTmpfsOptionsOutput() ServiceTaskSpecContainerSpecMountTmpfsOptionsOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecMountTmpfsOptionsOutput) ToServiceTaskSpecContainerSpecMountTmpfsOptionsOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecMountTmpfsOptionsOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecMountTmpfsOptionsOutput) ToServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput() ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput {
	return o.ToServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutputWithContext(context.Background())
}

func (o ServiceTaskSpecContainerSpecMountTmpfsOptionsOutput) ToServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceTaskSpecContainerSpecMountTmpfsOptions) *ServiceTaskSpecContainerSpecMountTmpfsOptions {
		return &v
	}).(ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput)
}

func (o ServiceTaskSpecContainerSpecMountTmpfsOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecMountTmpfsOptions] {
	return pulumix.Output[ServiceTaskSpecContainerSpecMountTmpfsOptions]{
		OutputState: o.OutputState,
	}
}

// Scheduling mode for the service
func (o ServiceTaskSpecContainerSpecMountTmpfsOptionsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecMountTmpfsOptions) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

func (o ServiceTaskSpecContainerSpecMountTmpfsOptionsOutput) SizeBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecMountTmpfsOptions) *int { return v.SizeBytes }).(pulumi.IntPtrOutput)
}

type ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecContainerSpecMountTmpfsOptions)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput) ToServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput() ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput) ToServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecContainerSpecMountTmpfsOptions] {
	return pulumix.Output[*ServiceTaskSpecContainerSpecMountTmpfsOptions]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput) Elem() ServiceTaskSpecContainerSpecMountTmpfsOptionsOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecMountTmpfsOptions) ServiceTaskSpecContainerSpecMountTmpfsOptions {
		if v != nil {
			return *v
		}
		var ret ServiceTaskSpecContainerSpecMountTmpfsOptions
		return ret
	}).(ServiceTaskSpecContainerSpecMountTmpfsOptionsOutput)
}

// Scheduling mode for the service
func (o ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecMountTmpfsOptions) *int {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.IntPtrOutput)
}

func (o ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput) SizeBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecMountTmpfsOptions) *int {
		if v == nil {
			return nil
		}
		return v.SizeBytes
	}).(pulumi.IntPtrOutput)
}

type ServiceTaskSpecContainerSpecMountVolumeOptions struct {
	DriverName    *string           `pulumi:"driverName"`
	DriverOptions map[string]string `pulumi:"driverOptions"`
	// User-defined key/value metadata
	Labels []ServiceTaskSpecContainerSpecMountVolumeOptionsLabel `pulumi:"labels"`
	NoCopy *bool                                                 `pulumi:"noCopy"`
}

// ServiceTaskSpecContainerSpecMountVolumeOptionsInput is an input type that accepts ServiceTaskSpecContainerSpecMountVolumeOptionsArgs and ServiceTaskSpecContainerSpecMountVolumeOptionsOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecMountVolumeOptionsInput` via:
//
//	ServiceTaskSpecContainerSpecMountVolumeOptionsArgs{...}
type ServiceTaskSpecContainerSpecMountVolumeOptionsInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecMountVolumeOptionsOutput() ServiceTaskSpecContainerSpecMountVolumeOptionsOutput
	ToServiceTaskSpecContainerSpecMountVolumeOptionsOutputWithContext(context.Context) ServiceTaskSpecContainerSpecMountVolumeOptionsOutput
}

type ServiceTaskSpecContainerSpecMountVolumeOptionsArgs struct {
	DriverName    pulumi.StringPtrInput `pulumi:"driverName"`
	DriverOptions pulumi.StringMapInput `pulumi:"driverOptions"`
	// User-defined key/value metadata
	Labels ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayInput `pulumi:"labels"`
	NoCopy pulumi.BoolPtrInput                                           `pulumi:"noCopy"`
}

func (ServiceTaskSpecContainerSpecMountVolumeOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecMountVolumeOptions)(nil)).Elem()
}

func (i ServiceTaskSpecContainerSpecMountVolumeOptionsArgs) ToServiceTaskSpecContainerSpecMountVolumeOptionsOutput() ServiceTaskSpecContainerSpecMountVolumeOptionsOutput {
	return i.ToServiceTaskSpecContainerSpecMountVolumeOptionsOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecMountVolumeOptionsArgs) ToServiceTaskSpecContainerSpecMountVolumeOptionsOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecMountVolumeOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecMountVolumeOptionsOutput)
}

func (i ServiceTaskSpecContainerSpecMountVolumeOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecMountVolumeOptions] {
	return pulumix.Output[ServiceTaskSpecContainerSpecMountVolumeOptions]{
		OutputState: i.ToServiceTaskSpecContainerSpecMountVolumeOptionsOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceTaskSpecContainerSpecMountVolumeOptionsArgs) ToServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput() ServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput {
	return i.ToServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecMountVolumeOptionsArgs) ToServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecMountVolumeOptionsOutput).ToServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutputWithContext(ctx)
}

// ServiceTaskSpecContainerSpecMountVolumeOptionsPtrInput is an input type that accepts ServiceTaskSpecContainerSpecMountVolumeOptionsArgs, ServiceTaskSpecContainerSpecMountVolumeOptionsPtr and ServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecMountVolumeOptionsPtrInput` via:
//
//	        ServiceTaskSpecContainerSpecMountVolumeOptionsArgs{...}
//
//	or:
//
//	        nil
type ServiceTaskSpecContainerSpecMountVolumeOptionsPtrInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput() ServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput
	ToServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutputWithContext(context.Context) ServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput
}

type serviceTaskSpecContainerSpecMountVolumeOptionsPtrType ServiceTaskSpecContainerSpecMountVolumeOptionsArgs

func ServiceTaskSpecContainerSpecMountVolumeOptionsPtr(v *ServiceTaskSpecContainerSpecMountVolumeOptionsArgs) ServiceTaskSpecContainerSpecMountVolumeOptionsPtrInput {
	return (*serviceTaskSpecContainerSpecMountVolumeOptionsPtrType)(v)
}

func (*serviceTaskSpecContainerSpecMountVolumeOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecContainerSpecMountVolumeOptions)(nil)).Elem()
}

func (i *serviceTaskSpecContainerSpecMountVolumeOptionsPtrType) ToServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput() ServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput {
	return i.ToServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutputWithContext(context.Background())
}

func (i *serviceTaskSpecContainerSpecMountVolumeOptionsPtrType) ToServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput)
}

func (i *serviceTaskSpecContainerSpecMountVolumeOptionsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecContainerSpecMountVolumeOptions] {
	return pulumix.Output[*ServiceTaskSpecContainerSpecMountVolumeOptions]{
		OutputState: i.ToServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceTaskSpecContainerSpecMountVolumeOptionsOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecMountVolumeOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecMountVolumeOptions)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecMountVolumeOptionsOutput) ToServiceTaskSpecContainerSpecMountVolumeOptionsOutput() ServiceTaskSpecContainerSpecMountVolumeOptionsOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecMountVolumeOptionsOutput) ToServiceTaskSpecContainerSpecMountVolumeOptionsOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecMountVolumeOptionsOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecMountVolumeOptionsOutput) ToServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput() ServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput {
	return o.ToServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutputWithContext(context.Background())
}

func (o ServiceTaskSpecContainerSpecMountVolumeOptionsOutput) ToServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceTaskSpecContainerSpecMountVolumeOptions) *ServiceTaskSpecContainerSpecMountVolumeOptions {
		return &v
	}).(ServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput)
}

func (o ServiceTaskSpecContainerSpecMountVolumeOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecMountVolumeOptions] {
	return pulumix.Output[ServiceTaskSpecContainerSpecMountVolumeOptions]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecMountVolumeOptionsOutput) DriverName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecMountVolumeOptions) *string { return v.DriverName }).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecMountVolumeOptionsOutput) DriverOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecMountVolumeOptions) map[string]string { return v.DriverOptions }).(pulumi.StringMapOutput)
}

// User-defined key/value metadata
func (o ServiceTaskSpecContainerSpecMountVolumeOptionsOutput) Labels() ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecMountVolumeOptions) []ServiceTaskSpecContainerSpecMountVolumeOptionsLabel {
		return v.Labels
	}).(ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutput)
}

func (o ServiceTaskSpecContainerSpecMountVolumeOptionsOutput) NoCopy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecMountVolumeOptions) *bool { return v.NoCopy }).(pulumi.BoolPtrOutput)
}

type ServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecContainerSpecMountVolumeOptions)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput) ToServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput() ServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput) ToServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecContainerSpecMountVolumeOptions] {
	return pulumix.Output[*ServiceTaskSpecContainerSpecMountVolumeOptions]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput) Elem() ServiceTaskSpecContainerSpecMountVolumeOptionsOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecMountVolumeOptions) ServiceTaskSpecContainerSpecMountVolumeOptions {
		if v != nil {
			return *v
		}
		var ret ServiceTaskSpecContainerSpecMountVolumeOptions
		return ret
	}).(ServiceTaskSpecContainerSpecMountVolumeOptionsOutput)
}

func (o ServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput) DriverName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecMountVolumeOptions) *string {
		if v == nil {
			return nil
		}
		return v.DriverName
	}).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput) DriverOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecMountVolumeOptions) map[string]string {
		if v == nil {
			return nil
		}
		return v.DriverOptions
	}).(pulumi.StringMapOutput)
}

// User-defined key/value metadata
func (o ServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput) Labels() ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecMountVolumeOptions) []ServiceTaskSpecContainerSpecMountVolumeOptionsLabel {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutput)
}

func (o ServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput) NoCopy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecMountVolumeOptions) *bool {
		if v == nil {
			return nil
		}
		return v.NoCopy
	}).(pulumi.BoolPtrOutput)
}

type ServiceTaskSpecContainerSpecMountVolumeOptionsLabel struct {
	// Name of the label
	Label string `pulumi:"label"`
	// Value of the label
	Value string `pulumi:"value"`
}

// ServiceTaskSpecContainerSpecMountVolumeOptionsLabelInput is an input type that accepts ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArgs and ServiceTaskSpecContainerSpecMountVolumeOptionsLabelOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecMountVolumeOptionsLabelInput` via:
//
//	ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArgs{...}
type ServiceTaskSpecContainerSpecMountVolumeOptionsLabelInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecMountVolumeOptionsLabelOutput() ServiceTaskSpecContainerSpecMountVolumeOptionsLabelOutput
	ToServiceTaskSpecContainerSpecMountVolumeOptionsLabelOutputWithContext(context.Context) ServiceTaskSpecContainerSpecMountVolumeOptionsLabelOutput
}

type ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArgs struct {
	// Name of the label
	Label pulumi.StringInput `pulumi:"label"`
	// Value of the label
	Value pulumi.StringInput `pulumi:"value"`
}

func (ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecMountVolumeOptionsLabel)(nil)).Elem()
}

func (i ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArgs) ToServiceTaskSpecContainerSpecMountVolumeOptionsLabelOutput() ServiceTaskSpecContainerSpecMountVolumeOptionsLabelOutput {
	return i.ToServiceTaskSpecContainerSpecMountVolumeOptionsLabelOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArgs) ToServiceTaskSpecContainerSpecMountVolumeOptionsLabelOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecMountVolumeOptionsLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecMountVolumeOptionsLabelOutput)
}

func (i ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecMountVolumeOptionsLabel] {
	return pulumix.Output[ServiceTaskSpecContainerSpecMountVolumeOptionsLabel]{
		OutputState: i.ToServiceTaskSpecContainerSpecMountVolumeOptionsLabelOutputWithContext(ctx).OutputState,
	}
}

// ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayInput is an input type that accepts ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArray and ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayInput` via:
//
//	ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArray{ ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArgs{...} }
type ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutput() ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutput
	ToServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutputWithContext(context.Context) ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutput
}

type ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArray []ServiceTaskSpecContainerSpecMountVolumeOptionsLabelInput

func (ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTaskSpecContainerSpecMountVolumeOptionsLabel)(nil)).Elem()
}

func (i ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArray) ToServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutput() ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutput {
	return i.ToServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArray) ToServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutput)
}

func (i ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArray) ToOutput(ctx context.Context) pulumix.Output[[]ServiceTaskSpecContainerSpecMountVolumeOptionsLabel] {
	return pulumix.Output[[]ServiceTaskSpecContainerSpecMountVolumeOptionsLabel]{
		OutputState: i.ToServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutputWithContext(ctx).OutputState,
	}
}

type ServiceTaskSpecContainerSpecMountVolumeOptionsLabelOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecMountVolumeOptionsLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecMountVolumeOptionsLabel)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecMountVolumeOptionsLabelOutput) ToServiceTaskSpecContainerSpecMountVolumeOptionsLabelOutput() ServiceTaskSpecContainerSpecMountVolumeOptionsLabelOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecMountVolumeOptionsLabelOutput) ToServiceTaskSpecContainerSpecMountVolumeOptionsLabelOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecMountVolumeOptionsLabelOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecMountVolumeOptionsLabelOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecMountVolumeOptionsLabel] {
	return pulumix.Output[ServiceTaskSpecContainerSpecMountVolumeOptionsLabel]{
		OutputState: o.OutputState,
	}
}

// Name of the label
func (o ServiceTaskSpecContainerSpecMountVolumeOptionsLabelOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecMountVolumeOptionsLabel) string { return v.Label }).(pulumi.StringOutput)
}

// Value of the label
func (o ServiceTaskSpecContainerSpecMountVolumeOptionsLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecMountVolumeOptionsLabel) string { return v.Value }).(pulumi.StringOutput)
}

type ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTaskSpecContainerSpecMountVolumeOptionsLabel)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutput) ToServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutput() ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutput) ToServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceTaskSpecContainerSpecMountVolumeOptionsLabel] {
	return pulumix.Output[[]ServiceTaskSpecContainerSpecMountVolumeOptionsLabel]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutput) Index(i pulumi.IntInput) ServiceTaskSpecContainerSpecMountVolumeOptionsLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceTaskSpecContainerSpecMountVolumeOptionsLabel {
		return vs[0].([]ServiceTaskSpecContainerSpecMountVolumeOptionsLabel)[vs[1].(int)]
	}).(ServiceTaskSpecContainerSpecMountVolumeOptionsLabelOutput)
}

type ServiceTaskSpecContainerSpecPrivileges struct {
	CredentialSpec *ServiceTaskSpecContainerSpecPrivilegesCredentialSpec `pulumi:"credentialSpec"`
	SeLinuxContext *ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext `pulumi:"seLinuxContext"`
}

// ServiceTaskSpecContainerSpecPrivilegesInput is an input type that accepts ServiceTaskSpecContainerSpecPrivilegesArgs and ServiceTaskSpecContainerSpecPrivilegesOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecPrivilegesInput` via:
//
//	ServiceTaskSpecContainerSpecPrivilegesArgs{...}
type ServiceTaskSpecContainerSpecPrivilegesInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecPrivilegesOutput() ServiceTaskSpecContainerSpecPrivilegesOutput
	ToServiceTaskSpecContainerSpecPrivilegesOutputWithContext(context.Context) ServiceTaskSpecContainerSpecPrivilegesOutput
}

type ServiceTaskSpecContainerSpecPrivilegesArgs struct {
	CredentialSpec ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrInput `pulumi:"credentialSpec"`
	SeLinuxContext ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrInput `pulumi:"seLinuxContext"`
}

func (ServiceTaskSpecContainerSpecPrivilegesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecPrivileges)(nil)).Elem()
}

func (i ServiceTaskSpecContainerSpecPrivilegesArgs) ToServiceTaskSpecContainerSpecPrivilegesOutput() ServiceTaskSpecContainerSpecPrivilegesOutput {
	return i.ToServiceTaskSpecContainerSpecPrivilegesOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecPrivilegesArgs) ToServiceTaskSpecContainerSpecPrivilegesOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecPrivilegesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecPrivilegesOutput)
}

func (i ServiceTaskSpecContainerSpecPrivilegesArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecPrivileges] {
	return pulumix.Output[ServiceTaskSpecContainerSpecPrivileges]{
		OutputState: i.ToServiceTaskSpecContainerSpecPrivilegesOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceTaskSpecContainerSpecPrivilegesArgs) ToServiceTaskSpecContainerSpecPrivilegesPtrOutput() ServiceTaskSpecContainerSpecPrivilegesPtrOutput {
	return i.ToServiceTaskSpecContainerSpecPrivilegesPtrOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecPrivilegesArgs) ToServiceTaskSpecContainerSpecPrivilegesPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecPrivilegesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecPrivilegesOutput).ToServiceTaskSpecContainerSpecPrivilegesPtrOutputWithContext(ctx)
}

// ServiceTaskSpecContainerSpecPrivilegesPtrInput is an input type that accepts ServiceTaskSpecContainerSpecPrivilegesArgs, ServiceTaskSpecContainerSpecPrivilegesPtr and ServiceTaskSpecContainerSpecPrivilegesPtrOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecPrivilegesPtrInput` via:
//
//	        ServiceTaskSpecContainerSpecPrivilegesArgs{...}
//
//	or:
//
//	        nil
type ServiceTaskSpecContainerSpecPrivilegesPtrInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecPrivilegesPtrOutput() ServiceTaskSpecContainerSpecPrivilegesPtrOutput
	ToServiceTaskSpecContainerSpecPrivilegesPtrOutputWithContext(context.Context) ServiceTaskSpecContainerSpecPrivilegesPtrOutput
}

type serviceTaskSpecContainerSpecPrivilegesPtrType ServiceTaskSpecContainerSpecPrivilegesArgs

func ServiceTaskSpecContainerSpecPrivilegesPtr(v *ServiceTaskSpecContainerSpecPrivilegesArgs) ServiceTaskSpecContainerSpecPrivilegesPtrInput {
	return (*serviceTaskSpecContainerSpecPrivilegesPtrType)(v)
}

func (*serviceTaskSpecContainerSpecPrivilegesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecContainerSpecPrivileges)(nil)).Elem()
}

func (i *serviceTaskSpecContainerSpecPrivilegesPtrType) ToServiceTaskSpecContainerSpecPrivilegesPtrOutput() ServiceTaskSpecContainerSpecPrivilegesPtrOutput {
	return i.ToServiceTaskSpecContainerSpecPrivilegesPtrOutputWithContext(context.Background())
}

func (i *serviceTaskSpecContainerSpecPrivilegesPtrType) ToServiceTaskSpecContainerSpecPrivilegesPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecPrivilegesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecPrivilegesPtrOutput)
}

func (i *serviceTaskSpecContainerSpecPrivilegesPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecContainerSpecPrivileges] {
	return pulumix.Output[*ServiceTaskSpecContainerSpecPrivileges]{
		OutputState: i.ToServiceTaskSpecContainerSpecPrivilegesPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceTaskSpecContainerSpecPrivilegesOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecPrivilegesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecPrivileges)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecPrivilegesOutput) ToServiceTaskSpecContainerSpecPrivilegesOutput() ServiceTaskSpecContainerSpecPrivilegesOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecPrivilegesOutput) ToServiceTaskSpecContainerSpecPrivilegesOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecPrivilegesOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecPrivilegesOutput) ToServiceTaskSpecContainerSpecPrivilegesPtrOutput() ServiceTaskSpecContainerSpecPrivilegesPtrOutput {
	return o.ToServiceTaskSpecContainerSpecPrivilegesPtrOutputWithContext(context.Background())
}

func (o ServiceTaskSpecContainerSpecPrivilegesOutput) ToServiceTaskSpecContainerSpecPrivilegesPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecPrivilegesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceTaskSpecContainerSpecPrivileges) *ServiceTaskSpecContainerSpecPrivileges {
		return &v
	}).(ServiceTaskSpecContainerSpecPrivilegesPtrOutput)
}

func (o ServiceTaskSpecContainerSpecPrivilegesOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecPrivileges] {
	return pulumix.Output[ServiceTaskSpecContainerSpecPrivileges]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecPrivilegesOutput) CredentialSpec() ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecPrivileges) *ServiceTaskSpecContainerSpecPrivilegesCredentialSpec {
		return v.CredentialSpec
	}).(ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput)
}

func (o ServiceTaskSpecContainerSpecPrivilegesOutput) SeLinuxContext() ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecPrivileges) *ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext {
		return v.SeLinuxContext
	}).(ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput)
}

type ServiceTaskSpecContainerSpecPrivilegesPtrOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecPrivilegesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecContainerSpecPrivileges)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecPrivilegesPtrOutput) ToServiceTaskSpecContainerSpecPrivilegesPtrOutput() ServiceTaskSpecContainerSpecPrivilegesPtrOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecPrivilegesPtrOutput) ToServiceTaskSpecContainerSpecPrivilegesPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecPrivilegesPtrOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecPrivilegesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecContainerSpecPrivileges] {
	return pulumix.Output[*ServiceTaskSpecContainerSpecPrivileges]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecPrivilegesPtrOutput) Elem() ServiceTaskSpecContainerSpecPrivilegesOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecPrivileges) ServiceTaskSpecContainerSpecPrivileges {
		if v != nil {
			return *v
		}
		var ret ServiceTaskSpecContainerSpecPrivileges
		return ret
	}).(ServiceTaskSpecContainerSpecPrivilegesOutput)
}

func (o ServiceTaskSpecContainerSpecPrivilegesPtrOutput) CredentialSpec() ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecPrivileges) *ServiceTaskSpecContainerSpecPrivilegesCredentialSpec {
		if v == nil {
			return nil
		}
		return v.CredentialSpec
	}).(ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput)
}

func (o ServiceTaskSpecContainerSpecPrivilegesPtrOutput) SeLinuxContext() ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecPrivileges) *ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext {
		if v == nil {
			return nil
		}
		return v.SeLinuxContext
	}).(ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput)
}

type ServiceTaskSpecContainerSpecPrivilegesCredentialSpec struct {
	File     *string `pulumi:"file"`
	Registry *string `pulumi:"registry"`
}

// ServiceTaskSpecContainerSpecPrivilegesCredentialSpecInput is an input type that accepts ServiceTaskSpecContainerSpecPrivilegesCredentialSpecArgs and ServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecPrivilegesCredentialSpecInput` via:
//
//	ServiceTaskSpecContainerSpecPrivilegesCredentialSpecArgs{...}
type ServiceTaskSpecContainerSpecPrivilegesCredentialSpecInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutput() ServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutput
	ToServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutputWithContext(context.Context) ServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutput
}

type ServiceTaskSpecContainerSpecPrivilegesCredentialSpecArgs struct {
	File     pulumi.StringPtrInput `pulumi:"file"`
	Registry pulumi.StringPtrInput `pulumi:"registry"`
}

func (ServiceTaskSpecContainerSpecPrivilegesCredentialSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecPrivilegesCredentialSpec)(nil)).Elem()
}

func (i ServiceTaskSpecContainerSpecPrivilegesCredentialSpecArgs) ToServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutput() ServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutput {
	return i.ToServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecPrivilegesCredentialSpecArgs) ToServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutput)
}

func (i ServiceTaskSpecContainerSpecPrivilegesCredentialSpecArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecPrivilegesCredentialSpec] {
	return pulumix.Output[ServiceTaskSpecContainerSpecPrivilegesCredentialSpec]{
		OutputState: i.ToServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceTaskSpecContainerSpecPrivilegesCredentialSpecArgs) ToServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput() ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput {
	return i.ToServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecPrivilegesCredentialSpecArgs) ToServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutput).ToServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutputWithContext(ctx)
}

// ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrInput is an input type that accepts ServiceTaskSpecContainerSpecPrivilegesCredentialSpecArgs, ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtr and ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrInput` via:
//
//	        ServiceTaskSpecContainerSpecPrivilegesCredentialSpecArgs{...}
//
//	or:
//
//	        nil
type ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput() ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput
	ToServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutputWithContext(context.Context) ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput
}

type serviceTaskSpecContainerSpecPrivilegesCredentialSpecPtrType ServiceTaskSpecContainerSpecPrivilegesCredentialSpecArgs

func ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtr(v *ServiceTaskSpecContainerSpecPrivilegesCredentialSpecArgs) ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrInput {
	return (*serviceTaskSpecContainerSpecPrivilegesCredentialSpecPtrType)(v)
}

func (*serviceTaskSpecContainerSpecPrivilegesCredentialSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecContainerSpecPrivilegesCredentialSpec)(nil)).Elem()
}

func (i *serviceTaskSpecContainerSpecPrivilegesCredentialSpecPtrType) ToServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput() ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput {
	return i.ToServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutputWithContext(context.Background())
}

func (i *serviceTaskSpecContainerSpecPrivilegesCredentialSpecPtrType) ToServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput)
}

func (i *serviceTaskSpecContainerSpecPrivilegesCredentialSpecPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecContainerSpecPrivilegesCredentialSpec] {
	return pulumix.Output[*ServiceTaskSpecContainerSpecPrivilegesCredentialSpec]{
		OutputState: i.ToServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecPrivilegesCredentialSpec)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutput) ToServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutput() ServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutput) ToServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutput) ToServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput() ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput {
	return o.ToServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutputWithContext(context.Background())
}

func (o ServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutput) ToServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceTaskSpecContainerSpecPrivilegesCredentialSpec) *ServiceTaskSpecContainerSpecPrivilegesCredentialSpec {
		return &v
	}).(ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput)
}

func (o ServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecPrivilegesCredentialSpec] {
	return pulumix.Output[ServiceTaskSpecContainerSpecPrivilegesCredentialSpec]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutput) File() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecPrivilegesCredentialSpec) *string { return v.File }).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecPrivilegesCredentialSpec) *string { return v.Registry }).(pulumi.StringPtrOutput)
}

type ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecContainerSpecPrivilegesCredentialSpec)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput) ToServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput() ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput) ToServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecContainerSpecPrivilegesCredentialSpec] {
	return pulumix.Output[*ServiceTaskSpecContainerSpecPrivilegesCredentialSpec]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput) Elem() ServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecPrivilegesCredentialSpec) ServiceTaskSpecContainerSpecPrivilegesCredentialSpec {
		if v != nil {
			return *v
		}
		var ret ServiceTaskSpecContainerSpecPrivilegesCredentialSpec
		return ret
	}).(ServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutput)
}

func (o ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput) File() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecPrivilegesCredentialSpec) *string {
		if v == nil {
			return nil
		}
		return v.File
	}).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecPrivilegesCredentialSpec) *string {
		if v == nil {
			return nil
		}
		return v.Registry
	}).(pulumi.StringPtrOutput)
}

type ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext struct {
	Disable *bool   `pulumi:"disable"`
	Level   *string `pulumi:"level"`
	Role    *string `pulumi:"role"`
	Type    *string `pulumi:"type"`
	User    *string `pulumi:"user"`
}

// ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextInput is an input type that accepts ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextArgs and ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextInput` via:
//
//	ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextArgs{...}
type ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput() ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput
	ToServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutputWithContext(context.Context) ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput
}

type ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextArgs struct {
	Disable pulumi.BoolPtrInput   `pulumi:"disable"`
	Level   pulumi.StringPtrInput `pulumi:"level"`
	Role    pulumi.StringPtrInput `pulumi:"role"`
	Type    pulumi.StringPtrInput `pulumi:"type"`
	User    pulumi.StringPtrInput `pulumi:"user"`
}

func (ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext)(nil)).Elem()
}

func (i ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextArgs) ToServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput() ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput {
	return i.ToServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextArgs) ToServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput)
}

func (i ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext] {
	return pulumix.Output[ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext]{
		OutputState: i.ToServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextArgs) ToServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput() ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput {
	return i.ToServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextArgs) ToServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput).ToServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutputWithContext(ctx)
}

// ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrInput is an input type that accepts ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextArgs, ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtr and ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrInput` via:
//
//	        ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextArgs{...}
//
//	or:
//
//	        nil
type ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput() ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput
	ToServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutputWithContext(context.Context) ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput
}

type serviceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrType ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextArgs

func ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtr(v *ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextArgs) ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrInput {
	return (*serviceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrType)(v)
}

func (*serviceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext)(nil)).Elem()
}

func (i *serviceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrType) ToServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput() ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput {
	return i.ToServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutputWithContext(context.Background())
}

func (i *serviceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrType) ToServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput)
}

func (i *serviceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext] {
	return pulumix.Output[*ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext]{
		OutputState: i.ToServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput) ToServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput() ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput) ToServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput) ToServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput() ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput {
	return o.ToServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutputWithContext(context.Background())
}

func (o ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput) ToServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext) *ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext {
		return &v
	}).(ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput)
}

func (o ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext] {
	return pulumix.Output[ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput) Disable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext) *bool { return v.Disable }).(pulumi.BoolPtrOutput)
}

func (o ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext) *string { return v.Level }).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext) *string { return v.Role }).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext) *string { return v.User }).(pulumi.StringPtrOutput)
}

type ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput) ToServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput() ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput) ToServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext] {
	return pulumix.Output[*ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput) Elem() ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext) ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext {
		if v != nil {
			return *v
		}
		var ret ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext
		return ret
	}).(ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput)
}

func (o ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput) Disable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext) *bool {
		if v == nil {
			return nil
		}
		return v.Disable
	}).(pulumi.BoolPtrOutput)
}

func (o ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

type ServiceTaskSpecContainerSpecSecret struct {
	FileGid    *string `pulumi:"fileGid"`
	FileMode   *int    `pulumi:"fileMode"`
	FileName   string  `pulumi:"fileName"`
	FileUid    *string `pulumi:"fileUid"`
	SecretId   string  `pulumi:"secretId"`
	SecretName *string `pulumi:"secretName"`
}

// ServiceTaskSpecContainerSpecSecretInput is an input type that accepts ServiceTaskSpecContainerSpecSecretArgs and ServiceTaskSpecContainerSpecSecretOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecSecretInput` via:
//
//	ServiceTaskSpecContainerSpecSecretArgs{...}
type ServiceTaskSpecContainerSpecSecretInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecSecretOutput() ServiceTaskSpecContainerSpecSecretOutput
	ToServiceTaskSpecContainerSpecSecretOutputWithContext(context.Context) ServiceTaskSpecContainerSpecSecretOutput
}

type ServiceTaskSpecContainerSpecSecretArgs struct {
	FileGid    pulumi.StringPtrInput `pulumi:"fileGid"`
	FileMode   pulumi.IntPtrInput    `pulumi:"fileMode"`
	FileName   pulumi.StringInput    `pulumi:"fileName"`
	FileUid    pulumi.StringPtrInput `pulumi:"fileUid"`
	SecretId   pulumi.StringInput    `pulumi:"secretId"`
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ServiceTaskSpecContainerSpecSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecSecret)(nil)).Elem()
}

func (i ServiceTaskSpecContainerSpecSecretArgs) ToServiceTaskSpecContainerSpecSecretOutput() ServiceTaskSpecContainerSpecSecretOutput {
	return i.ToServiceTaskSpecContainerSpecSecretOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecSecretArgs) ToServiceTaskSpecContainerSpecSecretOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecSecretOutput)
}

func (i ServiceTaskSpecContainerSpecSecretArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecSecret] {
	return pulumix.Output[ServiceTaskSpecContainerSpecSecret]{
		OutputState: i.ToServiceTaskSpecContainerSpecSecretOutputWithContext(ctx).OutputState,
	}
}

// ServiceTaskSpecContainerSpecSecretArrayInput is an input type that accepts ServiceTaskSpecContainerSpecSecretArray and ServiceTaskSpecContainerSpecSecretArrayOutput values.
// You can construct a concrete instance of `ServiceTaskSpecContainerSpecSecretArrayInput` via:
//
//	ServiceTaskSpecContainerSpecSecretArray{ ServiceTaskSpecContainerSpecSecretArgs{...} }
type ServiceTaskSpecContainerSpecSecretArrayInput interface {
	pulumi.Input

	ToServiceTaskSpecContainerSpecSecretArrayOutput() ServiceTaskSpecContainerSpecSecretArrayOutput
	ToServiceTaskSpecContainerSpecSecretArrayOutputWithContext(context.Context) ServiceTaskSpecContainerSpecSecretArrayOutput
}

type ServiceTaskSpecContainerSpecSecretArray []ServiceTaskSpecContainerSpecSecretInput

func (ServiceTaskSpecContainerSpecSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTaskSpecContainerSpecSecret)(nil)).Elem()
}

func (i ServiceTaskSpecContainerSpecSecretArray) ToServiceTaskSpecContainerSpecSecretArrayOutput() ServiceTaskSpecContainerSpecSecretArrayOutput {
	return i.ToServiceTaskSpecContainerSpecSecretArrayOutputWithContext(context.Background())
}

func (i ServiceTaskSpecContainerSpecSecretArray) ToServiceTaskSpecContainerSpecSecretArrayOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecContainerSpecSecretArrayOutput)
}

func (i ServiceTaskSpecContainerSpecSecretArray) ToOutput(ctx context.Context) pulumix.Output[[]ServiceTaskSpecContainerSpecSecret] {
	return pulumix.Output[[]ServiceTaskSpecContainerSpecSecret]{
		OutputState: i.ToServiceTaskSpecContainerSpecSecretArrayOutputWithContext(ctx).OutputState,
	}
}

type ServiceTaskSpecContainerSpecSecretOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecContainerSpecSecret)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecSecretOutput) ToServiceTaskSpecContainerSpecSecretOutput() ServiceTaskSpecContainerSpecSecretOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecSecretOutput) ToServiceTaskSpecContainerSpecSecretOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecSecretOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecSecretOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecContainerSpecSecret] {
	return pulumix.Output[ServiceTaskSpecContainerSpecSecret]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecSecretOutput) FileGid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecSecret) *string { return v.FileGid }).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecSecretOutput) FileMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecSecret) *int { return v.FileMode }).(pulumi.IntPtrOutput)
}

func (o ServiceTaskSpecContainerSpecSecretOutput) FileName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecSecret) string { return v.FileName }).(pulumi.StringOutput)
}

func (o ServiceTaskSpecContainerSpecSecretOutput) FileUid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecSecret) *string { return v.FileUid }).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecContainerSpecSecretOutput) SecretId() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecSecret) string { return v.SecretId }).(pulumi.StringOutput)
}

func (o ServiceTaskSpecContainerSpecSecretOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecContainerSpecSecret) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ServiceTaskSpecContainerSpecSecretArrayOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecContainerSpecSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTaskSpecContainerSpecSecret)(nil)).Elem()
}

func (o ServiceTaskSpecContainerSpecSecretArrayOutput) ToServiceTaskSpecContainerSpecSecretArrayOutput() ServiceTaskSpecContainerSpecSecretArrayOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecSecretArrayOutput) ToServiceTaskSpecContainerSpecSecretArrayOutputWithContext(ctx context.Context) ServiceTaskSpecContainerSpecSecretArrayOutput {
	return o
}

func (o ServiceTaskSpecContainerSpecSecretArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceTaskSpecContainerSpecSecret] {
	return pulumix.Output[[]ServiceTaskSpecContainerSpecSecret]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecContainerSpecSecretArrayOutput) Index(i pulumi.IntInput) ServiceTaskSpecContainerSpecSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceTaskSpecContainerSpecSecret {
		return vs[0].([]ServiceTaskSpecContainerSpecSecret)[vs[1].(int)]
	}).(ServiceTaskSpecContainerSpecSecretOutput)
}

type ServiceTaskSpecLogDriver struct {
	// Name of the service
	Name    string            `pulumi:"name"`
	Options map[string]string `pulumi:"options"`
}

// ServiceTaskSpecLogDriverInput is an input type that accepts ServiceTaskSpecLogDriverArgs and ServiceTaskSpecLogDriverOutput values.
// You can construct a concrete instance of `ServiceTaskSpecLogDriverInput` via:
//
//	ServiceTaskSpecLogDriverArgs{...}
type ServiceTaskSpecLogDriverInput interface {
	pulumi.Input

	ToServiceTaskSpecLogDriverOutput() ServiceTaskSpecLogDriverOutput
	ToServiceTaskSpecLogDriverOutputWithContext(context.Context) ServiceTaskSpecLogDriverOutput
}

type ServiceTaskSpecLogDriverArgs struct {
	// Name of the service
	Name    pulumi.StringInput    `pulumi:"name"`
	Options pulumi.StringMapInput `pulumi:"options"`
}

func (ServiceTaskSpecLogDriverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecLogDriver)(nil)).Elem()
}

func (i ServiceTaskSpecLogDriverArgs) ToServiceTaskSpecLogDriverOutput() ServiceTaskSpecLogDriverOutput {
	return i.ToServiceTaskSpecLogDriverOutputWithContext(context.Background())
}

func (i ServiceTaskSpecLogDriverArgs) ToServiceTaskSpecLogDriverOutputWithContext(ctx context.Context) ServiceTaskSpecLogDriverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecLogDriverOutput)
}

func (i ServiceTaskSpecLogDriverArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecLogDriver] {
	return pulumix.Output[ServiceTaskSpecLogDriver]{
		OutputState: i.ToServiceTaskSpecLogDriverOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceTaskSpecLogDriverArgs) ToServiceTaskSpecLogDriverPtrOutput() ServiceTaskSpecLogDriverPtrOutput {
	return i.ToServiceTaskSpecLogDriverPtrOutputWithContext(context.Background())
}

func (i ServiceTaskSpecLogDriverArgs) ToServiceTaskSpecLogDriverPtrOutputWithContext(ctx context.Context) ServiceTaskSpecLogDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecLogDriverOutput).ToServiceTaskSpecLogDriverPtrOutputWithContext(ctx)
}

// ServiceTaskSpecLogDriverPtrInput is an input type that accepts ServiceTaskSpecLogDriverArgs, ServiceTaskSpecLogDriverPtr and ServiceTaskSpecLogDriverPtrOutput values.
// You can construct a concrete instance of `ServiceTaskSpecLogDriverPtrInput` via:
//
//	        ServiceTaskSpecLogDriverArgs{...}
//
//	or:
//
//	        nil
type ServiceTaskSpecLogDriverPtrInput interface {
	pulumi.Input

	ToServiceTaskSpecLogDriverPtrOutput() ServiceTaskSpecLogDriverPtrOutput
	ToServiceTaskSpecLogDriverPtrOutputWithContext(context.Context) ServiceTaskSpecLogDriverPtrOutput
}

type serviceTaskSpecLogDriverPtrType ServiceTaskSpecLogDriverArgs

func ServiceTaskSpecLogDriverPtr(v *ServiceTaskSpecLogDriverArgs) ServiceTaskSpecLogDriverPtrInput {
	return (*serviceTaskSpecLogDriverPtrType)(v)
}

func (*serviceTaskSpecLogDriverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecLogDriver)(nil)).Elem()
}

func (i *serviceTaskSpecLogDriverPtrType) ToServiceTaskSpecLogDriverPtrOutput() ServiceTaskSpecLogDriverPtrOutput {
	return i.ToServiceTaskSpecLogDriverPtrOutputWithContext(context.Background())
}

func (i *serviceTaskSpecLogDriverPtrType) ToServiceTaskSpecLogDriverPtrOutputWithContext(ctx context.Context) ServiceTaskSpecLogDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecLogDriverPtrOutput)
}

func (i *serviceTaskSpecLogDriverPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecLogDriver] {
	return pulumix.Output[*ServiceTaskSpecLogDriver]{
		OutputState: i.ToServiceTaskSpecLogDriverPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceTaskSpecLogDriverOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecLogDriverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecLogDriver)(nil)).Elem()
}

func (o ServiceTaskSpecLogDriverOutput) ToServiceTaskSpecLogDriverOutput() ServiceTaskSpecLogDriverOutput {
	return o
}

func (o ServiceTaskSpecLogDriverOutput) ToServiceTaskSpecLogDriverOutputWithContext(ctx context.Context) ServiceTaskSpecLogDriverOutput {
	return o
}

func (o ServiceTaskSpecLogDriverOutput) ToServiceTaskSpecLogDriverPtrOutput() ServiceTaskSpecLogDriverPtrOutput {
	return o.ToServiceTaskSpecLogDriverPtrOutputWithContext(context.Background())
}

func (o ServiceTaskSpecLogDriverOutput) ToServiceTaskSpecLogDriverPtrOutputWithContext(ctx context.Context) ServiceTaskSpecLogDriverPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceTaskSpecLogDriver) *ServiceTaskSpecLogDriver {
		return &v
	}).(ServiceTaskSpecLogDriverPtrOutput)
}

func (o ServiceTaskSpecLogDriverOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecLogDriver] {
	return pulumix.Output[ServiceTaskSpecLogDriver]{
		OutputState: o.OutputState,
	}
}

// Name of the service
func (o ServiceTaskSpecLogDriverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTaskSpecLogDriver) string { return v.Name }).(pulumi.StringOutput)
}

func (o ServiceTaskSpecLogDriverOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServiceTaskSpecLogDriver) map[string]string { return v.Options }).(pulumi.StringMapOutput)
}

type ServiceTaskSpecLogDriverPtrOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecLogDriverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecLogDriver)(nil)).Elem()
}

func (o ServiceTaskSpecLogDriverPtrOutput) ToServiceTaskSpecLogDriverPtrOutput() ServiceTaskSpecLogDriverPtrOutput {
	return o
}

func (o ServiceTaskSpecLogDriverPtrOutput) ToServiceTaskSpecLogDriverPtrOutputWithContext(ctx context.Context) ServiceTaskSpecLogDriverPtrOutput {
	return o
}

func (o ServiceTaskSpecLogDriverPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecLogDriver] {
	return pulumix.Output[*ServiceTaskSpecLogDriver]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecLogDriverPtrOutput) Elem() ServiceTaskSpecLogDriverOutput {
	return o.ApplyT(func(v *ServiceTaskSpecLogDriver) ServiceTaskSpecLogDriver {
		if v != nil {
			return *v
		}
		var ret ServiceTaskSpecLogDriver
		return ret
	}).(ServiceTaskSpecLogDriverOutput)
}

// Name of the service
func (o ServiceTaskSpecLogDriverPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecLogDriver) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecLogDriverPtrOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceTaskSpecLogDriver) map[string]string {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.StringMapOutput)
}

type ServiceTaskSpecNetworksAdvanced struct {
	Aliases    []string `pulumi:"aliases"`
	DriverOpts []string `pulumi:"driverOpts"`
	// Name of the service
	Name string `pulumi:"name"`
}

// ServiceTaskSpecNetworksAdvancedInput is an input type that accepts ServiceTaskSpecNetworksAdvancedArgs and ServiceTaskSpecNetworksAdvancedOutput values.
// You can construct a concrete instance of `ServiceTaskSpecNetworksAdvancedInput` via:
//
//	ServiceTaskSpecNetworksAdvancedArgs{...}
type ServiceTaskSpecNetworksAdvancedInput interface {
	pulumi.Input

	ToServiceTaskSpecNetworksAdvancedOutput() ServiceTaskSpecNetworksAdvancedOutput
	ToServiceTaskSpecNetworksAdvancedOutputWithContext(context.Context) ServiceTaskSpecNetworksAdvancedOutput
}

type ServiceTaskSpecNetworksAdvancedArgs struct {
	Aliases    pulumi.StringArrayInput `pulumi:"aliases"`
	DriverOpts pulumi.StringArrayInput `pulumi:"driverOpts"`
	// Name of the service
	Name pulumi.StringInput `pulumi:"name"`
}

func (ServiceTaskSpecNetworksAdvancedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecNetworksAdvanced)(nil)).Elem()
}

func (i ServiceTaskSpecNetworksAdvancedArgs) ToServiceTaskSpecNetworksAdvancedOutput() ServiceTaskSpecNetworksAdvancedOutput {
	return i.ToServiceTaskSpecNetworksAdvancedOutputWithContext(context.Background())
}

func (i ServiceTaskSpecNetworksAdvancedArgs) ToServiceTaskSpecNetworksAdvancedOutputWithContext(ctx context.Context) ServiceTaskSpecNetworksAdvancedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecNetworksAdvancedOutput)
}

func (i ServiceTaskSpecNetworksAdvancedArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecNetworksAdvanced] {
	return pulumix.Output[ServiceTaskSpecNetworksAdvanced]{
		OutputState: i.ToServiceTaskSpecNetworksAdvancedOutputWithContext(ctx).OutputState,
	}
}

// ServiceTaskSpecNetworksAdvancedArrayInput is an input type that accepts ServiceTaskSpecNetworksAdvancedArray and ServiceTaskSpecNetworksAdvancedArrayOutput values.
// You can construct a concrete instance of `ServiceTaskSpecNetworksAdvancedArrayInput` via:
//
//	ServiceTaskSpecNetworksAdvancedArray{ ServiceTaskSpecNetworksAdvancedArgs{...} }
type ServiceTaskSpecNetworksAdvancedArrayInput interface {
	pulumi.Input

	ToServiceTaskSpecNetworksAdvancedArrayOutput() ServiceTaskSpecNetworksAdvancedArrayOutput
	ToServiceTaskSpecNetworksAdvancedArrayOutputWithContext(context.Context) ServiceTaskSpecNetworksAdvancedArrayOutput
}

type ServiceTaskSpecNetworksAdvancedArray []ServiceTaskSpecNetworksAdvancedInput

func (ServiceTaskSpecNetworksAdvancedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTaskSpecNetworksAdvanced)(nil)).Elem()
}

func (i ServiceTaskSpecNetworksAdvancedArray) ToServiceTaskSpecNetworksAdvancedArrayOutput() ServiceTaskSpecNetworksAdvancedArrayOutput {
	return i.ToServiceTaskSpecNetworksAdvancedArrayOutputWithContext(context.Background())
}

func (i ServiceTaskSpecNetworksAdvancedArray) ToServiceTaskSpecNetworksAdvancedArrayOutputWithContext(ctx context.Context) ServiceTaskSpecNetworksAdvancedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecNetworksAdvancedArrayOutput)
}

func (i ServiceTaskSpecNetworksAdvancedArray) ToOutput(ctx context.Context) pulumix.Output[[]ServiceTaskSpecNetworksAdvanced] {
	return pulumix.Output[[]ServiceTaskSpecNetworksAdvanced]{
		OutputState: i.ToServiceTaskSpecNetworksAdvancedArrayOutputWithContext(ctx).OutputState,
	}
}

type ServiceTaskSpecNetworksAdvancedOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecNetworksAdvancedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecNetworksAdvanced)(nil)).Elem()
}

func (o ServiceTaskSpecNetworksAdvancedOutput) ToServiceTaskSpecNetworksAdvancedOutput() ServiceTaskSpecNetworksAdvancedOutput {
	return o
}

func (o ServiceTaskSpecNetworksAdvancedOutput) ToServiceTaskSpecNetworksAdvancedOutputWithContext(ctx context.Context) ServiceTaskSpecNetworksAdvancedOutput {
	return o
}

func (o ServiceTaskSpecNetworksAdvancedOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecNetworksAdvanced] {
	return pulumix.Output[ServiceTaskSpecNetworksAdvanced]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecNetworksAdvancedOutput) Aliases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceTaskSpecNetworksAdvanced) []string { return v.Aliases }).(pulumi.StringArrayOutput)
}

func (o ServiceTaskSpecNetworksAdvancedOutput) DriverOpts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceTaskSpecNetworksAdvanced) []string { return v.DriverOpts }).(pulumi.StringArrayOutput)
}

// Name of the service
func (o ServiceTaskSpecNetworksAdvancedOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTaskSpecNetworksAdvanced) string { return v.Name }).(pulumi.StringOutput)
}

type ServiceTaskSpecNetworksAdvancedArrayOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecNetworksAdvancedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTaskSpecNetworksAdvanced)(nil)).Elem()
}

func (o ServiceTaskSpecNetworksAdvancedArrayOutput) ToServiceTaskSpecNetworksAdvancedArrayOutput() ServiceTaskSpecNetworksAdvancedArrayOutput {
	return o
}

func (o ServiceTaskSpecNetworksAdvancedArrayOutput) ToServiceTaskSpecNetworksAdvancedArrayOutputWithContext(ctx context.Context) ServiceTaskSpecNetworksAdvancedArrayOutput {
	return o
}

func (o ServiceTaskSpecNetworksAdvancedArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceTaskSpecNetworksAdvanced] {
	return pulumix.Output[[]ServiceTaskSpecNetworksAdvanced]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecNetworksAdvancedArrayOutput) Index(i pulumi.IntInput) ServiceTaskSpecNetworksAdvancedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceTaskSpecNetworksAdvanced {
		return vs[0].([]ServiceTaskSpecNetworksAdvanced)[vs[1].(int)]
	}).(ServiceTaskSpecNetworksAdvancedOutput)
}

type ServiceTaskSpecPlacement struct {
	Constraints []string                           `pulumi:"constraints"`
	MaxReplicas *int                               `pulumi:"maxReplicas"`
	Platforms   []ServiceTaskSpecPlacementPlatform `pulumi:"platforms"`
	Prefs       []string                           `pulumi:"prefs"`
}

// ServiceTaskSpecPlacementInput is an input type that accepts ServiceTaskSpecPlacementArgs and ServiceTaskSpecPlacementOutput values.
// You can construct a concrete instance of `ServiceTaskSpecPlacementInput` via:
//
//	ServiceTaskSpecPlacementArgs{...}
type ServiceTaskSpecPlacementInput interface {
	pulumi.Input

	ToServiceTaskSpecPlacementOutput() ServiceTaskSpecPlacementOutput
	ToServiceTaskSpecPlacementOutputWithContext(context.Context) ServiceTaskSpecPlacementOutput
}

type ServiceTaskSpecPlacementArgs struct {
	Constraints pulumi.StringArrayInput                    `pulumi:"constraints"`
	MaxReplicas pulumi.IntPtrInput                         `pulumi:"maxReplicas"`
	Platforms   ServiceTaskSpecPlacementPlatformArrayInput `pulumi:"platforms"`
	Prefs       pulumi.StringArrayInput                    `pulumi:"prefs"`
}

func (ServiceTaskSpecPlacementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecPlacement)(nil)).Elem()
}

func (i ServiceTaskSpecPlacementArgs) ToServiceTaskSpecPlacementOutput() ServiceTaskSpecPlacementOutput {
	return i.ToServiceTaskSpecPlacementOutputWithContext(context.Background())
}

func (i ServiceTaskSpecPlacementArgs) ToServiceTaskSpecPlacementOutputWithContext(ctx context.Context) ServiceTaskSpecPlacementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecPlacementOutput)
}

func (i ServiceTaskSpecPlacementArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecPlacement] {
	return pulumix.Output[ServiceTaskSpecPlacement]{
		OutputState: i.ToServiceTaskSpecPlacementOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceTaskSpecPlacementArgs) ToServiceTaskSpecPlacementPtrOutput() ServiceTaskSpecPlacementPtrOutput {
	return i.ToServiceTaskSpecPlacementPtrOutputWithContext(context.Background())
}

func (i ServiceTaskSpecPlacementArgs) ToServiceTaskSpecPlacementPtrOutputWithContext(ctx context.Context) ServiceTaskSpecPlacementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecPlacementOutput).ToServiceTaskSpecPlacementPtrOutputWithContext(ctx)
}

// ServiceTaskSpecPlacementPtrInput is an input type that accepts ServiceTaskSpecPlacementArgs, ServiceTaskSpecPlacementPtr and ServiceTaskSpecPlacementPtrOutput values.
// You can construct a concrete instance of `ServiceTaskSpecPlacementPtrInput` via:
//
//	        ServiceTaskSpecPlacementArgs{...}
//
//	or:
//
//	        nil
type ServiceTaskSpecPlacementPtrInput interface {
	pulumi.Input

	ToServiceTaskSpecPlacementPtrOutput() ServiceTaskSpecPlacementPtrOutput
	ToServiceTaskSpecPlacementPtrOutputWithContext(context.Context) ServiceTaskSpecPlacementPtrOutput
}

type serviceTaskSpecPlacementPtrType ServiceTaskSpecPlacementArgs

func ServiceTaskSpecPlacementPtr(v *ServiceTaskSpecPlacementArgs) ServiceTaskSpecPlacementPtrInput {
	return (*serviceTaskSpecPlacementPtrType)(v)
}

func (*serviceTaskSpecPlacementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecPlacement)(nil)).Elem()
}

func (i *serviceTaskSpecPlacementPtrType) ToServiceTaskSpecPlacementPtrOutput() ServiceTaskSpecPlacementPtrOutput {
	return i.ToServiceTaskSpecPlacementPtrOutputWithContext(context.Background())
}

func (i *serviceTaskSpecPlacementPtrType) ToServiceTaskSpecPlacementPtrOutputWithContext(ctx context.Context) ServiceTaskSpecPlacementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecPlacementPtrOutput)
}

func (i *serviceTaskSpecPlacementPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecPlacement] {
	return pulumix.Output[*ServiceTaskSpecPlacement]{
		OutputState: i.ToServiceTaskSpecPlacementPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceTaskSpecPlacementOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecPlacementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecPlacement)(nil)).Elem()
}

func (o ServiceTaskSpecPlacementOutput) ToServiceTaskSpecPlacementOutput() ServiceTaskSpecPlacementOutput {
	return o
}

func (o ServiceTaskSpecPlacementOutput) ToServiceTaskSpecPlacementOutputWithContext(ctx context.Context) ServiceTaskSpecPlacementOutput {
	return o
}

func (o ServiceTaskSpecPlacementOutput) ToServiceTaskSpecPlacementPtrOutput() ServiceTaskSpecPlacementPtrOutput {
	return o.ToServiceTaskSpecPlacementPtrOutputWithContext(context.Background())
}

func (o ServiceTaskSpecPlacementOutput) ToServiceTaskSpecPlacementPtrOutputWithContext(ctx context.Context) ServiceTaskSpecPlacementPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceTaskSpecPlacement) *ServiceTaskSpecPlacement {
		return &v
	}).(ServiceTaskSpecPlacementPtrOutput)
}

func (o ServiceTaskSpecPlacementOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecPlacement] {
	return pulumix.Output[ServiceTaskSpecPlacement]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecPlacementOutput) Constraints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceTaskSpecPlacement) []string { return v.Constraints }).(pulumi.StringArrayOutput)
}

func (o ServiceTaskSpecPlacementOutput) MaxReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecPlacement) *int { return v.MaxReplicas }).(pulumi.IntPtrOutput)
}

func (o ServiceTaskSpecPlacementOutput) Platforms() ServiceTaskSpecPlacementPlatformArrayOutput {
	return o.ApplyT(func(v ServiceTaskSpecPlacement) []ServiceTaskSpecPlacementPlatform { return v.Platforms }).(ServiceTaskSpecPlacementPlatformArrayOutput)
}

func (o ServiceTaskSpecPlacementOutput) Prefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceTaskSpecPlacement) []string { return v.Prefs }).(pulumi.StringArrayOutput)
}

type ServiceTaskSpecPlacementPtrOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecPlacementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecPlacement)(nil)).Elem()
}

func (o ServiceTaskSpecPlacementPtrOutput) ToServiceTaskSpecPlacementPtrOutput() ServiceTaskSpecPlacementPtrOutput {
	return o
}

func (o ServiceTaskSpecPlacementPtrOutput) ToServiceTaskSpecPlacementPtrOutputWithContext(ctx context.Context) ServiceTaskSpecPlacementPtrOutput {
	return o
}

func (o ServiceTaskSpecPlacementPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecPlacement] {
	return pulumix.Output[*ServiceTaskSpecPlacement]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecPlacementPtrOutput) Elem() ServiceTaskSpecPlacementOutput {
	return o.ApplyT(func(v *ServiceTaskSpecPlacement) ServiceTaskSpecPlacement {
		if v != nil {
			return *v
		}
		var ret ServiceTaskSpecPlacement
		return ret
	}).(ServiceTaskSpecPlacementOutput)
}

func (o ServiceTaskSpecPlacementPtrOutput) Constraints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceTaskSpecPlacement) []string {
		if v == nil {
			return nil
		}
		return v.Constraints
	}).(pulumi.StringArrayOutput)
}

func (o ServiceTaskSpecPlacementPtrOutput) MaxReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecPlacement) *int {
		if v == nil {
			return nil
		}
		return v.MaxReplicas
	}).(pulumi.IntPtrOutput)
}

func (o ServiceTaskSpecPlacementPtrOutput) Platforms() ServiceTaskSpecPlacementPlatformArrayOutput {
	return o.ApplyT(func(v *ServiceTaskSpecPlacement) []ServiceTaskSpecPlacementPlatform {
		if v == nil {
			return nil
		}
		return v.Platforms
	}).(ServiceTaskSpecPlacementPlatformArrayOutput)
}

func (o ServiceTaskSpecPlacementPtrOutput) Prefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceTaskSpecPlacement) []string {
		if v == nil {
			return nil
		}
		return v.Prefs
	}).(pulumi.StringArrayOutput)
}

type ServiceTaskSpecPlacementPlatform struct {
	Architecture string `pulumi:"architecture"`
	Os           string `pulumi:"os"`
}

// ServiceTaskSpecPlacementPlatformInput is an input type that accepts ServiceTaskSpecPlacementPlatformArgs and ServiceTaskSpecPlacementPlatformOutput values.
// You can construct a concrete instance of `ServiceTaskSpecPlacementPlatformInput` via:
//
//	ServiceTaskSpecPlacementPlatformArgs{...}
type ServiceTaskSpecPlacementPlatformInput interface {
	pulumi.Input

	ToServiceTaskSpecPlacementPlatformOutput() ServiceTaskSpecPlacementPlatformOutput
	ToServiceTaskSpecPlacementPlatformOutputWithContext(context.Context) ServiceTaskSpecPlacementPlatformOutput
}

type ServiceTaskSpecPlacementPlatformArgs struct {
	Architecture pulumi.StringInput `pulumi:"architecture"`
	Os           pulumi.StringInput `pulumi:"os"`
}

func (ServiceTaskSpecPlacementPlatformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecPlacementPlatform)(nil)).Elem()
}

func (i ServiceTaskSpecPlacementPlatformArgs) ToServiceTaskSpecPlacementPlatformOutput() ServiceTaskSpecPlacementPlatformOutput {
	return i.ToServiceTaskSpecPlacementPlatformOutputWithContext(context.Background())
}

func (i ServiceTaskSpecPlacementPlatformArgs) ToServiceTaskSpecPlacementPlatformOutputWithContext(ctx context.Context) ServiceTaskSpecPlacementPlatformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecPlacementPlatformOutput)
}

func (i ServiceTaskSpecPlacementPlatformArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecPlacementPlatform] {
	return pulumix.Output[ServiceTaskSpecPlacementPlatform]{
		OutputState: i.ToServiceTaskSpecPlacementPlatformOutputWithContext(ctx).OutputState,
	}
}

// ServiceTaskSpecPlacementPlatformArrayInput is an input type that accepts ServiceTaskSpecPlacementPlatformArray and ServiceTaskSpecPlacementPlatformArrayOutput values.
// You can construct a concrete instance of `ServiceTaskSpecPlacementPlatformArrayInput` via:
//
//	ServiceTaskSpecPlacementPlatformArray{ ServiceTaskSpecPlacementPlatformArgs{...} }
type ServiceTaskSpecPlacementPlatformArrayInput interface {
	pulumi.Input

	ToServiceTaskSpecPlacementPlatformArrayOutput() ServiceTaskSpecPlacementPlatformArrayOutput
	ToServiceTaskSpecPlacementPlatformArrayOutputWithContext(context.Context) ServiceTaskSpecPlacementPlatformArrayOutput
}

type ServiceTaskSpecPlacementPlatformArray []ServiceTaskSpecPlacementPlatformInput

func (ServiceTaskSpecPlacementPlatformArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTaskSpecPlacementPlatform)(nil)).Elem()
}

func (i ServiceTaskSpecPlacementPlatformArray) ToServiceTaskSpecPlacementPlatformArrayOutput() ServiceTaskSpecPlacementPlatformArrayOutput {
	return i.ToServiceTaskSpecPlacementPlatformArrayOutputWithContext(context.Background())
}

func (i ServiceTaskSpecPlacementPlatformArray) ToServiceTaskSpecPlacementPlatformArrayOutputWithContext(ctx context.Context) ServiceTaskSpecPlacementPlatformArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecPlacementPlatformArrayOutput)
}

func (i ServiceTaskSpecPlacementPlatformArray) ToOutput(ctx context.Context) pulumix.Output[[]ServiceTaskSpecPlacementPlatform] {
	return pulumix.Output[[]ServiceTaskSpecPlacementPlatform]{
		OutputState: i.ToServiceTaskSpecPlacementPlatformArrayOutputWithContext(ctx).OutputState,
	}
}

type ServiceTaskSpecPlacementPlatformOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecPlacementPlatformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecPlacementPlatform)(nil)).Elem()
}

func (o ServiceTaskSpecPlacementPlatformOutput) ToServiceTaskSpecPlacementPlatformOutput() ServiceTaskSpecPlacementPlatformOutput {
	return o
}

func (o ServiceTaskSpecPlacementPlatformOutput) ToServiceTaskSpecPlacementPlatformOutputWithContext(ctx context.Context) ServiceTaskSpecPlacementPlatformOutput {
	return o
}

func (o ServiceTaskSpecPlacementPlatformOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecPlacementPlatform] {
	return pulumix.Output[ServiceTaskSpecPlacementPlatform]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecPlacementPlatformOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTaskSpecPlacementPlatform) string { return v.Architecture }).(pulumi.StringOutput)
}

func (o ServiceTaskSpecPlacementPlatformOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTaskSpecPlacementPlatform) string { return v.Os }).(pulumi.StringOutput)
}

type ServiceTaskSpecPlacementPlatformArrayOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecPlacementPlatformArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTaskSpecPlacementPlatform)(nil)).Elem()
}

func (o ServiceTaskSpecPlacementPlatformArrayOutput) ToServiceTaskSpecPlacementPlatformArrayOutput() ServiceTaskSpecPlacementPlatformArrayOutput {
	return o
}

func (o ServiceTaskSpecPlacementPlatformArrayOutput) ToServiceTaskSpecPlacementPlatformArrayOutputWithContext(ctx context.Context) ServiceTaskSpecPlacementPlatformArrayOutput {
	return o
}

func (o ServiceTaskSpecPlacementPlatformArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceTaskSpecPlacementPlatform] {
	return pulumix.Output[[]ServiceTaskSpecPlacementPlatform]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecPlacementPlatformArrayOutput) Index(i pulumi.IntInput) ServiceTaskSpecPlacementPlatformOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceTaskSpecPlacementPlatform {
		return vs[0].([]ServiceTaskSpecPlacementPlatform)[vs[1].(int)]
	}).(ServiceTaskSpecPlacementPlatformOutput)
}

type ServiceTaskSpecResources struct {
	Limits      *ServiceTaskSpecResourcesLimits      `pulumi:"limits"`
	Reservation *ServiceTaskSpecResourcesReservation `pulumi:"reservation"`
}

// ServiceTaskSpecResourcesInput is an input type that accepts ServiceTaskSpecResourcesArgs and ServiceTaskSpecResourcesOutput values.
// You can construct a concrete instance of `ServiceTaskSpecResourcesInput` via:
//
//	ServiceTaskSpecResourcesArgs{...}
type ServiceTaskSpecResourcesInput interface {
	pulumi.Input

	ToServiceTaskSpecResourcesOutput() ServiceTaskSpecResourcesOutput
	ToServiceTaskSpecResourcesOutputWithContext(context.Context) ServiceTaskSpecResourcesOutput
}

type ServiceTaskSpecResourcesArgs struct {
	Limits      ServiceTaskSpecResourcesLimitsPtrInput      `pulumi:"limits"`
	Reservation ServiceTaskSpecResourcesReservationPtrInput `pulumi:"reservation"`
}

func (ServiceTaskSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecResources)(nil)).Elem()
}

func (i ServiceTaskSpecResourcesArgs) ToServiceTaskSpecResourcesOutput() ServiceTaskSpecResourcesOutput {
	return i.ToServiceTaskSpecResourcesOutputWithContext(context.Background())
}

func (i ServiceTaskSpecResourcesArgs) ToServiceTaskSpecResourcesOutputWithContext(ctx context.Context) ServiceTaskSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecResourcesOutput)
}

func (i ServiceTaskSpecResourcesArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecResources] {
	return pulumix.Output[ServiceTaskSpecResources]{
		OutputState: i.ToServiceTaskSpecResourcesOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceTaskSpecResourcesArgs) ToServiceTaskSpecResourcesPtrOutput() ServiceTaskSpecResourcesPtrOutput {
	return i.ToServiceTaskSpecResourcesPtrOutputWithContext(context.Background())
}

func (i ServiceTaskSpecResourcesArgs) ToServiceTaskSpecResourcesPtrOutputWithContext(ctx context.Context) ServiceTaskSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecResourcesOutput).ToServiceTaskSpecResourcesPtrOutputWithContext(ctx)
}

// ServiceTaskSpecResourcesPtrInput is an input type that accepts ServiceTaskSpecResourcesArgs, ServiceTaskSpecResourcesPtr and ServiceTaskSpecResourcesPtrOutput values.
// You can construct a concrete instance of `ServiceTaskSpecResourcesPtrInput` via:
//
//	        ServiceTaskSpecResourcesArgs{...}
//
//	or:
//
//	        nil
type ServiceTaskSpecResourcesPtrInput interface {
	pulumi.Input

	ToServiceTaskSpecResourcesPtrOutput() ServiceTaskSpecResourcesPtrOutput
	ToServiceTaskSpecResourcesPtrOutputWithContext(context.Context) ServiceTaskSpecResourcesPtrOutput
}

type serviceTaskSpecResourcesPtrType ServiceTaskSpecResourcesArgs

func ServiceTaskSpecResourcesPtr(v *ServiceTaskSpecResourcesArgs) ServiceTaskSpecResourcesPtrInput {
	return (*serviceTaskSpecResourcesPtrType)(v)
}

func (*serviceTaskSpecResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecResources)(nil)).Elem()
}

func (i *serviceTaskSpecResourcesPtrType) ToServiceTaskSpecResourcesPtrOutput() ServiceTaskSpecResourcesPtrOutput {
	return i.ToServiceTaskSpecResourcesPtrOutputWithContext(context.Background())
}

func (i *serviceTaskSpecResourcesPtrType) ToServiceTaskSpecResourcesPtrOutputWithContext(ctx context.Context) ServiceTaskSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecResourcesPtrOutput)
}

func (i *serviceTaskSpecResourcesPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecResources] {
	return pulumix.Output[*ServiceTaskSpecResources]{
		OutputState: i.ToServiceTaskSpecResourcesPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceTaskSpecResourcesOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecResources)(nil)).Elem()
}

func (o ServiceTaskSpecResourcesOutput) ToServiceTaskSpecResourcesOutput() ServiceTaskSpecResourcesOutput {
	return o
}

func (o ServiceTaskSpecResourcesOutput) ToServiceTaskSpecResourcesOutputWithContext(ctx context.Context) ServiceTaskSpecResourcesOutput {
	return o
}

func (o ServiceTaskSpecResourcesOutput) ToServiceTaskSpecResourcesPtrOutput() ServiceTaskSpecResourcesPtrOutput {
	return o.ToServiceTaskSpecResourcesPtrOutputWithContext(context.Background())
}

func (o ServiceTaskSpecResourcesOutput) ToServiceTaskSpecResourcesPtrOutputWithContext(ctx context.Context) ServiceTaskSpecResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceTaskSpecResources) *ServiceTaskSpecResources {
		return &v
	}).(ServiceTaskSpecResourcesPtrOutput)
}

func (o ServiceTaskSpecResourcesOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecResources] {
	return pulumix.Output[ServiceTaskSpecResources]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecResourcesOutput) Limits() ServiceTaskSpecResourcesLimitsPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecResources) *ServiceTaskSpecResourcesLimits { return v.Limits }).(ServiceTaskSpecResourcesLimitsPtrOutput)
}

func (o ServiceTaskSpecResourcesOutput) Reservation() ServiceTaskSpecResourcesReservationPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecResources) *ServiceTaskSpecResourcesReservation { return v.Reservation }).(ServiceTaskSpecResourcesReservationPtrOutput)
}

type ServiceTaskSpecResourcesPtrOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecResources)(nil)).Elem()
}

func (o ServiceTaskSpecResourcesPtrOutput) ToServiceTaskSpecResourcesPtrOutput() ServiceTaskSpecResourcesPtrOutput {
	return o
}

func (o ServiceTaskSpecResourcesPtrOutput) ToServiceTaskSpecResourcesPtrOutputWithContext(ctx context.Context) ServiceTaskSpecResourcesPtrOutput {
	return o
}

func (o ServiceTaskSpecResourcesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecResources] {
	return pulumix.Output[*ServiceTaskSpecResources]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecResourcesPtrOutput) Elem() ServiceTaskSpecResourcesOutput {
	return o.ApplyT(func(v *ServiceTaskSpecResources) ServiceTaskSpecResources {
		if v != nil {
			return *v
		}
		var ret ServiceTaskSpecResources
		return ret
	}).(ServiceTaskSpecResourcesOutput)
}

func (o ServiceTaskSpecResourcesPtrOutput) Limits() ServiceTaskSpecResourcesLimitsPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecResources) *ServiceTaskSpecResourcesLimits {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(ServiceTaskSpecResourcesLimitsPtrOutput)
}

func (o ServiceTaskSpecResourcesPtrOutput) Reservation() ServiceTaskSpecResourcesReservationPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecResources) *ServiceTaskSpecResourcesReservation {
		if v == nil {
			return nil
		}
		return v.Reservation
	}).(ServiceTaskSpecResourcesReservationPtrOutput)
}

type ServiceTaskSpecResourcesLimits struct {
	MemoryBytes *int `pulumi:"memoryBytes"`
	NanoCpus    *int `pulumi:"nanoCpus"`
}

// ServiceTaskSpecResourcesLimitsInput is an input type that accepts ServiceTaskSpecResourcesLimitsArgs and ServiceTaskSpecResourcesLimitsOutput values.
// You can construct a concrete instance of `ServiceTaskSpecResourcesLimitsInput` via:
//
//	ServiceTaskSpecResourcesLimitsArgs{...}
type ServiceTaskSpecResourcesLimitsInput interface {
	pulumi.Input

	ToServiceTaskSpecResourcesLimitsOutput() ServiceTaskSpecResourcesLimitsOutput
	ToServiceTaskSpecResourcesLimitsOutputWithContext(context.Context) ServiceTaskSpecResourcesLimitsOutput
}

type ServiceTaskSpecResourcesLimitsArgs struct {
	MemoryBytes pulumi.IntPtrInput `pulumi:"memoryBytes"`
	NanoCpus    pulumi.IntPtrInput `pulumi:"nanoCpus"`
}

func (ServiceTaskSpecResourcesLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecResourcesLimits)(nil)).Elem()
}

func (i ServiceTaskSpecResourcesLimitsArgs) ToServiceTaskSpecResourcesLimitsOutput() ServiceTaskSpecResourcesLimitsOutput {
	return i.ToServiceTaskSpecResourcesLimitsOutputWithContext(context.Background())
}

func (i ServiceTaskSpecResourcesLimitsArgs) ToServiceTaskSpecResourcesLimitsOutputWithContext(ctx context.Context) ServiceTaskSpecResourcesLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecResourcesLimitsOutput)
}

func (i ServiceTaskSpecResourcesLimitsArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecResourcesLimits] {
	return pulumix.Output[ServiceTaskSpecResourcesLimits]{
		OutputState: i.ToServiceTaskSpecResourcesLimitsOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceTaskSpecResourcesLimitsArgs) ToServiceTaskSpecResourcesLimitsPtrOutput() ServiceTaskSpecResourcesLimitsPtrOutput {
	return i.ToServiceTaskSpecResourcesLimitsPtrOutputWithContext(context.Background())
}

func (i ServiceTaskSpecResourcesLimitsArgs) ToServiceTaskSpecResourcesLimitsPtrOutputWithContext(ctx context.Context) ServiceTaskSpecResourcesLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecResourcesLimitsOutput).ToServiceTaskSpecResourcesLimitsPtrOutputWithContext(ctx)
}

// ServiceTaskSpecResourcesLimitsPtrInput is an input type that accepts ServiceTaskSpecResourcesLimitsArgs, ServiceTaskSpecResourcesLimitsPtr and ServiceTaskSpecResourcesLimitsPtrOutput values.
// You can construct a concrete instance of `ServiceTaskSpecResourcesLimitsPtrInput` via:
//
//	        ServiceTaskSpecResourcesLimitsArgs{...}
//
//	or:
//
//	        nil
type ServiceTaskSpecResourcesLimitsPtrInput interface {
	pulumi.Input

	ToServiceTaskSpecResourcesLimitsPtrOutput() ServiceTaskSpecResourcesLimitsPtrOutput
	ToServiceTaskSpecResourcesLimitsPtrOutputWithContext(context.Context) ServiceTaskSpecResourcesLimitsPtrOutput
}

type serviceTaskSpecResourcesLimitsPtrType ServiceTaskSpecResourcesLimitsArgs

func ServiceTaskSpecResourcesLimitsPtr(v *ServiceTaskSpecResourcesLimitsArgs) ServiceTaskSpecResourcesLimitsPtrInput {
	return (*serviceTaskSpecResourcesLimitsPtrType)(v)
}

func (*serviceTaskSpecResourcesLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecResourcesLimits)(nil)).Elem()
}

func (i *serviceTaskSpecResourcesLimitsPtrType) ToServiceTaskSpecResourcesLimitsPtrOutput() ServiceTaskSpecResourcesLimitsPtrOutput {
	return i.ToServiceTaskSpecResourcesLimitsPtrOutputWithContext(context.Background())
}

func (i *serviceTaskSpecResourcesLimitsPtrType) ToServiceTaskSpecResourcesLimitsPtrOutputWithContext(ctx context.Context) ServiceTaskSpecResourcesLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecResourcesLimitsPtrOutput)
}

func (i *serviceTaskSpecResourcesLimitsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecResourcesLimits] {
	return pulumix.Output[*ServiceTaskSpecResourcesLimits]{
		OutputState: i.ToServiceTaskSpecResourcesLimitsPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceTaskSpecResourcesLimitsOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecResourcesLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecResourcesLimits)(nil)).Elem()
}

func (o ServiceTaskSpecResourcesLimitsOutput) ToServiceTaskSpecResourcesLimitsOutput() ServiceTaskSpecResourcesLimitsOutput {
	return o
}

func (o ServiceTaskSpecResourcesLimitsOutput) ToServiceTaskSpecResourcesLimitsOutputWithContext(ctx context.Context) ServiceTaskSpecResourcesLimitsOutput {
	return o
}

func (o ServiceTaskSpecResourcesLimitsOutput) ToServiceTaskSpecResourcesLimitsPtrOutput() ServiceTaskSpecResourcesLimitsPtrOutput {
	return o.ToServiceTaskSpecResourcesLimitsPtrOutputWithContext(context.Background())
}

func (o ServiceTaskSpecResourcesLimitsOutput) ToServiceTaskSpecResourcesLimitsPtrOutputWithContext(ctx context.Context) ServiceTaskSpecResourcesLimitsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceTaskSpecResourcesLimits) *ServiceTaskSpecResourcesLimits {
		return &v
	}).(ServiceTaskSpecResourcesLimitsPtrOutput)
}

func (o ServiceTaskSpecResourcesLimitsOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecResourcesLimits] {
	return pulumix.Output[ServiceTaskSpecResourcesLimits]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecResourcesLimitsOutput) MemoryBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecResourcesLimits) *int { return v.MemoryBytes }).(pulumi.IntPtrOutput)
}

func (o ServiceTaskSpecResourcesLimitsOutput) NanoCpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecResourcesLimits) *int { return v.NanoCpus }).(pulumi.IntPtrOutput)
}

type ServiceTaskSpecResourcesLimitsPtrOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecResourcesLimitsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecResourcesLimits)(nil)).Elem()
}

func (o ServiceTaskSpecResourcesLimitsPtrOutput) ToServiceTaskSpecResourcesLimitsPtrOutput() ServiceTaskSpecResourcesLimitsPtrOutput {
	return o
}

func (o ServiceTaskSpecResourcesLimitsPtrOutput) ToServiceTaskSpecResourcesLimitsPtrOutputWithContext(ctx context.Context) ServiceTaskSpecResourcesLimitsPtrOutput {
	return o
}

func (o ServiceTaskSpecResourcesLimitsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecResourcesLimits] {
	return pulumix.Output[*ServiceTaskSpecResourcesLimits]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecResourcesLimitsPtrOutput) Elem() ServiceTaskSpecResourcesLimitsOutput {
	return o.ApplyT(func(v *ServiceTaskSpecResourcesLimits) ServiceTaskSpecResourcesLimits {
		if v != nil {
			return *v
		}
		var ret ServiceTaskSpecResourcesLimits
		return ret
	}).(ServiceTaskSpecResourcesLimitsOutput)
}

func (o ServiceTaskSpecResourcesLimitsPtrOutput) MemoryBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecResourcesLimits) *int {
		if v == nil {
			return nil
		}
		return v.MemoryBytes
	}).(pulumi.IntPtrOutput)
}

func (o ServiceTaskSpecResourcesLimitsPtrOutput) NanoCpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecResourcesLimits) *int {
		if v == nil {
			return nil
		}
		return v.NanoCpus
	}).(pulumi.IntPtrOutput)
}

type ServiceTaskSpecResourcesReservation struct {
	GenericResources *ServiceTaskSpecResourcesReservationGenericResources `pulumi:"genericResources"`
	MemoryBytes      *int                                                 `pulumi:"memoryBytes"`
	NanoCpus         *int                                                 `pulumi:"nanoCpus"`
}

// ServiceTaskSpecResourcesReservationInput is an input type that accepts ServiceTaskSpecResourcesReservationArgs and ServiceTaskSpecResourcesReservationOutput values.
// You can construct a concrete instance of `ServiceTaskSpecResourcesReservationInput` via:
//
//	ServiceTaskSpecResourcesReservationArgs{...}
type ServiceTaskSpecResourcesReservationInput interface {
	pulumi.Input

	ToServiceTaskSpecResourcesReservationOutput() ServiceTaskSpecResourcesReservationOutput
	ToServiceTaskSpecResourcesReservationOutputWithContext(context.Context) ServiceTaskSpecResourcesReservationOutput
}

type ServiceTaskSpecResourcesReservationArgs struct {
	GenericResources ServiceTaskSpecResourcesReservationGenericResourcesPtrInput `pulumi:"genericResources"`
	MemoryBytes      pulumi.IntPtrInput                                          `pulumi:"memoryBytes"`
	NanoCpus         pulumi.IntPtrInput                                          `pulumi:"nanoCpus"`
}

func (ServiceTaskSpecResourcesReservationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecResourcesReservation)(nil)).Elem()
}

func (i ServiceTaskSpecResourcesReservationArgs) ToServiceTaskSpecResourcesReservationOutput() ServiceTaskSpecResourcesReservationOutput {
	return i.ToServiceTaskSpecResourcesReservationOutputWithContext(context.Background())
}

func (i ServiceTaskSpecResourcesReservationArgs) ToServiceTaskSpecResourcesReservationOutputWithContext(ctx context.Context) ServiceTaskSpecResourcesReservationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecResourcesReservationOutput)
}

func (i ServiceTaskSpecResourcesReservationArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecResourcesReservation] {
	return pulumix.Output[ServiceTaskSpecResourcesReservation]{
		OutputState: i.ToServiceTaskSpecResourcesReservationOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceTaskSpecResourcesReservationArgs) ToServiceTaskSpecResourcesReservationPtrOutput() ServiceTaskSpecResourcesReservationPtrOutput {
	return i.ToServiceTaskSpecResourcesReservationPtrOutputWithContext(context.Background())
}

func (i ServiceTaskSpecResourcesReservationArgs) ToServiceTaskSpecResourcesReservationPtrOutputWithContext(ctx context.Context) ServiceTaskSpecResourcesReservationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecResourcesReservationOutput).ToServiceTaskSpecResourcesReservationPtrOutputWithContext(ctx)
}

// ServiceTaskSpecResourcesReservationPtrInput is an input type that accepts ServiceTaskSpecResourcesReservationArgs, ServiceTaskSpecResourcesReservationPtr and ServiceTaskSpecResourcesReservationPtrOutput values.
// You can construct a concrete instance of `ServiceTaskSpecResourcesReservationPtrInput` via:
//
//	        ServiceTaskSpecResourcesReservationArgs{...}
//
//	or:
//
//	        nil
type ServiceTaskSpecResourcesReservationPtrInput interface {
	pulumi.Input

	ToServiceTaskSpecResourcesReservationPtrOutput() ServiceTaskSpecResourcesReservationPtrOutput
	ToServiceTaskSpecResourcesReservationPtrOutputWithContext(context.Context) ServiceTaskSpecResourcesReservationPtrOutput
}

type serviceTaskSpecResourcesReservationPtrType ServiceTaskSpecResourcesReservationArgs

func ServiceTaskSpecResourcesReservationPtr(v *ServiceTaskSpecResourcesReservationArgs) ServiceTaskSpecResourcesReservationPtrInput {
	return (*serviceTaskSpecResourcesReservationPtrType)(v)
}

func (*serviceTaskSpecResourcesReservationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecResourcesReservation)(nil)).Elem()
}

func (i *serviceTaskSpecResourcesReservationPtrType) ToServiceTaskSpecResourcesReservationPtrOutput() ServiceTaskSpecResourcesReservationPtrOutput {
	return i.ToServiceTaskSpecResourcesReservationPtrOutputWithContext(context.Background())
}

func (i *serviceTaskSpecResourcesReservationPtrType) ToServiceTaskSpecResourcesReservationPtrOutputWithContext(ctx context.Context) ServiceTaskSpecResourcesReservationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecResourcesReservationPtrOutput)
}

func (i *serviceTaskSpecResourcesReservationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecResourcesReservation] {
	return pulumix.Output[*ServiceTaskSpecResourcesReservation]{
		OutputState: i.ToServiceTaskSpecResourcesReservationPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceTaskSpecResourcesReservationOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecResourcesReservationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecResourcesReservation)(nil)).Elem()
}

func (o ServiceTaskSpecResourcesReservationOutput) ToServiceTaskSpecResourcesReservationOutput() ServiceTaskSpecResourcesReservationOutput {
	return o
}

func (o ServiceTaskSpecResourcesReservationOutput) ToServiceTaskSpecResourcesReservationOutputWithContext(ctx context.Context) ServiceTaskSpecResourcesReservationOutput {
	return o
}

func (o ServiceTaskSpecResourcesReservationOutput) ToServiceTaskSpecResourcesReservationPtrOutput() ServiceTaskSpecResourcesReservationPtrOutput {
	return o.ToServiceTaskSpecResourcesReservationPtrOutputWithContext(context.Background())
}

func (o ServiceTaskSpecResourcesReservationOutput) ToServiceTaskSpecResourcesReservationPtrOutputWithContext(ctx context.Context) ServiceTaskSpecResourcesReservationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceTaskSpecResourcesReservation) *ServiceTaskSpecResourcesReservation {
		return &v
	}).(ServiceTaskSpecResourcesReservationPtrOutput)
}

func (o ServiceTaskSpecResourcesReservationOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecResourcesReservation] {
	return pulumix.Output[ServiceTaskSpecResourcesReservation]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecResourcesReservationOutput) GenericResources() ServiceTaskSpecResourcesReservationGenericResourcesPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecResourcesReservation) *ServiceTaskSpecResourcesReservationGenericResources {
		return v.GenericResources
	}).(ServiceTaskSpecResourcesReservationGenericResourcesPtrOutput)
}

func (o ServiceTaskSpecResourcesReservationOutput) MemoryBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecResourcesReservation) *int { return v.MemoryBytes }).(pulumi.IntPtrOutput)
}

func (o ServiceTaskSpecResourcesReservationOutput) NanoCpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecResourcesReservation) *int { return v.NanoCpus }).(pulumi.IntPtrOutput)
}

type ServiceTaskSpecResourcesReservationPtrOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecResourcesReservationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecResourcesReservation)(nil)).Elem()
}

func (o ServiceTaskSpecResourcesReservationPtrOutput) ToServiceTaskSpecResourcesReservationPtrOutput() ServiceTaskSpecResourcesReservationPtrOutput {
	return o
}

func (o ServiceTaskSpecResourcesReservationPtrOutput) ToServiceTaskSpecResourcesReservationPtrOutputWithContext(ctx context.Context) ServiceTaskSpecResourcesReservationPtrOutput {
	return o
}

func (o ServiceTaskSpecResourcesReservationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecResourcesReservation] {
	return pulumix.Output[*ServiceTaskSpecResourcesReservation]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecResourcesReservationPtrOutput) Elem() ServiceTaskSpecResourcesReservationOutput {
	return o.ApplyT(func(v *ServiceTaskSpecResourcesReservation) ServiceTaskSpecResourcesReservation {
		if v != nil {
			return *v
		}
		var ret ServiceTaskSpecResourcesReservation
		return ret
	}).(ServiceTaskSpecResourcesReservationOutput)
}

func (o ServiceTaskSpecResourcesReservationPtrOutput) GenericResources() ServiceTaskSpecResourcesReservationGenericResourcesPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecResourcesReservation) *ServiceTaskSpecResourcesReservationGenericResources {
		if v == nil {
			return nil
		}
		return v.GenericResources
	}).(ServiceTaskSpecResourcesReservationGenericResourcesPtrOutput)
}

func (o ServiceTaskSpecResourcesReservationPtrOutput) MemoryBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecResourcesReservation) *int {
		if v == nil {
			return nil
		}
		return v.MemoryBytes
	}).(pulumi.IntPtrOutput)
}

func (o ServiceTaskSpecResourcesReservationPtrOutput) NanoCpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecResourcesReservation) *int {
		if v == nil {
			return nil
		}
		return v.NanoCpus
	}).(pulumi.IntPtrOutput)
}

type ServiceTaskSpecResourcesReservationGenericResources struct {
	DiscreteResourcesSpecs []string `pulumi:"discreteResourcesSpecs"`
	NamedResourcesSpecs    []string `pulumi:"namedResourcesSpecs"`
}

// ServiceTaskSpecResourcesReservationGenericResourcesInput is an input type that accepts ServiceTaskSpecResourcesReservationGenericResourcesArgs and ServiceTaskSpecResourcesReservationGenericResourcesOutput values.
// You can construct a concrete instance of `ServiceTaskSpecResourcesReservationGenericResourcesInput` via:
//
//	ServiceTaskSpecResourcesReservationGenericResourcesArgs{...}
type ServiceTaskSpecResourcesReservationGenericResourcesInput interface {
	pulumi.Input

	ToServiceTaskSpecResourcesReservationGenericResourcesOutput() ServiceTaskSpecResourcesReservationGenericResourcesOutput
	ToServiceTaskSpecResourcesReservationGenericResourcesOutputWithContext(context.Context) ServiceTaskSpecResourcesReservationGenericResourcesOutput
}

type ServiceTaskSpecResourcesReservationGenericResourcesArgs struct {
	DiscreteResourcesSpecs pulumi.StringArrayInput `pulumi:"discreteResourcesSpecs"`
	NamedResourcesSpecs    pulumi.StringArrayInput `pulumi:"namedResourcesSpecs"`
}

func (ServiceTaskSpecResourcesReservationGenericResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecResourcesReservationGenericResources)(nil)).Elem()
}

func (i ServiceTaskSpecResourcesReservationGenericResourcesArgs) ToServiceTaskSpecResourcesReservationGenericResourcesOutput() ServiceTaskSpecResourcesReservationGenericResourcesOutput {
	return i.ToServiceTaskSpecResourcesReservationGenericResourcesOutputWithContext(context.Background())
}

func (i ServiceTaskSpecResourcesReservationGenericResourcesArgs) ToServiceTaskSpecResourcesReservationGenericResourcesOutputWithContext(ctx context.Context) ServiceTaskSpecResourcesReservationGenericResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecResourcesReservationGenericResourcesOutput)
}

func (i ServiceTaskSpecResourcesReservationGenericResourcesArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecResourcesReservationGenericResources] {
	return pulumix.Output[ServiceTaskSpecResourcesReservationGenericResources]{
		OutputState: i.ToServiceTaskSpecResourcesReservationGenericResourcesOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceTaskSpecResourcesReservationGenericResourcesArgs) ToServiceTaskSpecResourcesReservationGenericResourcesPtrOutput() ServiceTaskSpecResourcesReservationGenericResourcesPtrOutput {
	return i.ToServiceTaskSpecResourcesReservationGenericResourcesPtrOutputWithContext(context.Background())
}

func (i ServiceTaskSpecResourcesReservationGenericResourcesArgs) ToServiceTaskSpecResourcesReservationGenericResourcesPtrOutputWithContext(ctx context.Context) ServiceTaskSpecResourcesReservationGenericResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecResourcesReservationGenericResourcesOutput).ToServiceTaskSpecResourcesReservationGenericResourcesPtrOutputWithContext(ctx)
}

// ServiceTaskSpecResourcesReservationGenericResourcesPtrInput is an input type that accepts ServiceTaskSpecResourcesReservationGenericResourcesArgs, ServiceTaskSpecResourcesReservationGenericResourcesPtr and ServiceTaskSpecResourcesReservationGenericResourcesPtrOutput values.
// You can construct a concrete instance of `ServiceTaskSpecResourcesReservationGenericResourcesPtrInput` via:
//
//	        ServiceTaskSpecResourcesReservationGenericResourcesArgs{...}
//
//	or:
//
//	        nil
type ServiceTaskSpecResourcesReservationGenericResourcesPtrInput interface {
	pulumi.Input

	ToServiceTaskSpecResourcesReservationGenericResourcesPtrOutput() ServiceTaskSpecResourcesReservationGenericResourcesPtrOutput
	ToServiceTaskSpecResourcesReservationGenericResourcesPtrOutputWithContext(context.Context) ServiceTaskSpecResourcesReservationGenericResourcesPtrOutput
}

type serviceTaskSpecResourcesReservationGenericResourcesPtrType ServiceTaskSpecResourcesReservationGenericResourcesArgs

func ServiceTaskSpecResourcesReservationGenericResourcesPtr(v *ServiceTaskSpecResourcesReservationGenericResourcesArgs) ServiceTaskSpecResourcesReservationGenericResourcesPtrInput {
	return (*serviceTaskSpecResourcesReservationGenericResourcesPtrType)(v)
}

func (*serviceTaskSpecResourcesReservationGenericResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecResourcesReservationGenericResources)(nil)).Elem()
}

func (i *serviceTaskSpecResourcesReservationGenericResourcesPtrType) ToServiceTaskSpecResourcesReservationGenericResourcesPtrOutput() ServiceTaskSpecResourcesReservationGenericResourcesPtrOutput {
	return i.ToServiceTaskSpecResourcesReservationGenericResourcesPtrOutputWithContext(context.Background())
}

func (i *serviceTaskSpecResourcesReservationGenericResourcesPtrType) ToServiceTaskSpecResourcesReservationGenericResourcesPtrOutputWithContext(ctx context.Context) ServiceTaskSpecResourcesReservationGenericResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecResourcesReservationGenericResourcesPtrOutput)
}

func (i *serviceTaskSpecResourcesReservationGenericResourcesPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecResourcesReservationGenericResources] {
	return pulumix.Output[*ServiceTaskSpecResourcesReservationGenericResources]{
		OutputState: i.ToServiceTaskSpecResourcesReservationGenericResourcesPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceTaskSpecResourcesReservationGenericResourcesOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecResourcesReservationGenericResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecResourcesReservationGenericResources)(nil)).Elem()
}

func (o ServiceTaskSpecResourcesReservationGenericResourcesOutput) ToServiceTaskSpecResourcesReservationGenericResourcesOutput() ServiceTaskSpecResourcesReservationGenericResourcesOutput {
	return o
}

func (o ServiceTaskSpecResourcesReservationGenericResourcesOutput) ToServiceTaskSpecResourcesReservationGenericResourcesOutputWithContext(ctx context.Context) ServiceTaskSpecResourcesReservationGenericResourcesOutput {
	return o
}

func (o ServiceTaskSpecResourcesReservationGenericResourcesOutput) ToServiceTaskSpecResourcesReservationGenericResourcesPtrOutput() ServiceTaskSpecResourcesReservationGenericResourcesPtrOutput {
	return o.ToServiceTaskSpecResourcesReservationGenericResourcesPtrOutputWithContext(context.Background())
}

func (o ServiceTaskSpecResourcesReservationGenericResourcesOutput) ToServiceTaskSpecResourcesReservationGenericResourcesPtrOutputWithContext(ctx context.Context) ServiceTaskSpecResourcesReservationGenericResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceTaskSpecResourcesReservationGenericResources) *ServiceTaskSpecResourcesReservationGenericResources {
		return &v
	}).(ServiceTaskSpecResourcesReservationGenericResourcesPtrOutput)
}

func (o ServiceTaskSpecResourcesReservationGenericResourcesOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecResourcesReservationGenericResources] {
	return pulumix.Output[ServiceTaskSpecResourcesReservationGenericResources]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecResourcesReservationGenericResourcesOutput) DiscreteResourcesSpecs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceTaskSpecResourcesReservationGenericResources) []string { return v.DiscreteResourcesSpecs }).(pulumi.StringArrayOutput)
}

func (o ServiceTaskSpecResourcesReservationGenericResourcesOutput) NamedResourcesSpecs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceTaskSpecResourcesReservationGenericResources) []string { return v.NamedResourcesSpecs }).(pulumi.StringArrayOutput)
}

type ServiceTaskSpecResourcesReservationGenericResourcesPtrOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecResourcesReservationGenericResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecResourcesReservationGenericResources)(nil)).Elem()
}

func (o ServiceTaskSpecResourcesReservationGenericResourcesPtrOutput) ToServiceTaskSpecResourcesReservationGenericResourcesPtrOutput() ServiceTaskSpecResourcesReservationGenericResourcesPtrOutput {
	return o
}

func (o ServiceTaskSpecResourcesReservationGenericResourcesPtrOutput) ToServiceTaskSpecResourcesReservationGenericResourcesPtrOutputWithContext(ctx context.Context) ServiceTaskSpecResourcesReservationGenericResourcesPtrOutput {
	return o
}

func (o ServiceTaskSpecResourcesReservationGenericResourcesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecResourcesReservationGenericResources] {
	return pulumix.Output[*ServiceTaskSpecResourcesReservationGenericResources]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecResourcesReservationGenericResourcesPtrOutput) Elem() ServiceTaskSpecResourcesReservationGenericResourcesOutput {
	return o.ApplyT(func(v *ServiceTaskSpecResourcesReservationGenericResources) ServiceTaskSpecResourcesReservationGenericResources {
		if v != nil {
			return *v
		}
		var ret ServiceTaskSpecResourcesReservationGenericResources
		return ret
	}).(ServiceTaskSpecResourcesReservationGenericResourcesOutput)
}

func (o ServiceTaskSpecResourcesReservationGenericResourcesPtrOutput) DiscreteResourcesSpecs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceTaskSpecResourcesReservationGenericResources) []string {
		if v == nil {
			return nil
		}
		return v.DiscreteResourcesSpecs
	}).(pulumi.StringArrayOutput)
}

func (o ServiceTaskSpecResourcesReservationGenericResourcesPtrOutput) NamedResourcesSpecs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceTaskSpecResourcesReservationGenericResources) []string {
		if v == nil {
			return nil
		}
		return v.NamedResourcesSpecs
	}).(pulumi.StringArrayOutput)
}

type ServiceTaskSpecRestartPolicy struct {
	Condition   *string `pulumi:"condition"`
	Delay       *string `pulumi:"delay"`
	MaxAttempts *int    `pulumi:"maxAttempts"`
	Window      *string `pulumi:"window"`
}

// ServiceTaskSpecRestartPolicyInput is an input type that accepts ServiceTaskSpecRestartPolicyArgs and ServiceTaskSpecRestartPolicyOutput values.
// You can construct a concrete instance of `ServiceTaskSpecRestartPolicyInput` via:
//
//	ServiceTaskSpecRestartPolicyArgs{...}
type ServiceTaskSpecRestartPolicyInput interface {
	pulumi.Input

	ToServiceTaskSpecRestartPolicyOutput() ServiceTaskSpecRestartPolicyOutput
	ToServiceTaskSpecRestartPolicyOutputWithContext(context.Context) ServiceTaskSpecRestartPolicyOutput
}

type ServiceTaskSpecRestartPolicyArgs struct {
	Condition   pulumi.StringPtrInput `pulumi:"condition"`
	Delay       pulumi.StringPtrInput `pulumi:"delay"`
	MaxAttempts pulumi.IntPtrInput    `pulumi:"maxAttempts"`
	Window      pulumi.StringPtrInput `pulumi:"window"`
}

func (ServiceTaskSpecRestartPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecRestartPolicy)(nil)).Elem()
}

func (i ServiceTaskSpecRestartPolicyArgs) ToServiceTaskSpecRestartPolicyOutput() ServiceTaskSpecRestartPolicyOutput {
	return i.ToServiceTaskSpecRestartPolicyOutputWithContext(context.Background())
}

func (i ServiceTaskSpecRestartPolicyArgs) ToServiceTaskSpecRestartPolicyOutputWithContext(ctx context.Context) ServiceTaskSpecRestartPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecRestartPolicyOutput)
}

func (i ServiceTaskSpecRestartPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecRestartPolicy] {
	return pulumix.Output[ServiceTaskSpecRestartPolicy]{
		OutputState: i.ToServiceTaskSpecRestartPolicyOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceTaskSpecRestartPolicyArgs) ToServiceTaskSpecRestartPolicyPtrOutput() ServiceTaskSpecRestartPolicyPtrOutput {
	return i.ToServiceTaskSpecRestartPolicyPtrOutputWithContext(context.Background())
}

func (i ServiceTaskSpecRestartPolicyArgs) ToServiceTaskSpecRestartPolicyPtrOutputWithContext(ctx context.Context) ServiceTaskSpecRestartPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecRestartPolicyOutput).ToServiceTaskSpecRestartPolicyPtrOutputWithContext(ctx)
}

// ServiceTaskSpecRestartPolicyPtrInput is an input type that accepts ServiceTaskSpecRestartPolicyArgs, ServiceTaskSpecRestartPolicyPtr and ServiceTaskSpecRestartPolicyPtrOutput values.
// You can construct a concrete instance of `ServiceTaskSpecRestartPolicyPtrInput` via:
//
//	        ServiceTaskSpecRestartPolicyArgs{...}
//
//	or:
//
//	        nil
type ServiceTaskSpecRestartPolicyPtrInput interface {
	pulumi.Input

	ToServiceTaskSpecRestartPolicyPtrOutput() ServiceTaskSpecRestartPolicyPtrOutput
	ToServiceTaskSpecRestartPolicyPtrOutputWithContext(context.Context) ServiceTaskSpecRestartPolicyPtrOutput
}

type serviceTaskSpecRestartPolicyPtrType ServiceTaskSpecRestartPolicyArgs

func ServiceTaskSpecRestartPolicyPtr(v *ServiceTaskSpecRestartPolicyArgs) ServiceTaskSpecRestartPolicyPtrInput {
	return (*serviceTaskSpecRestartPolicyPtrType)(v)
}

func (*serviceTaskSpecRestartPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecRestartPolicy)(nil)).Elem()
}

func (i *serviceTaskSpecRestartPolicyPtrType) ToServiceTaskSpecRestartPolicyPtrOutput() ServiceTaskSpecRestartPolicyPtrOutput {
	return i.ToServiceTaskSpecRestartPolicyPtrOutputWithContext(context.Background())
}

func (i *serviceTaskSpecRestartPolicyPtrType) ToServiceTaskSpecRestartPolicyPtrOutputWithContext(ctx context.Context) ServiceTaskSpecRestartPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTaskSpecRestartPolicyPtrOutput)
}

func (i *serviceTaskSpecRestartPolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecRestartPolicy] {
	return pulumix.Output[*ServiceTaskSpecRestartPolicy]{
		OutputState: i.ToServiceTaskSpecRestartPolicyPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceTaskSpecRestartPolicyOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecRestartPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTaskSpecRestartPolicy)(nil)).Elem()
}

func (o ServiceTaskSpecRestartPolicyOutput) ToServiceTaskSpecRestartPolicyOutput() ServiceTaskSpecRestartPolicyOutput {
	return o
}

func (o ServiceTaskSpecRestartPolicyOutput) ToServiceTaskSpecRestartPolicyOutputWithContext(ctx context.Context) ServiceTaskSpecRestartPolicyOutput {
	return o
}

func (o ServiceTaskSpecRestartPolicyOutput) ToServiceTaskSpecRestartPolicyPtrOutput() ServiceTaskSpecRestartPolicyPtrOutput {
	return o.ToServiceTaskSpecRestartPolicyPtrOutputWithContext(context.Background())
}

func (o ServiceTaskSpecRestartPolicyOutput) ToServiceTaskSpecRestartPolicyPtrOutputWithContext(ctx context.Context) ServiceTaskSpecRestartPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceTaskSpecRestartPolicy) *ServiceTaskSpecRestartPolicy {
		return &v
	}).(ServiceTaskSpecRestartPolicyPtrOutput)
}

func (o ServiceTaskSpecRestartPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTaskSpecRestartPolicy] {
	return pulumix.Output[ServiceTaskSpecRestartPolicy]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecRestartPolicyOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecRestartPolicy) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecRestartPolicyOutput) Delay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecRestartPolicy) *string { return v.Delay }).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecRestartPolicyOutput) MaxAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecRestartPolicy) *int { return v.MaxAttempts }).(pulumi.IntPtrOutput)
}

func (o ServiceTaskSpecRestartPolicyOutput) Window() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTaskSpecRestartPolicy) *string { return v.Window }).(pulumi.StringPtrOutput)
}

type ServiceTaskSpecRestartPolicyPtrOutput struct{ *pulumi.OutputState }

func (ServiceTaskSpecRestartPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTaskSpecRestartPolicy)(nil)).Elem()
}

func (o ServiceTaskSpecRestartPolicyPtrOutput) ToServiceTaskSpecRestartPolicyPtrOutput() ServiceTaskSpecRestartPolicyPtrOutput {
	return o
}

func (o ServiceTaskSpecRestartPolicyPtrOutput) ToServiceTaskSpecRestartPolicyPtrOutputWithContext(ctx context.Context) ServiceTaskSpecRestartPolicyPtrOutput {
	return o
}

func (o ServiceTaskSpecRestartPolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceTaskSpecRestartPolicy] {
	return pulumix.Output[*ServiceTaskSpecRestartPolicy]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTaskSpecRestartPolicyPtrOutput) Elem() ServiceTaskSpecRestartPolicyOutput {
	return o.ApplyT(func(v *ServiceTaskSpecRestartPolicy) ServiceTaskSpecRestartPolicy {
		if v != nil {
			return *v
		}
		var ret ServiceTaskSpecRestartPolicy
		return ret
	}).(ServiceTaskSpecRestartPolicyOutput)
}

func (o ServiceTaskSpecRestartPolicyPtrOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecRestartPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Condition
	}).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecRestartPolicyPtrOutput) Delay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecRestartPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Delay
	}).(pulumi.StringPtrOutput)
}

func (o ServiceTaskSpecRestartPolicyPtrOutput) MaxAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecRestartPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxAttempts
	}).(pulumi.IntPtrOutput)
}

func (o ServiceTaskSpecRestartPolicyPtrOutput) Window() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTaskSpecRestartPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Window
	}).(pulumi.StringPtrOutput)
}

type ServiceUpdateConfig struct {
	// Delay between task updates `(ns|us|ms|s|m|h)`. Defaults to `0s`.
	Delay *string `pulumi:"delay"`
	// Action on update failure: `pause`, `continue` or `rollback`. Defaults to `pause`.
	FailureAction *string `pulumi:"failureAction"`
	// Failure rate to tolerate during an update. Defaults to `0.0`.
	MaxFailureRatio *string `pulumi:"maxFailureRatio"`
	// Duration after each task update to monitor for failure (ns|us|ms|s|m|h). Defaults to `5s`.
	Monitor *string `pulumi:"monitor"`
	// Update order: either 'stop-first' or 'start-first'. Defaults to `stop-first`.
	Order *string `pulumi:"order"`
	// Maximum number of tasks to be updated in one iteration. Defaults to `1`
	Parallelism *int `pulumi:"parallelism"`
}

// ServiceUpdateConfigInput is an input type that accepts ServiceUpdateConfigArgs and ServiceUpdateConfigOutput values.
// You can construct a concrete instance of `ServiceUpdateConfigInput` via:
//
//	ServiceUpdateConfigArgs{...}
type ServiceUpdateConfigInput interface {
	pulumi.Input

	ToServiceUpdateConfigOutput() ServiceUpdateConfigOutput
	ToServiceUpdateConfigOutputWithContext(context.Context) ServiceUpdateConfigOutput
}

type ServiceUpdateConfigArgs struct {
	// Delay between task updates `(ns|us|ms|s|m|h)`. Defaults to `0s`.
	Delay pulumi.StringPtrInput `pulumi:"delay"`
	// Action on update failure: `pause`, `continue` or `rollback`. Defaults to `pause`.
	FailureAction pulumi.StringPtrInput `pulumi:"failureAction"`
	// Failure rate to tolerate during an update. Defaults to `0.0`.
	MaxFailureRatio pulumi.StringPtrInput `pulumi:"maxFailureRatio"`
	// Duration after each task update to monitor for failure (ns|us|ms|s|m|h). Defaults to `5s`.
	Monitor pulumi.StringPtrInput `pulumi:"monitor"`
	// Update order: either 'stop-first' or 'start-first'. Defaults to `stop-first`.
	Order pulumi.StringPtrInput `pulumi:"order"`
	// Maximum number of tasks to be updated in one iteration. Defaults to `1`
	Parallelism pulumi.IntPtrInput `pulumi:"parallelism"`
}

func (ServiceUpdateConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceUpdateConfig)(nil)).Elem()
}

func (i ServiceUpdateConfigArgs) ToServiceUpdateConfigOutput() ServiceUpdateConfigOutput {
	return i.ToServiceUpdateConfigOutputWithContext(context.Background())
}

func (i ServiceUpdateConfigArgs) ToServiceUpdateConfigOutputWithContext(ctx context.Context) ServiceUpdateConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceUpdateConfigOutput)
}

func (i ServiceUpdateConfigArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceUpdateConfig] {
	return pulumix.Output[ServiceUpdateConfig]{
		OutputState: i.ToServiceUpdateConfigOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceUpdateConfigArgs) ToServiceUpdateConfigPtrOutput() ServiceUpdateConfigPtrOutput {
	return i.ToServiceUpdateConfigPtrOutputWithContext(context.Background())
}

func (i ServiceUpdateConfigArgs) ToServiceUpdateConfigPtrOutputWithContext(ctx context.Context) ServiceUpdateConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceUpdateConfigOutput).ToServiceUpdateConfigPtrOutputWithContext(ctx)
}

// ServiceUpdateConfigPtrInput is an input type that accepts ServiceUpdateConfigArgs, ServiceUpdateConfigPtr and ServiceUpdateConfigPtrOutput values.
// You can construct a concrete instance of `ServiceUpdateConfigPtrInput` via:
//
//	        ServiceUpdateConfigArgs{...}
//
//	or:
//
//	        nil
type ServiceUpdateConfigPtrInput interface {
	pulumi.Input

	ToServiceUpdateConfigPtrOutput() ServiceUpdateConfigPtrOutput
	ToServiceUpdateConfigPtrOutputWithContext(context.Context) ServiceUpdateConfigPtrOutput
}

type serviceUpdateConfigPtrType ServiceUpdateConfigArgs

func ServiceUpdateConfigPtr(v *ServiceUpdateConfigArgs) ServiceUpdateConfigPtrInput {
	return (*serviceUpdateConfigPtrType)(v)
}

func (*serviceUpdateConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceUpdateConfig)(nil)).Elem()
}

func (i *serviceUpdateConfigPtrType) ToServiceUpdateConfigPtrOutput() ServiceUpdateConfigPtrOutput {
	return i.ToServiceUpdateConfigPtrOutputWithContext(context.Background())
}

func (i *serviceUpdateConfigPtrType) ToServiceUpdateConfigPtrOutputWithContext(ctx context.Context) ServiceUpdateConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceUpdateConfigPtrOutput)
}

func (i *serviceUpdateConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceUpdateConfig] {
	return pulumix.Output[*ServiceUpdateConfig]{
		OutputState: i.ToServiceUpdateConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceUpdateConfigOutput struct{ *pulumi.OutputState }

func (ServiceUpdateConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceUpdateConfig)(nil)).Elem()
}

func (o ServiceUpdateConfigOutput) ToServiceUpdateConfigOutput() ServiceUpdateConfigOutput {
	return o
}

func (o ServiceUpdateConfigOutput) ToServiceUpdateConfigOutputWithContext(ctx context.Context) ServiceUpdateConfigOutput {
	return o
}

func (o ServiceUpdateConfigOutput) ToServiceUpdateConfigPtrOutput() ServiceUpdateConfigPtrOutput {
	return o.ToServiceUpdateConfigPtrOutputWithContext(context.Background())
}

func (o ServiceUpdateConfigOutput) ToServiceUpdateConfigPtrOutputWithContext(ctx context.Context) ServiceUpdateConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceUpdateConfig) *ServiceUpdateConfig {
		return &v
	}).(ServiceUpdateConfigPtrOutput)
}

func (o ServiceUpdateConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceUpdateConfig] {
	return pulumix.Output[ServiceUpdateConfig]{
		OutputState: o.OutputState,
	}
}

// Delay between task updates `(ns|us|ms|s|m|h)`. Defaults to `0s`.
func (o ServiceUpdateConfigOutput) Delay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceUpdateConfig) *string { return v.Delay }).(pulumi.StringPtrOutput)
}

// Action on update failure: `pause`, `continue` or `rollback`. Defaults to `pause`.
func (o ServiceUpdateConfigOutput) FailureAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceUpdateConfig) *string { return v.FailureAction }).(pulumi.StringPtrOutput)
}

// Failure rate to tolerate during an update. Defaults to `0.0`.
func (o ServiceUpdateConfigOutput) MaxFailureRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceUpdateConfig) *string { return v.MaxFailureRatio }).(pulumi.StringPtrOutput)
}

// Duration after each task update to monitor for failure (ns|us|ms|s|m|h). Defaults to `5s`.
func (o ServiceUpdateConfigOutput) Monitor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceUpdateConfig) *string { return v.Monitor }).(pulumi.StringPtrOutput)
}

// Update order: either 'stop-first' or 'start-first'. Defaults to `stop-first`.
func (o ServiceUpdateConfigOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceUpdateConfig) *string { return v.Order }).(pulumi.StringPtrOutput)
}

// Maximum number of tasks to be updated in one iteration. Defaults to `1`
func (o ServiceUpdateConfigOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceUpdateConfig) *int { return v.Parallelism }).(pulumi.IntPtrOutput)
}

type ServiceUpdateConfigPtrOutput struct{ *pulumi.OutputState }

func (ServiceUpdateConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceUpdateConfig)(nil)).Elem()
}

func (o ServiceUpdateConfigPtrOutput) ToServiceUpdateConfigPtrOutput() ServiceUpdateConfigPtrOutput {
	return o
}

func (o ServiceUpdateConfigPtrOutput) ToServiceUpdateConfigPtrOutputWithContext(ctx context.Context) ServiceUpdateConfigPtrOutput {
	return o
}

func (o ServiceUpdateConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceUpdateConfig] {
	return pulumix.Output[*ServiceUpdateConfig]{
		OutputState: o.OutputState,
	}
}

func (o ServiceUpdateConfigPtrOutput) Elem() ServiceUpdateConfigOutput {
	return o.ApplyT(func(v *ServiceUpdateConfig) ServiceUpdateConfig {
		if v != nil {
			return *v
		}
		var ret ServiceUpdateConfig
		return ret
	}).(ServiceUpdateConfigOutput)
}

// Delay between task updates `(ns|us|ms|s|m|h)`. Defaults to `0s`.
func (o ServiceUpdateConfigPtrOutput) Delay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceUpdateConfig) *string {
		if v == nil {
			return nil
		}
		return v.Delay
	}).(pulumi.StringPtrOutput)
}

// Action on update failure: `pause`, `continue` or `rollback`. Defaults to `pause`.
func (o ServiceUpdateConfigPtrOutput) FailureAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceUpdateConfig) *string {
		if v == nil {
			return nil
		}
		return v.FailureAction
	}).(pulumi.StringPtrOutput)
}

// Failure rate to tolerate during an update. Defaults to `0.0`.
func (o ServiceUpdateConfigPtrOutput) MaxFailureRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceUpdateConfig) *string {
		if v == nil {
			return nil
		}
		return v.MaxFailureRatio
	}).(pulumi.StringPtrOutput)
}

// Duration after each task update to monitor for failure (ns|us|ms|s|m|h). Defaults to `5s`.
func (o ServiceUpdateConfigPtrOutput) Monitor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceUpdateConfig) *string {
		if v == nil {
			return nil
		}
		return v.Monitor
	}).(pulumi.StringPtrOutput)
}

// Update order: either 'stop-first' or 'start-first'. Defaults to `stop-first`.
func (o ServiceUpdateConfigPtrOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceUpdateConfig) *string {
		if v == nil {
			return nil
		}
		return v.Order
	}).(pulumi.StringPtrOutput)
}

// Maximum number of tasks to be updated in one iteration. Defaults to `1`
func (o ServiceUpdateConfigPtrOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceUpdateConfig) *int {
		if v == nil {
			return nil
		}
		return v.Parallelism
	}).(pulumi.IntPtrOutput)
}

type VolumeLabel struct {
	// Name of the label
	Label string `pulumi:"label"`
	// Value of the label
	Value string `pulumi:"value"`
}

// VolumeLabelInput is an input type that accepts VolumeLabelArgs and VolumeLabelOutput values.
// You can construct a concrete instance of `VolumeLabelInput` via:
//
//	VolumeLabelArgs{...}
type VolumeLabelInput interface {
	pulumi.Input

	ToVolumeLabelOutput() VolumeLabelOutput
	ToVolumeLabelOutputWithContext(context.Context) VolumeLabelOutput
}

type VolumeLabelArgs struct {
	// Name of the label
	Label pulumi.StringInput `pulumi:"label"`
	// Value of the label
	Value pulumi.StringInput `pulumi:"value"`
}

func (VolumeLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeLabel)(nil)).Elem()
}

func (i VolumeLabelArgs) ToVolumeLabelOutput() VolumeLabelOutput {
	return i.ToVolumeLabelOutputWithContext(context.Background())
}

func (i VolumeLabelArgs) ToVolumeLabelOutputWithContext(ctx context.Context) VolumeLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeLabelOutput)
}

func (i VolumeLabelArgs) ToOutput(ctx context.Context) pulumix.Output[VolumeLabel] {
	return pulumix.Output[VolumeLabel]{
		OutputState: i.ToVolumeLabelOutputWithContext(ctx).OutputState,
	}
}

// VolumeLabelArrayInput is an input type that accepts VolumeLabelArray and VolumeLabelArrayOutput values.
// You can construct a concrete instance of `VolumeLabelArrayInput` via:
//
//	VolumeLabelArray{ VolumeLabelArgs{...} }
type VolumeLabelArrayInput interface {
	pulumi.Input

	ToVolumeLabelArrayOutput() VolumeLabelArrayOutput
	ToVolumeLabelArrayOutputWithContext(context.Context) VolumeLabelArrayOutput
}

type VolumeLabelArray []VolumeLabelInput

func (VolumeLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeLabel)(nil)).Elem()
}

func (i VolumeLabelArray) ToVolumeLabelArrayOutput() VolumeLabelArrayOutput {
	return i.ToVolumeLabelArrayOutputWithContext(context.Background())
}

func (i VolumeLabelArray) ToVolumeLabelArrayOutputWithContext(ctx context.Context) VolumeLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeLabelArrayOutput)
}

func (i VolumeLabelArray) ToOutput(ctx context.Context) pulumix.Output[[]VolumeLabel] {
	return pulumix.Output[[]VolumeLabel]{
		OutputState: i.ToVolumeLabelArrayOutputWithContext(ctx).OutputState,
	}
}

type VolumeLabelOutput struct{ *pulumi.OutputState }

func (VolumeLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeLabel)(nil)).Elem()
}

func (o VolumeLabelOutput) ToVolumeLabelOutput() VolumeLabelOutput {
	return o
}

func (o VolumeLabelOutput) ToVolumeLabelOutputWithContext(ctx context.Context) VolumeLabelOutput {
	return o
}

func (o VolumeLabelOutput) ToOutput(ctx context.Context) pulumix.Output[VolumeLabel] {
	return pulumix.Output[VolumeLabel]{
		OutputState: o.OutputState,
	}
}

// Name of the label
func (o VolumeLabelOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeLabel) string { return v.Label }).(pulumi.StringOutput)
}

// Value of the label
func (o VolumeLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeLabel) string { return v.Value }).(pulumi.StringOutput)
}

type VolumeLabelArrayOutput struct{ *pulumi.OutputState }

func (VolumeLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeLabel)(nil)).Elem()
}

func (o VolumeLabelArrayOutput) ToVolumeLabelArrayOutput() VolumeLabelArrayOutput {
	return o
}

func (o VolumeLabelArrayOutput) ToVolumeLabelArrayOutputWithContext(ctx context.Context) VolumeLabelArrayOutput {
	return o
}

func (o VolumeLabelArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VolumeLabel] {
	return pulumix.Output[[]VolumeLabel]{
		OutputState: o.OutputState,
	}
}

func (o VolumeLabelArrayOutput) Index(i pulumi.IntInput) VolumeLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeLabel {
		return vs[0].([]VolumeLabel)[vs[1].(int)]
	}).(VolumeLabelOutput)
}

// Contains a list of images to reference when building using a cache
type CacheFrom struct {
	// Specifies cached images
	Images []string `pulumi:"images"`
}

// CacheFromInput is an input type that accepts CacheFromArgs and CacheFromOutput values.
// You can construct a concrete instance of `CacheFromInput` via:
//
//	CacheFromArgs{...}
type CacheFromInput interface {
	pulumi.Input

	ToCacheFromOutput() CacheFromOutput
	ToCacheFromOutputWithContext(context.Context) CacheFromOutput
}

// Contains a list of images to reference when building using a cache
type CacheFromArgs struct {
	// Specifies cached images
	Images pulumi.StringArrayInput `pulumi:"images"`
}

func (CacheFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheFrom)(nil)).Elem()
}

func (i CacheFromArgs) ToCacheFromOutput() CacheFromOutput {
	return i.ToCacheFromOutputWithContext(context.Background())
}

func (i CacheFromArgs) ToCacheFromOutputWithContext(ctx context.Context) CacheFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheFromOutput)
}

func (i CacheFromArgs) ToOutput(ctx context.Context) pulumix.Output[CacheFrom] {
	return pulumix.Output[CacheFrom]{
		OutputState: i.ToCacheFromOutputWithContext(ctx).OutputState,
	}
}

func (i CacheFromArgs) ToCacheFromPtrOutput() CacheFromPtrOutput {
	return i.ToCacheFromPtrOutputWithContext(context.Background())
}

func (i CacheFromArgs) ToCacheFromPtrOutputWithContext(ctx context.Context) CacheFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheFromOutput).ToCacheFromPtrOutputWithContext(ctx)
}

// CacheFromPtrInput is an input type that accepts CacheFromArgs, CacheFromPtr and CacheFromPtrOutput values.
// You can construct a concrete instance of `CacheFromPtrInput` via:
//
//	        CacheFromArgs{...}
//
//	or:
//
//	        nil
type CacheFromPtrInput interface {
	pulumi.Input

	ToCacheFromPtrOutput() CacheFromPtrOutput
	ToCacheFromPtrOutputWithContext(context.Context) CacheFromPtrOutput
}

type cacheFromPtrType CacheFromArgs

func CacheFromPtr(v *CacheFromArgs) CacheFromPtrInput {
	return (*cacheFromPtrType)(v)
}

func (*cacheFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheFrom)(nil)).Elem()
}

func (i *cacheFromPtrType) ToCacheFromPtrOutput() CacheFromPtrOutput {
	return i.ToCacheFromPtrOutputWithContext(context.Background())
}

func (i *cacheFromPtrType) ToCacheFromPtrOutputWithContext(ctx context.Context) CacheFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheFromPtrOutput)
}

func (i *cacheFromPtrType) ToOutput(ctx context.Context) pulumix.Output[*CacheFrom] {
	return pulumix.Output[*CacheFrom]{
		OutputState: i.ToCacheFromPtrOutputWithContext(ctx).OutputState,
	}
}

// Contains a list of images to reference when building using a cache
type CacheFromOutput struct{ *pulumi.OutputState }

func (CacheFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheFrom)(nil)).Elem()
}

func (o CacheFromOutput) ToCacheFromOutput() CacheFromOutput {
	return o
}

func (o CacheFromOutput) ToCacheFromOutputWithContext(ctx context.Context) CacheFromOutput {
	return o
}

func (o CacheFromOutput) ToCacheFromPtrOutput() CacheFromPtrOutput {
	return o.ToCacheFromPtrOutputWithContext(context.Background())
}

func (o CacheFromOutput) ToCacheFromPtrOutputWithContext(ctx context.Context) CacheFromPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CacheFrom) *CacheFrom {
		return &v
	}).(CacheFromPtrOutput)
}

func (o CacheFromOutput) ToOutput(ctx context.Context) pulumix.Output[CacheFrom] {
	return pulumix.Output[CacheFrom]{
		OutputState: o.OutputState,
	}
}

// Specifies cached images
func (o CacheFromOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CacheFrom) []string { return v.Images }).(pulumi.StringArrayOutput)
}

type CacheFromPtrOutput struct{ *pulumi.OutputState }

func (CacheFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheFrom)(nil)).Elem()
}

func (o CacheFromPtrOutput) ToCacheFromPtrOutput() CacheFromPtrOutput {
	return o
}

func (o CacheFromPtrOutput) ToCacheFromPtrOutputWithContext(ctx context.Context) CacheFromPtrOutput {
	return o
}

func (o CacheFromPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CacheFrom] {
	return pulumix.Output[*CacheFrom]{
		OutputState: o.OutputState,
	}
}

func (o CacheFromPtrOutput) Elem() CacheFromOutput {
	return o.ApplyT(func(v *CacheFrom) CacheFrom {
		if v != nil {
			return *v
		}
		var ret CacheFrom
		return ret
	}).(CacheFromOutput)
}

// Specifies cached images
func (o CacheFromPtrOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CacheFrom) []string {
		if v == nil {
			return nil
		}
		return v.Images
	}).(pulumi.StringArrayOutput)
}

// The Docker build context
type DockerBuild struct {
	// An optional map of named build-time argument variables to set during the Docker build. This flag allows you to pass build-time variablesthat can be accessed like environment variables inside the RUN instruction.
	Args map[string]string `pulumi:"args"`
	// The version of the Docker builder.
	BuilderVersion *BuilderVersion `pulumi:"builderVersion"`
	// A list of image names to use as build cache. Images provided must have a cache manifest. Must provide authentication to cache registry.
	CacheFrom *CacheFrom `pulumi:"cacheFrom"`
	// The path to the build context to use.
	Context *string `pulumi:"context"`
	// The path to the Dockerfile to use.
	Dockerfile *string `pulumi:"dockerfile"`
	// The architecture of the platform you want to build this image for, e.g. `linux/arm64`.
	Platform *string `pulumi:"platform"`
	// The target of the Dockerfile to build
	Target *string `pulumi:"target"`
}

// Defaults sets the appropriate defaults for DockerBuild
func (val *DockerBuild) Defaults() *DockerBuild {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BuilderVersion == nil {
		builderVersion_ := BuilderVersion("BuilderBuildKit")
		tmp.BuilderVersion = &builderVersion_
	}
	return &tmp
}

// DockerBuildInput is an input type that accepts DockerBuildArgs and DockerBuildOutput values.
// You can construct a concrete instance of `DockerBuildInput` via:
//
//	DockerBuildArgs{...}
type DockerBuildInput interface {
	pulumi.Input

	ToDockerBuildOutput() DockerBuildOutput
	ToDockerBuildOutputWithContext(context.Context) DockerBuildOutput
}

// The Docker build context
type DockerBuildArgs struct {
	// An optional map of named build-time argument variables to set during the Docker build. This flag allows you to pass build-time variablesthat can be accessed like environment variables inside the RUN instruction.
	Args pulumi.StringMapInput `pulumi:"args"`
	// The version of the Docker builder.
	BuilderVersion BuilderVersionPtrInput `pulumi:"builderVersion"`
	// A list of image names to use as build cache. Images provided must have a cache manifest. Must provide authentication to cache registry.
	CacheFrom CacheFromPtrInput `pulumi:"cacheFrom"`
	// The path to the build context to use.
	Context pulumi.StringPtrInput `pulumi:"context"`
	// The path to the Dockerfile to use.
	Dockerfile pulumi.StringPtrInput `pulumi:"dockerfile"`
	// The architecture of the platform you want to build this image for, e.g. `linux/arm64`.
	Platform pulumi.StringPtrInput `pulumi:"platform"`
	// The target of the Dockerfile to build
	Target pulumi.StringPtrInput `pulumi:"target"`
}

// Defaults sets the appropriate defaults for DockerBuildArgs
func (val *DockerBuildArgs) Defaults() *DockerBuildArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BuilderVersion == nil {
		tmp.BuilderVersion = BuilderVersion("BuilderBuildKit")
	}
	return &tmp
}
func (DockerBuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerBuild)(nil)).Elem()
}

func (i DockerBuildArgs) ToDockerBuildOutput() DockerBuildOutput {
	return i.ToDockerBuildOutputWithContext(context.Background())
}

func (i DockerBuildArgs) ToDockerBuildOutputWithContext(ctx context.Context) DockerBuildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerBuildOutput)
}

func (i DockerBuildArgs) ToOutput(ctx context.Context) pulumix.Output[DockerBuild] {
	return pulumix.Output[DockerBuild]{
		OutputState: i.ToDockerBuildOutputWithContext(ctx).OutputState,
	}
}

func (i DockerBuildArgs) ToDockerBuildPtrOutput() DockerBuildPtrOutput {
	return i.ToDockerBuildPtrOutputWithContext(context.Background())
}

func (i DockerBuildArgs) ToDockerBuildPtrOutputWithContext(ctx context.Context) DockerBuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerBuildOutput).ToDockerBuildPtrOutputWithContext(ctx)
}

// DockerBuildPtrInput is an input type that accepts DockerBuildArgs, DockerBuildPtr and DockerBuildPtrOutput values.
// You can construct a concrete instance of `DockerBuildPtrInput` via:
//
//	        DockerBuildArgs{...}
//
//	or:
//
//	        nil
type DockerBuildPtrInput interface {
	pulumi.Input

	ToDockerBuildPtrOutput() DockerBuildPtrOutput
	ToDockerBuildPtrOutputWithContext(context.Context) DockerBuildPtrOutput
}

type dockerBuildPtrType DockerBuildArgs

func DockerBuildPtr(v *DockerBuildArgs) DockerBuildPtrInput {
	return (*dockerBuildPtrType)(v)
}

func (*dockerBuildPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerBuild)(nil)).Elem()
}

func (i *dockerBuildPtrType) ToDockerBuildPtrOutput() DockerBuildPtrOutput {
	return i.ToDockerBuildPtrOutputWithContext(context.Background())
}

func (i *dockerBuildPtrType) ToDockerBuildPtrOutputWithContext(ctx context.Context) DockerBuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerBuildPtrOutput)
}

func (i *dockerBuildPtrType) ToOutput(ctx context.Context) pulumix.Output[*DockerBuild] {
	return pulumix.Output[*DockerBuild]{
		OutputState: i.ToDockerBuildPtrOutputWithContext(ctx).OutputState,
	}
}

// The Docker build context
type DockerBuildOutput struct{ *pulumi.OutputState }

func (DockerBuildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerBuild)(nil)).Elem()
}

func (o DockerBuildOutput) ToDockerBuildOutput() DockerBuildOutput {
	return o
}

func (o DockerBuildOutput) ToDockerBuildOutputWithContext(ctx context.Context) DockerBuildOutput {
	return o
}

func (o DockerBuildOutput) ToDockerBuildPtrOutput() DockerBuildPtrOutput {
	return o.ToDockerBuildPtrOutputWithContext(context.Background())
}

func (o DockerBuildOutput) ToDockerBuildPtrOutputWithContext(ctx context.Context) DockerBuildPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DockerBuild) *DockerBuild {
		return &v
	}).(DockerBuildPtrOutput)
}

func (o DockerBuildOutput) ToOutput(ctx context.Context) pulumix.Output[DockerBuild] {
	return pulumix.Output[DockerBuild]{
		OutputState: o.OutputState,
	}
}

// An optional map of named build-time argument variables to set during the Docker build. This flag allows you to pass build-time variablesthat can be accessed like environment variables inside the RUN instruction.
func (o DockerBuildOutput) Args() pulumi.StringMapOutput {
	return o.ApplyT(func(v DockerBuild) map[string]string { return v.Args }).(pulumi.StringMapOutput)
}

// The version of the Docker builder.
func (o DockerBuildOutput) BuilderVersion() BuilderVersionPtrOutput {
	return o.ApplyT(func(v DockerBuild) *BuilderVersion { return v.BuilderVersion }).(BuilderVersionPtrOutput)
}

// A list of image names to use as build cache. Images provided must have a cache manifest. Must provide authentication to cache registry.
func (o DockerBuildOutput) CacheFrom() CacheFromPtrOutput {
	return o.ApplyT(func(v DockerBuild) *CacheFrom { return v.CacheFrom }).(CacheFromPtrOutput)
}

// The path to the build context to use.
func (o DockerBuildOutput) Context() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuild) *string { return v.Context }).(pulumi.StringPtrOutput)
}

// The path to the Dockerfile to use.
func (o DockerBuildOutput) Dockerfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuild) *string { return v.Dockerfile }).(pulumi.StringPtrOutput)
}

// The architecture of the platform you want to build this image for, e.g. `linux/arm64`.
func (o DockerBuildOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuild) *string { return v.Platform }).(pulumi.StringPtrOutput)
}

// The target of the Dockerfile to build
func (o DockerBuildOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuild) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type DockerBuildPtrOutput struct{ *pulumi.OutputState }

func (DockerBuildPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerBuild)(nil)).Elem()
}

func (o DockerBuildPtrOutput) ToDockerBuildPtrOutput() DockerBuildPtrOutput {
	return o
}

func (o DockerBuildPtrOutput) ToDockerBuildPtrOutputWithContext(ctx context.Context) DockerBuildPtrOutput {
	return o
}

func (o DockerBuildPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DockerBuild] {
	return pulumix.Output[*DockerBuild]{
		OutputState: o.OutputState,
	}
}

func (o DockerBuildPtrOutput) Elem() DockerBuildOutput {
	return o.ApplyT(func(v *DockerBuild) DockerBuild {
		if v != nil {
			return *v
		}
		var ret DockerBuild
		return ret
	}).(DockerBuildOutput)
}

// An optional map of named build-time argument variables to set during the Docker build. This flag allows you to pass build-time variablesthat can be accessed like environment variables inside the RUN instruction.
func (o DockerBuildPtrOutput) Args() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DockerBuild) map[string]string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringMapOutput)
}

// The version of the Docker builder.
func (o DockerBuildPtrOutput) BuilderVersion() BuilderVersionPtrOutput {
	return o.ApplyT(func(v *DockerBuild) *BuilderVersion {
		if v == nil {
			return nil
		}
		return v.BuilderVersion
	}).(BuilderVersionPtrOutput)
}

// A list of image names to use as build cache. Images provided must have a cache manifest. Must provide authentication to cache registry.
func (o DockerBuildPtrOutput) CacheFrom() CacheFromPtrOutput {
	return o.ApplyT(func(v *DockerBuild) *CacheFrom {
		if v == nil {
			return nil
		}
		return v.CacheFrom
	}).(CacheFromPtrOutput)
}

// The path to the build context to use.
func (o DockerBuildPtrOutput) Context() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuild) *string {
		if v == nil {
			return nil
		}
		return v.Context
	}).(pulumi.StringPtrOutput)
}

// The path to the Dockerfile to use.
func (o DockerBuildPtrOutput) Dockerfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuild) *string {
		if v == nil {
			return nil
		}
		return v.Dockerfile
	}).(pulumi.StringPtrOutput)
}

// The architecture of the platform you want to build this image for, e.g. `linux/arm64`.
func (o DockerBuildPtrOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuild) *string {
		if v == nil {
			return nil
		}
		return v.Platform
	}).(pulumi.StringPtrOutput)
}

// The target of the Dockerfile to build
func (o DockerBuildPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuild) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

type GetNetworkIpamConfig struct {
	AuxAddress map[string]interface{} `pulumi:"auxAddress"`
	Gateway    *string                `pulumi:"gateway"`
	IpRange    *string                `pulumi:"ipRange"`
	Subnet     *string                `pulumi:"subnet"`
}

// GetNetworkIpamConfigInput is an input type that accepts GetNetworkIpamConfigArgs and GetNetworkIpamConfigOutput values.
// You can construct a concrete instance of `GetNetworkIpamConfigInput` via:
//
//	GetNetworkIpamConfigArgs{...}
type GetNetworkIpamConfigInput interface {
	pulumi.Input

	ToGetNetworkIpamConfigOutput() GetNetworkIpamConfigOutput
	ToGetNetworkIpamConfigOutputWithContext(context.Context) GetNetworkIpamConfigOutput
}

type GetNetworkIpamConfigArgs struct {
	AuxAddress pulumi.MapInput       `pulumi:"auxAddress"`
	Gateway    pulumi.StringPtrInput `pulumi:"gateway"`
	IpRange    pulumi.StringPtrInput `pulumi:"ipRange"`
	Subnet     pulumi.StringPtrInput `pulumi:"subnet"`
}

func (GetNetworkIpamConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkIpamConfig)(nil)).Elem()
}

func (i GetNetworkIpamConfigArgs) ToGetNetworkIpamConfigOutput() GetNetworkIpamConfigOutput {
	return i.ToGetNetworkIpamConfigOutputWithContext(context.Background())
}

func (i GetNetworkIpamConfigArgs) ToGetNetworkIpamConfigOutputWithContext(ctx context.Context) GetNetworkIpamConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkIpamConfigOutput)
}

func (i GetNetworkIpamConfigArgs) ToOutput(ctx context.Context) pulumix.Output[GetNetworkIpamConfig] {
	return pulumix.Output[GetNetworkIpamConfig]{
		OutputState: i.ToGetNetworkIpamConfigOutputWithContext(ctx).OutputState,
	}
}

// GetNetworkIpamConfigArrayInput is an input type that accepts GetNetworkIpamConfigArray and GetNetworkIpamConfigArrayOutput values.
// You can construct a concrete instance of `GetNetworkIpamConfigArrayInput` via:
//
//	GetNetworkIpamConfigArray{ GetNetworkIpamConfigArgs{...} }
type GetNetworkIpamConfigArrayInput interface {
	pulumi.Input

	ToGetNetworkIpamConfigArrayOutput() GetNetworkIpamConfigArrayOutput
	ToGetNetworkIpamConfigArrayOutputWithContext(context.Context) GetNetworkIpamConfigArrayOutput
}

type GetNetworkIpamConfigArray []GetNetworkIpamConfigInput

func (GetNetworkIpamConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkIpamConfig)(nil)).Elem()
}

func (i GetNetworkIpamConfigArray) ToGetNetworkIpamConfigArrayOutput() GetNetworkIpamConfigArrayOutput {
	return i.ToGetNetworkIpamConfigArrayOutputWithContext(context.Background())
}

func (i GetNetworkIpamConfigArray) ToGetNetworkIpamConfigArrayOutputWithContext(ctx context.Context) GetNetworkIpamConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkIpamConfigArrayOutput)
}

func (i GetNetworkIpamConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]GetNetworkIpamConfig] {
	return pulumix.Output[[]GetNetworkIpamConfig]{
		OutputState: i.ToGetNetworkIpamConfigArrayOutputWithContext(ctx).OutputState,
	}
}

type GetNetworkIpamConfigOutput struct{ *pulumi.OutputState }

func (GetNetworkIpamConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkIpamConfig)(nil)).Elem()
}

func (o GetNetworkIpamConfigOutput) ToGetNetworkIpamConfigOutput() GetNetworkIpamConfigOutput {
	return o
}

func (o GetNetworkIpamConfigOutput) ToGetNetworkIpamConfigOutputWithContext(ctx context.Context) GetNetworkIpamConfigOutput {
	return o
}

func (o GetNetworkIpamConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetNetworkIpamConfig] {
	return pulumix.Output[GetNetworkIpamConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetNetworkIpamConfigOutput) AuxAddress() pulumi.MapOutput {
	return o.ApplyT(func(v GetNetworkIpamConfig) map[string]interface{} { return v.AuxAddress }).(pulumi.MapOutput)
}

func (o GetNetworkIpamConfigOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNetworkIpamConfig) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

func (o GetNetworkIpamConfigOutput) IpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNetworkIpamConfig) *string { return v.IpRange }).(pulumi.StringPtrOutput)
}

func (o GetNetworkIpamConfigOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNetworkIpamConfig) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

type GetNetworkIpamConfigArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkIpamConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkIpamConfig)(nil)).Elem()
}

func (o GetNetworkIpamConfigArrayOutput) ToGetNetworkIpamConfigArrayOutput() GetNetworkIpamConfigArrayOutput {
	return o
}

func (o GetNetworkIpamConfigArrayOutput) ToGetNetworkIpamConfigArrayOutputWithContext(ctx context.Context) GetNetworkIpamConfigArrayOutput {
	return o
}

func (o GetNetworkIpamConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetNetworkIpamConfig] {
	return pulumix.Output[[]GetNetworkIpamConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetNetworkIpamConfigArrayOutput) Index(i pulumi.IntInput) GetNetworkIpamConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkIpamConfig {
		return vs[0].([]GetNetworkIpamConfig)[vs[1].(int)]
	}).(GetNetworkIpamConfigOutput)
}

// Describes a Docker container registry
type Registry struct {
	// The password to authenticate to the registry. Does not cause image rebuild when changed.
	Password *string `pulumi:"password"`
	// The URL of the Docker registry server
	Server *string `pulumi:"server"`
	// The username to authenticate to the registry. Does not cause image rebuild when changed.
	Username *string `pulumi:"username"`
}

// RegistryInput is an input type that accepts RegistryArgs and RegistryOutput values.
// You can construct a concrete instance of `RegistryInput` via:
//
//	RegistryArgs{...}
type RegistryInput interface {
	pulumi.Input

	ToRegistryOutput() RegistryOutput
	ToRegistryOutputWithContext(context.Context) RegistryOutput
}

// Describes a Docker container registry
type RegistryArgs struct {
	// The password to authenticate to the registry. Does not cause image rebuild when changed.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The URL of the Docker registry server
	Server pulumi.StringPtrInput `pulumi:"server"`
	// The username to authenticate to the registry. Does not cause image rebuild when changed.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (RegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Registry)(nil)).Elem()
}

func (i RegistryArgs) ToRegistryOutput() RegistryOutput {
	return i.ToRegistryOutputWithContext(context.Background())
}

func (i RegistryArgs) ToRegistryOutputWithContext(ctx context.Context) RegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryOutput)
}

func (i RegistryArgs) ToOutput(ctx context.Context) pulumix.Output[Registry] {
	return pulumix.Output[Registry]{
		OutputState: i.ToRegistryOutputWithContext(ctx).OutputState,
	}
}

func (i RegistryArgs) ToRegistryPtrOutput() RegistryPtrOutput {
	return i.ToRegistryPtrOutputWithContext(context.Background())
}

func (i RegistryArgs) ToRegistryPtrOutputWithContext(ctx context.Context) RegistryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryOutput).ToRegistryPtrOutputWithContext(ctx)
}

// RegistryPtrInput is an input type that accepts RegistryArgs, RegistryPtr and RegistryPtrOutput values.
// You can construct a concrete instance of `RegistryPtrInput` via:
//
//	        RegistryArgs{...}
//
//	or:
//
//	        nil
type RegistryPtrInput interface {
	pulumi.Input

	ToRegistryPtrOutput() RegistryPtrOutput
	ToRegistryPtrOutputWithContext(context.Context) RegistryPtrOutput
}

type registryPtrType RegistryArgs

func RegistryPtr(v *RegistryArgs) RegistryPtrInput {
	return (*registryPtrType)(v)
}

func (*registryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Registry)(nil)).Elem()
}

func (i *registryPtrType) ToRegistryPtrOutput() RegistryPtrOutput {
	return i.ToRegistryPtrOutputWithContext(context.Background())
}

func (i *registryPtrType) ToRegistryPtrOutputWithContext(ctx context.Context) RegistryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryPtrOutput)
}

func (i *registryPtrType) ToOutput(ctx context.Context) pulumix.Output[*Registry] {
	return pulumix.Output[*Registry]{
		OutputState: i.ToRegistryPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes a Docker container registry
type RegistryOutput struct{ *pulumi.OutputState }

func (RegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Registry)(nil)).Elem()
}

func (o RegistryOutput) ToRegistryOutput() RegistryOutput {
	return o
}

func (o RegistryOutput) ToRegistryOutputWithContext(ctx context.Context) RegistryOutput {
	return o
}

func (o RegistryOutput) ToRegistryPtrOutput() RegistryPtrOutput {
	return o.ToRegistryPtrOutputWithContext(context.Background())
}

func (o RegistryOutput) ToRegistryPtrOutputWithContext(ctx context.Context) RegistryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Registry) *Registry {
		return &v
	}).(RegistryPtrOutput)
}

func (o RegistryOutput) ToOutput(ctx context.Context) pulumix.Output[Registry] {
	return pulumix.Output[Registry]{
		OutputState: o.OutputState,
	}
}

// The password to authenticate to the registry. Does not cause image rebuild when changed.
func (o RegistryOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Registry) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The URL of the Docker registry server
func (o RegistryOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Registry) *string { return v.Server }).(pulumi.StringPtrOutput)
}

// The username to authenticate to the registry. Does not cause image rebuild when changed.
func (o RegistryOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Registry) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type RegistryPtrOutput struct{ *pulumi.OutputState }

func (RegistryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Registry)(nil)).Elem()
}

func (o RegistryPtrOutput) ToRegistryPtrOutput() RegistryPtrOutput {
	return o
}

func (o RegistryPtrOutput) ToRegistryPtrOutputWithContext(ctx context.Context) RegistryPtrOutput {
	return o
}

func (o RegistryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Registry] {
	return pulumix.Output[*Registry]{
		OutputState: o.OutputState,
	}
}

func (o RegistryPtrOutput) Elem() RegistryOutput {
	return o.ApplyT(func(v *Registry) Registry {
		if v != nil {
			return *v
		}
		var ret Registry
		return ret
	}).(RegistryOutput)
}

// The password to authenticate to the registry. Does not cause image rebuild when changed.
func (o RegistryPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Registry) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The URL of the Docker registry server
func (o RegistryPtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Registry) *string {
		if v == nil {
			return nil
		}
		return v.Server
	}).(pulumi.StringPtrOutput)
}

// The username to authenticate to the registry. Does not cause image rebuild when changed.
func (o RegistryPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Registry) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerCapabilitiesInput)(nil)).Elem(), ContainerCapabilitiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerCapabilitiesPtrInput)(nil)).Elem(), ContainerCapabilitiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerDeviceInput)(nil)).Elem(), ContainerDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerDeviceArrayInput)(nil)).Elem(), ContainerDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerHealthcheckInput)(nil)).Elem(), ContainerHealthcheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerHealthcheckPtrInput)(nil)).Elem(), ContainerHealthcheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerHostInput)(nil)).Elem(), ContainerHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerHostArrayInput)(nil)).Elem(), ContainerHostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerLabelInput)(nil)).Elem(), ContainerLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerLabelArrayInput)(nil)).Elem(), ContainerLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerMountInput)(nil)).Elem(), ContainerMountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerMountArrayInput)(nil)).Elem(), ContainerMountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerMountBindOptionsInput)(nil)).Elem(), ContainerMountBindOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerMountBindOptionsPtrInput)(nil)).Elem(), ContainerMountBindOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerMountTmpfsOptionsInput)(nil)).Elem(), ContainerMountTmpfsOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerMountTmpfsOptionsPtrInput)(nil)).Elem(), ContainerMountTmpfsOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerMountVolumeOptionsInput)(nil)).Elem(), ContainerMountVolumeOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerMountVolumeOptionsPtrInput)(nil)).Elem(), ContainerMountVolumeOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerMountVolumeOptionsLabelInput)(nil)).Elem(), ContainerMountVolumeOptionsLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerMountVolumeOptionsLabelArrayInput)(nil)).Elem(), ContainerMountVolumeOptionsLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerNetworkDataInput)(nil)).Elem(), ContainerNetworkDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerNetworkDataArrayInput)(nil)).Elem(), ContainerNetworkDataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerNetworksAdvancedInput)(nil)).Elem(), ContainerNetworksAdvancedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerNetworksAdvancedArrayInput)(nil)).Elem(), ContainerNetworksAdvancedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerPortInput)(nil)).Elem(), ContainerPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerPortArrayInput)(nil)).Elem(), ContainerPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerUlimitInput)(nil)).Elem(), ContainerUlimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerUlimitArrayInput)(nil)).Elem(), ContainerUlimitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerUploadInput)(nil)).Elem(), ContainerUploadArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerUploadArrayInput)(nil)).Elem(), ContainerUploadArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerVolumeInput)(nil)).Elem(), ContainerVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerVolumeArrayInput)(nil)).Elem(), ContainerVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkIpamConfigInput)(nil)).Elem(), NetworkIpamConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkIpamConfigArrayInput)(nil)).Elem(), NetworkIpamConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkLabelInput)(nil)).Elem(), NetworkLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkLabelArrayInput)(nil)).Elem(), NetworkLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PluginGrantPermissionInput)(nil)).Elem(), PluginGrantPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PluginGrantPermissionArrayInput)(nil)).Elem(), PluginGrantPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderRegistryAuthInput)(nil)).Elem(), ProviderRegistryAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderRegistryAuthArrayInput)(nil)).Elem(), ProviderRegistryAuthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteImageBuildInput)(nil)).Elem(), RemoteImageBuildArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteImageBuildPtrInput)(nil)).Elem(), RemoteImageBuildArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteImageBuildAuthConfigInput)(nil)).Elem(), RemoteImageBuildAuthConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteImageBuildAuthConfigArrayInput)(nil)).Elem(), RemoteImageBuildAuthConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteImageBuildUlimitInput)(nil)).Elem(), RemoteImageBuildUlimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteImageBuildUlimitArrayInput)(nil)).Elem(), RemoteImageBuildUlimitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretLabelInput)(nil)).Elem(), SecretLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretLabelArrayInput)(nil)).Elem(), SecretLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAuthInput)(nil)).Elem(), ServiceAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAuthPtrInput)(nil)).Elem(), ServiceAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConvergeConfigInput)(nil)).Elem(), ServiceConvergeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConvergeConfigPtrInput)(nil)).Elem(), ServiceConvergeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEndpointSpecInput)(nil)).Elem(), ServiceEndpointSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEndpointSpecPtrInput)(nil)).Elem(), ServiceEndpointSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEndpointSpecPortInput)(nil)).Elem(), ServiceEndpointSpecPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEndpointSpecPortArrayInput)(nil)).Elem(), ServiceEndpointSpecPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLabelInput)(nil)).Elem(), ServiceLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLabelArrayInput)(nil)).Elem(), ServiceLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceModeInput)(nil)).Elem(), ServiceModeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceModePtrInput)(nil)).Elem(), ServiceModeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceModeReplicatedInput)(nil)).Elem(), ServiceModeReplicatedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceModeReplicatedPtrInput)(nil)).Elem(), ServiceModeReplicatedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceRollbackConfigInput)(nil)).Elem(), ServiceRollbackConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceRollbackConfigPtrInput)(nil)).Elem(), ServiceRollbackConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecInput)(nil)).Elem(), ServiceTaskSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecPtrInput)(nil)).Elem(), ServiceTaskSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecInput)(nil)).Elem(), ServiceTaskSpecContainerSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecPtrInput)(nil)).Elem(), ServiceTaskSpecContainerSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecConfigInput)(nil)).Elem(), ServiceTaskSpecContainerSpecConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecConfigArrayInput)(nil)).Elem(), ServiceTaskSpecContainerSpecConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecDnsConfigInput)(nil)).Elem(), ServiceTaskSpecContainerSpecDnsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecDnsConfigPtrInput)(nil)).Elem(), ServiceTaskSpecContainerSpecDnsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecHealthcheckInput)(nil)).Elem(), ServiceTaskSpecContainerSpecHealthcheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecHealthcheckPtrInput)(nil)).Elem(), ServiceTaskSpecContainerSpecHealthcheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecHostInput)(nil)).Elem(), ServiceTaskSpecContainerSpecHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecHostArrayInput)(nil)).Elem(), ServiceTaskSpecContainerSpecHostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecLabelInput)(nil)).Elem(), ServiceTaskSpecContainerSpecLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecLabelArrayInput)(nil)).Elem(), ServiceTaskSpecContainerSpecLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecMountInput)(nil)).Elem(), ServiceTaskSpecContainerSpecMountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecMountArrayInput)(nil)).Elem(), ServiceTaskSpecContainerSpecMountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecMountBindOptionsInput)(nil)).Elem(), ServiceTaskSpecContainerSpecMountBindOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecMountBindOptionsPtrInput)(nil)).Elem(), ServiceTaskSpecContainerSpecMountBindOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecMountTmpfsOptionsInput)(nil)).Elem(), ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrInput)(nil)).Elem(), ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecMountVolumeOptionsInput)(nil)).Elem(), ServiceTaskSpecContainerSpecMountVolumeOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecMountVolumeOptionsPtrInput)(nil)).Elem(), ServiceTaskSpecContainerSpecMountVolumeOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecMountVolumeOptionsLabelInput)(nil)).Elem(), ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayInput)(nil)).Elem(), ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecPrivilegesInput)(nil)).Elem(), ServiceTaskSpecContainerSpecPrivilegesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecPrivilegesPtrInput)(nil)).Elem(), ServiceTaskSpecContainerSpecPrivilegesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecPrivilegesCredentialSpecInput)(nil)).Elem(), ServiceTaskSpecContainerSpecPrivilegesCredentialSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrInput)(nil)).Elem(), ServiceTaskSpecContainerSpecPrivilegesCredentialSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextInput)(nil)).Elem(), ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrInput)(nil)).Elem(), ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecSecretInput)(nil)).Elem(), ServiceTaskSpecContainerSpecSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecContainerSpecSecretArrayInput)(nil)).Elem(), ServiceTaskSpecContainerSpecSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecLogDriverInput)(nil)).Elem(), ServiceTaskSpecLogDriverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecLogDriverPtrInput)(nil)).Elem(), ServiceTaskSpecLogDriverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecNetworksAdvancedInput)(nil)).Elem(), ServiceTaskSpecNetworksAdvancedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecNetworksAdvancedArrayInput)(nil)).Elem(), ServiceTaskSpecNetworksAdvancedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecPlacementInput)(nil)).Elem(), ServiceTaskSpecPlacementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecPlacementPtrInput)(nil)).Elem(), ServiceTaskSpecPlacementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecPlacementPlatformInput)(nil)).Elem(), ServiceTaskSpecPlacementPlatformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecPlacementPlatformArrayInput)(nil)).Elem(), ServiceTaskSpecPlacementPlatformArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecResourcesInput)(nil)).Elem(), ServiceTaskSpecResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecResourcesPtrInput)(nil)).Elem(), ServiceTaskSpecResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecResourcesLimitsInput)(nil)).Elem(), ServiceTaskSpecResourcesLimitsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecResourcesLimitsPtrInput)(nil)).Elem(), ServiceTaskSpecResourcesLimitsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecResourcesReservationInput)(nil)).Elem(), ServiceTaskSpecResourcesReservationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecResourcesReservationPtrInput)(nil)).Elem(), ServiceTaskSpecResourcesReservationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecResourcesReservationGenericResourcesInput)(nil)).Elem(), ServiceTaskSpecResourcesReservationGenericResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecResourcesReservationGenericResourcesPtrInput)(nil)).Elem(), ServiceTaskSpecResourcesReservationGenericResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecRestartPolicyInput)(nil)).Elem(), ServiceTaskSpecRestartPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTaskSpecRestartPolicyPtrInput)(nil)).Elem(), ServiceTaskSpecRestartPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceUpdateConfigInput)(nil)).Elem(), ServiceUpdateConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceUpdateConfigPtrInput)(nil)).Elem(), ServiceUpdateConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeLabelInput)(nil)).Elem(), VolumeLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeLabelArrayInput)(nil)).Elem(), VolumeLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CacheFromInput)(nil)).Elem(), CacheFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CacheFromPtrInput)(nil)).Elem(), CacheFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DockerBuildInput)(nil)).Elem(), DockerBuildArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DockerBuildPtrInput)(nil)).Elem(), DockerBuildArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkIpamConfigInput)(nil)).Elem(), GetNetworkIpamConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkIpamConfigArrayInput)(nil)).Elem(), GetNetworkIpamConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryInput)(nil)).Elem(), RegistryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryPtrInput)(nil)).Elem(), RegistryArgs{})
	pulumi.RegisterOutputType(ContainerCapabilitiesOutput{})
	pulumi.RegisterOutputType(ContainerCapabilitiesPtrOutput{})
	pulumi.RegisterOutputType(ContainerDeviceOutput{})
	pulumi.RegisterOutputType(ContainerDeviceArrayOutput{})
	pulumi.RegisterOutputType(ContainerHealthcheckOutput{})
	pulumi.RegisterOutputType(ContainerHealthcheckPtrOutput{})
	pulumi.RegisterOutputType(ContainerHostOutput{})
	pulumi.RegisterOutputType(ContainerHostArrayOutput{})
	pulumi.RegisterOutputType(ContainerLabelOutput{})
	pulumi.RegisterOutputType(ContainerLabelArrayOutput{})
	pulumi.RegisterOutputType(ContainerMountOutput{})
	pulumi.RegisterOutputType(ContainerMountArrayOutput{})
	pulumi.RegisterOutputType(ContainerMountBindOptionsOutput{})
	pulumi.RegisterOutputType(ContainerMountBindOptionsPtrOutput{})
	pulumi.RegisterOutputType(ContainerMountTmpfsOptionsOutput{})
	pulumi.RegisterOutputType(ContainerMountTmpfsOptionsPtrOutput{})
	pulumi.RegisterOutputType(ContainerMountVolumeOptionsOutput{})
	pulumi.RegisterOutputType(ContainerMountVolumeOptionsPtrOutput{})
	pulumi.RegisterOutputType(ContainerMountVolumeOptionsLabelOutput{})
	pulumi.RegisterOutputType(ContainerMountVolumeOptionsLabelArrayOutput{})
	pulumi.RegisterOutputType(ContainerNetworkDataOutput{})
	pulumi.RegisterOutputType(ContainerNetworkDataArrayOutput{})
	pulumi.RegisterOutputType(ContainerNetworksAdvancedOutput{})
	pulumi.RegisterOutputType(ContainerNetworksAdvancedArrayOutput{})
	pulumi.RegisterOutputType(ContainerPortOutput{})
	pulumi.RegisterOutputType(ContainerPortArrayOutput{})
	pulumi.RegisterOutputType(ContainerUlimitOutput{})
	pulumi.RegisterOutputType(ContainerUlimitArrayOutput{})
	pulumi.RegisterOutputType(ContainerUploadOutput{})
	pulumi.RegisterOutputType(ContainerUploadArrayOutput{})
	pulumi.RegisterOutputType(ContainerVolumeOutput{})
	pulumi.RegisterOutputType(ContainerVolumeArrayOutput{})
	pulumi.RegisterOutputType(NetworkIpamConfigOutput{})
	pulumi.RegisterOutputType(NetworkIpamConfigArrayOutput{})
	pulumi.RegisterOutputType(NetworkLabelOutput{})
	pulumi.RegisterOutputType(NetworkLabelArrayOutput{})
	pulumi.RegisterOutputType(PluginGrantPermissionOutput{})
	pulumi.RegisterOutputType(PluginGrantPermissionArrayOutput{})
	pulumi.RegisterOutputType(ProviderRegistryAuthOutput{})
	pulumi.RegisterOutputType(ProviderRegistryAuthArrayOutput{})
	pulumi.RegisterOutputType(RemoteImageBuildOutput{})
	pulumi.RegisterOutputType(RemoteImageBuildPtrOutput{})
	pulumi.RegisterOutputType(RemoteImageBuildAuthConfigOutput{})
	pulumi.RegisterOutputType(RemoteImageBuildAuthConfigArrayOutput{})
	pulumi.RegisterOutputType(RemoteImageBuildUlimitOutput{})
	pulumi.RegisterOutputType(RemoteImageBuildUlimitArrayOutput{})
	pulumi.RegisterOutputType(SecretLabelOutput{})
	pulumi.RegisterOutputType(SecretLabelArrayOutput{})
	pulumi.RegisterOutputType(ServiceAuthOutput{})
	pulumi.RegisterOutputType(ServiceAuthPtrOutput{})
	pulumi.RegisterOutputType(ServiceConvergeConfigOutput{})
	pulumi.RegisterOutputType(ServiceConvergeConfigPtrOutput{})
	pulumi.RegisterOutputType(ServiceEndpointSpecOutput{})
	pulumi.RegisterOutputType(ServiceEndpointSpecPtrOutput{})
	pulumi.RegisterOutputType(ServiceEndpointSpecPortOutput{})
	pulumi.RegisterOutputType(ServiceEndpointSpecPortArrayOutput{})
	pulumi.RegisterOutputType(ServiceLabelOutput{})
	pulumi.RegisterOutputType(ServiceLabelArrayOutput{})
	pulumi.RegisterOutputType(ServiceModeOutput{})
	pulumi.RegisterOutputType(ServiceModePtrOutput{})
	pulumi.RegisterOutputType(ServiceModeReplicatedOutput{})
	pulumi.RegisterOutputType(ServiceModeReplicatedPtrOutput{})
	pulumi.RegisterOutputType(ServiceRollbackConfigOutput{})
	pulumi.RegisterOutputType(ServiceRollbackConfigPtrOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecPtrOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecPtrOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecConfigOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecConfigArrayOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecDnsConfigOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecDnsConfigPtrOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecHealthcheckOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecHealthcheckPtrOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecHostOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecHostArrayOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecLabelOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecLabelArrayOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecMountOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecMountArrayOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecMountBindOptionsOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecMountBindOptionsPtrOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecMountTmpfsOptionsOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecMountTmpfsOptionsPtrOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecMountVolumeOptionsOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecMountVolumeOptionsPtrOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecMountVolumeOptionsLabelOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecMountVolumeOptionsLabelArrayOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecPrivilegesOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecPrivilegesPtrOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecPrivilegesCredentialSpecOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecPrivilegesCredentialSpecPtrOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecPrivilegesSeLinuxContextPtrOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecSecretOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecContainerSpecSecretArrayOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecLogDriverOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecLogDriverPtrOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecNetworksAdvancedOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecNetworksAdvancedArrayOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecPlacementOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecPlacementPtrOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecPlacementPlatformOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecPlacementPlatformArrayOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecResourcesOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecResourcesPtrOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecResourcesLimitsOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecResourcesLimitsPtrOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecResourcesReservationOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecResourcesReservationPtrOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecResourcesReservationGenericResourcesOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecResourcesReservationGenericResourcesPtrOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecRestartPolicyOutput{})
	pulumi.RegisterOutputType(ServiceTaskSpecRestartPolicyPtrOutput{})
	pulumi.RegisterOutputType(ServiceUpdateConfigOutput{})
	pulumi.RegisterOutputType(ServiceUpdateConfigPtrOutput{})
	pulumi.RegisterOutputType(VolumeLabelOutput{})
	pulumi.RegisterOutputType(VolumeLabelArrayOutput{})
	pulumi.RegisterOutputType(CacheFromOutput{})
	pulumi.RegisterOutputType(CacheFromPtrOutput{})
	pulumi.RegisterOutputType(DockerBuildOutput{})
	pulumi.RegisterOutputType(DockerBuildPtrOutput{})
	pulumi.RegisterOutputType(GetNetworkIpamConfigOutput{})
	pulumi.RegisterOutputType(GetNetworkIpamConfigArrayOutput{})
	pulumi.RegisterOutputType(RegistryOutput{})
	pulumi.RegisterOutputType(RegistryPtrOutput{})
}
