// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package docker

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates and destroys a volume in Docker. This can be used alongside
// [docker\_container](https://www.terraform.io/docs/providers/docker/r/container.html)
// to prepare volumes that can be shared across containers.
type Volume struct {
	s *pulumi.ResourceState
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOpt) (*Volume, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["driver"] = nil
		inputs["driverOpts"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
	} else {
		inputs["driver"] = args.Driver
		inputs["driverOpts"] = args.DriverOpts
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
	}
	inputs["mountpoint"] = nil
	s, err := ctx.RegisterResource("docker:index/volume:Volume", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Volume{s: s}, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VolumeState, opts ...pulumi.ResourceOpt) (*Volume, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["driver"] = state.Driver
		inputs["driverOpts"] = state.DriverOpts
		inputs["labels"] = state.Labels
		inputs["mountpoint"] = state.Mountpoint
		inputs["name"] = state.Name
	}
	s, err := ctx.ReadResource("docker:index/volume:Volume", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Volume{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Volume) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Volume) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Driver type for the volume (defaults to local).
func (r *Volume) Driver() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["driver"])
}

// Options specific to the driver.
func (r *Volume) DriverOpts() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["driverOpts"])
}

// User-defined key/value metadata.
func (r *Volume) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

func (r *Volume) Mountpoint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["mountpoint"])
}

// The name of the Docker volume (generated if not
// provided).
func (r *Volume) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Input properties used for looking up and filtering Volume resources.
type VolumeState struct {
	// Driver type for the volume (defaults to local).
	Driver interface{}
	// Options specific to the driver.
	DriverOpts interface{}
	// User-defined key/value metadata.
	Labels interface{}
	Mountpoint interface{}
	// The name of the Docker volume (generated if not
	// provided).
	Name interface{}
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	// Driver type for the volume (defaults to local).
	Driver interface{}
	// Options specific to the driver.
	DriverOpts interface{}
	// User-defined key/value metadata.
	Labels interface{}
	// The name of the Docker volume (generated if not
	// provided).
	Name interface{}
}
