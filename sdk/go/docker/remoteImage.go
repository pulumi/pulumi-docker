// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package docker

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Pulls a Docker image to a given Docker host from a Docker Registry.
//
// This resource will *not* pull new layers of the image automatically unless used in
// conjunction with [`.getRegistryImage`](https://www.terraform.io/docs/providers/docker/d/registry_image.html)
// data source to update the `pullTriggers` field.
type RemoteImage struct {
	pulumi.CustomResourceState

	// If true, then the Docker image won't be
	// deleted on destroy operation. If this is false, it will delete the image from
	// the docker local storage on destroy operation.
	KeepLocally pulumi.BoolPtrOutput `pulumi:"keepLocally"`
	Latest      pulumi.StringOutput  `pulumi:"latest"`
	// The name of the Docker image, including any tags or SHA256 repo digests.
	Name pulumi.StringOutput `pulumi:"name"`
	// **Deprecated**, use `pullTriggers` instead.
	PullTrigger pulumi.StringPtrOutput `pulumi:"pullTrigger"`
	// List of values which cause an
	// image pull when changed. This is used to store the image digest from the
	// registry when using the `.getRegistryImage` [data source](https://www.terraform.io/docs/providers/docker/d/registry_image.html)
	// to trigger an image update.
	PullTriggers pulumi.StringArrayOutput `pulumi:"pullTriggers"`
}

// NewRemoteImage registers a new resource with the given unique name, arguments, and options.
func NewRemoteImage(ctx *pulumi.Context,
	name string, args *RemoteImageArgs, opts ...pulumi.ResourceOption) (*RemoteImage, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil {
		args = &RemoteImageArgs{}
	}
	var resource RemoteImage
	err := ctx.RegisterResource("docker:index/remoteImage:RemoteImage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRemoteImage gets an existing RemoteImage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRemoteImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RemoteImageState, opts ...pulumi.ResourceOption) (*RemoteImage, error) {
	var resource RemoteImage
	err := ctx.ReadResource("docker:index/remoteImage:RemoteImage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RemoteImage resources.
type remoteImageState struct {
	// If true, then the Docker image won't be
	// deleted on destroy operation. If this is false, it will delete the image from
	// the docker local storage on destroy operation.
	KeepLocally *bool   `pulumi:"keepLocally"`
	Latest      *string `pulumi:"latest"`
	// The name of the Docker image, including any tags or SHA256 repo digests.
	Name *string `pulumi:"name"`
	// **Deprecated**, use `pullTriggers` instead.
	PullTrigger *string `pulumi:"pullTrigger"`
	// List of values which cause an
	// image pull when changed. This is used to store the image digest from the
	// registry when using the `.getRegistryImage` [data source](https://www.terraform.io/docs/providers/docker/d/registry_image.html)
	// to trigger an image update.
	PullTriggers []string `pulumi:"pullTriggers"`
}

type RemoteImageState struct {
	// If true, then the Docker image won't be
	// deleted on destroy operation. If this is false, it will delete the image from
	// the docker local storage on destroy operation.
	KeepLocally pulumi.BoolPtrInput
	Latest      pulumi.StringPtrInput
	// The name of the Docker image, including any tags or SHA256 repo digests.
	Name pulumi.StringPtrInput
	// **Deprecated**, use `pullTriggers` instead.
	PullTrigger pulumi.StringPtrInput
	// List of values which cause an
	// image pull when changed. This is used to store the image digest from the
	// registry when using the `.getRegistryImage` [data source](https://www.terraform.io/docs/providers/docker/d/registry_image.html)
	// to trigger an image update.
	PullTriggers pulumi.StringArrayInput
}

func (RemoteImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*remoteImageState)(nil)).Elem()
}

type remoteImageArgs struct {
	// If true, then the Docker image won't be
	// deleted on destroy operation. If this is false, it will delete the image from
	// the docker local storage on destroy operation.
	KeepLocally *bool `pulumi:"keepLocally"`
	// The name of the Docker image, including any tags or SHA256 repo digests.
	Name string `pulumi:"name"`
	// **Deprecated**, use `pullTriggers` instead.
	PullTrigger *string `pulumi:"pullTrigger"`
	// List of values which cause an
	// image pull when changed. This is used to store the image digest from the
	// registry when using the `.getRegistryImage` [data source](https://www.terraform.io/docs/providers/docker/d/registry_image.html)
	// to trigger an image update.
	PullTriggers []string `pulumi:"pullTriggers"`
}

// The set of arguments for constructing a RemoteImage resource.
type RemoteImageArgs struct {
	// If true, then the Docker image won't be
	// deleted on destroy operation. If this is false, it will delete the image from
	// the docker local storage on destroy operation.
	KeepLocally pulumi.BoolPtrInput
	// The name of the Docker image, including any tags or SHA256 repo digests.
	Name pulumi.StringInput
	// **Deprecated**, use `pullTriggers` instead.
	PullTrigger pulumi.StringPtrInput
	// List of values which cause an
	// image pull when changed. This is used to store the image digest from the
	// registry when using the `.getRegistryImage` [data source](https://www.terraform.io/docs/providers/docker/d/registry_image.html)
	// to trigger an image update.
	PullTriggers pulumi.StringArrayInput
}

func (RemoteImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*remoteImageArgs)(nil)).Elem()
}
