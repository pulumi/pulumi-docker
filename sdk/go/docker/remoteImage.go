// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package docker

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Pulls a Docker image to a given Docker host from a Docker Registry.
//
// This resource will *not* pull new layers of the image automatically unless used in
// conjunction with [`RegistryImage`](https://www.terraform.io/docs/providers/docker/d/registry_image.html)
// data source to update the `pullTriggers` field.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-docker/sdk/v2/go/docker/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := docker.NewRemoteImage(ctx, "ubuntu", &docker.RemoteImageArgs{
// 			Name: pulumi.String("ubuntu:precise"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Dynamic image
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-docker/sdk/v2/go/docker"
// 	"github.com/pulumi/pulumi-docker/sdk/v2/go/docker/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "ubuntu:precise"
// 		ubuntuRegistryImage, err := docker.LookupRegistryImage(ctx, &docker.LookupRegistryImageArgs{
// 			Name: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = docker.NewRemoteImage(ctx, "ubuntuRemoteImage", &docker.RemoteImageArgs{
// 			Name: pulumi.String(ubuntuRegistryImage.Name),
// 			PullTriggers: pulumi.StringArray{
// 				pulumi.String(ubuntuRegistryImage.Sha256Digest),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type RemoteImage struct {
	pulumi.CustomResourceState

	// See Build below for details.
	Build RemoteImageBuildPtrOutput `pulumi:"build"`
	// Force remove the image when the resource is destroyed
	ForceRemove pulumi.BoolPtrOutput `pulumi:"forceRemove"`
	// If true, then the Docker image won't be
	// deleted on destroy operation. If this is false, it will delete the image from
	// the docker local storage on destroy operation.
	KeepLocally pulumi.BoolPtrOutput `pulumi:"keepLocally"`
	Latest      pulumi.StringOutput  `pulumi:"latest"`
	// The name of the Docker image, including any tags or SHA256 repo digests.
	Name   pulumi.StringOutput `pulumi:"name"`
	Output pulumi.StringOutput `pulumi:"output"`
	// **Deprecated**, use `pullTriggers` instead.
	//
	// Deprecated: Use field pull_triggers instead
	PullTrigger pulumi.StringPtrOutput `pulumi:"pullTrigger"`
	// List of values which cause an
	// image pull when changed. This is used to store the image digest from the
	// registry when using the `RegistryImage` [data source](https://www.terraform.io/docs/providers/docker/d/registry_image.html)
	// to trigger an image update.
	PullTriggers pulumi.StringArrayOutput `pulumi:"pullTriggers"`
}

// NewRemoteImage registers a new resource with the given unique name, arguments, and options.
func NewRemoteImage(ctx *pulumi.Context,
	name string, args *RemoteImageArgs, opts ...pulumi.ResourceOption) (*RemoteImage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	var resource RemoteImage
	err := ctx.RegisterResource("docker:index/remoteImage:RemoteImage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRemoteImage gets an existing RemoteImage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRemoteImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RemoteImageState, opts ...pulumi.ResourceOption) (*RemoteImage, error) {
	var resource RemoteImage
	err := ctx.ReadResource("docker:index/remoteImage:RemoteImage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RemoteImage resources.
type remoteImageState struct {
	// See Build below for details.
	Build *RemoteImageBuild `pulumi:"build"`
	// Force remove the image when the resource is destroyed
	ForceRemove *bool `pulumi:"forceRemove"`
	// If true, then the Docker image won't be
	// deleted on destroy operation. If this is false, it will delete the image from
	// the docker local storage on destroy operation.
	KeepLocally *bool   `pulumi:"keepLocally"`
	Latest      *string `pulumi:"latest"`
	// The name of the Docker image, including any tags or SHA256 repo digests.
	Name   *string `pulumi:"name"`
	Output *string `pulumi:"output"`
	// **Deprecated**, use `pullTriggers` instead.
	//
	// Deprecated: Use field pull_triggers instead
	PullTrigger *string `pulumi:"pullTrigger"`
	// List of values which cause an
	// image pull when changed. This is used to store the image digest from the
	// registry when using the `RegistryImage` [data source](https://www.terraform.io/docs/providers/docker/d/registry_image.html)
	// to trigger an image update.
	PullTriggers []string `pulumi:"pullTriggers"`
}

type RemoteImageState struct {
	// See Build below for details.
	Build RemoteImageBuildPtrInput
	// Force remove the image when the resource is destroyed
	ForceRemove pulumi.BoolPtrInput
	// If true, then the Docker image won't be
	// deleted on destroy operation. If this is false, it will delete the image from
	// the docker local storage on destroy operation.
	KeepLocally pulumi.BoolPtrInput
	Latest      pulumi.StringPtrInput
	// The name of the Docker image, including any tags or SHA256 repo digests.
	Name   pulumi.StringPtrInput
	Output pulumi.StringPtrInput
	// **Deprecated**, use `pullTriggers` instead.
	//
	// Deprecated: Use field pull_triggers instead
	PullTrigger pulumi.StringPtrInput
	// List of values which cause an
	// image pull when changed. This is used to store the image digest from the
	// registry when using the `RegistryImage` [data source](https://www.terraform.io/docs/providers/docker/d/registry_image.html)
	// to trigger an image update.
	PullTriggers pulumi.StringArrayInput
}

func (RemoteImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*remoteImageState)(nil)).Elem()
}

type remoteImageArgs struct {
	// See Build below for details.
	Build *RemoteImageBuild `pulumi:"build"`
	// Force remove the image when the resource is destroyed
	ForceRemove *bool `pulumi:"forceRemove"`
	// If true, then the Docker image won't be
	// deleted on destroy operation. If this is false, it will delete the image from
	// the docker local storage on destroy operation.
	KeepLocally *bool `pulumi:"keepLocally"`
	// The name of the Docker image, including any tags or SHA256 repo digests.
	Name string `pulumi:"name"`
	// **Deprecated**, use `pullTriggers` instead.
	//
	// Deprecated: Use field pull_triggers instead
	PullTrigger *string `pulumi:"pullTrigger"`
	// List of values which cause an
	// image pull when changed. This is used to store the image digest from the
	// registry when using the `RegistryImage` [data source](https://www.terraform.io/docs/providers/docker/d/registry_image.html)
	// to trigger an image update.
	PullTriggers []string `pulumi:"pullTriggers"`
}

// The set of arguments for constructing a RemoteImage resource.
type RemoteImageArgs struct {
	// See Build below for details.
	Build RemoteImageBuildPtrInput
	// Force remove the image when the resource is destroyed
	ForceRemove pulumi.BoolPtrInput
	// If true, then the Docker image won't be
	// deleted on destroy operation. If this is false, it will delete the image from
	// the docker local storage on destroy operation.
	KeepLocally pulumi.BoolPtrInput
	// The name of the Docker image, including any tags or SHA256 repo digests.
	Name pulumi.StringInput
	// **Deprecated**, use `pullTriggers` instead.
	//
	// Deprecated: Use field pull_triggers instead
	PullTrigger pulumi.StringPtrInput
	// List of values which cause an
	// image pull when changed. This is used to store the image digest from the
	// registry when using the `RegistryImage` [data source](https://www.terraform.io/docs/providers/docker/d/registry_image.html)
	// to trigger an image update.
	PullTriggers pulumi.StringArrayInput
}

func (RemoteImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*remoteImageArgs)(nil)).Elem()
}

type RemoteImageInput interface {
	pulumi.Input

	ToRemoteImageOutput() RemoteImageOutput
	ToRemoteImageOutputWithContext(ctx context.Context) RemoteImageOutput
}

func (*RemoteImage) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteImage)(nil))
}

func (i *RemoteImage) ToRemoteImageOutput() RemoteImageOutput {
	return i.ToRemoteImageOutputWithContext(context.Background())
}

func (i *RemoteImage) ToRemoteImageOutputWithContext(ctx context.Context) RemoteImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteImageOutput)
}

type RemoteImageOutput struct {
	*pulumi.OutputState
}

func (RemoteImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteImage)(nil))
}

func (o RemoteImageOutput) ToRemoteImageOutput() RemoteImageOutput {
	return o
}

func (o RemoteImageOutput) ToRemoteImageOutputWithContext(ctx context.Context) RemoteImageOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(RemoteImageOutput{})
}
