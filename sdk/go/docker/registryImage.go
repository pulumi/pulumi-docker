// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package docker

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an image/tag in a Docker registry.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-docker/sdk/v3/go/docker"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := docker.NewRegistryImage(ctx, "helloworld", &docker.RegistryImageArgs{
// 			Build: &docker.RegistryImageBuildArgs{
// 				Context: pulumi.String("pathToContextFolder"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type RegistryImage struct {
	pulumi.CustomResourceState

	// See Build below for details.
	Build RegistryImageBuildPtrOutput `pulumi:"build"`
	// If true, then the Docker image won't be
	// deleted on destroy operation. If this is false, it will delete the image from
	// the docker registry on destroy operation.
	KeepRemotely pulumi.BoolPtrOutput `pulumi:"keepRemotely"`
	// type of ulimit, e.g. nofile
	Name         pulumi.StringOutput `pulumi:"name"`
	Sha256Digest pulumi.StringOutput `pulumi:"sha256Digest"`
}

// NewRegistryImage registers a new resource with the given unique name, arguments, and options.
func NewRegistryImage(ctx *pulumi.Context,
	name string, args *RegistryImageArgs, opts ...pulumi.ResourceOption) (*RegistryImage, error) {
	if args == nil {
		args = &RegistryImageArgs{}
	}

	var resource RegistryImage
	err := ctx.RegisterResource("docker:index/registryImage:RegistryImage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistryImage gets an existing RegistryImage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistryImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistryImageState, opts ...pulumi.ResourceOption) (*RegistryImage, error) {
	var resource RegistryImage
	err := ctx.ReadResource("docker:index/registryImage:RegistryImage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegistryImage resources.
type registryImageState struct {
	// See Build below for details.
	Build *RegistryImageBuild `pulumi:"build"`
	// If true, then the Docker image won't be
	// deleted on destroy operation. If this is false, it will delete the image from
	// the docker registry on destroy operation.
	KeepRemotely *bool `pulumi:"keepRemotely"`
	// type of ulimit, e.g. nofile
	Name         *string `pulumi:"name"`
	Sha256Digest *string `pulumi:"sha256Digest"`
}

type RegistryImageState struct {
	// See Build below for details.
	Build RegistryImageBuildPtrInput
	// If true, then the Docker image won't be
	// deleted on destroy operation. If this is false, it will delete the image from
	// the docker registry on destroy operation.
	KeepRemotely pulumi.BoolPtrInput
	// type of ulimit, e.g. nofile
	Name         pulumi.StringPtrInput
	Sha256Digest pulumi.StringPtrInput
}

func (RegistryImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*registryImageState)(nil)).Elem()
}

type registryImageArgs struct {
	// See Build below for details.
	Build *RegistryImageBuild `pulumi:"build"`
	// If true, then the Docker image won't be
	// deleted on destroy operation. If this is false, it will delete the image from
	// the docker registry on destroy operation.
	KeepRemotely *bool `pulumi:"keepRemotely"`
	// type of ulimit, e.g. nofile
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a RegistryImage resource.
type RegistryImageArgs struct {
	// See Build below for details.
	Build RegistryImageBuildPtrInput
	// If true, then the Docker image won't be
	// deleted on destroy operation. If this is false, it will delete the image from
	// the docker registry on destroy operation.
	KeepRemotely pulumi.BoolPtrInput
	// type of ulimit, e.g. nofile
	Name pulumi.StringPtrInput
}

func (RegistryImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registryImageArgs)(nil)).Elem()
}

type RegistryImageInput interface {
	pulumi.Input

	ToRegistryImageOutput() RegistryImageOutput
	ToRegistryImageOutputWithContext(ctx context.Context) RegistryImageOutput
}

func (*RegistryImage) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryImage)(nil))
}

func (i *RegistryImage) ToRegistryImageOutput() RegistryImageOutput {
	return i.ToRegistryImageOutputWithContext(context.Background())
}

func (i *RegistryImage) ToRegistryImageOutputWithContext(ctx context.Context) RegistryImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryImageOutput)
}

func (i *RegistryImage) ToRegistryImagePtrOutput() RegistryImagePtrOutput {
	return i.ToRegistryImagePtrOutputWithContext(context.Background())
}

func (i *RegistryImage) ToRegistryImagePtrOutputWithContext(ctx context.Context) RegistryImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryImagePtrOutput)
}

type RegistryImagePtrInput interface {
	pulumi.Input

	ToRegistryImagePtrOutput() RegistryImagePtrOutput
	ToRegistryImagePtrOutputWithContext(ctx context.Context) RegistryImagePtrOutput
}

type registryImagePtrType RegistryImageArgs

func (*registryImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryImage)(nil))
}

func (i *registryImagePtrType) ToRegistryImagePtrOutput() RegistryImagePtrOutput {
	return i.ToRegistryImagePtrOutputWithContext(context.Background())
}

func (i *registryImagePtrType) ToRegistryImagePtrOutputWithContext(ctx context.Context) RegistryImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryImagePtrOutput)
}

// RegistryImageArrayInput is an input type that accepts RegistryImageArray and RegistryImageArrayOutput values.
// You can construct a concrete instance of `RegistryImageArrayInput` via:
//
//          RegistryImageArray{ RegistryImageArgs{...} }
type RegistryImageArrayInput interface {
	pulumi.Input

	ToRegistryImageArrayOutput() RegistryImageArrayOutput
	ToRegistryImageArrayOutputWithContext(context.Context) RegistryImageArrayOutput
}

type RegistryImageArray []RegistryImageInput

func (RegistryImageArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*RegistryImage)(nil))
}

func (i RegistryImageArray) ToRegistryImageArrayOutput() RegistryImageArrayOutput {
	return i.ToRegistryImageArrayOutputWithContext(context.Background())
}

func (i RegistryImageArray) ToRegistryImageArrayOutputWithContext(ctx context.Context) RegistryImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryImageArrayOutput)
}

// RegistryImageMapInput is an input type that accepts RegistryImageMap and RegistryImageMapOutput values.
// You can construct a concrete instance of `RegistryImageMapInput` via:
//
//          RegistryImageMap{ "key": RegistryImageArgs{...} }
type RegistryImageMapInput interface {
	pulumi.Input

	ToRegistryImageMapOutput() RegistryImageMapOutput
	ToRegistryImageMapOutputWithContext(context.Context) RegistryImageMapOutput
}

type RegistryImageMap map[string]RegistryImageInput

func (RegistryImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*RegistryImage)(nil))
}

func (i RegistryImageMap) ToRegistryImageMapOutput() RegistryImageMapOutput {
	return i.ToRegistryImageMapOutputWithContext(context.Background())
}

func (i RegistryImageMap) ToRegistryImageMapOutputWithContext(ctx context.Context) RegistryImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryImageMapOutput)
}

type RegistryImageOutput struct {
	*pulumi.OutputState
}

func (RegistryImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryImage)(nil))
}

func (o RegistryImageOutput) ToRegistryImageOutput() RegistryImageOutput {
	return o
}

func (o RegistryImageOutput) ToRegistryImageOutputWithContext(ctx context.Context) RegistryImageOutput {
	return o
}

func (o RegistryImageOutput) ToRegistryImagePtrOutput() RegistryImagePtrOutput {
	return o.ToRegistryImagePtrOutputWithContext(context.Background())
}

func (o RegistryImageOutput) ToRegistryImagePtrOutputWithContext(ctx context.Context) RegistryImagePtrOutput {
	return o.ApplyT(func(v RegistryImage) *RegistryImage {
		return &v
	}).(RegistryImagePtrOutput)
}

type RegistryImagePtrOutput struct {
	*pulumi.OutputState
}

func (RegistryImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryImage)(nil))
}

func (o RegistryImagePtrOutput) ToRegistryImagePtrOutput() RegistryImagePtrOutput {
	return o
}

func (o RegistryImagePtrOutput) ToRegistryImagePtrOutputWithContext(ctx context.Context) RegistryImagePtrOutput {
	return o
}

type RegistryImageArrayOutput struct{ *pulumi.OutputState }

func (RegistryImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryImage)(nil))
}

func (o RegistryImageArrayOutput) ToRegistryImageArrayOutput() RegistryImageArrayOutput {
	return o
}

func (o RegistryImageArrayOutput) ToRegistryImageArrayOutputWithContext(ctx context.Context) RegistryImageArrayOutput {
	return o
}

func (o RegistryImageArrayOutput) Index(i pulumi.IntInput) RegistryImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryImage {
		return vs[0].([]RegistryImage)[vs[1].(int)]
	}).(RegistryImageOutput)
}

type RegistryImageMapOutput struct{ *pulumi.OutputState }

func (RegistryImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]RegistryImage)(nil))
}

func (o RegistryImageMapOutput) ToRegistryImageMapOutput() RegistryImageMapOutput {
	return o
}

func (o RegistryImageMapOutput) ToRegistryImageMapOutputWithContext(ctx context.Context) RegistryImageMapOutput {
	return o
}

func (o RegistryImageMapOutput) MapIndex(k pulumi.StringInput) RegistryImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) RegistryImage {
		return vs[0].(map[string]RegistryImage)[vs[1].(string)]
	}).(RegistryImageOutput)
}

func init() {
	pulumi.RegisterOutputType(RegistryImageOutput{})
	pulumi.RegisterOutputType(RegistryImagePtrOutput{})
	pulumi.RegisterOutputType(RegistryImageArrayOutput{})
	pulumi.RegisterOutputType(RegistryImageMapOutput{})
}
