// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BuildxBuilderRemote {
    /**
     * @return Absolute path to the TLS certificate authority used for validation.
     * 
     */
    private @Nullable String cacert;
    /**
     * @return Absolute path to the TLS client certificate to present to buildkitd.
     * 
     */
    private @Nullable String cert;
    /**
     * @return Automatically load images to the Docker Engine image store. Defaults to `false`
     * 
     */
    private @Nullable Boolean defaultLoad;
    /**
     * @return Sets the TLS client key.
     * 
     */
    private @Nullable String key;
    /**
     * @return TLS server name used in requests.
     * 
     */
    private @Nullable String servername;

    private BuildxBuilderRemote() {}
    /**
     * @return Absolute path to the TLS certificate authority used for validation.
     * 
     */
    public Optional<String> cacert() {
        return Optional.ofNullable(this.cacert);
    }
    /**
     * @return Absolute path to the TLS client certificate to present to buildkitd.
     * 
     */
    public Optional<String> cert() {
        return Optional.ofNullable(this.cert);
    }
    /**
     * @return Automatically load images to the Docker Engine image store. Defaults to `false`
     * 
     */
    public Optional<Boolean> defaultLoad() {
        return Optional.ofNullable(this.defaultLoad);
    }
    /**
     * @return Sets the TLS client key.
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return TLS server name used in requests.
     * 
     */
    public Optional<String> servername() {
        return Optional.ofNullable(this.servername);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BuildxBuilderRemote defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String cacert;
        private @Nullable String cert;
        private @Nullable Boolean defaultLoad;
        private @Nullable String key;
        private @Nullable String servername;
        public Builder() {}
        public Builder(BuildxBuilderRemote defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cacert = defaults.cacert;
    	      this.cert = defaults.cert;
    	      this.defaultLoad = defaults.defaultLoad;
    	      this.key = defaults.key;
    	      this.servername = defaults.servername;
        }

        @CustomType.Setter
        public Builder cacert(@Nullable String cacert) {

            this.cacert = cacert;
            return this;
        }
        @CustomType.Setter
        public Builder cert(@Nullable String cert) {

            this.cert = cert;
            return this;
        }
        @CustomType.Setter
        public Builder defaultLoad(@Nullable Boolean defaultLoad) {

            this.defaultLoad = defaultLoad;
            return this;
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {

            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder servername(@Nullable String servername) {

            this.servername = servername;
            return this;
        }
        public BuildxBuilderRemote build() {
            final var _resultValue = new BuildxBuilderRemote();
            _resultValue.cacert = cacert;
            _resultValue.cert = cert;
            _resultValue.defaultLoad = defaultLoad;
            _resultValue.key = key;
            _resultValue.servername = servername;
            return _resultValue;
        }
    }
}
