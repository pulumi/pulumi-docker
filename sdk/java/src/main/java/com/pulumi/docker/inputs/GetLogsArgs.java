// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetLogsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetLogsArgs Empty = new GetLogsArgs();

    @Import(name="details")
    private @Nullable Output<Boolean> details;

    public Optional<Output<Boolean>> details() {
        return Optional.ofNullable(this.details);
    }

    /**
     * Discard headers that docker appends to each log entry
     * 
     */
    @Import(name="discardHeaders")
    private @Nullable Output<Boolean> discardHeaders;

    /**
     * @return Discard headers that docker appends to each log entry
     * 
     */
    public Optional<Output<Boolean>> discardHeaders() {
        return Optional.ofNullable(this.discardHeaders);
    }

    @Import(name="follow")
    private @Nullable Output<Boolean> follow;

    public Optional<Output<Boolean>> follow() {
        return Optional.ofNullable(this.follow);
    }

    /**
     * If true populate computed value `logs_list_string`
     * 
     */
    @Import(name="logsListStringEnabled")
    private @Nullable Output<Boolean> logsListStringEnabled;

    /**
     * @return If true populate computed value `logs_list_string`
     * 
     */
    public Optional<Output<Boolean>> logsListStringEnabled() {
        return Optional.ofNullable(this.logsListStringEnabled);
    }

    /**
     * The name of the Docker Container
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the Docker Container
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    @Import(name="showStderr")
    private @Nullable Output<Boolean> showStderr;

    public Optional<Output<Boolean>> showStderr() {
        return Optional.ofNullable(this.showStderr);
    }

    @Import(name="showStdout")
    private @Nullable Output<Boolean> showStdout;

    public Optional<Output<Boolean>> showStdout() {
        return Optional.ofNullable(this.showStdout);
    }

    @Import(name="since")
    private @Nullable Output<String> since;

    public Optional<Output<String>> since() {
        return Optional.ofNullable(this.since);
    }

    @Import(name="tail")
    private @Nullable Output<String> tail;

    public Optional<Output<String>> tail() {
        return Optional.ofNullable(this.tail);
    }

    @Import(name="timestamps")
    private @Nullable Output<Boolean> timestamps;

    public Optional<Output<Boolean>> timestamps() {
        return Optional.ofNullable(this.timestamps);
    }

    @Import(name="until")
    private @Nullable Output<String> until;

    public Optional<Output<String>> until() {
        return Optional.ofNullable(this.until);
    }

    private GetLogsArgs() {}

    private GetLogsArgs(GetLogsArgs $) {
        this.details = $.details;
        this.discardHeaders = $.discardHeaders;
        this.follow = $.follow;
        this.logsListStringEnabled = $.logsListStringEnabled;
        this.name = $.name;
        this.showStderr = $.showStderr;
        this.showStdout = $.showStdout;
        this.since = $.since;
        this.tail = $.tail;
        this.timestamps = $.timestamps;
        this.until = $.until;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLogsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLogsArgs $;

        public Builder() {
            $ = new GetLogsArgs();
        }

        public Builder(GetLogsArgs defaults) {
            $ = new GetLogsArgs(Objects.requireNonNull(defaults));
        }

        public Builder details(@Nullable Output<Boolean> details) {
            $.details = details;
            return this;
        }

        public Builder details(Boolean details) {
            return details(Output.of(details));
        }

        /**
         * @param discardHeaders Discard headers that docker appends to each log entry
         * 
         * @return builder
         * 
         */
        public Builder discardHeaders(@Nullable Output<Boolean> discardHeaders) {
            $.discardHeaders = discardHeaders;
            return this;
        }

        /**
         * @param discardHeaders Discard headers that docker appends to each log entry
         * 
         * @return builder
         * 
         */
        public Builder discardHeaders(Boolean discardHeaders) {
            return discardHeaders(Output.of(discardHeaders));
        }

        public Builder follow(@Nullable Output<Boolean> follow) {
            $.follow = follow;
            return this;
        }

        public Builder follow(Boolean follow) {
            return follow(Output.of(follow));
        }

        /**
         * @param logsListStringEnabled If true populate computed value `logs_list_string`
         * 
         * @return builder
         * 
         */
        public Builder logsListStringEnabled(@Nullable Output<Boolean> logsListStringEnabled) {
            $.logsListStringEnabled = logsListStringEnabled;
            return this;
        }

        /**
         * @param logsListStringEnabled If true populate computed value `logs_list_string`
         * 
         * @return builder
         * 
         */
        public Builder logsListStringEnabled(Boolean logsListStringEnabled) {
            return logsListStringEnabled(Output.of(logsListStringEnabled));
        }

        /**
         * @param name The name of the Docker Container
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Docker Container
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder showStderr(@Nullable Output<Boolean> showStderr) {
            $.showStderr = showStderr;
            return this;
        }

        public Builder showStderr(Boolean showStderr) {
            return showStderr(Output.of(showStderr));
        }

        public Builder showStdout(@Nullable Output<Boolean> showStdout) {
            $.showStdout = showStdout;
            return this;
        }

        public Builder showStdout(Boolean showStdout) {
            return showStdout(Output.of(showStdout));
        }

        public Builder since(@Nullable Output<String> since) {
            $.since = since;
            return this;
        }

        public Builder since(String since) {
            return since(Output.of(since));
        }

        public Builder tail(@Nullable Output<String> tail) {
            $.tail = tail;
            return this;
        }

        public Builder tail(String tail) {
            return tail(Output.of(tail));
        }

        public Builder timestamps(@Nullable Output<Boolean> timestamps) {
            $.timestamps = timestamps;
            return this;
        }

        public Builder timestamps(Boolean timestamps) {
            return timestamps(Output.of(timestamps));
        }

        public Builder until(@Nullable Output<String> until) {
            $.until = until;
            return this;
        }

        public Builder until(String until) {
            return until(Output.of(until));
        }

        public GetLogsArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetLogsArgs", "name");
            }
            return $;
        }
    }

}
