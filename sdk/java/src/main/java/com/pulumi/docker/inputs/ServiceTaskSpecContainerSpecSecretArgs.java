// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceTaskSpecContainerSpecSecretArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceTaskSpecContainerSpecSecretArgs Empty = new ServiceTaskSpecContainerSpecSecretArgs();

    /**
     * Represents the file GID. Defaults to `0`
     * 
     */
    @Import(name="fileGid")
    private @Nullable Output<String> fileGid;

    /**
     * @return Represents the file GID. Defaults to `0`
     * 
     */
    public Optional<Output<String>> fileGid() {
        return Optional.ofNullable(this.fileGid);
    }

    /**
     * Represents represents the FileMode of the file. Defaults to `0o444`
     * 
     */
    @Import(name="fileMode")
    private @Nullable Output<Integer> fileMode;

    /**
     * @return Represents represents the FileMode of the file. Defaults to `0o444`
     * 
     */
    public Optional<Output<Integer>> fileMode() {
        return Optional.ofNullable(this.fileMode);
    }

    /**
     * Represents the final filename in the filesystem
     * 
     */
    @Import(name="fileName", required=true)
    private Output<String> fileName;

    /**
     * @return Represents the final filename in the filesystem
     * 
     */
    public Output<String> fileName() {
        return this.fileName;
    }

    /**
     * Represents the file UID. Defaults to `0`
     * 
     */
    @Import(name="fileUid")
    private @Nullable Output<String> fileUid;

    /**
     * @return Represents the file UID. Defaults to `0`
     * 
     */
    public Optional<Output<String>> fileUid() {
        return Optional.ofNullable(this.fileUid);
    }

    /**
     * ID of the specific secret that we&#39;re referencing
     * 
     */
    @Import(name="secretId", required=true)
    private Output<String> secretId;

    /**
     * @return ID of the specific secret that we&#39;re referencing
     * 
     */
    public Output<String> secretId() {
        return this.secretId;
    }

    /**
     * Name of the secret that this references, but this is just provided for lookup/display purposes. The config in the reference will be identified by its ID
     * 
     */
    @Import(name="secretName")
    private @Nullable Output<String> secretName;

    /**
     * @return Name of the secret that this references, but this is just provided for lookup/display purposes. The config in the reference will be identified by its ID
     * 
     */
    public Optional<Output<String>> secretName() {
        return Optional.ofNullable(this.secretName);
    }

    private ServiceTaskSpecContainerSpecSecretArgs() {}

    private ServiceTaskSpecContainerSpecSecretArgs(ServiceTaskSpecContainerSpecSecretArgs $) {
        this.fileGid = $.fileGid;
        this.fileMode = $.fileMode;
        this.fileName = $.fileName;
        this.fileUid = $.fileUid;
        this.secretId = $.secretId;
        this.secretName = $.secretName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceTaskSpecContainerSpecSecretArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceTaskSpecContainerSpecSecretArgs $;

        public Builder() {
            $ = new ServiceTaskSpecContainerSpecSecretArgs();
        }

        public Builder(ServiceTaskSpecContainerSpecSecretArgs defaults) {
            $ = new ServiceTaskSpecContainerSpecSecretArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fileGid Represents the file GID. Defaults to `0`
         * 
         * @return builder
         * 
         */
        public Builder fileGid(@Nullable Output<String> fileGid) {
            $.fileGid = fileGid;
            return this;
        }

        /**
         * @param fileGid Represents the file GID. Defaults to `0`
         * 
         * @return builder
         * 
         */
        public Builder fileGid(String fileGid) {
            return fileGid(Output.of(fileGid));
        }

        /**
         * @param fileMode Represents represents the FileMode of the file. Defaults to `0o444`
         * 
         * @return builder
         * 
         */
        public Builder fileMode(@Nullable Output<Integer> fileMode) {
            $.fileMode = fileMode;
            return this;
        }

        /**
         * @param fileMode Represents represents the FileMode of the file. Defaults to `0o444`
         * 
         * @return builder
         * 
         */
        public Builder fileMode(Integer fileMode) {
            return fileMode(Output.of(fileMode));
        }

        /**
         * @param fileName Represents the final filename in the filesystem
         * 
         * @return builder
         * 
         */
        public Builder fileName(Output<String> fileName) {
            $.fileName = fileName;
            return this;
        }

        /**
         * @param fileName Represents the final filename in the filesystem
         * 
         * @return builder
         * 
         */
        public Builder fileName(String fileName) {
            return fileName(Output.of(fileName));
        }

        /**
         * @param fileUid Represents the file UID. Defaults to `0`
         * 
         * @return builder
         * 
         */
        public Builder fileUid(@Nullable Output<String> fileUid) {
            $.fileUid = fileUid;
            return this;
        }

        /**
         * @param fileUid Represents the file UID. Defaults to `0`
         * 
         * @return builder
         * 
         */
        public Builder fileUid(String fileUid) {
            return fileUid(Output.of(fileUid));
        }

        /**
         * @param secretId ID of the specific secret that we&#39;re referencing
         * 
         * @return builder
         * 
         */
        public Builder secretId(Output<String> secretId) {
            $.secretId = secretId;
            return this;
        }

        /**
         * @param secretId ID of the specific secret that we&#39;re referencing
         * 
         * @return builder
         * 
         */
        public Builder secretId(String secretId) {
            return secretId(Output.of(secretId));
        }

        /**
         * @param secretName Name of the secret that this references, but this is just provided for lookup/display purposes. The config in the reference will be identified by its ID
         * 
         * @return builder
         * 
         */
        public Builder secretName(@Nullable Output<String> secretName) {
            $.secretName = secretName;
            return this;
        }

        /**
         * @param secretName Name of the secret that this references, but this is just provided for lookup/display purposes. The config in the reference will be identified by its ID
         * 
         * @return builder
         * 
         */
        public Builder secretName(String secretName) {
            return secretName(Output.of(secretName));
        }

        public ServiceTaskSpecContainerSpecSecretArgs build() {
            if ($.fileName == null) {
                throw new MissingRequiredPropertyException("ServiceTaskSpecContainerSpecSecretArgs", "fileName");
            }
            if ($.secretId == null) {
                throw new MissingRequiredPropertyException("ServiceTaskSpecContainerSpecSecretArgs", "secretId");
            }
            return $;
        }
    }

}
