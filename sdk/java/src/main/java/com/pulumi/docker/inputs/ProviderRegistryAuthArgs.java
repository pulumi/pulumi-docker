// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderRegistryAuthArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderRegistryAuthArgs Empty = new ProviderRegistryAuthArgs();

    @Import(name="address", required=true)
    private Output<String> address;

    public Output<String> address() {
        return this.address;
    }

    @Import(name="authDisabled")
    private @Nullable Output<Boolean> authDisabled;

    public Optional<Output<Boolean>> authDisabled() {
        return Optional.ofNullable(this.authDisabled);
    }

    @Import(name="configFile")
    private @Nullable Output<String> configFile;

    public Optional<Output<String>> configFile() {
        return Optional.ofNullable(this.configFile);
    }

    @Import(name="configFileContent")
    private @Nullable Output<String> configFileContent;

    public Optional<Output<String>> configFileContent() {
        return Optional.ofNullable(this.configFileContent);
    }

    @Import(name="password")
    private @Nullable Output<String> password;

    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    @Import(name="username")
    private @Nullable Output<String> username;

    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private ProviderRegistryAuthArgs() {}

    private ProviderRegistryAuthArgs(ProviderRegistryAuthArgs $) {
        this.address = $.address;
        this.authDisabled = $.authDisabled;
        this.configFile = $.configFile;
        this.configFileContent = $.configFileContent;
        this.password = $.password;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderRegistryAuthArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderRegistryAuthArgs $;

        public Builder() {
            $ = new ProviderRegistryAuthArgs();
        }

        public Builder(ProviderRegistryAuthArgs defaults) {
            $ = new ProviderRegistryAuthArgs(Objects.requireNonNull(defaults));
        }

        public Builder address(Output<String> address) {
            $.address = address;
            return this;
        }

        public Builder address(String address) {
            return address(Output.of(address));
        }

        public Builder authDisabled(@Nullable Output<Boolean> authDisabled) {
            $.authDisabled = authDisabled;
            return this;
        }

        public Builder authDisabled(Boolean authDisabled) {
            return authDisabled(Output.of(authDisabled));
        }

        public Builder configFile(@Nullable Output<String> configFile) {
            $.configFile = configFile;
            return this;
        }

        public Builder configFile(String configFile) {
            return configFile(Output.of(configFile));
        }

        public Builder configFileContent(@Nullable Output<String> configFileContent) {
            $.configFileContent = configFileContent;
            return this;
        }

        public Builder configFileContent(String configFileContent) {
            return configFileContent(Output.of(configFileContent));
        }

        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        public Builder password(String password) {
            return password(Output.of(password));
        }

        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ProviderRegistryAuthArgs build() {
            if ($.address == null) {
                throw new MissingRequiredPropertyException("ProviderRegistryAuthArgs", "address");
            }
            return $;
        }
    }

}
