// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistryImageBuildSecretArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistryImageBuildSecretArgs Empty = new RegistryImageBuildSecretArgs();

    /**
     * Environment variable source of the secret
     * 
     */
    @Import(name="env")
    private @Nullable Output<String> env;

    /**
     * @return Environment variable source of the secret
     * 
     */
    public Optional<Output<String>> env() {
        return Optional.ofNullable(this.env);
    }

    /**
     * The ID of this resource.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The ID of this resource.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * File source of the secret. Takes precedence over `env`
     * 
     */
    @Import(name="src")
    private @Nullable Output<String> src;

    /**
     * @return File source of the secret. Takes precedence over `env`
     * 
     */
    public Optional<Output<String>> src() {
        return Optional.ofNullable(this.src);
    }

    private RegistryImageBuildSecretArgs() {}

    private RegistryImageBuildSecretArgs(RegistryImageBuildSecretArgs $) {
        this.env = $.env;
        this.id = $.id;
        this.src = $.src;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryImageBuildSecretArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryImageBuildSecretArgs $;

        public Builder() {
            $ = new RegistryImageBuildSecretArgs();
        }

        public Builder(RegistryImageBuildSecretArgs defaults) {
            $ = new RegistryImageBuildSecretArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param env Environment variable source of the secret
         * 
         * @return builder
         * 
         */
        public Builder env(@Nullable Output<String> env) {
            $.env = env;
            return this;
        }

        /**
         * @param env Environment variable source of the secret
         * 
         * @return builder
         * 
         */
        public Builder env(String env) {
            return env(Output.of(env));
        }

        /**
         * @param id The ID of this resource.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of this resource.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param src File source of the secret. Takes precedence over `env`
         * 
         * @return builder
         * 
         */
        public Builder src(@Nullable Output<String> src) {
            $.src = src;
            return this;
        }

        /**
         * @param src File source of the secret. Takes precedence over `env`
         * 
         * @return builder
         * 
         */
        public Builder src(String src) {
            return src(Output.of(src));
        }

        public RegistryImageBuildSecretArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("RegistryImageBuildSecretArgs", "id");
            }
            return $;
        }
    }

}
