// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeClusterArgs Empty = new VolumeClusterArgs();

    /**
     * Availability of the volume. Can be `active` (default), `pause`, or `drain`.
     * 
     */
    @Import(name="availability")
    private @Nullable Output<String> availability;

    /**
     * @return Availability of the volume. Can be `active` (default), `pause`, or `drain`.
     * 
     */
    public Optional<Output<String>> availability() {
        return Optional.ofNullable(this.availability);
    }

    /**
     * Cluster Volume group
     * 
     */
    @Import(name="group")
    private @Nullable Output<String> group;

    /**
     * @return Cluster Volume group
     * 
     */
    public Optional<Output<String>> group() {
        return Optional.ofNullable(this.group);
    }

    /**
     * The ID of the cluster volume.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The ID of the cluster volume.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Minimum size of the Cluster Volume in human readable memory bytes (like 128MiB, 2GiB, etc). Must be in format of KiB, MiB, Gib, Tib or PiB.
     * 
     */
    @Import(name="limitBytes")
    private @Nullable Output<String> limitBytes;

    /**
     * @return Minimum size of the Cluster Volume in human readable memory bytes (like 128MiB, 2GiB, etc). Must be in format of KiB, MiB, Gib, Tib or PiB.
     * 
     */
    public Optional<Output<String>> limitBytes() {
        return Optional.ofNullable(this.limitBytes);
    }

    /**
     * Maximum size of the Cluster Volume in human readable memory bytes (like 128MiB, 2GiB, etc). Must be in format of KiB, MiB, Gib, Tib or PiB.
     * 
     */
    @Import(name="requiredBytes")
    private @Nullable Output<String> requiredBytes;

    /**
     * @return Maximum size of the Cluster Volume in human readable memory bytes (like 128MiB, 2GiB, etc). Must be in format of KiB, MiB, Gib, Tib or PiB.
     * 
     */
    public Optional<Output<String>> requiredBytes() {
        return Optional.ofNullable(this.requiredBytes);
    }

    /**
     * The scope of the volume. Can be `single` (default) or `multi`.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return The scope of the volume. Can be `single` (default) or `multi`.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * The sharing mode. Can be `none` (default), `readonly`, `onewriter` or `all`.
     * 
     */
    @Import(name="sharing")
    private @Nullable Output<String> sharing;

    /**
     * @return The sharing mode. Can be `none` (default), `readonly`, `onewriter` or `all`.
     * 
     */
    public Optional<Output<String>> sharing() {
        return Optional.ofNullable(this.sharing);
    }

    /**
     * A topology that the Cluster Volume would be preferred in
     * 
     */
    @Import(name="topologyPreferred")
    private @Nullable Output<String> topologyPreferred;

    /**
     * @return A topology that the Cluster Volume would be preferred in
     * 
     */
    public Optional<Output<String>> topologyPreferred() {
        return Optional.ofNullable(this.topologyPreferred);
    }

    /**
     * A topology that the Cluster Volume must be accessible from
     * 
     */
    @Import(name="topologyRequired")
    private @Nullable Output<String> topologyRequired;

    /**
     * @return A topology that the Cluster Volume must be accessible from
     * 
     */
    public Optional<Output<String>> topologyRequired() {
        return Optional.ofNullable(this.topologyRequired);
    }

    /**
     * Cluster Volume access type. Can be `mount` or `block` (default).
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Cluster Volume access type. Can be `mount` or `block` (default).
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private VolumeClusterArgs() {}

    private VolumeClusterArgs(VolumeClusterArgs $) {
        this.availability = $.availability;
        this.group = $.group;
        this.id = $.id;
        this.limitBytes = $.limitBytes;
        this.requiredBytes = $.requiredBytes;
        this.scope = $.scope;
        this.sharing = $.sharing;
        this.topologyPreferred = $.topologyPreferred;
        this.topologyRequired = $.topologyRequired;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeClusterArgs $;

        public Builder() {
            $ = new VolumeClusterArgs();
        }

        public Builder(VolumeClusterArgs defaults) {
            $ = new VolumeClusterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param availability Availability of the volume. Can be `active` (default), `pause`, or `drain`.
         * 
         * @return builder
         * 
         */
        public Builder availability(@Nullable Output<String> availability) {
            $.availability = availability;
            return this;
        }

        /**
         * @param availability Availability of the volume. Can be `active` (default), `pause`, or `drain`.
         * 
         * @return builder
         * 
         */
        public Builder availability(String availability) {
            return availability(Output.of(availability));
        }

        /**
         * @param group Cluster Volume group
         * 
         * @return builder
         * 
         */
        public Builder group(@Nullable Output<String> group) {
            $.group = group;
            return this;
        }

        /**
         * @param group Cluster Volume group
         * 
         * @return builder
         * 
         */
        public Builder group(String group) {
            return group(Output.of(group));
        }

        /**
         * @param id The ID of the cluster volume.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the cluster volume.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param limitBytes Minimum size of the Cluster Volume in human readable memory bytes (like 128MiB, 2GiB, etc). Must be in format of KiB, MiB, Gib, Tib or PiB.
         * 
         * @return builder
         * 
         */
        public Builder limitBytes(@Nullable Output<String> limitBytes) {
            $.limitBytes = limitBytes;
            return this;
        }

        /**
         * @param limitBytes Minimum size of the Cluster Volume in human readable memory bytes (like 128MiB, 2GiB, etc). Must be in format of KiB, MiB, Gib, Tib or PiB.
         * 
         * @return builder
         * 
         */
        public Builder limitBytes(String limitBytes) {
            return limitBytes(Output.of(limitBytes));
        }

        /**
         * @param requiredBytes Maximum size of the Cluster Volume in human readable memory bytes (like 128MiB, 2GiB, etc). Must be in format of KiB, MiB, Gib, Tib or PiB.
         * 
         * @return builder
         * 
         */
        public Builder requiredBytes(@Nullable Output<String> requiredBytes) {
            $.requiredBytes = requiredBytes;
            return this;
        }

        /**
         * @param requiredBytes Maximum size of the Cluster Volume in human readable memory bytes (like 128MiB, 2GiB, etc). Must be in format of KiB, MiB, Gib, Tib or PiB.
         * 
         * @return builder
         * 
         */
        public Builder requiredBytes(String requiredBytes) {
            return requiredBytes(Output.of(requiredBytes));
        }

        /**
         * @param scope The scope of the volume. Can be `single` (default) or `multi`.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope of the volume. Can be `single` (default) or `multi`.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param sharing The sharing mode. Can be `none` (default), `readonly`, `onewriter` or `all`.
         * 
         * @return builder
         * 
         */
        public Builder sharing(@Nullable Output<String> sharing) {
            $.sharing = sharing;
            return this;
        }

        /**
         * @param sharing The sharing mode. Can be `none` (default), `readonly`, `onewriter` or `all`.
         * 
         * @return builder
         * 
         */
        public Builder sharing(String sharing) {
            return sharing(Output.of(sharing));
        }

        /**
         * @param topologyPreferred A topology that the Cluster Volume would be preferred in
         * 
         * @return builder
         * 
         */
        public Builder topologyPreferred(@Nullable Output<String> topologyPreferred) {
            $.topologyPreferred = topologyPreferred;
            return this;
        }

        /**
         * @param topologyPreferred A topology that the Cluster Volume would be preferred in
         * 
         * @return builder
         * 
         */
        public Builder topologyPreferred(String topologyPreferred) {
            return topologyPreferred(Output.of(topologyPreferred));
        }

        /**
         * @param topologyRequired A topology that the Cluster Volume must be accessible from
         * 
         * @return builder
         * 
         */
        public Builder topologyRequired(@Nullable Output<String> topologyRequired) {
            $.topologyRequired = topologyRequired;
            return this;
        }

        /**
         * @param topologyRequired A topology that the Cluster Volume must be accessible from
         * 
         * @return builder
         * 
         */
        public Builder topologyRequired(String topologyRequired) {
            return topologyRequired(Output.of(topologyRequired));
        }

        /**
         * @param type Cluster Volume access type. Can be `mount` or `block` (default).
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Cluster Volume access type. Can be `mount` or `block` (default).
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public VolumeClusterArgs build() {
            return $;
        }
    }

}
