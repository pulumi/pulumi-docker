// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.buildx;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.docker.buildx.inputs.RegistryAuthArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IndexArgs extends com.pulumi.resources.ResourceArgs {

    public static final IndexArgs Empty = new IndexArgs();

    /**
     * If true, push the index to the target registry.
     * 
     * Defaults to `true`.
     * 
     */
    @Import(name="push")
    private @Nullable Output<Boolean> push;

    /**
     * @return If true, push the index to the target registry.
     * 
     * Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> push() {
        return Optional.ofNullable(this.push);
    }

    /**
     * Authentication for the registry where the tagged index will be pushed.
     * 
     * Credentials can also be included with the provider&#39;s configuration.
     * 
     */
    @Import(name="registry")
    private @Nullable Output<RegistryAuthArgs> registry;

    /**
     * @return Authentication for the registry where the tagged index will be pushed.
     * 
     * Credentials can also be included with the provider&#39;s configuration.
     * 
     */
    public Optional<Output<RegistryAuthArgs>> registry() {
        return Optional.ofNullable(this.registry);
    }

    /**
     * Existing images to include in the index.
     * 
     */
    @Import(name="sources", required=true)
    private Output<List<String>> sources;

    /**
     * @return Existing images to include in the index.
     * 
     */
    public Output<List<String>> sources() {
        return this.sources;
    }

    @Import(name="tag", required=true)
    private Output<String> tag;

    public Output<String> tag() {
        return this.tag;
    }

    private IndexArgs() {}

    private IndexArgs(IndexArgs $) {
        this.push = $.push;
        this.registry = $.registry;
        this.sources = $.sources;
        this.tag = $.tag;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IndexArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IndexArgs $;

        public Builder() {
            $ = new IndexArgs();
        }

        public Builder(IndexArgs defaults) {
            $ = new IndexArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param push If true, push the index to the target registry.
         * 
         * Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder push(@Nullable Output<Boolean> push) {
            $.push = push;
            return this;
        }

        /**
         * @param push If true, push the index to the target registry.
         * 
         * Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder push(Boolean push) {
            return push(Output.of(push));
        }

        /**
         * @param registry Authentication for the registry where the tagged index will be pushed.
         * 
         * Credentials can also be included with the provider&#39;s configuration.
         * 
         * @return builder
         * 
         */
        public Builder registry(@Nullable Output<RegistryAuthArgs> registry) {
            $.registry = registry;
            return this;
        }

        /**
         * @param registry Authentication for the registry where the tagged index will be pushed.
         * 
         * Credentials can also be included with the provider&#39;s configuration.
         * 
         * @return builder
         * 
         */
        public Builder registry(RegistryAuthArgs registry) {
            return registry(Output.of(registry));
        }

        /**
         * @param sources Existing images to include in the index.
         * 
         * @return builder
         * 
         */
        public Builder sources(Output<List<String>> sources) {
            $.sources = sources;
            return this;
        }

        /**
         * @param sources Existing images to include in the index.
         * 
         * @return builder
         * 
         */
        public Builder sources(List<String> sources) {
            return sources(Output.of(sources));
        }

        /**
         * @param sources Existing images to include in the index.
         * 
         * @return builder
         * 
         */
        public Builder sources(String... sources) {
            return sources(List.of(sources));
        }

        public Builder tag(Output<String> tag) {
            $.tag = tag;
            return this;
        }

        public Builder tag(String tag) {
            return tag(Output.of(tag));
        }

        public IndexArgs build() {
            $.push = Codegen.booleanProp("push").output().arg($.push).def(true).getNullable();
            if ($.sources == null) {
                throw new MissingRequiredPropertyException("IndexArgs", "sources");
            }
            if ($.tag == null) {
                throw new MissingRequiredPropertyException("IndexArgs", "tag");
            }
            return $;
        }
    }

}
