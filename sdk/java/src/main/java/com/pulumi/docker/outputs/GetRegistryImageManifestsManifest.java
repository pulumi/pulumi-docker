// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRegistryImageManifestsManifest {
    /**
     * @return The platform architecture supported by the manifest.
     * 
     */
    private String architecture;
    /**
     * @return The media type of the manifest.
     * 
     */
    private String mediaType;
    /**
     * @return The operating system supported by the manifest.
     * 
     */
    private String os;
    /**
     * @return The content digest of the manifest, as stored in the registry.
     * 
     */
    private String sha256Digest;

    private GetRegistryImageManifestsManifest() {}
    /**
     * @return The platform architecture supported by the manifest.
     * 
     */
    public String architecture() {
        return this.architecture;
    }
    /**
     * @return The media type of the manifest.
     * 
     */
    public String mediaType() {
        return this.mediaType;
    }
    /**
     * @return The operating system supported by the manifest.
     * 
     */
    public String os() {
        return this.os;
    }
    /**
     * @return The content digest of the manifest, as stored in the registry.
     * 
     */
    public String sha256Digest() {
        return this.sha256Digest;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegistryImageManifestsManifest defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String architecture;
        private String mediaType;
        private String os;
        private String sha256Digest;
        public Builder() {}
        public Builder(GetRegistryImageManifestsManifest defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.architecture = defaults.architecture;
    	      this.mediaType = defaults.mediaType;
    	      this.os = defaults.os;
    	      this.sha256Digest = defaults.sha256Digest;
        }

        @CustomType.Setter
        public Builder architecture(String architecture) {
            if (architecture == null) {
              throw new MissingRequiredPropertyException("GetRegistryImageManifestsManifest", "architecture");
            }
            this.architecture = architecture;
            return this;
        }
        @CustomType.Setter
        public Builder mediaType(String mediaType) {
            if (mediaType == null) {
              throw new MissingRequiredPropertyException("GetRegistryImageManifestsManifest", "mediaType");
            }
            this.mediaType = mediaType;
            return this;
        }
        @CustomType.Setter
        public Builder os(String os) {
            if (os == null) {
              throw new MissingRequiredPropertyException("GetRegistryImageManifestsManifest", "os");
            }
            this.os = os;
            return this;
        }
        @CustomType.Setter
        public Builder sha256Digest(String sha256Digest) {
            if (sha256Digest == null) {
              throw new MissingRequiredPropertyException("GetRegistryImageManifestsManifest", "sha256Digest");
            }
            this.sha256Digest = sha256Digest;
            return this;
        }
        public GetRegistryImageManifestsManifest build() {
            final var _resultValue = new GetRegistryImageManifestsManifest();
            _resultValue.architecture = architecture;
            _resultValue.mediaType = mediaType;
            _resultValue.os = os;
            _resultValue.sha256Digest = sha256Digest;
            return _resultValue;
        }
    }
}
