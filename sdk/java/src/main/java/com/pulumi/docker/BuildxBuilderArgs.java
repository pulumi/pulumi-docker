// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.docker.inputs.BuildxBuilderDockerContainerArgs;
import com.pulumi.docker.inputs.BuildxBuilderKubernetesArgs;
import com.pulumi.docker.inputs.BuildxBuilderRemoteArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BuildxBuilderArgs extends com.pulumi.resources.ResourceArgs {

    public static final BuildxBuilderArgs Empty = new BuildxBuilderArgs();

    /**
     * Append a node to builder instead of changing it
     * 
     */
    @Import(name="append")
    private @Nullable Output<Boolean> append;

    /**
     * @return Append a node to builder instead of changing it
     * 
     */
    public Optional<Output<Boolean>> append() {
        return Optional.ofNullable(this.append);
    }

    /**
     * Automatically boot the builder after creation. Defaults to `false`
     * 
     */
    @Import(name="bootstrap")
    private @Nullable Output<Boolean> bootstrap;

    /**
     * @return Automatically boot the builder after creation. Defaults to `false`
     * 
     */
    public Optional<Output<Boolean>> bootstrap() {
        return Optional.ofNullable(this.bootstrap);
    }

    /**
     * BuildKit daemon config file
     * 
     */
    @Import(name="buildkitConfig")
    private @Nullable Output<String> buildkitConfig;

    /**
     * @return BuildKit daemon config file
     * 
     */
    public Optional<Output<String>> buildkitConfig() {
        return Optional.ofNullable(this.buildkitConfig);
    }

    /**
     * BuildKit flags to set for the builder.
     * 
     */
    @Import(name="buildkitFlags")
    private @Nullable Output<String> buildkitFlags;

    /**
     * @return BuildKit flags to set for the builder.
     * 
     */
    public Optional<Output<String>> buildkitFlags() {
        return Optional.ofNullable(this.buildkitFlags);
    }

    /**
     * Configuration block for the Docker-Container driver.
     * 
     */
    @Import(name="dockerContainer")
    private @Nullable Output<BuildxBuilderDockerContainerArgs> dockerContainer;

    /**
     * @return Configuration block for the Docker-Container driver.
     * 
     */
    public Optional<Output<BuildxBuilderDockerContainerArgs>> dockerContainer() {
        return Optional.ofNullable(this.dockerContainer);
    }

    /**
     * The driver to use for the Buildx builder (e.g., docker-container, kubernetes).
     * 
     */
    @Import(name="driver")
    private @Nullable Output<String> driver;

    /**
     * @return The driver to use for the Buildx builder (e.g., docker-container, kubernetes).
     * 
     */
    public Optional<Output<String>> driver() {
        return Optional.ofNullable(this.driver);
    }

    /**
     * Additional options for the Buildx driver in the form of `key=value,...`. These options are driver-specific.
     * 
     */
    @Import(name="driverOptions")
    private @Nullable Output<Map<String,String>> driverOptions;

    /**
     * @return Additional options for the Buildx driver in the form of `key=value,...`. These options are driver-specific.
     * 
     */
    public Optional<Output<Map<String,String>>> driverOptions() {
        return Optional.ofNullable(this.driverOptions);
    }

    /**
     * The endpoint or context to use for the Buildx builder, where context is the name of a context from docker context ls and endpoint is the address for Docker socket (eg. DOCKER_HOST value). By default, the current Docker configuration is used for determining the context/endpoint value.
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    /**
     * @return The endpoint or context to use for the Buildx builder, where context is the name of a context from docker context ls and endpoint is the address for Docker socket (eg. DOCKER_HOST value). By default, the current Docker configuration is used for determining the context/endpoint value.
     * 
     */
    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * Configuration block for the Kubernetes driver.
     * 
     */
    @Import(name="kubernetes")
    private @Nullable Output<BuildxBuilderKubernetesArgs> kubernetes;

    /**
     * @return Configuration block for the Kubernetes driver.
     * 
     */
    public Optional<Output<BuildxBuilderKubernetesArgs>> kubernetes() {
        return Optional.ofNullable(this.kubernetes);
    }

    /**
     * The name of the Buildx builder. IF not specified, a random name will be generated.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Buildx builder. IF not specified, a random name will be generated.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Create/modify node with given name
     * 
     */
    @Import(name="node")
    private @Nullable Output<String> node;

    /**
     * @return Create/modify node with given name
     * 
     */
    public Optional<Output<String>> node() {
        return Optional.ofNullable(this.node);
    }

    /**
     * Fixed platforms for current node
     * 
     */
    @Import(name="platforms")
    private @Nullable Output<List<String>> platforms;

    /**
     * @return Fixed platforms for current node
     * 
     */
    public Optional<Output<List<String>>> platforms() {
        return Optional.ofNullable(this.platforms);
    }

    /**
     * Configuration block for the Remote driver.
     * 
     */
    @Import(name="remote")
    private @Nullable Output<BuildxBuilderRemoteArgs> remote;

    /**
     * @return Configuration block for the Remote driver.
     * 
     */
    public Optional<Output<BuildxBuilderRemoteArgs>> remote() {
        return Optional.ofNullable(this.remote);
    }

    /**
     * Set the current builder instance as the default for the current context.
     * 
     */
    @Import(name="use")
    private @Nullable Output<Boolean> use;

    /**
     * @return Set the current builder instance as the default for the current context.
     * 
     */
    public Optional<Output<Boolean>> use() {
        return Optional.ofNullable(this.use);
    }

    private BuildxBuilderArgs() {}

    private BuildxBuilderArgs(BuildxBuilderArgs $) {
        this.append = $.append;
        this.bootstrap = $.bootstrap;
        this.buildkitConfig = $.buildkitConfig;
        this.buildkitFlags = $.buildkitFlags;
        this.dockerContainer = $.dockerContainer;
        this.driver = $.driver;
        this.driverOptions = $.driverOptions;
        this.endpoint = $.endpoint;
        this.kubernetes = $.kubernetes;
        this.name = $.name;
        this.node = $.node;
        this.platforms = $.platforms;
        this.remote = $.remote;
        this.use = $.use;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BuildxBuilderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BuildxBuilderArgs $;

        public Builder() {
            $ = new BuildxBuilderArgs();
        }

        public Builder(BuildxBuilderArgs defaults) {
            $ = new BuildxBuilderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param append Append a node to builder instead of changing it
         * 
         * @return builder
         * 
         */
        public Builder append(@Nullable Output<Boolean> append) {
            $.append = append;
            return this;
        }

        /**
         * @param append Append a node to builder instead of changing it
         * 
         * @return builder
         * 
         */
        public Builder append(Boolean append) {
            return append(Output.of(append));
        }

        /**
         * @param bootstrap Automatically boot the builder after creation. Defaults to `false`
         * 
         * @return builder
         * 
         */
        public Builder bootstrap(@Nullable Output<Boolean> bootstrap) {
            $.bootstrap = bootstrap;
            return this;
        }

        /**
         * @param bootstrap Automatically boot the builder after creation. Defaults to `false`
         * 
         * @return builder
         * 
         */
        public Builder bootstrap(Boolean bootstrap) {
            return bootstrap(Output.of(bootstrap));
        }

        /**
         * @param buildkitConfig BuildKit daemon config file
         * 
         * @return builder
         * 
         */
        public Builder buildkitConfig(@Nullable Output<String> buildkitConfig) {
            $.buildkitConfig = buildkitConfig;
            return this;
        }

        /**
         * @param buildkitConfig BuildKit daemon config file
         * 
         * @return builder
         * 
         */
        public Builder buildkitConfig(String buildkitConfig) {
            return buildkitConfig(Output.of(buildkitConfig));
        }

        /**
         * @param buildkitFlags BuildKit flags to set for the builder.
         * 
         * @return builder
         * 
         */
        public Builder buildkitFlags(@Nullable Output<String> buildkitFlags) {
            $.buildkitFlags = buildkitFlags;
            return this;
        }

        /**
         * @param buildkitFlags BuildKit flags to set for the builder.
         * 
         * @return builder
         * 
         */
        public Builder buildkitFlags(String buildkitFlags) {
            return buildkitFlags(Output.of(buildkitFlags));
        }

        /**
         * @param dockerContainer Configuration block for the Docker-Container driver.
         * 
         * @return builder
         * 
         */
        public Builder dockerContainer(@Nullable Output<BuildxBuilderDockerContainerArgs> dockerContainer) {
            $.dockerContainer = dockerContainer;
            return this;
        }

        /**
         * @param dockerContainer Configuration block for the Docker-Container driver.
         * 
         * @return builder
         * 
         */
        public Builder dockerContainer(BuildxBuilderDockerContainerArgs dockerContainer) {
            return dockerContainer(Output.of(dockerContainer));
        }

        /**
         * @param driver The driver to use for the Buildx builder (e.g., docker-container, kubernetes).
         * 
         * @return builder
         * 
         */
        public Builder driver(@Nullable Output<String> driver) {
            $.driver = driver;
            return this;
        }

        /**
         * @param driver The driver to use for the Buildx builder (e.g., docker-container, kubernetes).
         * 
         * @return builder
         * 
         */
        public Builder driver(String driver) {
            return driver(Output.of(driver));
        }

        /**
         * @param driverOptions Additional options for the Buildx driver in the form of `key=value,...`. These options are driver-specific.
         * 
         * @return builder
         * 
         */
        public Builder driverOptions(@Nullable Output<Map<String,String>> driverOptions) {
            $.driverOptions = driverOptions;
            return this;
        }

        /**
         * @param driverOptions Additional options for the Buildx driver in the form of `key=value,...`. These options are driver-specific.
         * 
         * @return builder
         * 
         */
        public Builder driverOptions(Map<String,String> driverOptions) {
            return driverOptions(Output.of(driverOptions));
        }

        /**
         * @param endpoint The endpoint or context to use for the Buildx builder, where context is the name of a context from docker context ls and endpoint is the address for Docker socket (eg. DOCKER_HOST value). By default, the current Docker configuration is used for determining the context/endpoint value.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint The endpoint or context to use for the Buildx builder, where context is the name of a context from docker context ls and endpoint is the address for Docker socket (eg. DOCKER_HOST value). By default, the current Docker configuration is used for determining the context/endpoint value.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param kubernetes Configuration block for the Kubernetes driver.
         * 
         * @return builder
         * 
         */
        public Builder kubernetes(@Nullable Output<BuildxBuilderKubernetesArgs> kubernetes) {
            $.kubernetes = kubernetes;
            return this;
        }

        /**
         * @param kubernetes Configuration block for the Kubernetes driver.
         * 
         * @return builder
         * 
         */
        public Builder kubernetes(BuildxBuilderKubernetesArgs kubernetes) {
            return kubernetes(Output.of(kubernetes));
        }

        /**
         * @param name The name of the Buildx builder. IF not specified, a random name will be generated.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Buildx builder. IF not specified, a random name will be generated.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param node Create/modify node with given name
         * 
         * @return builder
         * 
         */
        public Builder node(@Nullable Output<String> node) {
            $.node = node;
            return this;
        }

        /**
         * @param node Create/modify node with given name
         * 
         * @return builder
         * 
         */
        public Builder node(String node) {
            return node(Output.of(node));
        }

        /**
         * @param platforms Fixed platforms for current node
         * 
         * @return builder
         * 
         */
        public Builder platforms(@Nullable Output<List<String>> platforms) {
            $.platforms = platforms;
            return this;
        }

        /**
         * @param platforms Fixed platforms for current node
         * 
         * @return builder
         * 
         */
        public Builder platforms(List<String> platforms) {
            return platforms(Output.of(platforms));
        }

        /**
         * @param platforms Fixed platforms for current node
         * 
         * @return builder
         * 
         */
        public Builder platforms(String... platforms) {
            return platforms(List.of(platforms));
        }

        /**
         * @param remote Configuration block for the Remote driver.
         * 
         * @return builder
         * 
         */
        public Builder remote(@Nullable Output<BuildxBuilderRemoteArgs> remote) {
            $.remote = remote;
            return this;
        }

        /**
         * @param remote Configuration block for the Remote driver.
         * 
         * @return builder
         * 
         */
        public Builder remote(BuildxBuilderRemoteArgs remote) {
            return remote(Output.of(remote));
        }

        /**
         * @param use Set the current builder instance as the default for the current context.
         * 
         * @return builder
         * 
         */
        public Builder use(@Nullable Output<Boolean> use) {
            $.use = use;
            return this;
        }

        /**
         * @param use Set the current builder instance as the default for the current context.
         * 
         * @return builder
         * 
         */
        public Builder use(Boolean use) {
            return use(Output.of(use));
        }

        public BuildxBuilderArgs build() {
            return $;
        }
    }

}
