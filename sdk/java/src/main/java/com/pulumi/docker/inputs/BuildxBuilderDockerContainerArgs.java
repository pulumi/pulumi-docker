// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BuildxBuilderDockerContainerArgs extends com.pulumi.resources.ResourceArgs {

    public static final BuildxBuilderDockerContainerArgs Empty = new BuildxBuilderDockerContainerArgs();

    /**
     * Sets the cgroup parent of the container if Docker is using the &#34;cgroupfs&#34; driver.
     * 
     */
    @Import(name="cgroupParent")
    private @Nullable Output<String> cgroupParent;

    /**
     * @return Sets the cgroup parent of the container if Docker is using the &#34;cgroupfs&#34; driver.
     * 
     */
    public Optional<Output<String>> cgroupParent() {
        return Optional.ofNullable(this.cgroupParent);
    }

    /**
     * Sets the CPU CFS scheduler period for the container.
     * 
     */
    @Import(name="cpuPeriod")
    private @Nullable Output<String> cpuPeriod;

    /**
     * @return Sets the CPU CFS scheduler period for the container.
     * 
     */
    public Optional<Output<String>> cpuPeriod() {
        return Optional.ofNullable(this.cpuPeriod);
    }

    /**
     * Imposes a CPU CFS quota on the container.
     * 
     */
    @Import(name="cpuQuota")
    private @Nullable Output<String> cpuQuota;

    /**
     * @return Imposes a CPU CFS quota on the container.
     * 
     */
    public Optional<Output<String>> cpuQuota() {
        return Optional.ofNullable(this.cpuQuota);
    }

    /**
     * Configures CPU shares (relative weight) of the container.
     * 
     */
    @Import(name="cpuShares")
    private @Nullable Output<String> cpuShares;

    /**
     * @return Configures CPU shares (relative weight) of the container.
     * 
     */
    public Optional<Output<String>> cpuShares() {
        return Optional.ofNullable(this.cpuShares);
    }

    /**
     * Limits the set of CPU cores the container can use.
     * 
     */
    @Import(name="cpusetCpus")
    private @Nullable Output<String> cpusetCpus;

    /**
     * @return Limits the set of CPU cores the container can use.
     * 
     */
    public Optional<Output<String>> cpusetCpus() {
        return Optional.ofNullable(this.cpusetCpus);
    }

    /**
     * Limits the set of CPU memory nodes the container can use.
     * 
     */
    @Import(name="cpusetMems")
    private @Nullable Output<String> cpusetMems;

    /**
     * @return Limits the set of CPU memory nodes the container can use.
     * 
     */
    public Optional<Output<String>> cpusetMems() {
        return Optional.ofNullable(this.cpusetMems);
    }

    /**
     * Automatically load images to the Docker Engine image store. Defaults to `false`
     * 
     */
    @Import(name="defaultLoad")
    private @Nullable Output<Boolean> defaultLoad;

    /**
     * @return Automatically load images to the Docker Engine image store. Defaults to `false`
     * 
     */
    public Optional<Output<Boolean>> defaultLoad() {
        return Optional.ofNullable(this.defaultLoad);
    }

    /**
     * Sets environment variables in the container.
     * 
     */
    @Import(name="env")
    private @Nullable Output<Map<String,String>> env;

    /**
     * @return Sets environment variables in the container.
     * 
     */
    public Optional<Output<Map<String,String>>> env() {
        return Optional.ofNullable(this.env);
    }

    /**
     * Sets the BuildKit image to use for the container.
     * 
     */
    @Import(name="image")
    private @Nullable Output<String> image;

    /**
     * @return Sets the BuildKit image to use for the container.
     * 
     */
    public Optional<Output<String>> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * Sets the amount of memory the container can use.
     * 
     */
    @Import(name="memory")
    private @Nullable Output<String> memory;

    /**
     * @return Sets the amount of memory the container can use.
     * 
     */
    public Optional<Output<String>> memory() {
        return Optional.ofNullable(this.memory);
    }

    /**
     * Sets the memory swap limit for the container.
     * 
     */
    @Import(name="memorySwap")
    private @Nullable Output<String> memorySwap;

    /**
     * @return Sets the memory swap limit for the container.
     * 
     */
    public Optional<Output<String>> memorySwap() {
        return Optional.ofNullable(this.memorySwap);
    }

    /**
     * Sets the network mode for the container.
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return Sets the network mode for the container.
     * 
     */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * Sets the container&#39;s restart policy.
     * 
     */
    @Import(name="restartPolicy")
    private @Nullable Output<String> restartPolicy;

    /**
     * @return Sets the container&#39;s restart policy.
     * 
     */
    public Optional<Output<String>> restartPolicy() {
        return Optional.ofNullable(this.restartPolicy);
    }

    private BuildxBuilderDockerContainerArgs() {}

    private BuildxBuilderDockerContainerArgs(BuildxBuilderDockerContainerArgs $) {
        this.cgroupParent = $.cgroupParent;
        this.cpuPeriod = $.cpuPeriod;
        this.cpuQuota = $.cpuQuota;
        this.cpuShares = $.cpuShares;
        this.cpusetCpus = $.cpusetCpus;
        this.cpusetMems = $.cpusetMems;
        this.defaultLoad = $.defaultLoad;
        this.env = $.env;
        this.image = $.image;
        this.memory = $.memory;
        this.memorySwap = $.memorySwap;
        this.network = $.network;
        this.restartPolicy = $.restartPolicy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BuildxBuilderDockerContainerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BuildxBuilderDockerContainerArgs $;

        public Builder() {
            $ = new BuildxBuilderDockerContainerArgs();
        }

        public Builder(BuildxBuilderDockerContainerArgs defaults) {
            $ = new BuildxBuilderDockerContainerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cgroupParent Sets the cgroup parent of the container if Docker is using the &#34;cgroupfs&#34; driver.
         * 
         * @return builder
         * 
         */
        public Builder cgroupParent(@Nullable Output<String> cgroupParent) {
            $.cgroupParent = cgroupParent;
            return this;
        }

        /**
         * @param cgroupParent Sets the cgroup parent of the container if Docker is using the &#34;cgroupfs&#34; driver.
         * 
         * @return builder
         * 
         */
        public Builder cgroupParent(String cgroupParent) {
            return cgroupParent(Output.of(cgroupParent));
        }

        /**
         * @param cpuPeriod Sets the CPU CFS scheduler period for the container.
         * 
         * @return builder
         * 
         */
        public Builder cpuPeriod(@Nullable Output<String> cpuPeriod) {
            $.cpuPeriod = cpuPeriod;
            return this;
        }

        /**
         * @param cpuPeriod Sets the CPU CFS scheduler period for the container.
         * 
         * @return builder
         * 
         */
        public Builder cpuPeriod(String cpuPeriod) {
            return cpuPeriod(Output.of(cpuPeriod));
        }

        /**
         * @param cpuQuota Imposes a CPU CFS quota on the container.
         * 
         * @return builder
         * 
         */
        public Builder cpuQuota(@Nullable Output<String> cpuQuota) {
            $.cpuQuota = cpuQuota;
            return this;
        }

        /**
         * @param cpuQuota Imposes a CPU CFS quota on the container.
         * 
         * @return builder
         * 
         */
        public Builder cpuQuota(String cpuQuota) {
            return cpuQuota(Output.of(cpuQuota));
        }

        /**
         * @param cpuShares Configures CPU shares (relative weight) of the container.
         * 
         * @return builder
         * 
         */
        public Builder cpuShares(@Nullable Output<String> cpuShares) {
            $.cpuShares = cpuShares;
            return this;
        }

        /**
         * @param cpuShares Configures CPU shares (relative weight) of the container.
         * 
         * @return builder
         * 
         */
        public Builder cpuShares(String cpuShares) {
            return cpuShares(Output.of(cpuShares));
        }

        /**
         * @param cpusetCpus Limits the set of CPU cores the container can use.
         * 
         * @return builder
         * 
         */
        public Builder cpusetCpus(@Nullable Output<String> cpusetCpus) {
            $.cpusetCpus = cpusetCpus;
            return this;
        }

        /**
         * @param cpusetCpus Limits the set of CPU cores the container can use.
         * 
         * @return builder
         * 
         */
        public Builder cpusetCpus(String cpusetCpus) {
            return cpusetCpus(Output.of(cpusetCpus));
        }

        /**
         * @param cpusetMems Limits the set of CPU memory nodes the container can use.
         * 
         * @return builder
         * 
         */
        public Builder cpusetMems(@Nullable Output<String> cpusetMems) {
            $.cpusetMems = cpusetMems;
            return this;
        }

        /**
         * @param cpusetMems Limits the set of CPU memory nodes the container can use.
         * 
         * @return builder
         * 
         */
        public Builder cpusetMems(String cpusetMems) {
            return cpusetMems(Output.of(cpusetMems));
        }

        /**
         * @param defaultLoad Automatically load images to the Docker Engine image store. Defaults to `false`
         * 
         * @return builder
         * 
         */
        public Builder defaultLoad(@Nullable Output<Boolean> defaultLoad) {
            $.defaultLoad = defaultLoad;
            return this;
        }

        /**
         * @param defaultLoad Automatically load images to the Docker Engine image store. Defaults to `false`
         * 
         * @return builder
         * 
         */
        public Builder defaultLoad(Boolean defaultLoad) {
            return defaultLoad(Output.of(defaultLoad));
        }

        /**
         * @param env Sets environment variables in the container.
         * 
         * @return builder
         * 
         */
        public Builder env(@Nullable Output<Map<String,String>> env) {
            $.env = env;
            return this;
        }

        /**
         * @param env Sets environment variables in the container.
         * 
         * @return builder
         * 
         */
        public Builder env(Map<String,String> env) {
            return env(Output.of(env));
        }

        /**
         * @param image Sets the BuildKit image to use for the container.
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image Sets the BuildKit image to use for the container.
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param memory Sets the amount of memory the container can use.
         * 
         * @return builder
         * 
         */
        public Builder memory(@Nullable Output<String> memory) {
            $.memory = memory;
            return this;
        }

        /**
         * @param memory Sets the amount of memory the container can use.
         * 
         * @return builder
         * 
         */
        public Builder memory(String memory) {
            return memory(Output.of(memory));
        }

        /**
         * @param memorySwap Sets the memory swap limit for the container.
         * 
         * @return builder
         * 
         */
        public Builder memorySwap(@Nullable Output<String> memorySwap) {
            $.memorySwap = memorySwap;
            return this;
        }

        /**
         * @param memorySwap Sets the memory swap limit for the container.
         * 
         * @return builder
         * 
         */
        public Builder memorySwap(String memorySwap) {
            return memorySwap(Output.of(memorySwap));
        }

        /**
         * @param network Sets the network mode for the container.
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network Sets the network mode for the container.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param restartPolicy Sets the container&#39;s restart policy.
         * 
         * @return builder
         * 
         */
        public Builder restartPolicy(@Nullable Output<String> restartPolicy) {
            $.restartPolicy = restartPolicy;
            return this;
        }

        /**
         * @param restartPolicy Sets the container&#39;s restart policy.
         * 
         * @return builder
         * 
         */
        public Builder restartPolicy(String restartPolicy) {
            return restartPolicy(Output.of(restartPolicy));
        }

        public BuildxBuilderDockerContainerArgs build() {
            return $;
        }
    }

}
