// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.docker.inputs.SecretLabelArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecretArgs Empty = new SecretArgs();

    /**
     * Base64-url-safe-encoded secret data
     * 
     */
    @Import(name="data", required=true)
    private Output<String> data;

    /**
     * @return Base64-url-safe-encoded secret data
     * 
     */
    public Output<String> data() {
        return this.data;
    }

    /**
     * User-defined key/value metadata
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<SecretLabelArgs>> labels;

    /**
     * @return User-defined key/value metadata
     * 
     */
    public Optional<Output<List<SecretLabelArgs>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * User-defined name of the secret
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return User-defined name of the secret
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private SecretArgs() {}

    private SecretArgs(SecretArgs $) {
        this.data = $.data;
        this.labels = $.labels;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretArgs $;

        public Builder() {
            $ = new SecretArgs();
        }

        public Builder(SecretArgs defaults) {
            $ = new SecretArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param data Base64-url-safe-encoded secret data
         * 
         * @return builder
         * 
         */
        public Builder data(Output<String> data) {
            $.data = data;
            return this;
        }

        /**
         * @param data Base64-url-safe-encoded secret data
         * 
         * @return builder
         * 
         */
        public Builder data(String data) {
            return data(Output.of(data));
        }

        /**
         * @param labels User-defined key/value metadata
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<List<SecretLabelArgs>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels User-defined key/value metadata
         * 
         * @return builder
         * 
         */
        public Builder labels(List<SecretLabelArgs> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param labels User-defined key/value metadata
         * 
         * @return builder
         * 
         */
        public Builder labels(SecretLabelArgs... labels) {
            return labels(List.of(labels));
        }

        /**
         * @param name User-defined name of the secret
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name User-defined name of the secret
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public SecretArgs build() {
            if ($.data == null) {
                throw new MissingRequiredPropertyException("SecretArgs", "data");
            }
            return $;
        }
    }

}
