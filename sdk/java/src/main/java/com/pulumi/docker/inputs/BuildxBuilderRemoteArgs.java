// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BuildxBuilderRemoteArgs extends com.pulumi.resources.ResourceArgs {

    public static final BuildxBuilderRemoteArgs Empty = new BuildxBuilderRemoteArgs();

    /**
     * Absolute path to the TLS certificate authority used for validation.
     * 
     */
    @Import(name="cacert")
    private @Nullable Output<String> cacert;

    /**
     * @return Absolute path to the TLS certificate authority used for validation.
     * 
     */
    public Optional<Output<String>> cacert() {
        return Optional.ofNullable(this.cacert);
    }

    /**
     * Absolute path to the TLS client certificate to present to buildkitd.
     * 
     */
    @Import(name="cert")
    private @Nullable Output<String> cert;

    /**
     * @return Absolute path to the TLS client certificate to present to buildkitd.
     * 
     */
    public Optional<Output<String>> cert() {
        return Optional.ofNullable(this.cert);
    }

    /**
     * Automatically load images to the Docker Engine image store. Defaults to `false`
     * 
     */
    @Import(name="defaultLoad")
    private @Nullable Output<Boolean> defaultLoad;

    /**
     * @return Automatically load images to the Docker Engine image store. Defaults to `false`
     * 
     */
    public Optional<Output<Boolean>> defaultLoad() {
        return Optional.ofNullable(this.defaultLoad);
    }

    /**
     * Sets the TLS client key.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return Sets the TLS client key.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * TLS server name used in requests.
     * 
     */
    @Import(name="servername")
    private @Nullable Output<String> servername;

    /**
     * @return TLS server name used in requests.
     * 
     */
    public Optional<Output<String>> servername() {
        return Optional.ofNullable(this.servername);
    }

    private BuildxBuilderRemoteArgs() {}

    private BuildxBuilderRemoteArgs(BuildxBuilderRemoteArgs $) {
        this.cacert = $.cacert;
        this.cert = $.cert;
        this.defaultLoad = $.defaultLoad;
        this.key = $.key;
        this.servername = $.servername;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BuildxBuilderRemoteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BuildxBuilderRemoteArgs $;

        public Builder() {
            $ = new BuildxBuilderRemoteArgs();
        }

        public Builder(BuildxBuilderRemoteArgs defaults) {
            $ = new BuildxBuilderRemoteArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cacert Absolute path to the TLS certificate authority used for validation.
         * 
         * @return builder
         * 
         */
        public Builder cacert(@Nullable Output<String> cacert) {
            $.cacert = cacert;
            return this;
        }

        /**
         * @param cacert Absolute path to the TLS certificate authority used for validation.
         * 
         * @return builder
         * 
         */
        public Builder cacert(String cacert) {
            return cacert(Output.of(cacert));
        }

        /**
         * @param cert Absolute path to the TLS client certificate to present to buildkitd.
         * 
         * @return builder
         * 
         */
        public Builder cert(@Nullable Output<String> cert) {
            $.cert = cert;
            return this;
        }

        /**
         * @param cert Absolute path to the TLS client certificate to present to buildkitd.
         * 
         * @return builder
         * 
         */
        public Builder cert(String cert) {
            return cert(Output.of(cert));
        }

        /**
         * @param defaultLoad Automatically load images to the Docker Engine image store. Defaults to `false`
         * 
         * @return builder
         * 
         */
        public Builder defaultLoad(@Nullable Output<Boolean> defaultLoad) {
            $.defaultLoad = defaultLoad;
            return this;
        }

        /**
         * @param defaultLoad Automatically load images to the Docker Engine image store. Defaults to `false`
         * 
         * @return builder
         * 
         */
        public Builder defaultLoad(Boolean defaultLoad) {
            return defaultLoad(Output.of(defaultLoad));
        }

        /**
         * @param key Sets the TLS client key.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Sets the TLS client key.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param servername TLS server name used in requests.
         * 
         * @return builder
         * 
         */
        public Builder servername(@Nullable Output<String> servername) {
            $.servername = servername;
            return this;
        }

        /**
         * @param servername TLS server name used in requests.
         * 
         * @return builder
         * 
         */
        public Builder servername(String servername) {
            return servername(Output.of(servername));
        }

        public BuildxBuilderRemoteArgs build() {
            return $;
        }
    }

}
