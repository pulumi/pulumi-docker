// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.docker.RemoteImageArgs;
import com.pulumi.docker.Utilities;
import com.pulumi.docker.inputs.RemoteImageState;
import com.pulumi.docker.outputs.RemoteImageBuild;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * &lt;!-- Bug: Type and Name are switched --&gt;
 * Pulls a Docker image to a given Docker host from a Docker Registry.
 *  This resource will *not* pull new layers of the image automatically unless used in conjunction with docker.RegistryImage data source to update the `pull_triggers` field.
 * 
 * ## Example Usage
 * ### Basic
 * 
 * Finds and downloads the latest `ubuntu:precise` image but does not check
 * for further updates of the image
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.docker.RemoteImage;
 * import com.pulumi.docker.RemoteImageArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var ubuntu = new RemoteImage(&#34;ubuntu&#34;, RemoteImageArgs.builder()        
 *             .name(&#34;ubuntu:precise&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Dynamic updates
 * 
 * To be able to update an image dynamically when the `sha256` sum changes,
 * you need to use it in combination with `docker.RegistryImage` as follows:
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.docker.DockerFunctions;
 * import com.pulumi.docker.inputs.GetRegistryImageArgs;
 * import com.pulumi.docker.RemoteImage;
 * import com.pulumi.docker.RemoteImageArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var ubuntuRegistryImage = DockerFunctions.getRegistryImage(GetRegistryImageArgs.builder()
 *             .name(&#34;ubuntu:precise&#34;)
 *             .build());
 * 
 *         var ubuntuRemoteImage = new RemoteImage(&#34;ubuntuRemoteImage&#34;, RemoteImageArgs.builder()        
 *             .name(ubuntuRegistryImage.applyValue(getRegistryImageResult -&gt; getRegistryImageResult.name()))
 *             .pullTriggers(ubuntuRegistryImage.applyValue(getRegistryImageResult -&gt; getRegistryImageResult.sha256Digest()))
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="docker:index/remoteImage:RemoteImage")
public class RemoteImage extends com.pulumi.resources.CustomResource {
    /**
     * Configuration to build an image. Please see [docker build command reference](https://docs.docker.com/engine/reference/commandline/build/#options) too.
     * 
     */
    @Export(name="build", type=RemoteImageBuild.class, parameters={})
    private Output</* @Nullable */ RemoteImageBuild> build;

    /**
     * @return Configuration to build an image. Please see [docker build command reference](https://docs.docker.com/engine/reference/commandline/build/#options) too.
     * 
     */
    public Output<Optional<RemoteImageBuild>> build() {
        return Codegen.optional(this.build);
    }
    /**
     * If true, then the image is removed forcibly when the resource is destroyed.
     * 
     */
    @Export(name="forceRemove", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> forceRemove;

    /**
     * @return If true, then the image is removed forcibly when the resource is destroyed.
     * 
     */
    public Output<Optional<Boolean>> forceRemove() {
        return Codegen.optional(this.forceRemove);
    }
    /**
     * If true, then the Docker image won&#39;t be deleted on destroy operation. If this is false, it will delete the image from the docker local storage on destroy operation.
     * 
     */
    @Export(name="keepLocally", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> keepLocally;

    /**
     * @return If true, then the Docker image won&#39;t be deleted on destroy operation. If this is false, it will delete the image from the docker local storage on destroy operation.
     * 
     */
    public Output<Optional<Boolean>> keepLocally() {
        return Codegen.optional(this.keepLocally);
    }
    /**
     * The ID of the image in the form of `sha256:&lt;hash&gt;` image digest. Do not confuse it with the default `latest` tag.
     * 
     * @deprecated
     * Use repo_digest instead
     * 
     */
    @Deprecated /* Use repo_digest instead */
    @Export(name="latest", type=String.class, parameters={})
    private Output<String> latest;

    /**
     * @return The ID of the image in the form of `sha256:&lt;hash&gt;` image digest. Do not confuse it with the default `latest` tag.
     * 
     */
    public Output<String> latest() {
        return this.latest;
    }
    /**
     * The name of the Docker image, including any tags or SHA256 repo digests.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the Docker image, including any tags or SHA256 repo digests.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * @deprecated
     * Is unused and will be removed.
     * 
     */
    @Deprecated /* Is unused and will be removed. */
    @Export(name="output", type=String.class, parameters={})
    private Output<String> output;

    public Output<String> output() {
        return this.output;
    }
    /**
     * A value which cause an image pull when changed
     * 
     * @deprecated
     * Use field pull_triggers instead
     * 
     */
    @Deprecated /* Use field pull_triggers instead */
    @Export(name="pullTrigger", type=String.class, parameters={})
    private Output</* @Nullable */ String> pullTrigger;

    /**
     * @return A value which cause an image pull when changed
     * 
     */
    public Output<Optional<String>> pullTrigger() {
        return Codegen.optional(this.pullTrigger);
    }
    /**
     * List of values which cause an image pull when changed. This is used to store the image digest from the registry when using the docker*registry*image.
     * 
     */
    @Export(name="pullTriggers", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> pullTriggers;

    /**
     * @return List of values which cause an image pull when changed. This is used to store the image digest from the registry when using the docker*registry*image.
     * 
     */
    public Output<Optional<List<String>>> pullTriggers() {
        return Codegen.optional(this.pullTriggers);
    }
    /**
     * The image sha256 digest in the form of `repo[:tag]@sha256:&lt;hash&gt;`.
     * 
     */
    @Export(name="repoDigest", type=String.class, parameters={})
    private Output<String> repoDigest;

    /**
     * @return The image sha256 digest in the form of `repo[:tag]@sha256:&lt;hash&gt;`.
     * 
     */
    public Output<String> repoDigest() {
        return this.repoDigest;
    }
    /**
     * A map of arbitrary strings that, when changed, will force the `docker.RemoteImage` resource to be replaced. This can be used to rebuild an image when contents of source code folders change
     * 
     */
    @Export(name="triggers", type=Map.class, parameters={String.class, Object.class})
    private Output</* @Nullable */ Map<String,Object>> triggers;

    /**
     * @return A map of arbitrary strings that, when changed, will force the `docker.RemoteImage` resource to be replaced. This can be used to rebuild an image when contents of source code folders change
     * 
     */
    public Output<Optional<Map<String,Object>>> triggers() {
        return Codegen.optional(this.triggers);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RemoteImage(String name) {
        this(name, RemoteImageArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RemoteImage(String name, RemoteImageArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RemoteImage(String name, RemoteImageArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("docker:index/remoteImage:RemoteImage", name, args == null ? RemoteImageArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private RemoteImage(String name, Output<String> id, @Nullable RemoteImageState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("docker:index/remoteImage:RemoteImage", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RemoteImage get(String name, Output<String> id, @Nullable RemoteImageState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RemoteImage(name, id, state, options);
    }
}
