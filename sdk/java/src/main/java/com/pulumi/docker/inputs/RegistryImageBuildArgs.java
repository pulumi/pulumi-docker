// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.docker.inputs.RegistryImageBuildAuthConfigArgs;
import com.pulumi.docker.inputs.RegistryImageBuildUlimitArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistryImageBuildArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistryImageBuildArgs Empty = new RegistryImageBuildArgs();

    @Import(name="authConfigs")
    private @Nullable Output<List<RegistryImageBuildAuthConfigArgs>> authConfigs;

    public Optional<Output<List<RegistryImageBuildAuthConfigArgs>>> authConfigs() {
        return Optional.ofNullable(this.authConfigs);
    }

    @Import(name="buildArgs")
    private @Nullable Output<Map<String,String>> buildArgs;

    public Optional<Output<Map<String,String>>> buildArgs() {
        return Optional.ofNullable(this.buildArgs);
    }

    @Import(name="buildId")
    private @Nullable Output<String> buildId;

    public Optional<Output<String>> buildId() {
        return Optional.ofNullable(this.buildId);
    }

    @Import(name="cacheFroms")
    private @Nullable Output<List<String>> cacheFroms;

    public Optional<Output<List<String>>> cacheFroms() {
        return Optional.ofNullable(this.cacheFroms);
    }

    @Import(name="cgroupParent")
    private @Nullable Output<String> cgroupParent;

    public Optional<Output<String>> cgroupParent() {
        return Optional.ofNullable(this.cgroupParent);
    }

    @Import(name="context", required=true)
    private Output<String> context;

    public Output<String> context() {
        return this.context;
    }

    @Import(name="cpuPeriod")
    private @Nullable Output<Integer> cpuPeriod;

    public Optional<Output<Integer>> cpuPeriod() {
        return Optional.ofNullable(this.cpuPeriod);
    }

    @Import(name="cpuQuota")
    private @Nullable Output<Integer> cpuQuota;

    public Optional<Output<Integer>> cpuQuota() {
        return Optional.ofNullable(this.cpuQuota);
    }

    @Import(name="cpuSetCpus")
    private @Nullable Output<String> cpuSetCpus;

    public Optional<Output<String>> cpuSetCpus() {
        return Optional.ofNullable(this.cpuSetCpus);
    }

    @Import(name="cpuSetMems")
    private @Nullable Output<String> cpuSetMems;

    public Optional<Output<String>> cpuSetMems() {
        return Optional.ofNullable(this.cpuSetMems);
    }

    @Import(name="cpuShares")
    private @Nullable Output<Integer> cpuShares;

    public Optional<Output<Integer>> cpuShares() {
        return Optional.ofNullable(this.cpuShares);
    }

    @Import(name="dockerfile")
    private @Nullable Output<String> dockerfile;

    public Optional<Output<String>> dockerfile() {
        return Optional.ofNullable(this.dockerfile);
    }

    @Import(name="extraHosts")
    private @Nullable Output<List<String>> extraHosts;

    public Optional<Output<List<String>>> extraHosts() {
        return Optional.ofNullable(this.extraHosts);
    }

    @Import(name="forceRemove")
    private @Nullable Output<Boolean> forceRemove;

    public Optional<Output<Boolean>> forceRemove() {
        return Optional.ofNullable(this.forceRemove);
    }

    @Import(name="isolation")
    private @Nullable Output<String> isolation;

    public Optional<Output<String>> isolation() {
        return Optional.ofNullable(this.isolation);
    }

    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="memory")
    private @Nullable Output<Integer> memory;

    public Optional<Output<Integer>> memory() {
        return Optional.ofNullable(this.memory);
    }

    @Import(name="memorySwap")
    private @Nullable Output<Integer> memorySwap;

    public Optional<Output<Integer>> memorySwap() {
        return Optional.ofNullable(this.memorySwap);
    }

    @Import(name="networkMode")
    private @Nullable Output<String> networkMode;

    public Optional<Output<String>> networkMode() {
        return Optional.ofNullable(this.networkMode);
    }

    @Import(name="noCache")
    private @Nullable Output<Boolean> noCache;

    public Optional<Output<Boolean>> noCache() {
        return Optional.ofNullable(this.noCache);
    }

    @Import(name="platform")
    private @Nullable Output<String> platform;

    public Optional<Output<String>> platform() {
        return Optional.ofNullable(this.platform);
    }

    @Import(name="pullParent")
    private @Nullable Output<Boolean> pullParent;

    public Optional<Output<Boolean>> pullParent() {
        return Optional.ofNullable(this.pullParent);
    }

    @Import(name="remoteContext")
    private @Nullable Output<String> remoteContext;

    public Optional<Output<String>> remoteContext() {
        return Optional.ofNullable(this.remoteContext);
    }

    @Import(name="remove")
    private @Nullable Output<Boolean> remove;

    public Optional<Output<Boolean>> remove() {
        return Optional.ofNullable(this.remove);
    }

    @Import(name="securityOpts")
    private @Nullable Output<List<String>> securityOpts;

    public Optional<Output<List<String>>> securityOpts() {
        return Optional.ofNullable(this.securityOpts);
    }

    @Import(name="sessionId")
    private @Nullable Output<String> sessionId;

    public Optional<Output<String>> sessionId() {
        return Optional.ofNullable(this.sessionId);
    }

    @Import(name="shmSize")
    private @Nullable Output<Integer> shmSize;

    public Optional<Output<Integer>> shmSize() {
        return Optional.ofNullable(this.shmSize);
    }

    @Import(name="squash")
    private @Nullable Output<Boolean> squash;

    public Optional<Output<Boolean>> squash() {
        return Optional.ofNullable(this.squash);
    }

    @Import(name="suppressOutput")
    private @Nullable Output<Boolean> suppressOutput;

    public Optional<Output<Boolean>> suppressOutput() {
        return Optional.ofNullable(this.suppressOutput);
    }

    @Import(name="target")
    private @Nullable Output<String> target;

    public Optional<Output<String>> target() {
        return Optional.ofNullable(this.target);
    }

    @Import(name="ulimits")
    private @Nullable Output<List<RegistryImageBuildUlimitArgs>> ulimits;

    public Optional<Output<List<RegistryImageBuildUlimitArgs>>> ulimits() {
        return Optional.ofNullable(this.ulimits);
    }

    @Import(name="version")
    private @Nullable Output<String> version;

    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private RegistryImageBuildArgs() {}

    private RegistryImageBuildArgs(RegistryImageBuildArgs $) {
        this.authConfigs = $.authConfigs;
        this.buildArgs = $.buildArgs;
        this.buildId = $.buildId;
        this.cacheFroms = $.cacheFroms;
        this.cgroupParent = $.cgroupParent;
        this.context = $.context;
        this.cpuPeriod = $.cpuPeriod;
        this.cpuQuota = $.cpuQuota;
        this.cpuSetCpus = $.cpuSetCpus;
        this.cpuSetMems = $.cpuSetMems;
        this.cpuShares = $.cpuShares;
        this.dockerfile = $.dockerfile;
        this.extraHosts = $.extraHosts;
        this.forceRemove = $.forceRemove;
        this.isolation = $.isolation;
        this.labels = $.labels;
        this.memory = $.memory;
        this.memorySwap = $.memorySwap;
        this.networkMode = $.networkMode;
        this.noCache = $.noCache;
        this.platform = $.platform;
        this.pullParent = $.pullParent;
        this.remoteContext = $.remoteContext;
        this.remove = $.remove;
        this.securityOpts = $.securityOpts;
        this.sessionId = $.sessionId;
        this.shmSize = $.shmSize;
        this.squash = $.squash;
        this.suppressOutput = $.suppressOutput;
        this.target = $.target;
        this.ulimits = $.ulimits;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryImageBuildArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryImageBuildArgs $;

        public Builder() {
            $ = new RegistryImageBuildArgs();
        }

        public Builder(RegistryImageBuildArgs defaults) {
            $ = new RegistryImageBuildArgs(Objects.requireNonNull(defaults));
        }

        public Builder authConfigs(@Nullable Output<List<RegistryImageBuildAuthConfigArgs>> authConfigs) {
            $.authConfigs = authConfigs;
            return this;
        }

        public Builder authConfigs(List<RegistryImageBuildAuthConfigArgs> authConfigs) {
            return authConfigs(Output.of(authConfigs));
        }

        public Builder authConfigs(RegistryImageBuildAuthConfigArgs... authConfigs) {
            return authConfigs(List.of(authConfigs));
        }

        public Builder buildArgs(@Nullable Output<Map<String,String>> buildArgs) {
            $.buildArgs = buildArgs;
            return this;
        }

        public Builder buildArgs(Map<String,String> buildArgs) {
            return buildArgs(Output.of(buildArgs));
        }

        public Builder buildId(@Nullable Output<String> buildId) {
            $.buildId = buildId;
            return this;
        }

        public Builder buildId(String buildId) {
            return buildId(Output.of(buildId));
        }

        public Builder cacheFroms(@Nullable Output<List<String>> cacheFroms) {
            $.cacheFroms = cacheFroms;
            return this;
        }

        public Builder cacheFroms(List<String> cacheFroms) {
            return cacheFroms(Output.of(cacheFroms));
        }

        public Builder cacheFroms(String... cacheFroms) {
            return cacheFroms(List.of(cacheFroms));
        }

        public Builder cgroupParent(@Nullable Output<String> cgroupParent) {
            $.cgroupParent = cgroupParent;
            return this;
        }

        public Builder cgroupParent(String cgroupParent) {
            return cgroupParent(Output.of(cgroupParent));
        }

        public Builder context(Output<String> context) {
            $.context = context;
            return this;
        }

        public Builder context(String context) {
            return context(Output.of(context));
        }

        public Builder cpuPeriod(@Nullable Output<Integer> cpuPeriod) {
            $.cpuPeriod = cpuPeriod;
            return this;
        }

        public Builder cpuPeriod(Integer cpuPeriod) {
            return cpuPeriod(Output.of(cpuPeriod));
        }

        public Builder cpuQuota(@Nullable Output<Integer> cpuQuota) {
            $.cpuQuota = cpuQuota;
            return this;
        }

        public Builder cpuQuota(Integer cpuQuota) {
            return cpuQuota(Output.of(cpuQuota));
        }

        public Builder cpuSetCpus(@Nullable Output<String> cpuSetCpus) {
            $.cpuSetCpus = cpuSetCpus;
            return this;
        }

        public Builder cpuSetCpus(String cpuSetCpus) {
            return cpuSetCpus(Output.of(cpuSetCpus));
        }

        public Builder cpuSetMems(@Nullable Output<String> cpuSetMems) {
            $.cpuSetMems = cpuSetMems;
            return this;
        }

        public Builder cpuSetMems(String cpuSetMems) {
            return cpuSetMems(Output.of(cpuSetMems));
        }

        public Builder cpuShares(@Nullable Output<Integer> cpuShares) {
            $.cpuShares = cpuShares;
            return this;
        }

        public Builder cpuShares(Integer cpuShares) {
            return cpuShares(Output.of(cpuShares));
        }

        public Builder dockerfile(@Nullable Output<String> dockerfile) {
            $.dockerfile = dockerfile;
            return this;
        }

        public Builder dockerfile(String dockerfile) {
            return dockerfile(Output.of(dockerfile));
        }

        public Builder extraHosts(@Nullable Output<List<String>> extraHosts) {
            $.extraHosts = extraHosts;
            return this;
        }

        public Builder extraHosts(List<String> extraHosts) {
            return extraHosts(Output.of(extraHosts));
        }

        public Builder extraHosts(String... extraHosts) {
            return extraHosts(List.of(extraHosts));
        }

        public Builder forceRemove(@Nullable Output<Boolean> forceRemove) {
            $.forceRemove = forceRemove;
            return this;
        }

        public Builder forceRemove(Boolean forceRemove) {
            return forceRemove(Output.of(forceRemove));
        }

        public Builder isolation(@Nullable Output<String> isolation) {
            $.isolation = isolation;
            return this;
        }

        public Builder isolation(String isolation) {
            return isolation(Output.of(isolation));
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder memory(@Nullable Output<Integer> memory) {
            $.memory = memory;
            return this;
        }

        public Builder memory(Integer memory) {
            return memory(Output.of(memory));
        }

        public Builder memorySwap(@Nullable Output<Integer> memorySwap) {
            $.memorySwap = memorySwap;
            return this;
        }

        public Builder memorySwap(Integer memorySwap) {
            return memorySwap(Output.of(memorySwap));
        }

        public Builder networkMode(@Nullable Output<String> networkMode) {
            $.networkMode = networkMode;
            return this;
        }

        public Builder networkMode(String networkMode) {
            return networkMode(Output.of(networkMode));
        }

        public Builder noCache(@Nullable Output<Boolean> noCache) {
            $.noCache = noCache;
            return this;
        }

        public Builder noCache(Boolean noCache) {
            return noCache(Output.of(noCache));
        }

        public Builder platform(@Nullable Output<String> platform) {
            $.platform = platform;
            return this;
        }

        public Builder platform(String platform) {
            return platform(Output.of(platform));
        }

        public Builder pullParent(@Nullable Output<Boolean> pullParent) {
            $.pullParent = pullParent;
            return this;
        }

        public Builder pullParent(Boolean pullParent) {
            return pullParent(Output.of(pullParent));
        }

        public Builder remoteContext(@Nullable Output<String> remoteContext) {
            $.remoteContext = remoteContext;
            return this;
        }

        public Builder remoteContext(String remoteContext) {
            return remoteContext(Output.of(remoteContext));
        }

        public Builder remove(@Nullable Output<Boolean> remove) {
            $.remove = remove;
            return this;
        }

        public Builder remove(Boolean remove) {
            return remove(Output.of(remove));
        }

        public Builder securityOpts(@Nullable Output<List<String>> securityOpts) {
            $.securityOpts = securityOpts;
            return this;
        }

        public Builder securityOpts(List<String> securityOpts) {
            return securityOpts(Output.of(securityOpts));
        }

        public Builder securityOpts(String... securityOpts) {
            return securityOpts(List.of(securityOpts));
        }

        public Builder sessionId(@Nullable Output<String> sessionId) {
            $.sessionId = sessionId;
            return this;
        }

        public Builder sessionId(String sessionId) {
            return sessionId(Output.of(sessionId));
        }

        public Builder shmSize(@Nullable Output<Integer> shmSize) {
            $.shmSize = shmSize;
            return this;
        }

        public Builder shmSize(Integer shmSize) {
            return shmSize(Output.of(shmSize));
        }

        public Builder squash(@Nullable Output<Boolean> squash) {
            $.squash = squash;
            return this;
        }

        public Builder squash(Boolean squash) {
            return squash(Output.of(squash));
        }

        public Builder suppressOutput(@Nullable Output<Boolean> suppressOutput) {
            $.suppressOutput = suppressOutput;
            return this;
        }

        public Builder suppressOutput(Boolean suppressOutput) {
            return suppressOutput(Output.of(suppressOutput));
        }

        public Builder target(@Nullable Output<String> target) {
            $.target = target;
            return this;
        }

        public Builder target(String target) {
            return target(Output.of(target));
        }

        public Builder ulimits(@Nullable Output<List<RegistryImageBuildUlimitArgs>> ulimits) {
            $.ulimits = ulimits;
            return this;
        }

        public Builder ulimits(List<RegistryImageBuildUlimitArgs> ulimits) {
            return ulimits(Output.of(ulimits));
        }

        public Builder ulimits(RegistryImageBuildUlimitArgs... ulimits) {
            return ulimits(List.of(ulimits));
        }

        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        public Builder version(String version) {
            return version(Output.of(version));
        }

        public RegistryImageBuildArgs build() {
            $.context = Objects.requireNonNull($.context, "expected parameter 'context' to be non-null");
            return $;
        }
    }

}
