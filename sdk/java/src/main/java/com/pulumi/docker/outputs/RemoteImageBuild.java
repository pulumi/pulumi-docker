// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.docker.outputs.RemoteImageBuildAuthConfig;
import com.pulumi.docker.outputs.RemoteImageBuildUlimit;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RemoteImageBuild {
    /**
     * @return The configuration for the authentication
     * 
     */
    private @Nullable List<RemoteImageBuildAuthConfig> authConfigs;
    /**
     * @return Set build-time variables
     * 
     */
    private @Nullable Map<String,String> buildArg;
    /**
     * @return Pairs for build-time variables in the form TODO
     * 
     */
    private @Nullable Map<String,String> buildArgs;
    /**
     * @return BuildID is an optional identifier that can be passed together with the build request. The same identifier can be used to gracefully cancel the build with the cancel request.
     * 
     */
    private @Nullable String buildId;
    /**
     * @return Images to consider as cache sources
     * 
     */
    private @Nullable List<String> cacheFroms;
    /**
     * @return Optional parent cgroup for the container
     * 
     */
    private @Nullable String cgroupParent;
    /**
     * @return Value to specify the build context. Currently, only a `PATH` context is supported. You can use the helper function &#39;${path.cwd}/context-dir&#39;. Please see https://docs.docker.com/build/building/context/ for more information about build contexts.
     * 
     */
    private String context;
    /**
     * @return The length of a CPU period in microseconds
     * 
     */
    private @Nullable Integer cpuPeriod;
    /**
     * @return Microseconds of CPU time that the container can get in a CPU period
     * 
     */
    private @Nullable Integer cpuQuota;
    /**
     * @return CPUs in which to allow execution (e.g., `0-3`, `0`, `1`)
     * 
     */
    private @Nullable String cpuSetCpus;
    /**
     * @return MEMs in which to allow execution (`0-3`, `0`, `1`)
     * 
     */
    private @Nullable String cpuSetMems;
    /**
     * @return CPU shares (relative weight)
     * 
     */
    private @Nullable Integer cpuShares;
    /**
     * @return Name of the Dockerfile. Defaults to `Dockerfile`.
     * 
     */
    private @Nullable String dockerfile;
    /**
     * @return A list of hostnames/IP mappings to add to the container’s /etc/hosts file. Specified in the form [&#34;hostname:IP&#34;]
     * 
     */
    private @Nullable List<String> extraHosts;
    /**
     * @return Always remove intermediate containers
     * 
     */
    private @Nullable Boolean forceRemove;
    /**
     * @return Isolation represents the isolation technology of a container. The supported values are
     * 
     */
    private @Nullable String isolation;
    /**
     * @return Set metadata for an image
     * 
     */
    private @Nullable Map<String,String> label;
    /**
     * @return User-defined key/value metadata
     * 
     */
    private @Nullable Map<String,String> labels;
    /**
     * @return Set memory limit for build
     * 
     */
    private @Nullable Integer memory;
    /**
     * @return Total memory (memory + swap), -1 to enable unlimited swap
     * 
     */
    private @Nullable Integer memorySwap;
    /**
     * @return Set the networking mode for the RUN instructions during build
     * 
     */
    private @Nullable String networkMode;
    /**
     * @return Do not use the cache when building the image
     * 
     */
    private @Nullable Boolean noCache;
    /**
     * @return Set platform if server is multi-platform capable
     * 
     */
    private @Nullable String platform;
    /**
     * @return Attempt to pull the image even if an older image exists locally
     * 
     */
    private @Nullable Boolean pullParent;
    /**
     * @return A Git repository URI or HTTP/HTTPS context URI
     * 
     */
    private @Nullable String remoteContext;
    /**
     * @return Remove intermediate containers after a successful build. Defaults to `true`.
     * 
     */
    private @Nullable Boolean remove;
    /**
     * @return The security options
     * 
     */
    private @Nullable List<String> securityOpts;
    /**
     * @return Set an ID for the build session
     * 
     */
    private @Nullable String sessionId;
    /**
     * @return Size of /dev/shm in bytes. The size must be greater than 0
     * 
     */
    private @Nullable Integer shmSize;
    /**
     * @return If true the new layers are squashed into a new image with a single new layer
     * 
     */
    private @Nullable Boolean squash;
    /**
     * @return Suppress the build output and print image ID on success
     * 
     */
    private @Nullable Boolean suppressOutput;
    /**
     * @return Name and optionally a tag in the &#39;name:tag&#39; format
     * 
     */
    private @Nullable List<String> tags;
    /**
     * @return Set the target build stage to build
     * 
     */
    private @Nullable String target;
    /**
     * @return Configuration for ulimits
     * 
     */
    private @Nullable List<RemoteImageBuildUlimit> ulimits;
    /**
     * @return Version of the underlying builder to use
     * 
     */
    private @Nullable String version;

    private RemoteImageBuild() {}
    /**
     * @return The configuration for the authentication
     * 
     */
    public List<RemoteImageBuildAuthConfig> authConfigs() {
        return this.authConfigs == null ? List.of() : this.authConfigs;
    }
    /**
     * @return Set build-time variables
     * 
     */
    public Map<String,String> buildArg() {
        return this.buildArg == null ? Map.of() : this.buildArg;
    }
    /**
     * @return Pairs for build-time variables in the form TODO
     * 
     */
    public Map<String,String> buildArgs() {
        return this.buildArgs == null ? Map.of() : this.buildArgs;
    }
    /**
     * @return BuildID is an optional identifier that can be passed together with the build request. The same identifier can be used to gracefully cancel the build with the cancel request.
     * 
     */
    public Optional<String> buildId() {
        return Optional.ofNullable(this.buildId);
    }
    /**
     * @return Images to consider as cache sources
     * 
     */
    public List<String> cacheFroms() {
        return this.cacheFroms == null ? List.of() : this.cacheFroms;
    }
    /**
     * @return Optional parent cgroup for the container
     * 
     */
    public Optional<String> cgroupParent() {
        return Optional.ofNullable(this.cgroupParent);
    }
    /**
     * @return Value to specify the build context. Currently, only a `PATH` context is supported. You can use the helper function &#39;${path.cwd}/context-dir&#39;. Please see https://docs.docker.com/build/building/context/ for more information about build contexts.
     * 
     */
    public String context() {
        return this.context;
    }
    /**
     * @return The length of a CPU period in microseconds
     * 
     */
    public Optional<Integer> cpuPeriod() {
        return Optional.ofNullable(this.cpuPeriod);
    }
    /**
     * @return Microseconds of CPU time that the container can get in a CPU period
     * 
     */
    public Optional<Integer> cpuQuota() {
        return Optional.ofNullable(this.cpuQuota);
    }
    /**
     * @return CPUs in which to allow execution (e.g., `0-3`, `0`, `1`)
     * 
     */
    public Optional<String> cpuSetCpus() {
        return Optional.ofNullable(this.cpuSetCpus);
    }
    /**
     * @return MEMs in which to allow execution (`0-3`, `0`, `1`)
     * 
     */
    public Optional<String> cpuSetMems() {
        return Optional.ofNullable(this.cpuSetMems);
    }
    /**
     * @return CPU shares (relative weight)
     * 
     */
    public Optional<Integer> cpuShares() {
        return Optional.ofNullable(this.cpuShares);
    }
    /**
     * @return Name of the Dockerfile. Defaults to `Dockerfile`.
     * 
     */
    public Optional<String> dockerfile() {
        return Optional.ofNullable(this.dockerfile);
    }
    /**
     * @return A list of hostnames/IP mappings to add to the container’s /etc/hosts file. Specified in the form [&#34;hostname:IP&#34;]
     * 
     */
    public List<String> extraHosts() {
        return this.extraHosts == null ? List.of() : this.extraHosts;
    }
    /**
     * @return Always remove intermediate containers
     * 
     */
    public Optional<Boolean> forceRemove() {
        return Optional.ofNullable(this.forceRemove);
    }
    /**
     * @return Isolation represents the isolation technology of a container. The supported values are
     * 
     */
    public Optional<String> isolation() {
        return Optional.ofNullable(this.isolation);
    }
    /**
     * @return Set metadata for an image
     * 
     */
    public Map<String,String> label() {
        return this.label == null ? Map.of() : this.label;
    }
    /**
     * @return User-defined key/value metadata
     * 
     */
    public Map<String,String> labels() {
        return this.labels == null ? Map.of() : this.labels;
    }
    /**
     * @return Set memory limit for build
     * 
     */
    public Optional<Integer> memory() {
        return Optional.ofNullable(this.memory);
    }
    /**
     * @return Total memory (memory + swap), -1 to enable unlimited swap
     * 
     */
    public Optional<Integer> memorySwap() {
        return Optional.ofNullable(this.memorySwap);
    }
    /**
     * @return Set the networking mode for the RUN instructions during build
     * 
     */
    public Optional<String> networkMode() {
        return Optional.ofNullable(this.networkMode);
    }
    /**
     * @return Do not use the cache when building the image
     * 
     */
    public Optional<Boolean> noCache() {
        return Optional.ofNullable(this.noCache);
    }
    /**
     * @return Set platform if server is multi-platform capable
     * 
     */
    public Optional<String> platform() {
        return Optional.ofNullable(this.platform);
    }
    /**
     * @return Attempt to pull the image even if an older image exists locally
     * 
     */
    public Optional<Boolean> pullParent() {
        return Optional.ofNullable(this.pullParent);
    }
    /**
     * @return A Git repository URI or HTTP/HTTPS context URI
     * 
     */
    public Optional<String> remoteContext() {
        return Optional.ofNullable(this.remoteContext);
    }
    /**
     * @return Remove intermediate containers after a successful build. Defaults to `true`.
     * 
     */
    public Optional<Boolean> remove() {
        return Optional.ofNullable(this.remove);
    }
    /**
     * @return The security options
     * 
     */
    public List<String> securityOpts() {
        return this.securityOpts == null ? List.of() : this.securityOpts;
    }
    /**
     * @return Set an ID for the build session
     * 
     */
    public Optional<String> sessionId() {
        return Optional.ofNullable(this.sessionId);
    }
    /**
     * @return Size of /dev/shm in bytes. The size must be greater than 0
     * 
     */
    public Optional<Integer> shmSize() {
        return Optional.ofNullable(this.shmSize);
    }
    /**
     * @return If true the new layers are squashed into a new image with a single new layer
     * 
     */
    public Optional<Boolean> squash() {
        return Optional.ofNullable(this.squash);
    }
    /**
     * @return Suppress the build output and print image ID on success
     * 
     */
    public Optional<Boolean> suppressOutput() {
        return Optional.ofNullable(this.suppressOutput);
    }
    /**
     * @return Name and optionally a tag in the &#39;name:tag&#39; format
     * 
     */
    public List<String> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    /**
     * @return Set the target build stage to build
     * 
     */
    public Optional<String> target() {
        return Optional.ofNullable(this.target);
    }
    /**
     * @return Configuration for ulimits
     * 
     */
    public List<RemoteImageBuildUlimit> ulimits() {
        return this.ulimits == null ? List.of() : this.ulimits;
    }
    /**
     * @return Version of the underlying builder to use
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RemoteImageBuild defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<RemoteImageBuildAuthConfig> authConfigs;
        private @Nullable Map<String,String> buildArg;
        private @Nullable Map<String,String> buildArgs;
        private @Nullable String buildId;
        private @Nullable List<String> cacheFroms;
        private @Nullable String cgroupParent;
        private String context;
        private @Nullable Integer cpuPeriod;
        private @Nullable Integer cpuQuota;
        private @Nullable String cpuSetCpus;
        private @Nullable String cpuSetMems;
        private @Nullable Integer cpuShares;
        private @Nullable String dockerfile;
        private @Nullable List<String> extraHosts;
        private @Nullable Boolean forceRemove;
        private @Nullable String isolation;
        private @Nullable Map<String,String> label;
        private @Nullable Map<String,String> labels;
        private @Nullable Integer memory;
        private @Nullable Integer memorySwap;
        private @Nullable String networkMode;
        private @Nullable Boolean noCache;
        private @Nullable String platform;
        private @Nullable Boolean pullParent;
        private @Nullable String remoteContext;
        private @Nullable Boolean remove;
        private @Nullable List<String> securityOpts;
        private @Nullable String sessionId;
        private @Nullable Integer shmSize;
        private @Nullable Boolean squash;
        private @Nullable Boolean suppressOutput;
        private @Nullable List<String> tags;
        private @Nullable String target;
        private @Nullable List<RemoteImageBuildUlimit> ulimits;
        private @Nullable String version;
        public Builder() {}
        public Builder(RemoteImageBuild defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authConfigs = defaults.authConfigs;
    	      this.buildArg = defaults.buildArg;
    	      this.buildArgs = defaults.buildArgs;
    	      this.buildId = defaults.buildId;
    	      this.cacheFroms = defaults.cacheFroms;
    	      this.cgroupParent = defaults.cgroupParent;
    	      this.context = defaults.context;
    	      this.cpuPeriod = defaults.cpuPeriod;
    	      this.cpuQuota = defaults.cpuQuota;
    	      this.cpuSetCpus = defaults.cpuSetCpus;
    	      this.cpuSetMems = defaults.cpuSetMems;
    	      this.cpuShares = defaults.cpuShares;
    	      this.dockerfile = defaults.dockerfile;
    	      this.extraHosts = defaults.extraHosts;
    	      this.forceRemove = defaults.forceRemove;
    	      this.isolation = defaults.isolation;
    	      this.label = defaults.label;
    	      this.labels = defaults.labels;
    	      this.memory = defaults.memory;
    	      this.memorySwap = defaults.memorySwap;
    	      this.networkMode = defaults.networkMode;
    	      this.noCache = defaults.noCache;
    	      this.platform = defaults.platform;
    	      this.pullParent = defaults.pullParent;
    	      this.remoteContext = defaults.remoteContext;
    	      this.remove = defaults.remove;
    	      this.securityOpts = defaults.securityOpts;
    	      this.sessionId = defaults.sessionId;
    	      this.shmSize = defaults.shmSize;
    	      this.squash = defaults.squash;
    	      this.suppressOutput = defaults.suppressOutput;
    	      this.tags = defaults.tags;
    	      this.target = defaults.target;
    	      this.ulimits = defaults.ulimits;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder authConfigs(@Nullable List<RemoteImageBuildAuthConfig> authConfigs) {
            this.authConfigs = authConfigs;
            return this;
        }
        public Builder authConfigs(RemoteImageBuildAuthConfig... authConfigs) {
            return authConfigs(List.of(authConfigs));
        }
        @CustomType.Setter
        public Builder buildArg(@Nullable Map<String,String> buildArg) {
            this.buildArg = buildArg;
            return this;
        }
        @CustomType.Setter
        public Builder buildArgs(@Nullable Map<String,String> buildArgs) {
            this.buildArgs = buildArgs;
            return this;
        }
        @CustomType.Setter
        public Builder buildId(@Nullable String buildId) {
            this.buildId = buildId;
            return this;
        }
        @CustomType.Setter
        public Builder cacheFroms(@Nullable List<String> cacheFroms) {
            this.cacheFroms = cacheFroms;
            return this;
        }
        public Builder cacheFroms(String... cacheFroms) {
            return cacheFroms(List.of(cacheFroms));
        }
        @CustomType.Setter
        public Builder cgroupParent(@Nullable String cgroupParent) {
            this.cgroupParent = cgroupParent;
            return this;
        }
        @CustomType.Setter
        public Builder context(String context) {
            this.context = Objects.requireNonNull(context);
            return this;
        }
        @CustomType.Setter
        public Builder cpuPeriod(@Nullable Integer cpuPeriod) {
            this.cpuPeriod = cpuPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder cpuQuota(@Nullable Integer cpuQuota) {
            this.cpuQuota = cpuQuota;
            return this;
        }
        @CustomType.Setter
        public Builder cpuSetCpus(@Nullable String cpuSetCpus) {
            this.cpuSetCpus = cpuSetCpus;
            return this;
        }
        @CustomType.Setter
        public Builder cpuSetMems(@Nullable String cpuSetMems) {
            this.cpuSetMems = cpuSetMems;
            return this;
        }
        @CustomType.Setter
        public Builder cpuShares(@Nullable Integer cpuShares) {
            this.cpuShares = cpuShares;
            return this;
        }
        @CustomType.Setter
        public Builder dockerfile(@Nullable String dockerfile) {
            this.dockerfile = dockerfile;
            return this;
        }
        @CustomType.Setter
        public Builder extraHosts(@Nullable List<String> extraHosts) {
            this.extraHosts = extraHosts;
            return this;
        }
        public Builder extraHosts(String... extraHosts) {
            return extraHosts(List.of(extraHosts));
        }
        @CustomType.Setter
        public Builder forceRemove(@Nullable Boolean forceRemove) {
            this.forceRemove = forceRemove;
            return this;
        }
        @CustomType.Setter
        public Builder isolation(@Nullable String isolation) {
            this.isolation = isolation;
            return this;
        }
        @CustomType.Setter
        public Builder label(@Nullable Map<String,String> label) {
            this.label = label;
            return this;
        }
        @CustomType.Setter
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder memory(@Nullable Integer memory) {
            this.memory = memory;
            return this;
        }
        @CustomType.Setter
        public Builder memorySwap(@Nullable Integer memorySwap) {
            this.memorySwap = memorySwap;
            return this;
        }
        @CustomType.Setter
        public Builder networkMode(@Nullable String networkMode) {
            this.networkMode = networkMode;
            return this;
        }
        @CustomType.Setter
        public Builder noCache(@Nullable Boolean noCache) {
            this.noCache = noCache;
            return this;
        }
        @CustomType.Setter
        public Builder platform(@Nullable String platform) {
            this.platform = platform;
            return this;
        }
        @CustomType.Setter
        public Builder pullParent(@Nullable Boolean pullParent) {
            this.pullParent = pullParent;
            return this;
        }
        @CustomType.Setter
        public Builder remoteContext(@Nullable String remoteContext) {
            this.remoteContext = remoteContext;
            return this;
        }
        @CustomType.Setter
        public Builder remove(@Nullable Boolean remove) {
            this.remove = remove;
            return this;
        }
        @CustomType.Setter
        public Builder securityOpts(@Nullable List<String> securityOpts) {
            this.securityOpts = securityOpts;
            return this;
        }
        public Builder securityOpts(String... securityOpts) {
            return securityOpts(List.of(securityOpts));
        }
        @CustomType.Setter
        public Builder sessionId(@Nullable String sessionId) {
            this.sessionId = sessionId;
            return this;
        }
        @CustomType.Setter
        public Builder shmSize(@Nullable Integer shmSize) {
            this.shmSize = shmSize;
            return this;
        }
        @CustomType.Setter
        public Builder squash(@Nullable Boolean squash) {
            this.squash = squash;
            return this;
        }
        @CustomType.Setter
        public Builder suppressOutput(@Nullable Boolean suppressOutput) {
            this.suppressOutput = suppressOutput;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder target(@Nullable String target) {
            this.target = target;
            return this;
        }
        @CustomType.Setter
        public Builder ulimits(@Nullable List<RemoteImageBuildUlimit> ulimits) {
            this.ulimits = ulimits;
            return this;
        }
        public Builder ulimits(RemoteImageBuildUlimit... ulimits) {
            return ulimits(List.of(ulimits));
        }
        @CustomType.Setter
        public Builder version(@Nullable String version) {
            this.version = version;
            return this;
        }
        public RemoteImageBuild build() {
            final var _resultValue = new RemoteImageBuild();
            _resultValue.authConfigs = authConfigs;
            _resultValue.buildArg = buildArg;
            _resultValue.buildArgs = buildArgs;
            _resultValue.buildId = buildId;
            _resultValue.cacheFroms = cacheFroms;
            _resultValue.cgroupParent = cgroupParent;
            _resultValue.context = context;
            _resultValue.cpuPeriod = cpuPeriod;
            _resultValue.cpuQuota = cpuQuota;
            _resultValue.cpuSetCpus = cpuSetCpus;
            _resultValue.cpuSetMems = cpuSetMems;
            _resultValue.cpuShares = cpuShares;
            _resultValue.dockerfile = dockerfile;
            _resultValue.extraHosts = extraHosts;
            _resultValue.forceRemove = forceRemove;
            _resultValue.isolation = isolation;
            _resultValue.label = label;
            _resultValue.labels = labels;
            _resultValue.memory = memory;
            _resultValue.memorySwap = memorySwap;
            _resultValue.networkMode = networkMode;
            _resultValue.noCache = noCache;
            _resultValue.platform = platform;
            _resultValue.pullParent = pullParent;
            _resultValue.remoteContext = remoteContext;
            _resultValue.remove = remove;
            _resultValue.securityOpts = securityOpts;
            _resultValue.sessionId = sessionId;
            _resultValue.shmSize = shmSize;
            _resultValue.squash = squash;
            _resultValue.suppressOutput = suppressOutput;
            _resultValue.tags = tags;
            _resultValue.target = target;
            _resultValue.ulimits = ulimits;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
