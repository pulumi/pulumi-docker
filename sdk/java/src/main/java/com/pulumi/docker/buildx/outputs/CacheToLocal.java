// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.buildx.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.docker.buildx.enums.CacheMode;
import com.pulumi.docker.buildx.enums.CompressionType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CacheToLocal {
    /**
     * @return The compression type to use.
     * 
     */
    private @Nullable CompressionType compression;
    /**
     * @return Compression level from 0 to 22.
     * 
     */
    private @Nullable Integer compressionLevel;
    private String dest;
    /**
     * @return Forcefully apply compression.
     * 
     */
    private @Nullable Boolean forceCompression;
    /**
     * @return Ignore errors caused by failed cache exports.
     * 
     */
    private @Nullable Boolean ignoreError;
    private @Nullable CacheMode mode;

    private CacheToLocal() {}
    /**
     * @return The compression type to use.
     * 
     */
    public Optional<CompressionType> compression() {
        return Optional.ofNullable(this.compression);
    }
    /**
     * @return Compression level from 0 to 22.
     * 
     */
    public Optional<Integer> compressionLevel() {
        return Optional.ofNullable(this.compressionLevel);
    }
    public String dest() {
        return this.dest;
    }
    /**
     * @return Forcefully apply compression.
     * 
     */
    public Optional<Boolean> forceCompression() {
        return Optional.ofNullable(this.forceCompression);
    }
    /**
     * @return Ignore errors caused by failed cache exports.
     * 
     */
    public Optional<Boolean> ignoreError() {
        return Optional.ofNullable(this.ignoreError);
    }
    public Optional<CacheMode> mode() {
        return Optional.ofNullable(this.mode);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CacheToLocal defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable CompressionType compression;
        private @Nullable Integer compressionLevel;
        private String dest;
        private @Nullable Boolean forceCompression;
        private @Nullable Boolean ignoreError;
        private @Nullable CacheMode mode;
        public Builder() {}
        public Builder(CacheToLocal defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compression = defaults.compression;
    	      this.compressionLevel = defaults.compressionLevel;
    	      this.dest = defaults.dest;
    	      this.forceCompression = defaults.forceCompression;
    	      this.ignoreError = defaults.ignoreError;
    	      this.mode = defaults.mode;
        }

        @CustomType.Setter
        public Builder compression(@Nullable CompressionType compression) {

            this.compression = compression;
            return this;
        }
        @CustomType.Setter
        public Builder compressionLevel(@Nullable Integer compressionLevel) {

            this.compressionLevel = compressionLevel;
            return this;
        }
        @CustomType.Setter
        public Builder dest(String dest) {
            if (dest == null) {
              throw new MissingRequiredPropertyException("CacheToLocal", "dest");
            }
            this.dest = dest;
            return this;
        }
        @CustomType.Setter
        public Builder forceCompression(@Nullable Boolean forceCompression) {

            this.forceCompression = forceCompression;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreError(@Nullable Boolean ignoreError) {

            this.ignoreError = ignoreError;
            return this;
        }
        @CustomType.Setter
        public Builder mode(@Nullable CacheMode mode) {

            this.mode = mode;
            return this;
        }
        public CacheToLocal build() {
            final var _resultValue = new CacheToLocal();
            _resultValue.compression = compression;
            _resultValue.compressionLevel = compressionLevel;
            _resultValue.dest = dest;
            _resultValue.forceCompression = forceCompression;
            _resultValue.ignoreError = ignoreError;
            _resultValue.mode = mode;
            return _resultValue;
        }
    }
}
