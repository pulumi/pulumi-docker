// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VolumeCluster {
    /**
     * @return Availability of the volume. Can be `active` (default), `pause`, or `drain`.
     * 
     */
    private @Nullable String availability;
    /**
     * @return Cluster Volume group
     * 
     */
    private @Nullable String group;
    /**
     * @return The ID of the cluster volume.
     * 
     */
    private @Nullable String id;
    /**
     * @return Minimum size of the Cluster Volume in human readable memory bytes (like 128MiB, 2GiB, etc). Must be in format of KiB, MiB, Gib, Tib or PiB.
     * 
     */
    private @Nullable String limitBytes;
    /**
     * @return Maximum size of the Cluster Volume in human readable memory bytes (like 128MiB, 2GiB, etc). Must be in format of KiB, MiB, Gib, Tib or PiB.
     * 
     */
    private @Nullable String requiredBytes;
    /**
     * @return The scope of the volume. Can be `single` (default) or `multi`.
     * 
     */
    private @Nullable String scope;
    /**
     * @return The sharing mode. Can be `none` (default), `readonly`, `onewriter` or `all`.
     * 
     */
    private @Nullable String sharing;
    /**
     * @return A topology that the Cluster Volume would be preferred in
     * 
     */
    private @Nullable String topologyPreferred;
    /**
     * @return A topology that the Cluster Volume must be accessible from
     * 
     */
    private @Nullable String topologyRequired;
    /**
     * @return Cluster Volume access type. Can be `mount` or `block` (default).
     * 
     */
    private @Nullable String type;

    private VolumeCluster() {}
    /**
     * @return Availability of the volume. Can be `active` (default), `pause`, or `drain`.
     * 
     */
    public Optional<String> availability() {
        return Optional.ofNullable(this.availability);
    }
    /**
     * @return Cluster Volume group
     * 
     */
    public Optional<String> group() {
        return Optional.ofNullable(this.group);
    }
    /**
     * @return The ID of the cluster volume.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Minimum size of the Cluster Volume in human readable memory bytes (like 128MiB, 2GiB, etc). Must be in format of KiB, MiB, Gib, Tib or PiB.
     * 
     */
    public Optional<String> limitBytes() {
        return Optional.ofNullable(this.limitBytes);
    }
    /**
     * @return Maximum size of the Cluster Volume in human readable memory bytes (like 128MiB, 2GiB, etc). Must be in format of KiB, MiB, Gib, Tib or PiB.
     * 
     */
    public Optional<String> requiredBytes() {
        return Optional.ofNullable(this.requiredBytes);
    }
    /**
     * @return The scope of the volume. Can be `single` (default) or `multi`.
     * 
     */
    public Optional<String> scope() {
        return Optional.ofNullable(this.scope);
    }
    /**
     * @return The sharing mode. Can be `none` (default), `readonly`, `onewriter` or `all`.
     * 
     */
    public Optional<String> sharing() {
        return Optional.ofNullable(this.sharing);
    }
    /**
     * @return A topology that the Cluster Volume would be preferred in
     * 
     */
    public Optional<String> topologyPreferred() {
        return Optional.ofNullable(this.topologyPreferred);
    }
    /**
     * @return A topology that the Cluster Volume must be accessible from
     * 
     */
    public Optional<String> topologyRequired() {
        return Optional.ofNullable(this.topologyRequired);
    }
    /**
     * @return Cluster Volume access type. Can be `mount` or `block` (default).
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VolumeCluster defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String availability;
        private @Nullable String group;
        private @Nullable String id;
        private @Nullable String limitBytes;
        private @Nullable String requiredBytes;
        private @Nullable String scope;
        private @Nullable String sharing;
        private @Nullable String topologyPreferred;
        private @Nullable String topologyRequired;
        private @Nullable String type;
        public Builder() {}
        public Builder(VolumeCluster defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availability = defaults.availability;
    	      this.group = defaults.group;
    	      this.id = defaults.id;
    	      this.limitBytes = defaults.limitBytes;
    	      this.requiredBytes = defaults.requiredBytes;
    	      this.scope = defaults.scope;
    	      this.sharing = defaults.sharing;
    	      this.topologyPreferred = defaults.topologyPreferred;
    	      this.topologyRequired = defaults.topologyRequired;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder availability(@Nullable String availability) {

            this.availability = availability;
            return this;
        }
        @CustomType.Setter
        public Builder group(@Nullable String group) {

            this.group = group;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder limitBytes(@Nullable String limitBytes) {

            this.limitBytes = limitBytes;
            return this;
        }
        @CustomType.Setter
        public Builder requiredBytes(@Nullable String requiredBytes) {

            this.requiredBytes = requiredBytes;
            return this;
        }
        @CustomType.Setter
        public Builder scope(@Nullable String scope) {

            this.scope = scope;
            return this;
        }
        @CustomType.Setter
        public Builder sharing(@Nullable String sharing) {

            this.sharing = sharing;
            return this;
        }
        @CustomType.Setter
        public Builder topologyPreferred(@Nullable String topologyPreferred) {

            this.topologyPreferred = topologyPreferred;
            return this;
        }
        @CustomType.Setter
        public Builder topologyRequired(@Nullable String topologyRequired) {

            this.topologyRequired = topologyRequired;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        public VolumeCluster build() {
            final var _resultValue = new VolumeCluster();
            _resultValue.availability = availability;
            _resultValue.group = group;
            _resultValue.id = id;
            _resultValue.limitBytes = limitBytes;
            _resultValue.requiredBytes = requiredBytes;
            _resultValue.scope = scope;
            _resultValue.sharing = sharing;
            _resultValue.topologyPreferred = topologyPreferred;
            _resultValue.topologyRequired = topologyRequired;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
