// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceAuthArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceAuthArgs Empty = new ServiceAuthArgs();

    /**
     * The password
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The address of the server for the authentication
     * 
     */
    @Import(name="serverAddress", required=true)
    private Output<String> serverAddress;

    /**
     * @return The address of the server for the authentication
     * 
     */
    public Output<String> serverAddress() {
        return this.serverAddress;
    }

    /**
     * The username
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The username
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private ServiceAuthArgs() {}

    private ServiceAuthArgs(ServiceAuthArgs $) {
        this.password = $.password;
        this.serverAddress = $.serverAddress;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceAuthArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceAuthArgs $;

        public Builder() {
            $ = new ServiceAuthArgs();
        }

        public Builder(ServiceAuthArgs defaults) {
            $ = new ServiceAuthArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param password The password
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param serverAddress The address of the server for the authentication
         * 
         * @return builder
         * 
         */
        public Builder serverAddress(Output<String> serverAddress) {
            $.serverAddress = serverAddress;
            return this;
        }

        /**
         * @param serverAddress The address of the server for the authentication
         * 
         * @return builder
         * 
         */
        public Builder serverAddress(String serverAddress) {
            return serverAddress(Output.of(serverAddress));
        }

        /**
         * @param username The username
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ServiceAuthArgs build() {
            if ($.serverAddress == null) {
                throw new MissingRequiredPropertyException("ServiceAuthArgs", "serverAddress");
            }
            return $;
        }
    }

}
