// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.docker.inputs.ServiceTaskSpecContainerSpecArgs;
import com.pulumi.docker.inputs.ServiceTaskSpecLogDriverArgs;
import com.pulumi.docker.inputs.ServiceTaskSpecPlacementArgs;
import com.pulumi.docker.inputs.ServiceTaskSpecResourcesArgs;
import com.pulumi.docker.inputs.ServiceTaskSpecRestartPolicyArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceTaskSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceTaskSpecArgs Empty = new ServiceTaskSpecArgs();

    @Import(name="containerSpec", required=true)
    private Output<ServiceTaskSpecContainerSpecArgs> containerSpec;

    public Output<ServiceTaskSpecContainerSpecArgs> containerSpec() {
        return this.containerSpec;
    }

    @Import(name="forceUpdate")
    private @Nullable Output<Integer> forceUpdate;

    public Optional<Output<Integer>> forceUpdate() {
        return Optional.ofNullable(this.forceUpdate);
    }

    @Import(name="logDriver")
    private @Nullable Output<ServiceTaskSpecLogDriverArgs> logDriver;

    public Optional<Output<ServiceTaskSpecLogDriverArgs>> logDriver() {
        return Optional.ofNullable(this.logDriver);
    }

    @Import(name="networks")
    private @Nullable Output<List<String>> networks;

    public Optional<Output<List<String>>> networks() {
        return Optional.ofNullable(this.networks);
    }

    @Import(name="placement")
    private @Nullable Output<ServiceTaskSpecPlacementArgs> placement;

    public Optional<Output<ServiceTaskSpecPlacementArgs>> placement() {
        return Optional.ofNullable(this.placement);
    }

    @Import(name="resources")
    private @Nullable Output<ServiceTaskSpecResourcesArgs> resources;

    public Optional<Output<ServiceTaskSpecResourcesArgs>> resources() {
        return Optional.ofNullable(this.resources);
    }

    @Import(name="restartPolicy")
    private @Nullable Output<ServiceTaskSpecRestartPolicyArgs> restartPolicy;

    public Optional<Output<ServiceTaskSpecRestartPolicyArgs>> restartPolicy() {
        return Optional.ofNullable(this.restartPolicy);
    }

    @Import(name="runtime")
    private @Nullable Output<String> runtime;

    public Optional<Output<String>> runtime() {
        return Optional.ofNullable(this.runtime);
    }

    private ServiceTaskSpecArgs() {}

    private ServiceTaskSpecArgs(ServiceTaskSpecArgs $) {
        this.containerSpec = $.containerSpec;
        this.forceUpdate = $.forceUpdate;
        this.logDriver = $.logDriver;
        this.networks = $.networks;
        this.placement = $.placement;
        this.resources = $.resources;
        this.restartPolicy = $.restartPolicy;
        this.runtime = $.runtime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceTaskSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceTaskSpecArgs $;

        public Builder() {
            $ = new ServiceTaskSpecArgs();
        }

        public Builder(ServiceTaskSpecArgs defaults) {
            $ = new ServiceTaskSpecArgs(Objects.requireNonNull(defaults));
        }

        public Builder containerSpec(Output<ServiceTaskSpecContainerSpecArgs> containerSpec) {
            $.containerSpec = containerSpec;
            return this;
        }

        public Builder containerSpec(ServiceTaskSpecContainerSpecArgs containerSpec) {
            return containerSpec(Output.of(containerSpec));
        }

        public Builder forceUpdate(@Nullable Output<Integer> forceUpdate) {
            $.forceUpdate = forceUpdate;
            return this;
        }

        public Builder forceUpdate(Integer forceUpdate) {
            return forceUpdate(Output.of(forceUpdate));
        }

        public Builder logDriver(@Nullable Output<ServiceTaskSpecLogDriverArgs> logDriver) {
            $.logDriver = logDriver;
            return this;
        }

        public Builder logDriver(ServiceTaskSpecLogDriverArgs logDriver) {
            return logDriver(Output.of(logDriver));
        }

        public Builder networks(@Nullable Output<List<String>> networks) {
            $.networks = networks;
            return this;
        }

        public Builder networks(List<String> networks) {
            return networks(Output.of(networks));
        }

        public Builder networks(String... networks) {
            return networks(List.of(networks));
        }

        public Builder placement(@Nullable Output<ServiceTaskSpecPlacementArgs> placement) {
            $.placement = placement;
            return this;
        }

        public Builder placement(ServiceTaskSpecPlacementArgs placement) {
            return placement(Output.of(placement));
        }

        public Builder resources(@Nullable Output<ServiceTaskSpecResourcesArgs> resources) {
            $.resources = resources;
            return this;
        }

        public Builder resources(ServiceTaskSpecResourcesArgs resources) {
            return resources(Output.of(resources));
        }

        public Builder restartPolicy(@Nullable Output<ServiceTaskSpecRestartPolicyArgs> restartPolicy) {
            $.restartPolicy = restartPolicy;
            return this;
        }

        public Builder restartPolicy(ServiceTaskSpecRestartPolicyArgs restartPolicy) {
            return restartPolicy(Output.of(restartPolicy));
        }

        public Builder runtime(@Nullable Output<String> runtime) {
            $.runtime = runtime;
            return this;
        }

        public Builder runtime(String runtime) {
            return runtime(Output.of(runtime));
        }

        public ServiceTaskSpecArgs build() {
            $.containerSpec = Objects.requireNonNull($.containerSpec, "expected parameter 'containerSpec' to be non-null");
            return $;
        }
    }

}
