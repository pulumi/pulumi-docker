// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.docker.inputs.RemoteImageBuildArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RemoteImageArgs extends com.pulumi.resources.ResourceArgs {

    public static final RemoteImageArgs Empty = new RemoteImageArgs();

    /**
     * Configuration to build an image. Please see [docker build command reference](https://docs.docker.com/engine/reference/commandline/build/#options) too.
     * 
     */
    @Import(name="build")
    private @Nullable Output<RemoteImageBuildArgs> build;

    /**
     * @return Configuration to build an image. Please see [docker build command reference](https://docs.docker.com/engine/reference/commandline/build/#options) too.
     * 
     */
    public Optional<Output<RemoteImageBuildArgs>> build() {
        return Optional.ofNullable(this.build);
    }

    /**
     * Always remove intermediate containers
     * 
     */
    @Import(name="forceRemove")
    private @Nullable Output<Boolean> forceRemove;

    /**
     * @return Always remove intermediate containers
     * 
     */
    public Optional<Output<Boolean>> forceRemove() {
        return Optional.ofNullable(this.forceRemove);
    }

    /**
     * If true, then the Docker image won&#39;t be deleted on destroy operation. If this is false, it will delete the image from the docker local storage on destroy operation.
     * 
     */
    @Import(name="keepLocally")
    private @Nullable Output<Boolean> keepLocally;

    /**
     * @return If true, then the Docker image won&#39;t be deleted on destroy operation. If this is false, it will delete the image from the docker local storage on destroy operation.
     * 
     */
    public Optional<Output<Boolean>> keepLocally() {
        return Optional.ofNullable(this.keepLocally);
    }

    /**
     * type of ulimit, e.g. `nofile`
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return type of ulimit, e.g. `nofile`
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Set platform if server is multi-platform capable
     * 
     */
    @Import(name="platform")
    private @Nullable Output<String> platform;

    /**
     * @return Set platform if server is multi-platform capable
     * 
     */
    public Optional<Output<String>> platform() {
        return Optional.ofNullable(this.platform);
    }

    /**
     * List of values which cause an image pull when changed. This is used to store the image digest from the registry when using the docker*registry*image.
     * 
     */
    @Import(name="pullTriggers")
    private @Nullable Output<List<String>> pullTriggers;

    /**
     * @return List of values which cause an image pull when changed. This is used to store the image digest from the registry when using the docker*registry*image.
     * 
     */
    public Optional<Output<List<String>>> pullTriggers() {
        return Optional.ofNullable(this.pullTriggers);
    }

    /**
     * A map of arbitrary strings that, when changed, will force the `docker.RemoteImage` resource to be replaced. This can be used to rebuild an image when contents of source code folders change
     * 
     */
    @Import(name="triggers")
    private @Nullable Output<Map<String,Object>> triggers;

    /**
     * @return A map of arbitrary strings that, when changed, will force the `docker.RemoteImage` resource to be replaced. This can be used to rebuild an image when contents of source code folders change
     * 
     */
    public Optional<Output<Map<String,Object>>> triggers() {
        return Optional.ofNullable(this.triggers);
    }

    private RemoteImageArgs() {}

    private RemoteImageArgs(RemoteImageArgs $) {
        this.build = $.build;
        this.forceRemove = $.forceRemove;
        this.keepLocally = $.keepLocally;
        this.name = $.name;
        this.platform = $.platform;
        this.pullTriggers = $.pullTriggers;
        this.triggers = $.triggers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RemoteImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RemoteImageArgs $;

        public Builder() {
            $ = new RemoteImageArgs();
        }

        public Builder(RemoteImageArgs defaults) {
            $ = new RemoteImageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param build Configuration to build an image. Please see [docker build command reference](https://docs.docker.com/engine/reference/commandline/build/#options) too.
         * 
         * @return builder
         * 
         */
        public Builder build(@Nullable Output<RemoteImageBuildArgs> build) {
            $.build = build;
            return this;
        }

        /**
         * @param build Configuration to build an image. Please see [docker build command reference](https://docs.docker.com/engine/reference/commandline/build/#options) too.
         * 
         * @return builder
         * 
         */
        public Builder build(RemoteImageBuildArgs build) {
            return build(Output.of(build));
        }

        /**
         * @param forceRemove Always remove intermediate containers
         * 
         * @return builder
         * 
         */
        public Builder forceRemove(@Nullable Output<Boolean> forceRemove) {
            $.forceRemove = forceRemove;
            return this;
        }

        /**
         * @param forceRemove Always remove intermediate containers
         * 
         * @return builder
         * 
         */
        public Builder forceRemove(Boolean forceRemove) {
            return forceRemove(Output.of(forceRemove));
        }

        /**
         * @param keepLocally If true, then the Docker image won&#39;t be deleted on destroy operation. If this is false, it will delete the image from the docker local storage on destroy operation.
         * 
         * @return builder
         * 
         */
        public Builder keepLocally(@Nullable Output<Boolean> keepLocally) {
            $.keepLocally = keepLocally;
            return this;
        }

        /**
         * @param keepLocally If true, then the Docker image won&#39;t be deleted on destroy operation. If this is false, it will delete the image from the docker local storage on destroy operation.
         * 
         * @return builder
         * 
         */
        public Builder keepLocally(Boolean keepLocally) {
            return keepLocally(Output.of(keepLocally));
        }

        /**
         * @param name type of ulimit, e.g. `nofile`
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name type of ulimit, e.g. `nofile`
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param platform Set platform if server is multi-platform capable
         * 
         * @return builder
         * 
         */
        public Builder platform(@Nullable Output<String> platform) {
            $.platform = platform;
            return this;
        }

        /**
         * @param platform Set platform if server is multi-platform capable
         * 
         * @return builder
         * 
         */
        public Builder platform(String platform) {
            return platform(Output.of(platform));
        }

        /**
         * @param pullTriggers List of values which cause an image pull when changed. This is used to store the image digest from the registry when using the docker*registry*image.
         * 
         * @return builder
         * 
         */
        public Builder pullTriggers(@Nullable Output<List<String>> pullTriggers) {
            $.pullTriggers = pullTriggers;
            return this;
        }

        /**
         * @param pullTriggers List of values which cause an image pull when changed. This is used to store the image digest from the registry when using the docker*registry*image.
         * 
         * @return builder
         * 
         */
        public Builder pullTriggers(List<String> pullTriggers) {
            return pullTriggers(Output.of(pullTriggers));
        }

        /**
         * @param pullTriggers List of values which cause an image pull when changed. This is used to store the image digest from the registry when using the docker*registry*image.
         * 
         * @return builder
         * 
         */
        public Builder pullTriggers(String... pullTriggers) {
            return pullTriggers(List.of(pullTriggers));
        }

        /**
         * @param triggers A map of arbitrary strings that, when changed, will force the `docker.RemoteImage` resource to be replaced. This can be used to rebuild an image when contents of source code folders change
         * 
         * @return builder
         * 
         */
        public Builder triggers(@Nullable Output<Map<String,Object>> triggers) {
            $.triggers = triggers;
            return this;
        }

        /**
         * @param triggers A map of arbitrary strings that, when changed, will force the `docker.RemoteImage` resource to be replaced. This can be used to rebuild an image when contents of source code folders change
         * 
         * @return builder
         * 
         */
        public Builder triggers(Map<String,Object> triggers) {
            return triggers(Output.of(triggers));
        }

        public RemoteImageArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("RemoteImageArgs", "name");
            }
            return $;
        }
    }

}
