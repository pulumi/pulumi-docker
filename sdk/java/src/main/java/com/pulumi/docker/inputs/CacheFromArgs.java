// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Contains a list of images to reference when building using a cache
 * 
 */
public final class CacheFromArgs extends com.pulumi.resources.ResourceArgs {

    public static final CacheFromArgs Empty = new CacheFromArgs();

    /**
     * Specifies cached images
     * 
     */
    @Import(name="images")
    private @Nullable Output<List<String>> images;

    /**
     * @return Specifies cached images
     * 
     */
    public Optional<Output<List<String>>> images() {
        return Optional.ofNullable(this.images);
    }

    private CacheFromArgs() {}

    private CacheFromArgs(CacheFromArgs $) {
        this.images = $.images;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CacheFromArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CacheFromArgs $;

        public Builder() {
            $ = new CacheFromArgs();
        }

        public Builder(CacheFromArgs defaults) {
            $ = new CacheFromArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param images Specifies cached images
         * 
         * @return builder
         * 
         */
        public Builder images(@Nullable Output<List<String>> images) {
            $.images = images;
            return this;
        }

        /**
         * @param images Specifies cached images
         * 
         * @return builder
         * 
         */
        public Builder images(List<String> images) {
            return images(Output.of(images));
        }

        /**
         * @param images Specifies cached images
         * 
         * @return builder
         * 
         */
        public Builder images(String... images) {
            return images(List.of(images));
        }

        public CacheFromArgs build() {
            return $;
        }
    }

}
