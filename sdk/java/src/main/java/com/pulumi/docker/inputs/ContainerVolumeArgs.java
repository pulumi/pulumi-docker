// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerVolumeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerVolumeArgs Empty = new ContainerVolumeArgs();

    @Import(name="containerPath")
    private @Nullable Output<String> containerPath;

    public Optional<Output<String>> containerPath() {
        return Optional.ofNullable(this.containerPath);
    }

    @Import(name="fromContainer")
    private @Nullable Output<String> fromContainer;

    public Optional<Output<String>> fromContainer() {
        return Optional.ofNullable(this.fromContainer);
    }

    @Import(name="hostPath")
    private @Nullable Output<String> hostPath;

    public Optional<Output<String>> hostPath() {
        return Optional.ofNullable(this.hostPath);
    }

    @Import(name="readOnly")
    private @Nullable Output<Boolean> readOnly;

    public Optional<Output<Boolean>> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    @Import(name="volumeName")
    private @Nullable Output<String> volumeName;

    public Optional<Output<String>> volumeName() {
        return Optional.ofNullable(this.volumeName);
    }

    private ContainerVolumeArgs() {}

    private ContainerVolumeArgs(ContainerVolumeArgs $) {
        this.containerPath = $.containerPath;
        this.fromContainer = $.fromContainer;
        this.hostPath = $.hostPath;
        this.readOnly = $.readOnly;
        this.volumeName = $.volumeName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerVolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerVolumeArgs $;

        public Builder() {
            $ = new ContainerVolumeArgs();
        }

        public Builder(ContainerVolumeArgs defaults) {
            $ = new ContainerVolumeArgs(Objects.requireNonNull(defaults));
        }

        public Builder containerPath(@Nullable Output<String> containerPath) {
            $.containerPath = containerPath;
            return this;
        }

        public Builder containerPath(String containerPath) {
            return containerPath(Output.of(containerPath));
        }

        public Builder fromContainer(@Nullable Output<String> fromContainer) {
            $.fromContainer = fromContainer;
            return this;
        }

        public Builder fromContainer(String fromContainer) {
            return fromContainer(Output.of(fromContainer));
        }

        public Builder hostPath(@Nullable Output<String> hostPath) {
            $.hostPath = hostPath;
            return this;
        }

        public Builder hostPath(String hostPath) {
            return hostPath(Output.of(hostPath));
        }

        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        public Builder readOnly(Boolean readOnly) {
            return readOnly(Output.of(readOnly));
        }

        public Builder volumeName(@Nullable Output<String> volumeName) {
            $.volumeName = volumeName;
            return this;
        }

        public Builder volumeName(String volumeName) {
            return volumeName(Output.of(volumeName));
        }

        public ContainerVolumeArgs build() {
            return $;
        }
    }

}
