// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.buildx.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.docker.buildx.outputs.CacheInline;
import com.pulumi.docker.buildx.outputs.CacheToAzureBlob;
import com.pulumi.docker.buildx.outputs.CacheToGitHubActions;
import com.pulumi.docker.buildx.outputs.CacheToLocal;
import com.pulumi.docker.buildx.outputs.CacheToRegistry;
import com.pulumi.docker.buildx.outputs.CacheToS3;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CacheToEntry {
    /**
     * @return Push cache to Azure&#39;s blob storage service.
     * 
     */
    private @Nullable CacheToAzureBlob azblob;
    /**
     * @return Recommended for use with GitHub Actions workflows.
     * 
     * An action like `crazy-max/ghaction-github-runtime` is recommended to
     * expose appropriate credentials to your GitHub workflow.
     * 
     */
    private @Nullable CacheToGitHubActions gha;
    /**
     * @return The inline cache storage backend is the simplest implementation to get
     * started with, but it does not handle multi-stage builds. Consider the
     * `registry` cache backend instead.
     * 
     */
    private @Nullable CacheInline inline;
    /**
     * @return A simple backend which caches imagines on your local filesystem.
     * 
     */
    private @Nullable CacheToLocal local;
    /**
     * @return A raw string as you would provide it to the Docker CLI (e.g.,
     * `type=inline`)
     * 
     */
    private @Nullable String raw;
    /**
     * @return Push caches to remote registries. Incompatible with the `docker` build
     * driver.
     * 
     */
    private @Nullable CacheToRegistry registry;
    /**
     * @return Push cache to AWS S3 or S3-compatible services such as MinIO.
     * 
     */
    private @Nullable CacheToS3 s3;

    private CacheToEntry() {}
    /**
     * @return Push cache to Azure&#39;s blob storage service.
     * 
     */
    public Optional<CacheToAzureBlob> azblob() {
        return Optional.ofNullable(this.azblob);
    }
    /**
     * @return Recommended for use with GitHub Actions workflows.
     * 
     * An action like `crazy-max/ghaction-github-runtime` is recommended to
     * expose appropriate credentials to your GitHub workflow.
     * 
     */
    public Optional<CacheToGitHubActions> gha() {
        return Optional.ofNullable(this.gha);
    }
    /**
     * @return The inline cache storage backend is the simplest implementation to get
     * started with, but it does not handle multi-stage builds. Consider the
     * `registry` cache backend instead.
     * 
     */
    public Optional<CacheInline> inline() {
        return Optional.ofNullable(this.inline);
    }
    /**
     * @return A simple backend which caches imagines on your local filesystem.
     * 
     */
    public Optional<CacheToLocal> local() {
        return Optional.ofNullable(this.local);
    }
    /**
     * @return A raw string as you would provide it to the Docker CLI (e.g.,
     * `type=inline`)
     * 
     */
    public Optional<String> raw() {
        return Optional.ofNullable(this.raw);
    }
    /**
     * @return Push caches to remote registries. Incompatible with the `docker` build
     * driver.
     * 
     */
    public Optional<CacheToRegistry> registry() {
        return Optional.ofNullable(this.registry);
    }
    /**
     * @return Push cache to AWS S3 or S3-compatible services such as MinIO.
     * 
     */
    public Optional<CacheToS3> s3() {
        return Optional.ofNullable(this.s3);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CacheToEntry defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable CacheToAzureBlob azblob;
        private @Nullable CacheToGitHubActions gha;
        private @Nullable CacheInline inline;
        private @Nullable CacheToLocal local;
        private @Nullable String raw;
        private @Nullable CacheToRegistry registry;
        private @Nullable CacheToS3 s3;
        public Builder() {}
        public Builder(CacheToEntry defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.azblob = defaults.azblob;
    	      this.gha = defaults.gha;
    	      this.inline = defaults.inline;
    	      this.local = defaults.local;
    	      this.raw = defaults.raw;
    	      this.registry = defaults.registry;
    	      this.s3 = defaults.s3;
        }

        @CustomType.Setter
        public Builder azblob(@Nullable CacheToAzureBlob azblob) {

            this.azblob = azblob;
            return this;
        }
        @CustomType.Setter
        public Builder gha(@Nullable CacheToGitHubActions gha) {

            this.gha = gha;
            return this;
        }
        @CustomType.Setter
        public Builder inline(@Nullable CacheInline inline) {

            this.inline = inline;
            return this;
        }
        @CustomType.Setter
        public Builder local(@Nullable CacheToLocal local) {

            this.local = local;
            return this;
        }
        @CustomType.Setter
        public Builder raw(@Nullable String raw) {

            this.raw = raw;
            return this;
        }
        @CustomType.Setter
        public Builder registry(@Nullable CacheToRegistry registry) {

            this.registry = registry;
            return this;
        }
        @CustomType.Setter
        public Builder s3(@Nullable CacheToS3 s3) {

            this.s3 = s3;
            return this;
        }
        public CacheToEntry build() {
            final var _resultValue = new CacheToEntry();
            _resultValue.azblob = azblob;
            _resultValue.gha = gha;
            _resultValue.inline = inline;
            _resultValue.local = local;
            _resultValue.raw = raw;
            _resultValue.registry = registry;
            _resultValue.s3 = s3;
            return _resultValue;
        }
    }
}
