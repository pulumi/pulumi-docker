// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.buildx.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.docker.buildx.enums.Platform;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class Manifest {
    private String digest;
    private Platform platform;
    /**
     * @return The manifest&#39;s ref
     * 
     */
    private String ref;
    private Integer size;

    private Manifest() {}
    public String digest() {
        return this.digest;
    }
    public Platform platform() {
        return this.platform;
    }
    /**
     * @return The manifest&#39;s ref
     * 
     */
    public String ref() {
        return this.ref;
    }
    public Integer size() {
        return this.size;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(Manifest defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String digest;
        private Platform platform;
        private String ref;
        private Integer size;
        public Builder() {}
        public Builder(Manifest defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.digest = defaults.digest;
    	      this.platform = defaults.platform;
    	      this.ref = defaults.ref;
    	      this.size = defaults.size;
        }

        @CustomType.Setter
        public Builder digest(String digest) {
            if (digest == null) {
              throw new MissingRequiredPropertyException("Manifest", "digest");
            }
            this.digest = digest;
            return this;
        }
        @CustomType.Setter
        public Builder platform(Platform platform) {
            if (platform == null) {
              throw new MissingRequiredPropertyException("Manifest", "platform");
            }
            this.platform = platform;
            return this;
        }
        @CustomType.Setter
        public Builder ref(String ref) {
            if (ref == null) {
              throw new MissingRequiredPropertyException("Manifest", "ref");
            }
            this.ref = ref;
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("Manifest", "size");
            }
            this.size = size;
            return this;
        }
        public Manifest build() {
            final var _resultValue = new Manifest();
            _resultValue.digest = digest;
            _resultValue.platform = platform;
            _resultValue.ref = ref;
            _resultValue.size = size;
            return _resultValue;
        }
    }
}
