// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.buildx.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.docker.buildx.enums.CacheMode;
import com.pulumi.docker.buildx.enums.CompressionType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CacheToRegistry {
    /**
     * @return The compression type to use.
     * 
     */
    private @Nullable CompressionType compression;
    /**
     * @return Compression level from 0 to 22.
     * 
     */
    private @Nullable Integer compressionLevel;
    /**
     * @return Forcefully apply compression.
     * 
     */
    private @Nullable Boolean forceCompression;
    /**
     * @return Ignore errors caused by failed cache exports.
     * 
     */
    private @Nullable Boolean ignoreError;
    /**
     * @return Export cache manifest as an OCI-compatible image manifest instead of a
     * manifest list (requires OCI media types).
     * 
     * Defaults to `false`.
     * 
     */
    private @Nullable Boolean imageManifest;
    /**
     * @return The cache mode to use. Defaults to `min`.
     * 
     */
    private @Nullable CacheMode mode;
    /**
     * @return Whether to use OCI mediatypes in exported manifests. Defaults to
     * `true`.
     * 
     */
    private @Nullable Boolean ociMediaTypes;
    /**
     * @return Fully qualified name of the cache image to import.
     * 
     */
    private String ref;

    private CacheToRegistry() {}
    /**
     * @return The compression type to use.
     * 
     */
    public Optional<CompressionType> compression() {
        return Optional.ofNullable(this.compression);
    }
    /**
     * @return Compression level from 0 to 22.
     * 
     */
    public Optional<Integer> compressionLevel() {
        return Optional.ofNullable(this.compressionLevel);
    }
    /**
     * @return Forcefully apply compression.
     * 
     */
    public Optional<Boolean> forceCompression() {
        return Optional.ofNullable(this.forceCompression);
    }
    /**
     * @return Ignore errors caused by failed cache exports.
     * 
     */
    public Optional<Boolean> ignoreError() {
        return Optional.ofNullable(this.ignoreError);
    }
    /**
     * @return Export cache manifest as an OCI-compatible image manifest instead of a
     * manifest list (requires OCI media types).
     * 
     * Defaults to `false`.
     * 
     */
    public Optional<Boolean> imageManifest() {
        return Optional.ofNullable(this.imageManifest);
    }
    /**
     * @return The cache mode to use. Defaults to `min`.
     * 
     */
    public Optional<CacheMode> mode() {
        return Optional.ofNullable(this.mode);
    }
    /**
     * @return Whether to use OCI mediatypes in exported manifests. Defaults to
     * `true`.
     * 
     */
    public Optional<Boolean> ociMediaTypes() {
        return Optional.ofNullable(this.ociMediaTypes);
    }
    /**
     * @return Fully qualified name of the cache image to import.
     * 
     */
    public String ref() {
        return this.ref;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CacheToRegistry defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable CompressionType compression;
        private @Nullable Integer compressionLevel;
        private @Nullable Boolean forceCompression;
        private @Nullable Boolean ignoreError;
        private @Nullable Boolean imageManifest;
        private @Nullable CacheMode mode;
        private @Nullable Boolean ociMediaTypes;
        private String ref;
        public Builder() {}
        public Builder(CacheToRegistry defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compression = defaults.compression;
    	      this.compressionLevel = defaults.compressionLevel;
    	      this.forceCompression = defaults.forceCompression;
    	      this.ignoreError = defaults.ignoreError;
    	      this.imageManifest = defaults.imageManifest;
    	      this.mode = defaults.mode;
    	      this.ociMediaTypes = defaults.ociMediaTypes;
    	      this.ref = defaults.ref;
        }

        @CustomType.Setter
        public Builder compression(@Nullable CompressionType compression) {

            this.compression = compression;
            return this;
        }
        @CustomType.Setter
        public Builder compressionLevel(@Nullable Integer compressionLevel) {

            this.compressionLevel = compressionLevel;
            return this;
        }
        @CustomType.Setter
        public Builder forceCompression(@Nullable Boolean forceCompression) {

            this.forceCompression = forceCompression;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreError(@Nullable Boolean ignoreError) {

            this.ignoreError = ignoreError;
            return this;
        }
        @CustomType.Setter
        public Builder imageManifest(@Nullable Boolean imageManifest) {

            this.imageManifest = imageManifest;
            return this;
        }
        @CustomType.Setter
        public Builder mode(@Nullable CacheMode mode) {

            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder ociMediaTypes(@Nullable Boolean ociMediaTypes) {

            this.ociMediaTypes = ociMediaTypes;
            return this;
        }
        @CustomType.Setter
        public Builder ref(String ref) {
            if (ref == null) {
              throw new MissingRequiredPropertyException("CacheToRegistry", "ref");
            }
            this.ref = ref;
            return this;
        }
        public CacheToRegistry build() {
            final var _resultValue = new CacheToRegistry();
            _resultValue.compression = compression;
            _resultValue.compressionLevel = compressionLevel;
            _resultValue.forceCompression = forceCompression;
            _resultValue.ignoreError = ignoreError;
            _resultValue.imageManifest = imageManifest;
            _resultValue.mode = mode;
            _resultValue.ociMediaTypes = ociMediaTypes;
            _resultValue.ref = ref;
            return _resultValue;
        }
    }
}
