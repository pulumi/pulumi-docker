// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.buildx.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CacheFromAzureBlobArgs extends com.pulumi.resources.ResourceArgs {

    public static final CacheFromAzureBlobArgs Empty = new CacheFromAzureBlobArgs();

    /**
     * Base URL of the storage account.
     * 
     */
    @Import(name="accountUrl")
    private @Nullable Output<String> accountUrl;

    /**
     * @return Base URL of the storage account.
     * 
     */
    public Optional<Output<String>> accountUrl() {
        return Optional.ofNullable(this.accountUrl);
    }

    /**
     * The name of the cache image.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the cache image.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Blob storage account key.
     * 
     */
    @Import(name="secretAccessKey")
    private @Nullable Output<String> secretAccessKey;

    /**
     * @return Blob storage account key.
     * 
     */
    public Optional<Output<String>> secretAccessKey() {
        return Optional.ofNullable(this.secretAccessKey);
    }

    private CacheFromAzureBlobArgs() {}

    private CacheFromAzureBlobArgs(CacheFromAzureBlobArgs $) {
        this.accountUrl = $.accountUrl;
        this.name = $.name;
        this.secretAccessKey = $.secretAccessKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CacheFromAzureBlobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CacheFromAzureBlobArgs $;

        public Builder() {
            $ = new CacheFromAzureBlobArgs();
        }

        public Builder(CacheFromAzureBlobArgs defaults) {
            $ = new CacheFromAzureBlobArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountUrl Base URL of the storage account.
         * 
         * @return builder
         * 
         */
        public Builder accountUrl(@Nullable Output<String> accountUrl) {
            $.accountUrl = accountUrl;
            return this;
        }

        /**
         * @param accountUrl Base URL of the storage account.
         * 
         * @return builder
         * 
         */
        public Builder accountUrl(String accountUrl) {
            return accountUrl(Output.of(accountUrl));
        }

        /**
         * @param name The name of the cache image.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the cache image.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param secretAccessKey Blob storage account key.
         * 
         * @return builder
         * 
         */
        public Builder secretAccessKey(@Nullable Output<String> secretAccessKey) {
            $.secretAccessKey = secretAccessKey;
            return this;
        }

        /**
         * @param secretAccessKey Blob storage account key.
         * 
         * @return builder
         * 
         */
        public Builder secretAccessKey(String secretAccessKey) {
            return secretAccessKey(Output.of(secretAccessKey));
        }

        public CacheFromAzureBlobArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("CacheFromAzureBlobArgs", "name");
            }
            return $;
        }
    }

}
