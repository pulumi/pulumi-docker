// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.docker.outputs.GetNetworkIpamConfig;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetNetworkResult {
    /**
     * @return The driver of the Docker network. Possible values are `bridge`, `host`, `overlay`, `macvlan`. See [network docs](https://docs.docker.com/network/#network-drivers) for more details.
     * 
     */
    private String driver;
    /**
     * @return The ID of this resource.
     * 
     */
    private String id;
    /**
     * @return If `true`, the network is internal.
     * 
     */
    private Boolean internal;
    /**
     * @return The IPAM configuration options
     * 
     */
    private List<GetNetworkIpamConfig> ipamConfigs;
    /**
     * @return The name of the Docker network.
     * 
     */
    private String name;
    /**
     * @return Only available with bridge networks. See [bridge options docs](https://docs.docker.com/engine/reference/commandline/network_create/#bridge-driver-options) for more details.
     * 
     */
    private Map<String,Object> options;
    /**
     * @return Scope of the network. One of `swarm`, `global`, or `local`.
     * 
     */
    private String scope;

    private GetNetworkResult() {}
    /**
     * @return The driver of the Docker network. Possible values are `bridge`, `host`, `overlay`, `macvlan`. See [network docs](https://docs.docker.com/network/#network-drivers) for more details.
     * 
     */
    public String driver() {
        return this.driver;
    }
    /**
     * @return The ID of this resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return If `true`, the network is internal.
     * 
     */
    public Boolean internal() {
        return this.internal;
    }
    /**
     * @return The IPAM configuration options
     * 
     */
    public List<GetNetworkIpamConfig> ipamConfigs() {
        return this.ipamConfigs;
    }
    /**
     * @return The name of the Docker network.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Only available with bridge networks. See [bridge options docs](https://docs.docker.com/engine/reference/commandline/network_create/#bridge-driver-options) for more details.
     * 
     */
    public Map<String,Object> options() {
        return this.options;
    }
    /**
     * @return Scope of the network. One of `swarm`, `global`, or `local`.
     * 
     */
    public String scope() {
        return this.scope;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String driver;
        private String id;
        private Boolean internal;
        private List<GetNetworkIpamConfig> ipamConfigs;
        private String name;
        private Map<String,Object> options;
        private String scope;
        public Builder() {}
        public Builder(GetNetworkResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.driver = defaults.driver;
    	      this.id = defaults.id;
    	      this.internal = defaults.internal;
    	      this.ipamConfigs = defaults.ipamConfigs;
    	      this.name = defaults.name;
    	      this.options = defaults.options;
    	      this.scope = defaults.scope;
        }

        @CustomType.Setter
        public Builder driver(String driver) {
            this.driver = Objects.requireNonNull(driver);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder internal(Boolean internal) {
            this.internal = Objects.requireNonNull(internal);
            return this;
        }
        @CustomType.Setter
        public Builder ipamConfigs(List<GetNetworkIpamConfig> ipamConfigs) {
            this.ipamConfigs = Objects.requireNonNull(ipamConfigs);
            return this;
        }
        public Builder ipamConfigs(GetNetworkIpamConfig... ipamConfigs) {
            return ipamConfigs(List.of(ipamConfigs));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder options(Map<String,Object> options) {
            this.options = Objects.requireNonNull(options);
            return this;
        }
        @CustomType.Setter
        public Builder scope(String scope) {
            this.scope = Objects.requireNonNull(scope);
            return this;
        }
        public GetNetworkResult build() {
            final var _resultValue = new GetNetworkResult();
            _resultValue.driver = driver;
            _resultValue.id = id;
            _resultValue.internal = internal;
            _resultValue.ipamConfigs = ipamConfigs;
            _resultValue.name = name;
            _resultValue.options = options;
            _resultValue.scope = scope;
            return _resultValue;
        }
    }
}
