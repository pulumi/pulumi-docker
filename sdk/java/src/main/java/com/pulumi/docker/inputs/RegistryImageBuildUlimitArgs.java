// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class RegistryImageBuildUlimitArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistryImageBuildUlimitArgs Empty = new RegistryImageBuildUlimitArgs();

    /**
     * soft limit
     * 
     */
    @Import(name="hard", required=true)
    private Output<Integer> hard;

    /**
     * @return soft limit
     * 
     */
    public Output<Integer> hard() {
        return this.hard;
    }

    /**
     * The name of the Docker image.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the Docker image.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * hard limit
     * 
     */
    @Import(name="soft", required=true)
    private Output<Integer> soft;

    /**
     * @return hard limit
     * 
     */
    public Output<Integer> soft() {
        return this.soft;
    }

    private RegistryImageBuildUlimitArgs() {}

    private RegistryImageBuildUlimitArgs(RegistryImageBuildUlimitArgs $) {
        this.hard = $.hard;
        this.name = $.name;
        this.soft = $.soft;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryImageBuildUlimitArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryImageBuildUlimitArgs $;

        public Builder() {
            $ = new RegistryImageBuildUlimitArgs();
        }

        public Builder(RegistryImageBuildUlimitArgs defaults) {
            $ = new RegistryImageBuildUlimitArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hard soft limit
         * 
         * @return builder
         * 
         */
        public Builder hard(Output<Integer> hard) {
            $.hard = hard;
            return this;
        }

        /**
         * @param hard soft limit
         * 
         * @return builder
         * 
         */
        public Builder hard(Integer hard) {
            return hard(Output.of(hard));
        }

        /**
         * @param name The name of the Docker image.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Docker image.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param soft hard limit
         * 
         * @return builder
         * 
         */
        public Builder soft(Output<Integer> soft) {
            $.soft = soft;
            return this;
        }

        /**
         * @param soft hard limit
         * 
         * @return builder
         * 
         */
        public Builder soft(Integer soft) {
            return soft(Output.of(soft));
        }

        public RegistryImageBuildUlimitArgs build() {
            if ($.hard == null) {
                throw new MissingRequiredPropertyException("RegistryImageBuildUlimitArgs", "hard");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("RegistryImageBuildUlimitArgs", "name");
            }
            if ($.soft == null) {
                throw new MissingRequiredPropertyException("RegistryImageBuildUlimitArgs", "soft");
            }
            return $;
        }
    }

}
