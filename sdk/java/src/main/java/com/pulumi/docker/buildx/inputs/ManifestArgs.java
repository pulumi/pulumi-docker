// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.buildx.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.docker.buildx.inputs.ManifestPlatformArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class ManifestArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManifestArgs Empty = new ManifestArgs();

    /**
     * The SHA256 digest of the manifest.
     * 
     */
    @Import(name="digest", required=true)
    private Output<String> digest;

    /**
     * @return The SHA256 digest of the manifest.
     * 
     */
    public Output<String> digest() {
        return this.digest;
    }

    /**
     * The manifest&#39;s platform.
     * 
     */
    @Import(name="platform", required=true)
    private Output<ManifestPlatformArgs> platform;

    /**
     * @return The manifest&#39;s platform.
     * 
     */
    public Output<ManifestPlatformArgs> platform() {
        return this.platform;
    }

    /**
     * The manifest&#39;s canonical ref.
     * 
     */
    @Import(name="ref", required=true)
    private Output<String> ref;

    /**
     * @return The manifest&#39;s canonical ref.
     * 
     */
    public Output<String> ref() {
        return this.ref;
    }

    /**
     * The size of the manifest in bytes.
     * 
     */
    @Import(name="size", required=true)
    private Output<Integer> size;

    /**
     * @return The size of the manifest in bytes.
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }

    private ManifestArgs() {}

    private ManifestArgs(ManifestArgs $) {
        this.digest = $.digest;
        this.platform = $.platform;
        this.ref = $.ref;
        this.size = $.size;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManifestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManifestArgs $;

        public Builder() {
            $ = new ManifestArgs();
        }

        public Builder(ManifestArgs defaults) {
            $ = new ManifestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param digest The SHA256 digest of the manifest.
         * 
         * @return builder
         * 
         */
        public Builder digest(Output<String> digest) {
            $.digest = digest;
            return this;
        }

        /**
         * @param digest The SHA256 digest of the manifest.
         * 
         * @return builder
         * 
         */
        public Builder digest(String digest) {
            return digest(Output.of(digest));
        }

        /**
         * @param platform The manifest&#39;s platform.
         * 
         * @return builder
         * 
         */
        public Builder platform(Output<ManifestPlatformArgs> platform) {
            $.platform = platform;
            return this;
        }

        /**
         * @param platform The manifest&#39;s platform.
         * 
         * @return builder
         * 
         */
        public Builder platform(ManifestPlatformArgs platform) {
            return platform(Output.of(platform));
        }

        /**
         * @param ref The manifest&#39;s canonical ref.
         * 
         * @return builder
         * 
         */
        public Builder ref(Output<String> ref) {
            $.ref = ref;
            return this;
        }

        /**
         * @param ref The manifest&#39;s canonical ref.
         * 
         * @return builder
         * 
         */
        public Builder ref(String ref) {
            return ref(Output.of(ref));
        }

        /**
         * @param size The size of the manifest in bytes.
         * 
         * @return builder
         * 
         */
        public Builder size(Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size The size of the manifest in bytes.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        public ManifestArgs build() {
            if ($.digest == null) {
                throw new MissingRequiredPropertyException("ManifestArgs", "digest");
            }
            if ($.platform == null) {
                throw new MissingRequiredPropertyException("ManifestArgs", "platform");
            }
            if ($.ref == null) {
                throw new MissingRequiredPropertyException("ManifestArgs", "ref");
            }
            if ($.size == null) {
                throw new MissingRequiredPropertyException("ManifestArgs", "size");
            }
            return $;
        }
    }

}
