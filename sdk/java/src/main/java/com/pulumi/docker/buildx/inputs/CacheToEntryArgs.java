// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.buildx.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.docker.buildx.inputs.CacheToAzureBlobArgs;
import com.pulumi.docker.buildx.inputs.CacheToGitHubActionsArgs;
import com.pulumi.docker.buildx.inputs.CacheToInlineArgs;
import com.pulumi.docker.buildx.inputs.CacheToLocalArgs;
import com.pulumi.docker.buildx.inputs.CacheToRegistryArgs;
import com.pulumi.docker.buildx.inputs.CacheToS3Args;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CacheToEntryArgs extends com.pulumi.resources.ResourceArgs {

    public static final CacheToEntryArgs Empty = new CacheToEntryArgs();

    /**
     * Push cache to Azure&#39;s blob storage service.
     * 
     */
    @Import(name="azblob")
    private @Nullable Output<CacheToAzureBlobArgs> azblob;

    /**
     * @return Push cache to Azure&#39;s blob storage service.
     * 
     */
    public Optional<Output<CacheToAzureBlobArgs>> azblob() {
        return Optional.ofNullable(this.azblob);
    }

    /**
     * When `true` this entry will be excluded. Defaults to `false`.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return When `true` this entry will be excluded. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * Recommended for use with GitHub Actions workflows.
     * 
     * An action like `crazy-max/ghaction-github-runtime` is recommended to
     * expose appropriate credentials to your GitHub workflow.
     * 
     */
    @Import(name="gha")
    private @Nullable Output<CacheToGitHubActionsArgs> gha;

    /**
     * @return Recommended for use with GitHub Actions workflows.
     * 
     * An action like `crazy-max/ghaction-github-runtime` is recommended to
     * expose appropriate credentials to your GitHub workflow.
     * 
     */
    public Optional<Output<CacheToGitHubActionsArgs>> gha() {
        return Optional.ofNullable(this.gha);
    }

    /**
     * The inline cache storage backend is the simplest implementation to get
     * started with, but it does not handle multi-stage builds. Consider the
     * `registry` cache backend instead.
     * 
     */
    @Import(name="inline")
    private @Nullable Output<CacheToInlineArgs> inline;

    /**
     * @return The inline cache storage backend is the simplest implementation to get
     * started with, but it does not handle multi-stage builds. Consider the
     * `registry` cache backend instead.
     * 
     */
    public Optional<Output<CacheToInlineArgs>> inline() {
        return Optional.ofNullable(this.inline);
    }

    /**
     * A simple backend which caches imagines on your local filesystem.
     * 
     */
    @Import(name="local")
    private @Nullable Output<CacheToLocalArgs> local;

    /**
     * @return A simple backend which caches imagines on your local filesystem.
     * 
     */
    public Optional<Output<CacheToLocalArgs>> local() {
        return Optional.ofNullable(this.local);
    }

    /**
     * A raw string as you would provide it to the Docker CLI (e.g.,
     * `type=inline`)
     * 
     */
    @Import(name="raw")
    private @Nullable Output<String> raw;

    /**
     * @return A raw string as you would provide it to the Docker CLI (e.g.,
     * `type=inline`)
     * 
     */
    public Optional<Output<String>> raw() {
        return Optional.ofNullable(this.raw);
    }

    /**
     * Push caches to remote registries. Incompatible with the `docker` build
     * driver.
     * 
     */
    @Import(name="registry")
    private @Nullable Output<CacheToRegistryArgs> registry;

    /**
     * @return Push caches to remote registries. Incompatible with the `docker` build
     * driver.
     * 
     */
    public Optional<Output<CacheToRegistryArgs>> registry() {
        return Optional.ofNullable(this.registry);
    }

    /**
     * Push cache to AWS S3 or S3-compatible services such as MinIO.
     * 
     */
    @Import(name="s3")
    private @Nullable Output<CacheToS3Args> s3;

    /**
     * @return Push cache to AWS S3 or S3-compatible services such as MinIO.
     * 
     */
    public Optional<Output<CacheToS3Args>> s3() {
        return Optional.ofNullable(this.s3);
    }

    private CacheToEntryArgs() {}

    private CacheToEntryArgs(CacheToEntryArgs $) {
        this.azblob = $.azblob;
        this.disabled = $.disabled;
        this.gha = $.gha;
        this.inline = $.inline;
        this.local = $.local;
        this.raw = $.raw;
        this.registry = $.registry;
        this.s3 = $.s3;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CacheToEntryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CacheToEntryArgs $;

        public Builder() {
            $ = new CacheToEntryArgs();
        }

        public Builder(CacheToEntryArgs defaults) {
            $ = new CacheToEntryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param azblob Push cache to Azure&#39;s blob storage service.
         * 
         * @return builder
         * 
         */
        public Builder azblob(@Nullable Output<CacheToAzureBlobArgs> azblob) {
            $.azblob = azblob;
            return this;
        }

        /**
         * @param azblob Push cache to Azure&#39;s blob storage service.
         * 
         * @return builder
         * 
         */
        public Builder azblob(CacheToAzureBlobArgs azblob) {
            return azblob(Output.of(azblob));
        }

        /**
         * @param disabled When `true` this entry will be excluded. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled When `true` this entry will be excluded. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param gha Recommended for use with GitHub Actions workflows.
         * 
         * An action like `crazy-max/ghaction-github-runtime` is recommended to
         * expose appropriate credentials to your GitHub workflow.
         * 
         * @return builder
         * 
         */
        public Builder gha(@Nullable Output<CacheToGitHubActionsArgs> gha) {
            $.gha = gha;
            return this;
        }

        /**
         * @param gha Recommended for use with GitHub Actions workflows.
         * 
         * An action like `crazy-max/ghaction-github-runtime` is recommended to
         * expose appropriate credentials to your GitHub workflow.
         * 
         * @return builder
         * 
         */
        public Builder gha(CacheToGitHubActionsArgs gha) {
            return gha(Output.of(gha));
        }

        /**
         * @param inline The inline cache storage backend is the simplest implementation to get
         * started with, but it does not handle multi-stage builds. Consider the
         * `registry` cache backend instead.
         * 
         * @return builder
         * 
         */
        public Builder inline(@Nullable Output<CacheToInlineArgs> inline) {
            $.inline = inline;
            return this;
        }

        /**
         * @param inline The inline cache storage backend is the simplest implementation to get
         * started with, but it does not handle multi-stage builds. Consider the
         * `registry` cache backend instead.
         * 
         * @return builder
         * 
         */
        public Builder inline(CacheToInlineArgs inline) {
            return inline(Output.of(inline));
        }

        /**
         * @param local A simple backend which caches imagines on your local filesystem.
         * 
         * @return builder
         * 
         */
        public Builder local(@Nullable Output<CacheToLocalArgs> local) {
            $.local = local;
            return this;
        }

        /**
         * @param local A simple backend which caches imagines on your local filesystem.
         * 
         * @return builder
         * 
         */
        public Builder local(CacheToLocalArgs local) {
            return local(Output.of(local));
        }

        /**
         * @param raw A raw string as you would provide it to the Docker CLI (e.g.,
         * `type=inline`)
         * 
         * @return builder
         * 
         */
        public Builder raw(@Nullable Output<String> raw) {
            $.raw = raw;
            return this;
        }

        /**
         * @param raw A raw string as you would provide it to the Docker CLI (e.g.,
         * `type=inline`)
         * 
         * @return builder
         * 
         */
        public Builder raw(String raw) {
            return raw(Output.of(raw));
        }

        /**
         * @param registry Push caches to remote registries. Incompatible with the `docker` build
         * driver.
         * 
         * @return builder
         * 
         */
        public Builder registry(@Nullable Output<CacheToRegistryArgs> registry) {
            $.registry = registry;
            return this;
        }

        /**
         * @param registry Push caches to remote registries. Incompatible with the `docker` build
         * driver.
         * 
         * @return builder
         * 
         */
        public Builder registry(CacheToRegistryArgs registry) {
            return registry(Output.of(registry));
        }

        /**
         * @param s3 Push cache to AWS S3 or S3-compatible services such as MinIO.
         * 
         * @return builder
         * 
         */
        public Builder s3(@Nullable Output<CacheToS3Args> s3) {
            $.s3 = s3;
            return this;
        }

        /**
         * @param s3 Push cache to AWS S3 or S3-compatible services such as MinIO.
         * 
         * @return builder
         * 
         */
        public Builder s3(CacheToS3Args s3) {
            return s3(Output.of(s3));
        }

        public CacheToEntryArgs build() {
            return $;
        }
    }

}
