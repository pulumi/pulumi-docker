// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.docker.inputs.BuildxBuilderKubernetesLimitsArgs;
import com.pulumi.docker.inputs.BuildxBuilderKubernetesQemuArgs;
import com.pulumi.docker.inputs.BuildxBuilderKubernetesRequestsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BuildxBuilderKubernetesArgs extends com.pulumi.resources.ResourceArgs {

    public static final BuildxBuilderKubernetesArgs Empty = new BuildxBuilderKubernetesArgs();

    /**
     * Sets additional annotations on the deployments and pods.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<String> annotations;

    /**
     * @return Sets additional annotations on the deployments and pods.
     * 
     */
    public Optional<Output<String>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Automatically load images to the Docker Engine image store. Defaults to `false`
     * 
     */
    @Import(name="defaultLoad")
    private @Nullable Output<Boolean> defaultLoad;

    /**
     * @return Automatically load images to the Docker Engine image store. Defaults to `false`
     * 
     */
    public Optional<Output<Boolean>> defaultLoad() {
        return Optional.ofNullable(this.defaultLoad);
    }

    /**
     * Sets the image to use for running BuildKit.
     * 
     */
    @Import(name="image")
    private @Nullable Output<String> image;

    /**
     * @return Sets the image to use for running BuildKit.
     * 
     */
    public Optional<Output<String>> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * Sets additional labels on the deployments and pods.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<String> labels;

    /**
     * @return Sets additional labels on the deployments and pods.
     * 
     */
    public Optional<Output<String>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Resource limits for CPU, memory, and ephemeral storage.
     * 
     */
    @Import(name="limits")
    private @Nullable Output<BuildxBuilderKubernetesLimitsArgs> limits;

    /**
     * @return Resource limits for CPU, memory, and ephemeral storage.
     * 
     */
    public Optional<Output<BuildxBuilderKubernetesLimitsArgs>> limits() {
        return Optional.ofNullable(this.limits);
    }

    /**
     * Load-balancing strategy (sticky or random).
     * 
     */
    @Import(name="loadbalance")
    private @Nullable Output<String> loadbalance;

    /**
     * @return Load-balancing strategy (sticky or random).
     * 
     */
    public Optional<Output<String>> loadbalance() {
        return Optional.ofNullable(this.loadbalance);
    }

    /**
     * Sets the Kubernetes namespace.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Sets the Kubernetes namespace.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Sets the pod&#39;s nodeSelector label(s).
     * 
     */
    @Import(name="nodeselector")
    private @Nullable Output<String> nodeselector;

    /**
     * @return Sets the pod&#39;s nodeSelector label(s).
     * 
     */
    public Optional<Output<String>> nodeselector() {
        return Optional.ofNullable(this.nodeselector);
    }

    /**
     * QEMU emulation configuration.
     * 
     */
    @Import(name="qemu")
    private @Nullable Output<BuildxBuilderKubernetesQemuArgs> qemu;

    /**
     * @return QEMU emulation configuration.
     * 
     */
    public Optional<Output<BuildxBuilderKubernetesQemuArgs>> qemu() {
        return Optional.ofNullable(this.qemu);
    }

    /**
     * Sets the number of Pod replicas to create.
     * 
     */
    @Import(name="replicas")
    private @Nullable Output<Integer> replicas;

    /**
     * @return Sets the number of Pod replicas to create.
     * 
     */
    public Optional<Output<Integer>> replicas() {
        return Optional.ofNullable(this.replicas);
    }

    /**
     * Resource requests for CPU, memory, and ephemeral storage.
     * 
     */
    @Import(name="requests")
    private @Nullable Output<BuildxBuilderKubernetesRequestsArgs> requests;

    /**
     * @return Resource requests for CPU, memory, and ephemeral storage.
     * 
     */
    public Optional<Output<BuildxBuilderKubernetesRequestsArgs>> requests() {
        return Optional.ofNullable(this.requests);
    }

    /**
     * Run the container as a non-root user.
     * 
     */
    @Import(name="rootless")
    private @Nullable Output<Boolean> rootless;

    /**
     * @return Run the container as a non-root user.
     * 
     */
    public Optional<Output<Boolean>> rootless() {
        return Optional.ofNullable(this.rootless);
    }

    /**
     * Sets the scheduler responsible for scheduling the pod.
     * 
     */
    @Import(name="schedulername")
    private @Nullable Output<String> schedulername;

    /**
     * @return Sets the scheduler responsible for scheduling the pod.
     * 
     */
    public Optional<Output<String>> schedulername() {
        return Optional.ofNullable(this.schedulername);
    }

    /**
     * Sets the pod&#39;s serviceAccountName.
     * 
     */
    @Import(name="serviceaccount")
    private @Nullable Output<String> serviceaccount;

    /**
     * @return Sets the pod&#39;s serviceAccountName.
     * 
     */
    public Optional<Output<String>> serviceaccount() {
        return Optional.ofNullable(this.serviceaccount);
    }

    /**
     * Set the timeout limit for pod provisioning.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<String> timeout;

    /**
     * @return Set the timeout limit for pod provisioning.
     * 
     */
    public Optional<Output<String>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * Configures the pod&#39;s taint toleration.
     * 
     */
    @Import(name="tolerations")
    private @Nullable Output<String> tolerations;

    /**
     * @return Configures the pod&#39;s taint toleration.
     * 
     */
    public Optional<Output<String>> tolerations() {
        return Optional.ofNullable(this.tolerations);
    }

    private BuildxBuilderKubernetesArgs() {}

    private BuildxBuilderKubernetesArgs(BuildxBuilderKubernetesArgs $) {
        this.annotations = $.annotations;
        this.defaultLoad = $.defaultLoad;
        this.image = $.image;
        this.labels = $.labels;
        this.limits = $.limits;
        this.loadbalance = $.loadbalance;
        this.namespace = $.namespace;
        this.nodeselector = $.nodeselector;
        this.qemu = $.qemu;
        this.replicas = $.replicas;
        this.requests = $.requests;
        this.rootless = $.rootless;
        this.schedulername = $.schedulername;
        this.serviceaccount = $.serviceaccount;
        this.timeout = $.timeout;
        this.tolerations = $.tolerations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BuildxBuilderKubernetesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BuildxBuilderKubernetesArgs $;

        public Builder() {
            $ = new BuildxBuilderKubernetesArgs();
        }

        public Builder(BuildxBuilderKubernetesArgs defaults) {
            $ = new BuildxBuilderKubernetesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations Sets additional annotations on the deployments and pods.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<String> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Sets additional annotations on the deployments and pods.
         * 
         * @return builder
         * 
         */
        public Builder annotations(String annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param defaultLoad Automatically load images to the Docker Engine image store. Defaults to `false`
         * 
         * @return builder
         * 
         */
        public Builder defaultLoad(@Nullable Output<Boolean> defaultLoad) {
            $.defaultLoad = defaultLoad;
            return this;
        }

        /**
         * @param defaultLoad Automatically load images to the Docker Engine image store. Defaults to `false`
         * 
         * @return builder
         * 
         */
        public Builder defaultLoad(Boolean defaultLoad) {
            return defaultLoad(Output.of(defaultLoad));
        }

        /**
         * @param image Sets the image to use for running BuildKit.
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image Sets the image to use for running BuildKit.
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param labels Sets additional labels on the deployments and pods.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<String> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Sets additional labels on the deployments and pods.
         * 
         * @return builder
         * 
         */
        public Builder labels(String labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param limits Resource limits for CPU, memory, and ephemeral storage.
         * 
         * @return builder
         * 
         */
        public Builder limits(@Nullable Output<BuildxBuilderKubernetesLimitsArgs> limits) {
            $.limits = limits;
            return this;
        }

        /**
         * @param limits Resource limits for CPU, memory, and ephemeral storage.
         * 
         * @return builder
         * 
         */
        public Builder limits(BuildxBuilderKubernetesLimitsArgs limits) {
            return limits(Output.of(limits));
        }

        /**
         * @param loadbalance Load-balancing strategy (sticky or random).
         * 
         * @return builder
         * 
         */
        public Builder loadbalance(@Nullable Output<String> loadbalance) {
            $.loadbalance = loadbalance;
            return this;
        }

        /**
         * @param loadbalance Load-balancing strategy (sticky or random).
         * 
         * @return builder
         * 
         */
        public Builder loadbalance(String loadbalance) {
            return loadbalance(Output.of(loadbalance));
        }

        /**
         * @param namespace Sets the Kubernetes namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Sets the Kubernetes namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param nodeselector Sets the pod&#39;s nodeSelector label(s).
         * 
         * @return builder
         * 
         */
        public Builder nodeselector(@Nullable Output<String> nodeselector) {
            $.nodeselector = nodeselector;
            return this;
        }

        /**
         * @param nodeselector Sets the pod&#39;s nodeSelector label(s).
         * 
         * @return builder
         * 
         */
        public Builder nodeselector(String nodeselector) {
            return nodeselector(Output.of(nodeselector));
        }

        /**
         * @param qemu QEMU emulation configuration.
         * 
         * @return builder
         * 
         */
        public Builder qemu(@Nullable Output<BuildxBuilderKubernetesQemuArgs> qemu) {
            $.qemu = qemu;
            return this;
        }

        /**
         * @param qemu QEMU emulation configuration.
         * 
         * @return builder
         * 
         */
        public Builder qemu(BuildxBuilderKubernetesQemuArgs qemu) {
            return qemu(Output.of(qemu));
        }

        /**
         * @param replicas Sets the number of Pod replicas to create.
         * 
         * @return builder
         * 
         */
        public Builder replicas(@Nullable Output<Integer> replicas) {
            $.replicas = replicas;
            return this;
        }

        /**
         * @param replicas Sets the number of Pod replicas to create.
         * 
         * @return builder
         * 
         */
        public Builder replicas(Integer replicas) {
            return replicas(Output.of(replicas));
        }

        /**
         * @param requests Resource requests for CPU, memory, and ephemeral storage.
         * 
         * @return builder
         * 
         */
        public Builder requests(@Nullable Output<BuildxBuilderKubernetesRequestsArgs> requests) {
            $.requests = requests;
            return this;
        }

        /**
         * @param requests Resource requests for CPU, memory, and ephemeral storage.
         * 
         * @return builder
         * 
         */
        public Builder requests(BuildxBuilderKubernetesRequestsArgs requests) {
            return requests(Output.of(requests));
        }

        /**
         * @param rootless Run the container as a non-root user.
         * 
         * @return builder
         * 
         */
        public Builder rootless(@Nullable Output<Boolean> rootless) {
            $.rootless = rootless;
            return this;
        }

        /**
         * @param rootless Run the container as a non-root user.
         * 
         * @return builder
         * 
         */
        public Builder rootless(Boolean rootless) {
            return rootless(Output.of(rootless));
        }

        /**
         * @param schedulername Sets the scheduler responsible for scheduling the pod.
         * 
         * @return builder
         * 
         */
        public Builder schedulername(@Nullable Output<String> schedulername) {
            $.schedulername = schedulername;
            return this;
        }

        /**
         * @param schedulername Sets the scheduler responsible for scheduling the pod.
         * 
         * @return builder
         * 
         */
        public Builder schedulername(String schedulername) {
            return schedulername(Output.of(schedulername));
        }

        /**
         * @param serviceaccount Sets the pod&#39;s serviceAccountName.
         * 
         * @return builder
         * 
         */
        public Builder serviceaccount(@Nullable Output<String> serviceaccount) {
            $.serviceaccount = serviceaccount;
            return this;
        }

        /**
         * @param serviceaccount Sets the pod&#39;s serviceAccountName.
         * 
         * @return builder
         * 
         */
        public Builder serviceaccount(String serviceaccount) {
            return serviceaccount(Output.of(serviceaccount));
        }

        /**
         * @param timeout Set the timeout limit for pod provisioning.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<String> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout Set the timeout limit for pod provisioning.
         * 
         * @return builder
         * 
         */
        public Builder timeout(String timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param tolerations Configures the pod&#39;s taint toleration.
         * 
         * @return builder
         * 
         */
        public Builder tolerations(@Nullable Output<String> tolerations) {
            $.tolerations = tolerations;
            return this;
        }

        /**
         * @param tolerations Configures the pod&#39;s taint toleration.
         * 
         * @return builder
         * 
         */
        public Builder tolerations(String tolerations) {
            return tolerations(Output.of(tolerations));
        }

        public BuildxBuilderKubernetesArgs build() {
            return $;
        }
    }

}
