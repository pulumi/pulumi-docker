// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.config.inputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegistryAuth {
    /**
     * @return Address of the registry
     * 
     */
    private String address;
    private @Nullable Boolean authDisabled;
    /**
     * @return Path to docker json file for registry auth. Defaults to `~/.docker/config.json`. If `DOCKER_CONFIG` is set, the value of `DOCKER_CONFIG` is used as the path. `config_file` has predencen over all other options.
     * 
     */
    private @Nullable String configFile;
    /**
     * @return Plain content of the docker json file for registry auth. `config_file_content` has precedence over username/password.
     * 
     */
    private @Nullable String configFileContent;
    /**
     * @return Password for the registry. Defaults to `DOCKER_REGISTRY_PASS` env variable if set.
     * 
     */
    private @Nullable String password;
    /**
     * @return Username for the registry. Defaults to `DOCKER_REGISTRY_USER` env variable if set.
     * 
     */
    private @Nullable String username;

    private RegistryAuth() {}
    /**
     * @return Address of the registry
     * 
     */
    public String address() {
        return this.address;
    }
    public Optional<Boolean> authDisabled() {
        return Optional.ofNullable(this.authDisabled);
    }
    /**
     * @return Path to docker json file for registry auth. Defaults to `~/.docker/config.json`. If `DOCKER_CONFIG` is set, the value of `DOCKER_CONFIG` is used as the path. `config_file` has predencen over all other options.
     * 
     */
    public Optional<String> configFile() {
        return Optional.ofNullable(this.configFile);
    }
    /**
     * @return Plain content of the docker json file for registry auth. `config_file_content` has precedence over username/password.
     * 
     */
    public Optional<String> configFileContent() {
        return Optional.ofNullable(this.configFileContent);
    }
    /**
     * @return Password for the registry. Defaults to `DOCKER_REGISTRY_PASS` env variable if set.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return Username for the registry. Defaults to `DOCKER_REGISTRY_USER` env variable if set.
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegistryAuth defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String address;
        private @Nullable Boolean authDisabled;
        private @Nullable String configFile;
        private @Nullable String configFileContent;
        private @Nullable String password;
        private @Nullable String username;
        public Builder() {}
        public Builder(RegistryAuth defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.authDisabled = defaults.authDisabled;
    	      this.configFile = defaults.configFile;
    	      this.configFileContent = defaults.configFileContent;
    	      this.password = defaults.password;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder address(String address) {
            if (address == null) {
              throw new MissingRequiredPropertyException("RegistryAuth", "address");
            }
            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder authDisabled(@Nullable Boolean authDisabled) {

            this.authDisabled = authDisabled;
            return this;
        }
        @CustomType.Setter
        public Builder configFile(@Nullable String configFile) {

            this.configFile = configFile;
            return this;
        }
        @CustomType.Setter
        public Builder configFileContent(@Nullable String configFileContent) {

            this.configFileContent = configFileContent;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {

            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {

            this.username = username;
            return this;
        }
        public RegistryAuth build() {
            final var _resultValue = new RegistryAuth();
            _resultValue.address = address;
            _resultValue.authDisabled = authDisabled;
            _resultValue.configFile = configFile;
            _resultValue.configFileContent = configFileContent;
            _resultValue.password = password;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
