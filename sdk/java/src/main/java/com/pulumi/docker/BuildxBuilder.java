// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.docker.BuildxBuilderArgs;
import com.pulumi.docker.Utilities;
import com.pulumi.docker.inputs.BuildxBuilderState;
import com.pulumi.docker.outputs.BuildxBuilderDockerContainer;
import com.pulumi.docker.outputs.BuildxBuilderKubernetes;
import com.pulumi.docker.outputs.BuildxBuilderRemote;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Docker Buildx builder instance. This resource allows you to create a  buildx builder with various configurations such as driver, nodes, and platform settings. Please see https://github.com/docker/buildx/blob/master/docs/reference/buildx_create.md for more documentation
 * 
 */
@ResourceType(type="docker:index/buildxBuilder:BuildxBuilder")
public class BuildxBuilder extends com.pulumi.resources.CustomResource {
    /**
     * Append a node to builder instead of changing it
     * 
     */
    @Export(name="append", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> append;

    /**
     * @return Append a node to builder instead of changing it
     * 
     */
    public Output<Optional<Boolean>> append() {
        return Codegen.optional(this.append);
    }
    /**
     * Automatically boot the builder after creation. Defaults to `false`
     * 
     */
    @Export(name="bootstrap", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> bootstrap;

    /**
     * @return Automatically boot the builder after creation. Defaults to `false`
     * 
     */
    public Output<Optional<Boolean>> bootstrap() {
        return Codegen.optional(this.bootstrap);
    }
    /**
     * BuildKit daemon config file
     * 
     */
    @Export(name="buildkitConfig", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> buildkitConfig;

    /**
     * @return BuildKit daemon config file
     * 
     */
    public Output<Optional<String>> buildkitConfig() {
        return Codegen.optional(this.buildkitConfig);
    }
    /**
     * BuildKit flags to set for the builder.
     * 
     */
    @Export(name="buildkitFlags", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> buildkitFlags;

    /**
     * @return BuildKit flags to set for the builder.
     * 
     */
    public Output<Optional<String>> buildkitFlags() {
        return Codegen.optional(this.buildkitFlags);
    }
    /**
     * Configuration block for the Docker-Container driver.
     * 
     */
    @Export(name="dockerContainer", refs={BuildxBuilderDockerContainer.class}, tree="[0]")
    private Output</* @Nullable */ BuildxBuilderDockerContainer> dockerContainer;

    /**
     * @return Configuration block for the Docker-Container driver.
     * 
     */
    public Output<Optional<BuildxBuilderDockerContainer>> dockerContainer() {
        return Codegen.optional(this.dockerContainer);
    }
    /**
     * The driver to use for the Buildx builder (e.g., docker-container, kubernetes).
     * 
     */
    @Export(name="driver", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> driver;

    /**
     * @return The driver to use for the Buildx builder (e.g., docker-container, kubernetes).
     * 
     */
    public Output<Optional<String>> driver() {
        return Codegen.optional(this.driver);
    }
    /**
     * Additional options for the Buildx driver in the form of `key=value,...`. These options are driver-specific.
     * 
     */
    @Export(name="driverOptions", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> driverOptions;

    /**
     * @return Additional options for the Buildx driver in the form of `key=value,...`. These options are driver-specific.
     * 
     */
    public Output<Optional<Map<String,String>>> driverOptions() {
        return Codegen.optional(this.driverOptions);
    }
    /**
     * Configuration block for the Kubernetes driver.
     * 
     */
    @Export(name="kubernetes", refs={BuildxBuilderKubernetes.class}, tree="[0]")
    private Output</* @Nullable */ BuildxBuilderKubernetes> kubernetes;

    /**
     * @return Configuration block for the Kubernetes driver.
     * 
     */
    public Output<Optional<BuildxBuilderKubernetes>> kubernetes() {
        return Codegen.optional(this.kubernetes);
    }
    /**
     * The name of the Buildx builder. IF not specified, a random name will be generated.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the Buildx builder. IF not specified, a random name will be generated.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Create/modify node with given name
     * 
     */
    @Export(name="node", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> node;

    /**
     * @return Create/modify node with given name
     * 
     */
    public Output<Optional<String>> node() {
        return Codegen.optional(this.node);
    }
    /**
     * Fixed platforms for current node
     * 
     */
    @Export(name="platforms", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> platforms;

    /**
     * @return Fixed platforms for current node
     * 
     */
    public Output<Optional<List<String>>> platforms() {
        return Codegen.optional(this.platforms);
    }
    /**
     * Configuration block for the Remote driver.
     * 
     */
    @Export(name="remote", refs={BuildxBuilderRemote.class}, tree="[0]")
    private Output</* @Nullable */ BuildxBuilderRemote> remote;

    /**
     * @return Configuration block for the Remote driver.
     * 
     */
    public Output<Optional<BuildxBuilderRemote>> remote() {
        return Codegen.optional(this.remote);
    }
    /**
     * Set the current builder instance as the default for the current context.
     * 
     */
    @Export(name="use", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> use;

    /**
     * @return Set the current builder instance as the default for the current context.
     * 
     */
    public Output<Optional<Boolean>> use() {
        return Codegen.optional(this.use);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public BuildxBuilder(java.lang.String name) {
        this(name, BuildxBuilderArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public BuildxBuilder(java.lang.String name, @Nullable BuildxBuilderArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public BuildxBuilder(java.lang.String name, @Nullable BuildxBuilderArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("docker:index/buildxBuilder:BuildxBuilder", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private BuildxBuilder(java.lang.String name, Output<java.lang.String> id, @Nullable BuildxBuilderState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("docker:index/buildxBuilder:BuildxBuilder", name, state, makeResourceOptions(options, id), false);
    }

    private static BuildxBuilderArgs makeArgs(@Nullable BuildxBuilderArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? BuildxBuilderArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static BuildxBuilder get(java.lang.String name, Output<java.lang.String> id, @Nullable BuildxBuilderState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new BuildxBuilder(name, id, state, options);
    }
}
