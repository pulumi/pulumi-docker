// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerUploadArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerUploadArgs Empty = new ContainerUploadArgs();

    @Import(name="content")
    private @Nullable Output<String> content;

    public Optional<Output<String>> content() {
        return Optional.ofNullable(this.content);
    }

    @Import(name="contentBase64")
    private @Nullable Output<String> contentBase64;

    public Optional<Output<String>> contentBase64() {
        return Optional.ofNullable(this.contentBase64);
    }

    @Import(name="executable")
    private @Nullable Output<Boolean> executable;

    public Optional<Output<Boolean>> executable() {
        return Optional.ofNullable(this.executable);
    }

    @Import(name="file", required=true)
    private Output<String> file;

    public Output<String> file() {
        return this.file;
    }

    @Import(name="source")
    private @Nullable Output<String> source;

    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    @Import(name="sourceHash")
    private @Nullable Output<String> sourceHash;

    public Optional<Output<String>> sourceHash() {
        return Optional.ofNullable(this.sourceHash);
    }

    private ContainerUploadArgs() {}

    private ContainerUploadArgs(ContainerUploadArgs $) {
        this.content = $.content;
        this.contentBase64 = $.contentBase64;
        this.executable = $.executable;
        this.file = $.file;
        this.source = $.source;
        this.sourceHash = $.sourceHash;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerUploadArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerUploadArgs $;

        public Builder() {
            $ = new ContainerUploadArgs();
        }

        public Builder(ContainerUploadArgs defaults) {
            $ = new ContainerUploadArgs(Objects.requireNonNull(defaults));
        }

        public Builder content(@Nullable Output<String> content) {
            $.content = content;
            return this;
        }

        public Builder content(String content) {
            return content(Output.of(content));
        }

        public Builder contentBase64(@Nullable Output<String> contentBase64) {
            $.contentBase64 = contentBase64;
            return this;
        }

        public Builder contentBase64(String contentBase64) {
            return contentBase64(Output.of(contentBase64));
        }

        public Builder executable(@Nullable Output<Boolean> executable) {
            $.executable = executable;
            return this;
        }

        public Builder executable(Boolean executable) {
            return executable(Output.of(executable));
        }

        public Builder file(Output<String> file) {
            $.file = file;
            return this;
        }

        public Builder file(String file) {
            return file(Output.of(file));
        }

        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        public Builder source(String source) {
            return source(Output.of(source));
        }

        public Builder sourceHash(@Nullable Output<String> sourceHash) {
            $.sourceHash = sourceHash;
            return this;
        }

        public Builder sourceHash(String sourceHash) {
            return sourceHash(Output.of(sourceHash));
        }

        public ContainerUploadArgs build() {
            $.file = Objects.requireNonNull($.file, "expected parameter 'file' to be non-null");
            return $;
        }
    }

}
