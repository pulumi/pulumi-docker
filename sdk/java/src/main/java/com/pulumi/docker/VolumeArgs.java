// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.docker.inputs.VolumeLabelArgs;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeArgs Empty = new VolumeArgs();

    /**
     * Driver type for the volume. Defaults to `local`.
     * 
     */
    @Import(name="driver")
    private @Nullable Output<String> driver;

    /**
     * @return Driver type for the volume. Defaults to `local`.
     * 
     */
    public Optional<Output<String>> driver() {
        return Optional.ofNullable(this.driver);
    }

    /**
     * Options specific to the driver.
     * 
     */
    @Import(name="driverOpts")
    private @Nullable Output<Map<String,Object>> driverOpts;

    /**
     * @return Options specific to the driver.
     * 
     */
    public Optional<Output<Map<String,Object>>> driverOpts() {
        return Optional.ofNullable(this.driverOpts);
    }

    /**
     * User-defined key/value metadata
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<VolumeLabelArgs>> labels;

    /**
     * @return User-defined key/value metadata
     * 
     */
    public Optional<Output<List<VolumeLabelArgs>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The name of the Docker volume (will be generated if not provided).
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Docker volume (will be generated if not provided).
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private VolumeArgs() {}

    private VolumeArgs(VolumeArgs $) {
        this.driver = $.driver;
        this.driverOpts = $.driverOpts;
        this.labels = $.labels;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeArgs $;

        public Builder() {
            $ = new VolumeArgs();
        }

        public Builder(VolumeArgs defaults) {
            $ = new VolumeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param driver Driver type for the volume. Defaults to `local`.
         * 
         * @return builder
         * 
         */
        public Builder driver(@Nullable Output<String> driver) {
            $.driver = driver;
            return this;
        }

        /**
         * @param driver Driver type for the volume. Defaults to `local`.
         * 
         * @return builder
         * 
         */
        public Builder driver(String driver) {
            return driver(Output.of(driver));
        }

        /**
         * @param driverOpts Options specific to the driver.
         * 
         * @return builder
         * 
         */
        public Builder driverOpts(@Nullable Output<Map<String,Object>> driverOpts) {
            $.driverOpts = driverOpts;
            return this;
        }

        /**
         * @param driverOpts Options specific to the driver.
         * 
         * @return builder
         * 
         */
        public Builder driverOpts(Map<String,Object> driverOpts) {
            return driverOpts(Output.of(driverOpts));
        }

        /**
         * @param labels User-defined key/value metadata
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<List<VolumeLabelArgs>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels User-defined key/value metadata
         * 
         * @return builder
         * 
         */
        public Builder labels(List<VolumeLabelArgs> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param labels User-defined key/value metadata
         * 
         * @return builder
         * 
         */
        public Builder labels(VolumeLabelArgs... labels) {
            return labels(List.of(labels));
        }

        /**
         * @param name The name of the Docker volume (will be generated if not provided).
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Docker volume (will be generated if not provided).
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public VolumeArgs build() {
            return $;
        }
    }

}
