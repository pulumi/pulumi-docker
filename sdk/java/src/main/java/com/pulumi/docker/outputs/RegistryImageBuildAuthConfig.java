// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegistryImageBuildAuthConfig {
    private @Nullable String auth;
    private @Nullable String email;
    private String hostName;
    private @Nullable String identityToken;
    private @Nullable String password;
    private @Nullable String registryToken;
    private @Nullable String serverAddress;
    private @Nullable String userName;

    private RegistryImageBuildAuthConfig() {}
    public Optional<String> auth() {
        return Optional.ofNullable(this.auth);
    }
    public Optional<String> email() {
        return Optional.ofNullable(this.email);
    }
    public String hostName() {
        return this.hostName;
    }
    public Optional<String> identityToken() {
        return Optional.ofNullable(this.identityToken);
    }
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    public Optional<String> registryToken() {
        return Optional.ofNullable(this.registryToken);
    }
    public Optional<String> serverAddress() {
        return Optional.ofNullable(this.serverAddress);
    }
    public Optional<String> userName() {
        return Optional.ofNullable(this.userName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegistryImageBuildAuthConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String auth;
        private @Nullable String email;
        private String hostName;
        private @Nullable String identityToken;
        private @Nullable String password;
        private @Nullable String registryToken;
        private @Nullable String serverAddress;
        private @Nullable String userName;
        public Builder() {}
        public Builder(RegistryImageBuildAuthConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.auth = defaults.auth;
    	      this.email = defaults.email;
    	      this.hostName = defaults.hostName;
    	      this.identityToken = defaults.identityToken;
    	      this.password = defaults.password;
    	      this.registryToken = defaults.registryToken;
    	      this.serverAddress = defaults.serverAddress;
    	      this.userName = defaults.userName;
        }

        @CustomType.Setter
        public Builder auth(@Nullable String auth) {
            this.auth = auth;
            return this;
        }
        @CustomType.Setter
        public Builder email(@Nullable String email) {
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder hostName(String hostName) {
            this.hostName = Objects.requireNonNull(hostName);
            return this;
        }
        @CustomType.Setter
        public Builder identityToken(@Nullable String identityToken) {
            this.identityToken = identityToken;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder registryToken(@Nullable String registryToken) {
            this.registryToken = registryToken;
            return this;
        }
        @CustomType.Setter
        public Builder serverAddress(@Nullable String serverAddress) {
            this.serverAddress = serverAddress;
            return this;
        }
        @CustomType.Setter
        public Builder userName(@Nullable String userName) {
            this.userName = userName;
            return this;
        }
        public RegistryImageBuildAuthConfig build() {
            final var o = new RegistryImageBuildAuthConfig();
            o.auth = auth;
            o.email = email;
            o.hostName = hostName;
            o.identityToken = identityToken;
            o.password = password;
            o.registryToken = registryToken;
            o.serverAddress = serverAddress;
            o.userName = userName;
            return o;
        }
    }
}
