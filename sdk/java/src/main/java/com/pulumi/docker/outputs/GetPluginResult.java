// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPluginResult {
    /**
     * @return The alias of the Docker plugin. If the tag is omitted, `:latest` is complemented to the attribute value.
     * 
     */
    private final @Nullable String alias;
    /**
     * @return If `true` the plugin is enabled
     * 
     */
    private final Boolean enabled;
    /**
     * @return The environment variables in the form of `KEY=VALUE`, e.g. `DEBUG=0`
     * 
     */
    private final List<String> envs;
    /**
     * @return If true, grant all permissions necessary to run the plugin
     * 
     */
    private final Boolean grantAllPermissions;
    /**
     * @return The ID of the plugin, which has precedence over the `alias` of both are given
     * 
     */
    private final @Nullable String id;
    /**
     * @return The plugin name. If the tag is omitted, `:latest` is complemented to the attribute value.
     * 
     */
    private final String name;
    /**
     * @return The Docker Plugin Reference
     * 
     */
    private final String pluginReference;

    @CustomType.Constructor
    private GetPluginResult(
        @CustomType.Parameter("alias") @Nullable String alias,
        @CustomType.Parameter("enabled") Boolean enabled,
        @CustomType.Parameter("envs") List<String> envs,
        @CustomType.Parameter("grantAllPermissions") Boolean grantAllPermissions,
        @CustomType.Parameter("id") @Nullable String id,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("pluginReference") String pluginReference) {
        this.alias = alias;
        this.enabled = enabled;
        this.envs = envs;
        this.grantAllPermissions = grantAllPermissions;
        this.id = id;
        this.name = name;
        this.pluginReference = pluginReference;
    }

    /**
     * @return The alias of the Docker plugin. If the tag is omitted, `:latest` is complemented to the attribute value.
     * 
     */
    public Optional<String> alias() {
        return Optional.ofNullable(this.alias);
    }
    /**
     * @return If `true` the plugin is enabled
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return The environment variables in the form of `KEY=VALUE`, e.g. `DEBUG=0`
     * 
     */
    public List<String> envs() {
        return this.envs;
    }
    /**
     * @return If true, grant all permissions necessary to run the plugin
     * 
     */
    public Boolean grantAllPermissions() {
        return this.grantAllPermissions;
    }
    /**
     * @return The ID of the plugin, which has precedence over the `alias` of both are given
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The plugin name. If the tag is omitted, `:latest` is complemented to the attribute value.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The Docker Plugin Reference
     * 
     */
    public String pluginReference() {
        return this.pluginReference;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPluginResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String alias;
        private Boolean enabled;
        private List<String> envs;
        private Boolean grantAllPermissions;
        private @Nullable String id;
        private String name;
        private String pluginReference;

        public Builder() {
    	      // Empty
        }

        public Builder(GetPluginResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alias = defaults.alias;
    	      this.enabled = defaults.enabled;
    	      this.envs = defaults.envs;
    	      this.grantAllPermissions = defaults.grantAllPermissions;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.pluginReference = defaults.pluginReference;
        }

        public Builder alias(@Nullable String alias) {
            this.alias = alias;
            return this;
        }
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        public Builder envs(List<String> envs) {
            this.envs = Objects.requireNonNull(envs);
            return this;
        }
        public Builder envs(String... envs) {
            return envs(List.of(envs));
        }
        public Builder grantAllPermissions(Boolean grantAllPermissions) {
            this.grantAllPermissions = Objects.requireNonNull(grantAllPermissions);
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder pluginReference(String pluginReference) {
            this.pluginReference = Objects.requireNonNull(pluginReference);
            return this;
        }        public GetPluginResult build() {
            return new GetPluginResult(alias, enabled, envs, grantAllPermissions, id, name, pluginReference);
        }
    }
}
