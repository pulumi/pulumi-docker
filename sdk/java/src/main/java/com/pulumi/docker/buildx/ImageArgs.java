// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.buildx;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageArgs Empty = new ImageArgs();

    /**
     * Contexts to use while building the image. If omitted, an empty context is used. If more than one value is specified, they should be of the form &#34;name=value&#34;
     * 
     */
    @Import(name="context")
    private @Nullable Output<List<String>> context;

    /**
     * @return Contexts to use while building the image. If omitted, an empty context is used. If more than one value is specified, they should be of the form &#34;name=value&#34;
     * 
     */
    public Optional<Output<List<String>>> context() {
        return Optional.ofNullable(this.context);
    }

    /**
     * Name and optionally a tag (format: &#34;name:tag&#34;). If outputting to a registry, the name should include the fully qualified registry address.
     * 
     */
    @Import(name="exports")
    private @Nullable Output<List<String>> exports;

    /**
     * @return Name and optionally a tag (format: &#34;name:tag&#34;). If outputting to a registry, the name should include the fully qualified registry address.
     * 
     */
    public Optional<Output<List<String>>> exports() {
        return Optional.ofNullable(this.exports);
    }

    /**
     * Name of the Dockerfile to use (default: &#34;$PATH/Dockerfile&#34;).
     * 
     */
    @Import(name="file")
    private @Nullable Output<String> file;

    /**
     * @return Name of the Dockerfile to use (default: &#34;$PATH/Dockerfile&#34;).
     * 
     */
    public Optional<Output<String>> file() {
        return Optional.ofNullable(this.file);
    }

    /**
     * Name and optionally a tag (format: &#34;name:tag&#34;). If outputting to a registry, the name should include the fully qualified registry address.
     * 
     */
    @Import(name="tags", required=true)
    private Output<List<String>> tags;

    /**
     * @return Name and optionally a tag (format: &#34;name:tag&#34;). If outputting to a registry, the name should include the fully qualified registry address.
     * 
     */
    public Output<List<String>> tags() {
        return this.tags;
    }

    private ImageArgs() {}

    private ImageArgs(ImageArgs $) {
        this.context = $.context;
        this.exports = $.exports;
        this.file = $.file;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageArgs $;

        public Builder() {
            $ = new ImageArgs();
        }

        public Builder(ImageArgs defaults) {
            $ = new ImageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param context Contexts to use while building the image. If omitted, an empty context is used. If more than one value is specified, they should be of the form &#34;name=value&#34;
         * 
         * @return builder
         * 
         */
        public Builder context(@Nullable Output<List<String>> context) {
            $.context = context;
            return this;
        }

        /**
         * @param context Contexts to use while building the image. If omitted, an empty context is used. If more than one value is specified, they should be of the form &#34;name=value&#34;
         * 
         * @return builder
         * 
         */
        public Builder context(List<String> context) {
            return context(Output.of(context));
        }

        /**
         * @param context Contexts to use while building the image. If omitted, an empty context is used. If more than one value is specified, they should be of the form &#34;name=value&#34;
         * 
         * @return builder
         * 
         */
        public Builder context(String... context) {
            return context(List.of(context));
        }

        /**
         * @param exports Name and optionally a tag (format: &#34;name:tag&#34;). If outputting to a registry, the name should include the fully qualified registry address.
         * 
         * @return builder
         * 
         */
        public Builder exports(@Nullable Output<List<String>> exports) {
            $.exports = exports;
            return this;
        }

        /**
         * @param exports Name and optionally a tag (format: &#34;name:tag&#34;). If outputting to a registry, the name should include the fully qualified registry address.
         * 
         * @return builder
         * 
         */
        public Builder exports(List<String> exports) {
            return exports(Output.of(exports));
        }

        /**
         * @param exports Name and optionally a tag (format: &#34;name:tag&#34;). If outputting to a registry, the name should include the fully qualified registry address.
         * 
         * @return builder
         * 
         */
        public Builder exports(String... exports) {
            return exports(List.of(exports));
        }

        /**
         * @param file Name of the Dockerfile to use (default: &#34;$PATH/Dockerfile&#34;).
         * 
         * @return builder
         * 
         */
        public Builder file(@Nullable Output<String> file) {
            $.file = file;
            return this;
        }

        /**
         * @param file Name of the Dockerfile to use (default: &#34;$PATH/Dockerfile&#34;).
         * 
         * @return builder
         * 
         */
        public Builder file(String file) {
            return file(Output.of(file));
        }

        /**
         * @param tags Name and optionally a tag (format: &#34;name:tag&#34;). If outputting to a registry, the name should include the fully qualified registry address.
         * 
         * @return builder
         * 
         */
        public Builder tags(Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Name and optionally a tag (format: &#34;name:tag&#34;). If outputting to a registry, the name should include the fully qualified registry address.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Name and optionally a tag (format: &#34;name:tag&#34;). If outputting to a registry, the name should include the fully qualified registry address.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public ImageArgs build() {
            $.file = Codegen.stringProp("file").output().arg($.file).def("Dockerfile").getNullable();
            $.tags = Objects.requireNonNull($.tags, "expected parameter 'tags' to be non-null");
            return $;
        }
    }

}
