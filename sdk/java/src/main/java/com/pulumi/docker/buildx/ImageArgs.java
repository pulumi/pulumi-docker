// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.buildx;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageArgs Empty = new ImageArgs();

    /**
     * An optional map of named build-time argument variables to set during
     * the Docker build. This flag allows you to pass build-time variables that
     * can be accessed like environment variables inside the RUN
     * instruction.
     * 
     */
    @Import(name="buildArgs")
    private @Nullable Output<Map<String,String>> buildArgs;

    /**
     * @return
     * An optional map of named build-time argument variables to set during
     * the Docker build. This flag allows you to pass build-time variables that
     * can be accessed like environment variables inside the RUN
     * instruction.
     * 
     */
    public Optional<Output<Map<String,String>>> buildArgs() {
        return Optional.ofNullable(this.buildArgs);
    }

    /**
     * TODO
     * 
     */
    @Import(name="cacheFrom")
    private @Nullable Output<List<String>> cacheFrom;

    /**
     * @return TODO
     * 
     */
    public Optional<Output<List<String>>> cacheFrom() {
        return Optional.ofNullable(this.cacheFrom);
    }

    /**
     * TODO
     * 
     */
    @Import(name="cacheTo")
    private @Nullable Output<List<String>> cacheTo;

    /**
     * @return TODO
     * 
     */
    public Optional<Output<List<String>>> cacheTo() {
        return Optional.ofNullable(this.cacheTo);
    }

    /**
     * Contexts to use while building the image. If omitted, an empty context
     * is used. If more than one value is specified, they should be of the
     * form &#34;name=value&#34;.
     * 
     */
    @Import(name="context")
    private @Nullable Output<String> context;

    /**
     * @return
     * Contexts to use while building the image. If omitted, an empty context
     * is used. If more than one value is specified, they should be of the
     * form &#34;name=value&#34;.
     * 
     */
    public Optional<Output<String>> context() {
        return Optional.ofNullable(this.context);
    }

    /**
     * Name and optionally a tag (format: &#34;name:tag&#34;). If outputting to a
     * registry, the name should include the fully qualified registry address.
     * 
     */
    @Import(name="exports")
    private @Nullable Output<List<String>> exports;

    /**
     * @return
     * Name and optionally a tag (format: &#34;name:tag&#34;). If outputting to a
     * registry, the name should include the fully qualified registry address.
     * 
     */
    public Optional<Output<List<String>>> exports() {
        return Optional.ofNullable(this.exports);
    }

    /**
     * Name of the Dockerfile to use (default: &#34;$PATH/Dockerfile&#34;).
     * 
     */
    @Import(name="file")
    private @Nullable Output<String> file;

    /**
     * @return
     * Name of the Dockerfile to use (default: &#34;$PATH/Dockerfile&#34;).
     * 
     */
    public Optional<Output<String>> file() {
        return Optional.ofNullable(this.file);
    }

    /**
     * Set target platforms for the build. Defaults to the host&#39;s platform
     * 
     */
    @Import(name="platforms")
    private @Nullable Output<List<String>> platforms;

    /**
     * @return
     * Set target platforms for the build. Defaults to the host&#39;s platform
     * 
     */
    public Optional<Output<List<String>>> platforms() {
        return Optional.ofNullable(this.platforms);
    }

    /**
     * TODO
     * 
     */
    @Import(name="pull")
    private @Nullable Output<Boolean> pull;

    /**
     * @return TODO
     * 
     */
    public Optional<Output<Boolean>> pull() {
        return Optional.ofNullable(this.pull);
    }

    /**
     * Name and optionally a tag (format: &#34;name:tag&#34;). If outputting to a
     * registry, the name should include the fully qualified registry address.
     * 
     */
    @Import(name="tags", required=true)
    private Output<List<String>> tags;

    /**
     * @return
     * Name and optionally a tag (format: &#34;name:tag&#34;). If outputting to a
     * registry, the name should include the fully qualified registry address.
     * 
     */
    public Output<List<String>> tags() {
        return this.tags;
    }

    private ImageArgs() {}

    private ImageArgs(ImageArgs $) {
        this.buildArgs = $.buildArgs;
        this.cacheFrom = $.cacheFrom;
        this.cacheTo = $.cacheTo;
        this.context = $.context;
        this.exports = $.exports;
        this.file = $.file;
        this.platforms = $.platforms;
        this.pull = $.pull;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageArgs $;

        public Builder() {
            $ = new ImageArgs();
        }

        public Builder(ImageArgs defaults) {
            $ = new ImageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param buildArgs
         * An optional map of named build-time argument variables to set during
         * the Docker build. This flag allows you to pass build-time variables that
         * can be accessed like environment variables inside the RUN
         * instruction.
         * 
         * @return builder
         * 
         */
        public Builder buildArgs(@Nullable Output<Map<String,String>> buildArgs) {
            $.buildArgs = buildArgs;
            return this;
        }

        /**
         * @param buildArgs
         * An optional map of named build-time argument variables to set during
         * the Docker build. This flag allows you to pass build-time variables that
         * can be accessed like environment variables inside the RUN
         * instruction.
         * 
         * @return builder
         * 
         */
        public Builder buildArgs(Map<String,String> buildArgs) {
            return buildArgs(Output.of(buildArgs));
        }

        /**
         * @param cacheFrom TODO
         * 
         * @return builder
         * 
         */
        public Builder cacheFrom(@Nullable Output<List<String>> cacheFrom) {
            $.cacheFrom = cacheFrom;
            return this;
        }

        /**
         * @param cacheFrom TODO
         * 
         * @return builder
         * 
         */
        public Builder cacheFrom(List<String> cacheFrom) {
            return cacheFrom(Output.of(cacheFrom));
        }

        /**
         * @param cacheFrom TODO
         * 
         * @return builder
         * 
         */
        public Builder cacheFrom(String... cacheFrom) {
            return cacheFrom(List.of(cacheFrom));
        }

        /**
         * @param cacheTo TODO
         * 
         * @return builder
         * 
         */
        public Builder cacheTo(@Nullable Output<List<String>> cacheTo) {
            $.cacheTo = cacheTo;
            return this;
        }

        /**
         * @param cacheTo TODO
         * 
         * @return builder
         * 
         */
        public Builder cacheTo(List<String> cacheTo) {
            return cacheTo(Output.of(cacheTo));
        }

        /**
         * @param cacheTo TODO
         * 
         * @return builder
         * 
         */
        public Builder cacheTo(String... cacheTo) {
            return cacheTo(List.of(cacheTo));
        }

        /**
         * @param context
         * Contexts to use while building the image. If omitted, an empty context
         * is used. If more than one value is specified, they should be of the
         * form &#34;name=value&#34;.
         * 
         * @return builder
         * 
         */
        public Builder context(@Nullable Output<String> context) {
            $.context = context;
            return this;
        }

        /**
         * @param context
         * Contexts to use while building the image. If omitted, an empty context
         * is used. If more than one value is specified, they should be of the
         * form &#34;name=value&#34;.
         * 
         * @return builder
         * 
         */
        public Builder context(String context) {
            return context(Output.of(context));
        }

        /**
         * @param exports
         * Name and optionally a tag (format: &#34;name:tag&#34;). If outputting to a
         * registry, the name should include the fully qualified registry address.
         * 
         * @return builder
         * 
         */
        public Builder exports(@Nullable Output<List<String>> exports) {
            $.exports = exports;
            return this;
        }

        /**
         * @param exports
         * Name and optionally a tag (format: &#34;name:tag&#34;). If outputting to a
         * registry, the name should include the fully qualified registry address.
         * 
         * @return builder
         * 
         */
        public Builder exports(List<String> exports) {
            return exports(Output.of(exports));
        }

        /**
         * @param exports
         * Name and optionally a tag (format: &#34;name:tag&#34;). If outputting to a
         * registry, the name should include the fully qualified registry address.
         * 
         * @return builder
         * 
         */
        public Builder exports(String... exports) {
            return exports(List.of(exports));
        }

        /**
         * @param file
         * Name of the Dockerfile to use (default: &#34;$PATH/Dockerfile&#34;).
         * 
         * @return builder
         * 
         */
        public Builder file(@Nullable Output<String> file) {
            $.file = file;
            return this;
        }

        /**
         * @param file
         * Name of the Dockerfile to use (default: &#34;$PATH/Dockerfile&#34;).
         * 
         * @return builder
         * 
         */
        public Builder file(String file) {
            return file(Output.of(file));
        }

        /**
         * @param platforms
         * Set target platforms for the build. Defaults to the host&#39;s platform
         * 
         * @return builder
         * 
         */
        public Builder platforms(@Nullable Output<List<String>> platforms) {
            $.platforms = platforms;
            return this;
        }

        /**
         * @param platforms
         * Set target platforms for the build. Defaults to the host&#39;s platform
         * 
         * @return builder
         * 
         */
        public Builder platforms(List<String> platforms) {
            return platforms(Output.of(platforms));
        }

        /**
         * @param platforms
         * Set target platforms for the build. Defaults to the host&#39;s platform
         * 
         * @return builder
         * 
         */
        public Builder platforms(String... platforms) {
            return platforms(List.of(platforms));
        }

        /**
         * @param pull TODO
         * 
         * @return builder
         * 
         */
        public Builder pull(@Nullable Output<Boolean> pull) {
            $.pull = pull;
            return this;
        }

        /**
         * @param pull TODO
         * 
         * @return builder
         * 
         */
        public Builder pull(Boolean pull) {
            return pull(Output.of(pull));
        }

        /**
         * @param tags
         * Name and optionally a tag (format: &#34;name:tag&#34;). If outputting to a
         * registry, the name should include the fully qualified registry address.
         * 
         * @return builder
         * 
         */
        public Builder tags(Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags
         * Name and optionally a tag (format: &#34;name:tag&#34;). If outputting to a
         * registry, the name should include the fully qualified registry address.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags
         * Name and optionally a tag (format: &#34;name:tag&#34;). If outputting to a
         * registry, the name should include the fully qualified registry address.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public ImageArgs build() {
            $.file = Codegen.stringProp("file").output().arg($.file).def("Dockerfile").getNullable();
            if ($.tags == null) {
                throw new MissingRequiredPropertyException("ImageArgs", "tags");
            }
            return $;
        }
    }

}
