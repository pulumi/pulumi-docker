// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.buildx;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.docker.buildx.enums.NetworkMode;
import com.pulumi.docker.buildx.enums.Platform;
import com.pulumi.docker.buildx.inputs.BuildContextArgs;
import com.pulumi.docker.buildx.inputs.BuilderConfigArgs;
import com.pulumi.docker.buildx.inputs.CacheFromArgs;
import com.pulumi.docker.buildx.inputs.CacheToArgs;
import com.pulumi.docker.buildx.inputs.DockerfileArgs;
import com.pulumi.docker.buildx.inputs.ExportArgs;
import com.pulumi.docker.buildx.inputs.RegistryAuthArgs;
import com.pulumi.docker.buildx.inputs.SSHArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageArgs Empty = new ImageArgs();

    /**
     * Custom `host:ip` mappings to use during the build.
     * 
     * Equivalent to Docker&#39;s `--add-host` flag.
     * 
     */
    @Import(name="addHosts")
    private @Nullable Output<List<String>> addHosts;

    /**
     * @return Custom `host:ip` mappings to use during the build.
     * 
     * Equivalent to Docker&#39;s `--add-host` flag.
     * 
     */
    public Optional<Output<List<String>>> addHosts() {
        return Optional.ofNullable(this.addHosts);
    }

    /**
     * `ARG` names and values to set during the build.
     * 
     * These variables are accessed like environment variables inside `RUN`
     * instructions.
     * 
     * Build arguments are persisted in the image, so you should use `secrets`
     * if these arguments are sensitive.
     * 
     * Equivalent to Docker&#39;s `--build-arg` flag.
     * 
     */
    @Import(name="buildArgs")
    private @Nullable Output<Map<String,String>> buildArgs;

    /**
     * @return `ARG` names and values to set during the build.
     * 
     * These variables are accessed like environment variables inside `RUN`
     * instructions.
     * 
     * Build arguments are persisted in the image, so you should use `secrets`
     * if these arguments are sensitive.
     * 
     * Equivalent to Docker&#39;s `--build-arg` flag.
     * 
     */
    public Optional<Output<Map<String,String>>> buildArgs() {
        return Optional.ofNullable(this.buildArgs);
    }

    /**
     * By default, preview behavior depends on the execution environment. If
     * Pulumi detects the operation is running on a CI system (GitHub Actions,
     * Travis CI, Azure Pipelines, etc.) then it will build images during
     * previews as a safeguard. Otherwise, if not running on CI, previews will
     * not build images.
     * 
     * Setting this to `false` forces previews to never perform builds, and
     * setting it to `true` will always build the image during previews.
     * 
     * Images built during previews are never exported to registries, however
     * cache manifests are still exported.
     * 
     * On-disk Dockerfiles are always validated for syntactic correctness
     * regardless of this setting.
     * 
     */
    @Import(name="buildOnPreview")
    private @Nullable Output<Boolean> buildOnPreview;

    /**
     * @return By default, preview behavior depends on the execution environment. If
     * Pulumi detects the operation is running on a CI system (GitHub Actions,
     * Travis CI, Azure Pipelines, etc.) then it will build images during
     * previews as a safeguard. Otherwise, if not running on CI, previews will
     * not build images.
     * 
     * Setting this to `false` forces previews to never perform builds, and
     * setting it to `true` will always build the image during previews.
     * 
     * Images built during previews are never exported to registries, however
     * cache manifests are still exported.
     * 
     * On-disk Dockerfiles are always validated for syntactic correctness
     * regardless of this setting.
     * 
     */
    public Optional<Output<Boolean>> buildOnPreview() {
        return Optional.ofNullable(this.buildOnPreview);
    }

    /**
     * Builder configuration.
     * 
     */
    @Import(name="builder")
    private @Nullable Output<BuilderConfigArgs> builder;

    /**
     * @return Builder configuration.
     * 
     */
    public Optional<Output<BuilderConfigArgs>> builder_() {
        return Optional.ofNullable(this.builder);
    }

    /**
     * Cache export configuration.
     * 
     * Equivalent to Docker&#39;s `--cache-from` flag.
     * 
     */
    @Import(name="cacheFrom")
    private @Nullable Output<List<CacheFromArgs>> cacheFrom;

    /**
     * @return Cache export configuration.
     * 
     * Equivalent to Docker&#39;s `--cache-from` flag.
     * 
     */
    public Optional<Output<List<CacheFromArgs>>> cacheFrom() {
        return Optional.ofNullable(this.cacheFrom);
    }

    /**
     * Cache import configuration.
     * 
     * Equivalent to Docker&#39;s `--cache-to` flag.
     * 
     */
    @Import(name="cacheTo")
    private @Nullable Output<List<CacheToArgs>> cacheTo;

    /**
     * @return Cache import configuration.
     * 
     * Equivalent to Docker&#39;s `--cache-to` flag.
     * 
     */
    public Optional<Output<List<CacheToArgs>>> cacheTo() {
        return Optional.ofNullable(this.cacheTo);
    }

    /**
     * Build context settings.
     * 
     * Equivalent to Docker&#39;s `PATH | URL | -` positional argument.
     * 
     */
    @Import(name="context")
    private @Nullable Output<BuildContextArgs> context;

    /**
     * @return Build context settings.
     * 
     * Equivalent to Docker&#39;s `PATH | URL | -` positional argument.
     * 
     */
    public Optional<Output<BuildContextArgs>> context() {
        return Optional.ofNullable(this.context);
    }

    /**
     * Dockerfile settings.
     * 
     * Equivalent to Docker&#39;s `--file` flag.
     * 
     */
    @Import(name="dockerfile")
    private @Nullable Output<DockerfileArgs> dockerfile;

    /**
     * @return Dockerfile settings.
     * 
     * Equivalent to Docker&#39;s `--file` flag.
     * 
     */
    public Optional<Output<DockerfileArgs>> dockerfile() {
        return Optional.ofNullable(this.dockerfile);
    }

    /**
     * Use `exec` mode to build this image.
     * 
     * By default the provider embeds a v25 Docker client with v0.12 buildx
     * support. This helps ensure consistent behavior across environments and
     * is compatible with alternative build backends (e.g. `buildkitd`), but
     * it may not be desirable if you require a specific version of buildx.
     * For example you may want to run a custom `docker-buildx` binary with
     * support for [Docker Build
     * Cloud](https://docs.docker.com/build/cloud/setup/) (DBC).
     * 
     * When this is set to `true` the provider will instead execute the
     * `docker-buildx` binary directly to perform its operations. The user is
     * responsible for ensuring this binary exists, with correct permissions
     * and pre-configured builders, at a path Docker expects (e.g.
     * `~/.docker/cli-plugins`).
     * 
     * Debugging `exec` mode may be more difficult as Pulumi will not be able
     * to surface fine-grained errors and warnings. Additionally credentials
     * are temporarily written to disk in order to provide them to the
     * `docker-buildx` binary.
     * 
     */
    @Import(name="exec")
    private @Nullable Output<Boolean> exec;

    /**
     * @return Use `exec` mode to build this image.
     * 
     * By default the provider embeds a v25 Docker client with v0.12 buildx
     * support. This helps ensure consistent behavior across environments and
     * is compatible with alternative build backends (e.g. `buildkitd`), but
     * it may not be desirable if you require a specific version of buildx.
     * For example you may want to run a custom `docker-buildx` binary with
     * support for [Docker Build
     * Cloud](https://docs.docker.com/build/cloud/setup/) (DBC).
     * 
     * When this is set to `true` the provider will instead execute the
     * `docker-buildx` binary directly to perform its operations. The user is
     * responsible for ensuring this binary exists, with correct permissions
     * and pre-configured builders, at a path Docker expects (e.g.
     * `~/.docker/cli-plugins`).
     * 
     * Debugging `exec` mode may be more difficult as Pulumi will not be able
     * to surface fine-grained errors and warnings. Additionally credentials
     * are temporarily written to disk in order to provide them to the
     * `docker-buildx` binary.
     * 
     */
    public Optional<Output<Boolean>> exec() {
        return Optional.ofNullable(this.exec);
    }

    /**
     * Controls where images are persisted after building.
     * 
     * Images are only stored in the local cache unless `exports` are
     * explicitly configured.
     * 
     * Exporting to multiple destinations requires a daemon running BuildKit
     * 0.13 or later.
     * 
     * Equivalent to Docker&#39;s `--output` flag.
     * 
     */
    @Import(name="exports")
    private @Nullable Output<List<ExportArgs>> exports;

    /**
     * @return Controls where images are persisted after building.
     * 
     * Images are only stored in the local cache unless `exports` are
     * explicitly configured.
     * 
     * Exporting to multiple destinations requires a daemon running BuildKit
     * 0.13 or later.
     * 
     * Equivalent to Docker&#39;s `--output` flag.
     * 
     */
    public Optional<Output<List<ExportArgs>>> exports() {
        return Optional.ofNullable(this.exports);
    }

    /**
     * Attach arbitrary key/value metadata to the image.
     * 
     * Equivalent to Docker&#39;s `--label` flag.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Attach arbitrary key/value metadata to the image.
     * 
     * Equivalent to Docker&#39;s `--label` flag.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * When `true` the build will automatically include a `docker` export.
     * 
     * Defaults to `false`.
     * 
     * Equivalent to Docker&#39;s `--load` flag.
     * 
     */
    @Import(name="load")
    private @Nullable Output<Boolean> load;

    /**
     * @return When `true` the build will automatically include a `docker` export.
     * 
     * Defaults to `false`.
     * 
     * Equivalent to Docker&#39;s `--load` flag.
     * 
     */
    public Optional<Output<Boolean>> load() {
        return Optional.ofNullable(this.load);
    }

    /**
     * Set the network mode for `RUN` instructions. Defaults to `default`.
     * 
     * For custom networks, configure your builder with `--driver-opt network=...`.
     * 
     * Equivalent to Docker&#39;s `--network` flag.
     * 
     */
    @Import(name="network")
    private @Nullable Output<NetworkMode> network;

    /**
     * @return Set the network mode for `RUN` instructions. Defaults to `default`.
     * 
     * For custom networks, configure your builder with `--driver-opt network=...`.
     * 
     * Equivalent to Docker&#39;s `--network` flag.
     * 
     */
    public Optional<Output<NetworkMode>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * Do not import cache manifests when building the image.
     * 
     * Equivalent to Docker&#39;s `--no-cache` flag.
     * 
     */
    @Import(name="noCache")
    private @Nullable Output<Boolean> noCache;

    /**
     * @return Do not import cache manifests when building the image.
     * 
     * Equivalent to Docker&#39;s `--no-cache` flag.
     * 
     */
    public Optional<Output<Boolean>> noCache() {
        return Optional.ofNullable(this.noCache);
    }

    /**
     * Set target platform(s) for the build. Defaults to the host&#39;s platform.
     * 
     * Equivalent to Docker&#39;s `--platform` flag.
     * 
     */
    @Import(name="platforms")
    private @Nullable Output<List<Platform>> platforms;

    /**
     * @return Set target platform(s) for the build. Defaults to the host&#39;s platform.
     * 
     * Equivalent to Docker&#39;s `--platform` flag.
     * 
     */
    public Optional<Output<List<Platform>>> platforms() {
        return Optional.ofNullable(this.platforms);
    }

    /**
     * Always pull referenced images.
     * 
     * Equivalent to Docker&#39;s `--pull` flag.
     * 
     */
    @Import(name="pull")
    private @Nullable Output<Boolean> pull;

    /**
     * @return Always pull referenced images.
     * 
     * Equivalent to Docker&#39;s `--pull` flag.
     * 
     */
    public Optional<Output<Boolean>> pull() {
        return Optional.ofNullable(this.pull);
    }

    /**
     * When `true` the build will automatically include a `registry` export.
     * 
     * Defaults to `false`.
     * 
     * Equivalent to Docker&#39;s `--push` flag.
     * 
     */
    @Import(name="push")
    private @Nullable Output<Boolean> push;

    /**
     * @return When `true` the build will automatically include a `registry` export.
     * 
     * Defaults to `false`.
     * 
     * Equivalent to Docker&#39;s `--push` flag.
     * 
     */
    public Optional<Output<Boolean>> push() {
        return Optional.ofNullable(this.push);
    }

    /**
     * Registry credentials. Required if reading or exporting to private
     * repositories.
     * 
     * Credentials are kept in-memory and do not pollute pre-existing
     * credentials on the host.
     * 
     * Similar to `docker login`.
     * 
     */
    @Import(name="registries")
    private @Nullable Output<List<RegistryAuthArgs>> registries;

    /**
     * @return Registry credentials. Required if reading or exporting to private
     * repositories.
     * 
     * Credentials are kept in-memory and do not pollute pre-existing
     * credentials on the host.
     * 
     * Similar to `docker login`.
     * 
     */
    public Optional<Output<List<RegistryAuthArgs>>> registries() {
        return Optional.ofNullable(this.registries);
    }

    /**
     * A mapping of secret names to their corresponding values.
     * 
     * Unlike the Docker CLI, these can be passed by value and do not need to
     * exist on-disk or in environment variables.
     * 
     * Build arguments and environment variables are persistent in the final
     * image, so you should use this for sensitive values.
     * 
     * Similar to Docker&#39;s `--secret` flag.
     * 
     */
    @Import(name="secrets")
    private @Nullable Output<Map<String,String>> secrets;

    /**
     * @return A mapping of secret names to their corresponding values.
     * 
     * Unlike the Docker CLI, these can be passed by value and do not need to
     * exist on-disk or in environment variables.
     * 
     * Build arguments and environment variables are persistent in the final
     * image, so you should use this for sensitive values.
     * 
     * Similar to Docker&#39;s `--secret` flag.
     * 
     */
    public Optional<Output<Map<String,String>>> secrets() {
        return Optional.ofNullable(this.secrets);
    }

    /**
     * SSH agent socket or keys to expose to the build.
     * 
     * Equivalent to Docker&#39;s `--ssh` flag.
     * 
     */
    @Import(name="ssh")
    private @Nullable Output<List<SSHArgs>> ssh;

    /**
     * @return SSH agent socket or keys to expose to the build.
     * 
     * Equivalent to Docker&#39;s `--ssh` flag.
     * 
     */
    public Optional<Output<List<SSHArgs>>> ssh() {
        return Optional.ofNullable(this.ssh);
    }

    /**
     * Name and optionally a tag (format: `name:tag`).
     * 
     * If exporting to a registry, the name should include the fully qualified
     * registry address (e.g. `docker.io/pulumi/pulumi:latest`).
     * 
     * Equivalent to Docker&#39;s `--tag` flag.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Name and optionally a tag (format: `name:tag`).
     * 
     * If exporting to a registry, the name should include the fully qualified
     * registry address (e.g. `docker.io/pulumi/pulumi:latest`).
     * 
     * Equivalent to Docker&#39;s `--tag` flag.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Set the target build stage(s) to build.
     * 
     * If not specified all targets will be built by default.
     * 
     * Equivalent to Docker&#39;s `--target` flag.
     * 
     */
    @Import(name="target")
    private @Nullable Output<String> target;

    /**
     * @return Set the target build stage(s) to build.
     * 
     * If not specified all targets will be built by default.
     * 
     * Equivalent to Docker&#39;s `--target` flag.
     * 
     */
    public Optional<Output<String>> target() {
        return Optional.ofNullable(this.target);
    }

    private ImageArgs() {}

    private ImageArgs(ImageArgs $) {
        this.addHosts = $.addHosts;
        this.buildArgs = $.buildArgs;
        this.buildOnPreview = $.buildOnPreview;
        this.builder = $.builder;
        this.cacheFrom = $.cacheFrom;
        this.cacheTo = $.cacheTo;
        this.context = $.context;
        this.dockerfile = $.dockerfile;
        this.exec = $.exec;
        this.exports = $.exports;
        this.labels = $.labels;
        this.load = $.load;
        this.network = $.network;
        this.noCache = $.noCache;
        this.platforms = $.platforms;
        this.pull = $.pull;
        this.push = $.push;
        this.registries = $.registries;
        this.secrets = $.secrets;
        this.ssh = $.ssh;
        this.tags = $.tags;
        this.target = $.target;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageArgs $;

        public Builder() {
            $ = new ImageArgs();
        }

        public Builder(ImageArgs defaults) {
            $ = new ImageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addHosts Custom `host:ip` mappings to use during the build.
         * 
         * Equivalent to Docker&#39;s `--add-host` flag.
         * 
         * @return builder
         * 
         */
        public Builder addHosts(@Nullable Output<List<String>> addHosts) {
            $.addHosts = addHosts;
            return this;
        }

        /**
         * @param addHosts Custom `host:ip` mappings to use during the build.
         * 
         * Equivalent to Docker&#39;s `--add-host` flag.
         * 
         * @return builder
         * 
         */
        public Builder addHosts(List<String> addHosts) {
            return addHosts(Output.of(addHosts));
        }

        /**
         * @param addHosts Custom `host:ip` mappings to use during the build.
         * 
         * Equivalent to Docker&#39;s `--add-host` flag.
         * 
         * @return builder
         * 
         */
        public Builder addHosts(String... addHosts) {
            return addHosts(List.of(addHosts));
        }

        /**
         * @param buildArgs `ARG` names and values to set during the build.
         * 
         * These variables are accessed like environment variables inside `RUN`
         * instructions.
         * 
         * Build arguments are persisted in the image, so you should use `secrets`
         * if these arguments are sensitive.
         * 
         * Equivalent to Docker&#39;s `--build-arg` flag.
         * 
         * @return builder
         * 
         */
        public Builder buildArgs(@Nullable Output<Map<String,String>> buildArgs) {
            $.buildArgs = buildArgs;
            return this;
        }

        /**
         * @param buildArgs `ARG` names and values to set during the build.
         * 
         * These variables are accessed like environment variables inside `RUN`
         * instructions.
         * 
         * Build arguments are persisted in the image, so you should use `secrets`
         * if these arguments are sensitive.
         * 
         * Equivalent to Docker&#39;s `--build-arg` flag.
         * 
         * @return builder
         * 
         */
        public Builder buildArgs(Map<String,String> buildArgs) {
            return buildArgs(Output.of(buildArgs));
        }

        /**
         * @param buildOnPreview By default, preview behavior depends on the execution environment. If
         * Pulumi detects the operation is running on a CI system (GitHub Actions,
         * Travis CI, Azure Pipelines, etc.) then it will build images during
         * previews as a safeguard. Otherwise, if not running on CI, previews will
         * not build images.
         * 
         * Setting this to `false` forces previews to never perform builds, and
         * setting it to `true` will always build the image during previews.
         * 
         * Images built during previews are never exported to registries, however
         * cache manifests are still exported.
         * 
         * On-disk Dockerfiles are always validated for syntactic correctness
         * regardless of this setting.
         * 
         * @return builder
         * 
         */
        public Builder buildOnPreview(@Nullable Output<Boolean> buildOnPreview) {
            $.buildOnPreview = buildOnPreview;
            return this;
        }

        /**
         * @param buildOnPreview By default, preview behavior depends on the execution environment. If
         * Pulumi detects the operation is running on a CI system (GitHub Actions,
         * Travis CI, Azure Pipelines, etc.) then it will build images during
         * previews as a safeguard. Otherwise, if not running on CI, previews will
         * not build images.
         * 
         * Setting this to `false` forces previews to never perform builds, and
         * setting it to `true` will always build the image during previews.
         * 
         * Images built during previews are never exported to registries, however
         * cache manifests are still exported.
         * 
         * On-disk Dockerfiles are always validated for syntactic correctness
         * regardless of this setting.
         * 
         * @return builder
         * 
         */
        public Builder buildOnPreview(Boolean buildOnPreview) {
            return buildOnPreview(Output.of(buildOnPreview));
        }

        /**
         * @param builder Builder configuration.
         * 
         * @return builder
         * 
         */
        public Builder builder_(@Nullable Output<BuilderConfigArgs> builder) {
            $.builder = builder;
            return this;
        }

        /**
         * @param builder Builder configuration.
         * 
         * @return builder
         * 
         */
        public Builder builder_(BuilderConfigArgs builder) {
            return builder_(Output.of(builder));
        }

        /**
         * @param cacheFrom Cache export configuration.
         * 
         * Equivalent to Docker&#39;s `--cache-from` flag.
         * 
         * @return builder
         * 
         */
        public Builder cacheFrom(@Nullable Output<List<CacheFromArgs>> cacheFrom) {
            $.cacheFrom = cacheFrom;
            return this;
        }

        /**
         * @param cacheFrom Cache export configuration.
         * 
         * Equivalent to Docker&#39;s `--cache-from` flag.
         * 
         * @return builder
         * 
         */
        public Builder cacheFrom(List<CacheFromArgs> cacheFrom) {
            return cacheFrom(Output.of(cacheFrom));
        }

        /**
         * @param cacheFrom Cache export configuration.
         * 
         * Equivalent to Docker&#39;s `--cache-from` flag.
         * 
         * @return builder
         * 
         */
        public Builder cacheFrom(CacheFromArgs... cacheFrom) {
            return cacheFrom(List.of(cacheFrom));
        }

        /**
         * @param cacheTo Cache import configuration.
         * 
         * Equivalent to Docker&#39;s `--cache-to` flag.
         * 
         * @return builder
         * 
         */
        public Builder cacheTo(@Nullable Output<List<CacheToArgs>> cacheTo) {
            $.cacheTo = cacheTo;
            return this;
        }

        /**
         * @param cacheTo Cache import configuration.
         * 
         * Equivalent to Docker&#39;s `--cache-to` flag.
         * 
         * @return builder
         * 
         */
        public Builder cacheTo(List<CacheToArgs> cacheTo) {
            return cacheTo(Output.of(cacheTo));
        }

        /**
         * @param cacheTo Cache import configuration.
         * 
         * Equivalent to Docker&#39;s `--cache-to` flag.
         * 
         * @return builder
         * 
         */
        public Builder cacheTo(CacheToArgs... cacheTo) {
            return cacheTo(List.of(cacheTo));
        }

        /**
         * @param context Build context settings.
         * 
         * Equivalent to Docker&#39;s `PATH | URL | -` positional argument.
         * 
         * @return builder
         * 
         */
        public Builder context(@Nullable Output<BuildContextArgs> context) {
            $.context = context;
            return this;
        }

        /**
         * @param context Build context settings.
         * 
         * Equivalent to Docker&#39;s `PATH | URL | -` positional argument.
         * 
         * @return builder
         * 
         */
        public Builder context(BuildContextArgs context) {
            return context(Output.of(context));
        }

        /**
         * @param dockerfile Dockerfile settings.
         * 
         * Equivalent to Docker&#39;s `--file` flag.
         * 
         * @return builder
         * 
         */
        public Builder dockerfile(@Nullable Output<DockerfileArgs> dockerfile) {
            $.dockerfile = dockerfile;
            return this;
        }

        /**
         * @param dockerfile Dockerfile settings.
         * 
         * Equivalent to Docker&#39;s `--file` flag.
         * 
         * @return builder
         * 
         */
        public Builder dockerfile(DockerfileArgs dockerfile) {
            return dockerfile(Output.of(dockerfile));
        }

        /**
         * @param exec Use `exec` mode to build this image.
         * 
         * By default the provider embeds a v25 Docker client with v0.12 buildx
         * support. This helps ensure consistent behavior across environments and
         * is compatible with alternative build backends (e.g. `buildkitd`), but
         * it may not be desirable if you require a specific version of buildx.
         * For example you may want to run a custom `docker-buildx` binary with
         * support for [Docker Build
         * Cloud](https://docs.docker.com/build/cloud/setup/) (DBC).
         * 
         * When this is set to `true` the provider will instead execute the
         * `docker-buildx` binary directly to perform its operations. The user is
         * responsible for ensuring this binary exists, with correct permissions
         * and pre-configured builders, at a path Docker expects (e.g.
         * `~/.docker/cli-plugins`).
         * 
         * Debugging `exec` mode may be more difficult as Pulumi will not be able
         * to surface fine-grained errors and warnings. Additionally credentials
         * are temporarily written to disk in order to provide them to the
         * `docker-buildx` binary.
         * 
         * @return builder
         * 
         */
        public Builder exec(@Nullable Output<Boolean> exec) {
            $.exec = exec;
            return this;
        }

        /**
         * @param exec Use `exec` mode to build this image.
         * 
         * By default the provider embeds a v25 Docker client with v0.12 buildx
         * support. This helps ensure consistent behavior across environments and
         * is compatible with alternative build backends (e.g. `buildkitd`), but
         * it may not be desirable if you require a specific version of buildx.
         * For example you may want to run a custom `docker-buildx` binary with
         * support for [Docker Build
         * Cloud](https://docs.docker.com/build/cloud/setup/) (DBC).
         * 
         * When this is set to `true` the provider will instead execute the
         * `docker-buildx` binary directly to perform its operations. The user is
         * responsible for ensuring this binary exists, with correct permissions
         * and pre-configured builders, at a path Docker expects (e.g.
         * `~/.docker/cli-plugins`).
         * 
         * Debugging `exec` mode may be more difficult as Pulumi will not be able
         * to surface fine-grained errors and warnings. Additionally credentials
         * are temporarily written to disk in order to provide them to the
         * `docker-buildx` binary.
         * 
         * @return builder
         * 
         */
        public Builder exec(Boolean exec) {
            return exec(Output.of(exec));
        }

        /**
         * @param exports Controls where images are persisted after building.
         * 
         * Images are only stored in the local cache unless `exports` are
         * explicitly configured.
         * 
         * Exporting to multiple destinations requires a daemon running BuildKit
         * 0.13 or later.
         * 
         * Equivalent to Docker&#39;s `--output` flag.
         * 
         * @return builder
         * 
         */
        public Builder exports(@Nullable Output<List<ExportArgs>> exports) {
            $.exports = exports;
            return this;
        }

        /**
         * @param exports Controls where images are persisted after building.
         * 
         * Images are only stored in the local cache unless `exports` are
         * explicitly configured.
         * 
         * Exporting to multiple destinations requires a daemon running BuildKit
         * 0.13 or later.
         * 
         * Equivalent to Docker&#39;s `--output` flag.
         * 
         * @return builder
         * 
         */
        public Builder exports(List<ExportArgs> exports) {
            return exports(Output.of(exports));
        }

        /**
         * @param exports Controls where images are persisted after building.
         * 
         * Images are only stored in the local cache unless `exports` are
         * explicitly configured.
         * 
         * Exporting to multiple destinations requires a daemon running BuildKit
         * 0.13 or later.
         * 
         * Equivalent to Docker&#39;s `--output` flag.
         * 
         * @return builder
         * 
         */
        public Builder exports(ExportArgs... exports) {
            return exports(List.of(exports));
        }

        /**
         * @param labels Attach arbitrary key/value metadata to the image.
         * 
         * Equivalent to Docker&#39;s `--label` flag.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Attach arbitrary key/value metadata to the image.
         * 
         * Equivalent to Docker&#39;s `--label` flag.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param load When `true` the build will automatically include a `docker` export.
         * 
         * Defaults to `false`.
         * 
         * Equivalent to Docker&#39;s `--load` flag.
         * 
         * @return builder
         * 
         */
        public Builder load(@Nullable Output<Boolean> load) {
            $.load = load;
            return this;
        }

        /**
         * @param load When `true` the build will automatically include a `docker` export.
         * 
         * Defaults to `false`.
         * 
         * Equivalent to Docker&#39;s `--load` flag.
         * 
         * @return builder
         * 
         */
        public Builder load(Boolean load) {
            return load(Output.of(load));
        }

        /**
         * @param network Set the network mode for `RUN` instructions. Defaults to `default`.
         * 
         * For custom networks, configure your builder with `--driver-opt network=...`.
         * 
         * Equivalent to Docker&#39;s `--network` flag.
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<NetworkMode> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network Set the network mode for `RUN` instructions. Defaults to `default`.
         * 
         * For custom networks, configure your builder with `--driver-opt network=...`.
         * 
         * Equivalent to Docker&#39;s `--network` flag.
         * 
         * @return builder
         * 
         */
        public Builder network(NetworkMode network) {
            return network(Output.of(network));
        }

        /**
         * @param noCache Do not import cache manifests when building the image.
         * 
         * Equivalent to Docker&#39;s `--no-cache` flag.
         * 
         * @return builder
         * 
         */
        public Builder noCache(@Nullable Output<Boolean> noCache) {
            $.noCache = noCache;
            return this;
        }

        /**
         * @param noCache Do not import cache manifests when building the image.
         * 
         * Equivalent to Docker&#39;s `--no-cache` flag.
         * 
         * @return builder
         * 
         */
        public Builder noCache(Boolean noCache) {
            return noCache(Output.of(noCache));
        }

        /**
         * @param platforms Set target platform(s) for the build. Defaults to the host&#39;s platform.
         * 
         * Equivalent to Docker&#39;s `--platform` flag.
         * 
         * @return builder
         * 
         */
        public Builder platforms(@Nullable Output<List<Platform>> platforms) {
            $.platforms = platforms;
            return this;
        }

        /**
         * @param platforms Set target platform(s) for the build. Defaults to the host&#39;s platform.
         * 
         * Equivalent to Docker&#39;s `--platform` flag.
         * 
         * @return builder
         * 
         */
        public Builder platforms(List<Platform> platforms) {
            return platforms(Output.of(platforms));
        }

        /**
         * @param platforms Set target platform(s) for the build. Defaults to the host&#39;s platform.
         * 
         * Equivalent to Docker&#39;s `--platform` flag.
         * 
         * @return builder
         * 
         */
        public Builder platforms(Platform... platforms) {
            return platforms(List.of(platforms));
        }

        /**
         * @param pull Always pull referenced images.
         * 
         * Equivalent to Docker&#39;s `--pull` flag.
         * 
         * @return builder
         * 
         */
        public Builder pull(@Nullable Output<Boolean> pull) {
            $.pull = pull;
            return this;
        }

        /**
         * @param pull Always pull referenced images.
         * 
         * Equivalent to Docker&#39;s `--pull` flag.
         * 
         * @return builder
         * 
         */
        public Builder pull(Boolean pull) {
            return pull(Output.of(pull));
        }

        /**
         * @param push When `true` the build will automatically include a `registry` export.
         * 
         * Defaults to `false`.
         * 
         * Equivalent to Docker&#39;s `--push` flag.
         * 
         * @return builder
         * 
         */
        public Builder push(@Nullable Output<Boolean> push) {
            $.push = push;
            return this;
        }

        /**
         * @param push When `true` the build will automatically include a `registry` export.
         * 
         * Defaults to `false`.
         * 
         * Equivalent to Docker&#39;s `--push` flag.
         * 
         * @return builder
         * 
         */
        public Builder push(Boolean push) {
            return push(Output.of(push));
        }

        /**
         * @param registries Registry credentials. Required if reading or exporting to private
         * repositories.
         * 
         * Credentials are kept in-memory and do not pollute pre-existing
         * credentials on the host.
         * 
         * Similar to `docker login`.
         * 
         * @return builder
         * 
         */
        public Builder registries(@Nullable Output<List<RegistryAuthArgs>> registries) {
            $.registries = registries;
            return this;
        }

        /**
         * @param registries Registry credentials. Required if reading or exporting to private
         * repositories.
         * 
         * Credentials are kept in-memory and do not pollute pre-existing
         * credentials on the host.
         * 
         * Similar to `docker login`.
         * 
         * @return builder
         * 
         */
        public Builder registries(List<RegistryAuthArgs> registries) {
            return registries(Output.of(registries));
        }

        /**
         * @param registries Registry credentials. Required if reading or exporting to private
         * repositories.
         * 
         * Credentials are kept in-memory and do not pollute pre-existing
         * credentials on the host.
         * 
         * Similar to `docker login`.
         * 
         * @return builder
         * 
         */
        public Builder registries(RegistryAuthArgs... registries) {
            return registries(List.of(registries));
        }

        /**
         * @param secrets A mapping of secret names to their corresponding values.
         * 
         * Unlike the Docker CLI, these can be passed by value and do not need to
         * exist on-disk or in environment variables.
         * 
         * Build arguments and environment variables are persistent in the final
         * image, so you should use this for sensitive values.
         * 
         * Similar to Docker&#39;s `--secret` flag.
         * 
         * @return builder
         * 
         */
        public Builder secrets(@Nullable Output<Map<String,String>> secrets) {
            $.secrets = secrets;
            return this;
        }

        /**
         * @param secrets A mapping of secret names to their corresponding values.
         * 
         * Unlike the Docker CLI, these can be passed by value and do not need to
         * exist on-disk or in environment variables.
         * 
         * Build arguments and environment variables are persistent in the final
         * image, so you should use this for sensitive values.
         * 
         * Similar to Docker&#39;s `--secret` flag.
         * 
         * @return builder
         * 
         */
        public Builder secrets(Map<String,String> secrets) {
            return secrets(Output.of(secrets));
        }

        /**
         * @param ssh SSH agent socket or keys to expose to the build.
         * 
         * Equivalent to Docker&#39;s `--ssh` flag.
         * 
         * @return builder
         * 
         */
        public Builder ssh(@Nullable Output<List<SSHArgs>> ssh) {
            $.ssh = ssh;
            return this;
        }

        /**
         * @param ssh SSH agent socket or keys to expose to the build.
         * 
         * Equivalent to Docker&#39;s `--ssh` flag.
         * 
         * @return builder
         * 
         */
        public Builder ssh(List<SSHArgs> ssh) {
            return ssh(Output.of(ssh));
        }

        /**
         * @param ssh SSH agent socket or keys to expose to the build.
         * 
         * Equivalent to Docker&#39;s `--ssh` flag.
         * 
         * @return builder
         * 
         */
        public Builder ssh(SSHArgs... ssh) {
            return ssh(List.of(ssh));
        }

        /**
         * @param tags Name and optionally a tag (format: `name:tag`).
         * 
         * If exporting to a registry, the name should include the fully qualified
         * registry address (e.g. `docker.io/pulumi/pulumi:latest`).
         * 
         * Equivalent to Docker&#39;s `--tag` flag.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Name and optionally a tag (format: `name:tag`).
         * 
         * If exporting to a registry, the name should include the fully qualified
         * registry address (e.g. `docker.io/pulumi/pulumi:latest`).
         * 
         * Equivalent to Docker&#39;s `--tag` flag.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Name and optionally a tag (format: `name:tag`).
         * 
         * If exporting to a registry, the name should include the fully qualified
         * registry address (e.g. `docker.io/pulumi/pulumi:latest`).
         * 
         * Equivalent to Docker&#39;s `--tag` flag.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param target Set the target build stage(s) to build.
         * 
         * If not specified all targets will be built by default.
         * 
         * Equivalent to Docker&#39;s `--target` flag.
         * 
         * @return builder
         * 
         */
        public Builder target(@Nullable Output<String> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target Set the target build stage(s) to build.
         * 
         * If not specified all targets will be built by default.
         * 
         * Equivalent to Docker&#39;s `--target` flag.
         * 
         * @return builder
         * 
         */
        public Builder target(String target) {
            return target(Output.of(target));
        }

        public ImageArgs build() {
            $.network = Codegen.objectProp("network", NetworkMode.class).output().arg($.network).def(NetworkMode.Default_).getNullable();
            return $;
        }
    }

}
