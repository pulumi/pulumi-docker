// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.docker.inputs.ServiceTaskSpecContainerSpecConfigArgs;
import com.pulumi.docker.inputs.ServiceTaskSpecContainerSpecDnsConfigArgs;
import com.pulumi.docker.inputs.ServiceTaskSpecContainerSpecHealthcheckArgs;
import com.pulumi.docker.inputs.ServiceTaskSpecContainerSpecHostArgs;
import com.pulumi.docker.inputs.ServiceTaskSpecContainerSpecLabelArgs;
import com.pulumi.docker.inputs.ServiceTaskSpecContainerSpecMountArgs;
import com.pulumi.docker.inputs.ServiceTaskSpecContainerSpecPrivilegesArgs;
import com.pulumi.docker.inputs.ServiceTaskSpecContainerSpecSecretArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceTaskSpecContainerSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceTaskSpecContainerSpecArgs Empty = new ServiceTaskSpecContainerSpecArgs();

    @Import(name="args")
    private @Nullable Output<List<String>> args;

    public Optional<Output<List<String>>> args() {
        return Optional.ofNullable(this.args);
    }

    @Import(name="commands")
    private @Nullable Output<List<String>> commands;

    public Optional<Output<List<String>>> commands() {
        return Optional.ofNullable(this.commands);
    }

    @Import(name="configs")
    private @Nullable Output<List<ServiceTaskSpecContainerSpecConfigArgs>> configs;

    public Optional<Output<List<ServiceTaskSpecContainerSpecConfigArgs>>> configs() {
        return Optional.ofNullable(this.configs);
    }

    @Import(name="dir")
    private @Nullable Output<String> dir;

    public Optional<Output<String>> dir() {
        return Optional.ofNullable(this.dir);
    }

    @Import(name="dnsConfig")
    private @Nullable Output<ServiceTaskSpecContainerSpecDnsConfigArgs> dnsConfig;

    public Optional<Output<ServiceTaskSpecContainerSpecDnsConfigArgs>> dnsConfig() {
        return Optional.ofNullable(this.dnsConfig);
    }

    @Import(name="env")
    private @Nullable Output<Map<String,String>> env;

    public Optional<Output<Map<String,String>>> env() {
        return Optional.ofNullable(this.env);
    }

    @Import(name="groups")
    private @Nullable Output<List<String>> groups;

    public Optional<Output<List<String>>> groups() {
        return Optional.ofNullable(this.groups);
    }

    @Import(name="healthcheck")
    private @Nullable Output<ServiceTaskSpecContainerSpecHealthcheckArgs> healthcheck;

    public Optional<Output<ServiceTaskSpecContainerSpecHealthcheckArgs>> healthcheck() {
        return Optional.ofNullable(this.healthcheck);
    }

    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    @Import(name="hosts")
    private @Nullable Output<List<ServiceTaskSpecContainerSpecHostArgs>> hosts;

    public Optional<Output<List<ServiceTaskSpecContainerSpecHostArgs>>> hosts() {
        return Optional.ofNullable(this.hosts);
    }

    @Import(name="image", required=true)
    private Output<String> image;

    public Output<String> image() {
        return this.image;
    }

    @Import(name="isolation")
    private @Nullable Output<String> isolation;

    public Optional<Output<String>> isolation() {
        return Optional.ofNullable(this.isolation);
    }

    @Import(name="labels")
    private @Nullable Output<List<ServiceTaskSpecContainerSpecLabelArgs>> labels;

    public Optional<Output<List<ServiceTaskSpecContainerSpecLabelArgs>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="mounts")
    private @Nullable Output<List<ServiceTaskSpecContainerSpecMountArgs>> mounts;

    public Optional<Output<List<ServiceTaskSpecContainerSpecMountArgs>>> mounts() {
        return Optional.ofNullable(this.mounts);
    }

    @Import(name="privileges")
    private @Nullable Output<ServiceTaskSpecContainerSpecPrivilegesArgs> privileges;

    public Optional<Output<ServiceTaskSpecContainerSpecPrivilegesArgs>> privileges() {
        return Optional.ofNullable(this.privileges);
    }

    @Import(name="readOnly")
    private @Nullable Output<Boolean> readOnly;

    public Optional<Output<Boolean>> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    @Import(name="secrets")
    private @Nullable Output<List<ServiceTaskSpecContainerSpecSecretArgs>> secrets;

    public Optional<Output<List<ServiceTaskSpecContainerSpecSecretArgs>>> secrets() {
        return Optional.ofNullable(this.secrets);
    }

    @Import(name="stopGracePeriod")
    private @Nullable Output<String> stopGracePeriod;

    public Optional<Output<String>> stopGracePeriod() {
        return Optional.ofNullable(this.stopGracePeriod);
    }

    @Import(name="stopSignal")
    private @Nullable Output<String> stopSignal;

    public Optional<Output<String>> stopSignal() {
        return Optional.ofNullable(this.stopSignal);
    }

    @Import(name="sysctl")
    private @Nullable Output<Map<String,Object>> sysctl;

    public Optional<Output<Map<String,Object>>> sysctl() {
        return Optional.ofNullable(this.sysctl);
    }

    @Import(name="user")
    private @Nullable Output<String> user;

    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    private ServiceTaskSpecContainerSpecArgs() {}

    private ServiceTaskSpecContainerSpecArgs(ServiceTaskSpecContainerSpecArgs $) {
        this.args = $.args;
        this.commands = $.commands;
        this.configs = $.configs;
        this.dir = $.dir;
        this.dnsConfig = $.dnsConfig;
        this.env = $.env;
        this.groups = $.groups;
        this.healthcheck = $.healthcheck;
        this.hostname = $.hostname;
        this.hosts = $.hosts;
        this.image = $.image;
        this.isolation = $.isolation;
        this.labels = $.labels;
        this.mounts = $.mounts;
        this.privileges = $.privileges;
        this.readOnly = $.readOnly;
        this.secrets = $.secrets;
        this.stopGracePeriod = $.stopGracePeriod;
        this.stopSignal = $.stopSignal;
        this.sysctl = $.sysctl;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceTaskSpecContainerSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceTaskSpecContainerSpecArgs $;

        public Builder() {
            $ = new ServiceTaskSpecContainerSpecArgs();
        }

        public Builder(ServiceTaskSpecContainerSpecArgs defaults) {
            $ = new ServiceTaskSpecContainerSpecArgs(Objects.requireNonNull(defaults));
        }

        public Builder args(@Nullable Output<List<String>> args) {
            $.args = args;
            return this;
        }

        public Builder args(List<String> args) {
            return args(Output.of(args));
        }

        public Builder args(String... args) {
            return args(List.of(args));
        }

        public Builder commands(@Nullable Output<List<String>> commands) {
            $.commands = commands;
            return this;
        }

        public Builder commands(List<String> commands) {
            return commands(Output.of(commands));
        }

        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }

        public Builder configs(@Nullable Output<List<ServiceTaskSpecContainerSpecConfigArgs>> configs) {
            $.configs = configs;
            return this;
        }

        public Builder configs(List<ServiceTaskSpecContainerSpecConfigArgs> configs) {
            return configs(Output.of(configs));
        }

        public Builder configs(ServiceTaskSpecContainerSpecConfigArgs... configs) {
            return configs(List.of(configs));
        }

        public Builder dir(@Nullable Output<String> dir) {
            $.dir = dir;
            return this;
        }

        public Builder dir(String dir) {
            return dir(Output.of(dir));
        }

        public Builder dnsConfig(@Nullable Output<ServiceTaskSpecContainerSpecDnsConfigArgs> dnsConfig) {
            $.dnsConfig = dnsConfig;
            return this;
        }

        public Builder dnsConfig(ServiceTaskSpecContainerSpecDnsConfigArgs dnsConfig) {
            return dnsConfig(Output.of(dnsConfig));
        }

        public Builder env(@Nullable Output<Map<String,String>> env) {
            $.env = env;
            return this;
        }

        public Builder env(Map<String,String> env) {
            return env(Output.of(env));
        }

        public Builder groups(@Nullable Output<List<String>> groups) {
            $.groups = groups;
            return this;
        }

        public Builder groups(List<String> groups) {
            return groups(Output.of(groups));
        }

        public Builder groups(String... groups) {
            return groups(List.of(groups));
        }

        public Builder healthcheck(@Nullable Output<ServiceTaskSpecContainerSpecHealthcheckArgs> healthcheck) {
            $.healthcheck = healthcheck;
            return this;
        }

        public Builder healthcheck(ServiceTaskSpecContainerSpecHealthcheckArgs healthcheck) {
            return healthcheck(Output.of(healthcheck));
        }

        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        public Builder hosts(@Nullable Output<List<ServiceTaskSpecContainerSpecHostArgs>> hosts) {
            $.hosts = hosts;
            return this;
        }

        public Builder hosts(List<ServiceTaskSpecContainerSpecHostArgs> hosts) {
            return hosts(Output.of(hosts));
        }

        public Builder hosts(ServiceTaskSpecContainerSpecHostArgs... hosts) {
            return hosts(List.of(hosts));
        }

        public Builder image(Output<String> image) {
            $.image = image;
            return this;
        }

        public Builder image(String image) {
            return image(Output.of(image));
        }

        public Builder isolation(@Nullable Output<String> isolation) {
            $.isolation = isolation;
            return this;
        }

        public Builder isolation(String isolation) {
            return isolation(Output.of(isolation));
        }

        public Builder labels(@Nullable Output<List<ServiceTaskSpecContainerSpecLabelArgs>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(List<ServiceTaskSpecContainerSpecLabelArgs> labels) {
            return labels(Output.of(labels));
        }

        public Builder labels(ServiceTaskSpecContainerSpecLabelArgs... labels) {
            return labels(List.of(labels));
        }

        public Builder mounts(@Nullable Output<List<ServiceTaskSpecContainerSpecMountArgs>> mounts) {
            $.mounts = mounts;
            return this;
        }

        public Builder mounts(List<ServiceTaskSpecContainerSpecMountArgs> mounts) {
            return mounts(Output.of(mounts));
        }

        public Builder mounts(ServiceTaskSpecContainerSpecMountArgs... mounts) {
            return mounts(List.of(mounts));
        }

        public Builder privileges(@Nullable Output<ServiceTaskSpecContainerSpecPrivilegesArgs> privileges) {
            $.privileges = privileges;
            return this;
        }

        public Builder privileges(ServiceTaskSpecContainerSpecPrivilegesArgs privileges) {
            return privileges(Output.of(privileges));
        }

        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        public Builder readOnly(Boolean readOnly) {
            return readOnly(Output.of(readOnly));
        }

        public Builder secrets(@Nullable Output<List<ServiceTaskSpecContainerSpecSecretArgs>> secrets) {
            $.secrets = secrets;
            return this;
        }

        public Builder secrets(List<ServiceTaskSpecContainerSpecSecretArgs> secrets) {
            return secrets(Output.of(secrets));
        }

        public Builder secrets(ServiceTaskSpecContainerSpecSecretArgs... secrets) {
            return secrets(List.of(secrets));
        }

        public Builder stopGracePeriod(@Nullable Output<String> stopGracePeriod) {
            $.stopGracePeriod = stopGracePeriod;
            return this;
        }

        public Builder stopGracePeriod(String stopGracePeriod) {
            return stopGracePeriod(Output.of(stopGracePeriod));
        }

        public Builder stopSignal(@Nullable Output<String> stopSignal) {
            $.stopSignal = stopSignal;
            return this;
        }

        public Builder stopSignal(String stopSignal) {
            return stopSignal(Output.of(stopSignal));
        }

        public Builder sysctl(@Nullable Output<Map<String,Object>> sysctl) {
            $.sysctl = sysctl;
            return this;
        }

        public Builder sysctl(Map<String,Object> sysctl) {
            return sysctl(Output.of(sysctl));
        }

        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        public Builder user(String user) {
            return user(Output.of(user));
        }

        public ServiceTaskSpecContainerSpecArgs build() {
            if ($.image == null) {
                throw new MissingRequiredPropertyException("ServiceTaskSpecContainerSpecArgs", "image");
            }
            return $;
        }
    }

}
