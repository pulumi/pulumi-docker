// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.docker.inputs.ProviderRegistryAuthArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * PEM-encoded content of Docker host CA certificate
     * 
     */
    @Import(name="caMaterial")
    private @Nullable Output<String> caMaterial;

    /**
     * @return PEM-encoded content of Docker host CA certificate
     * 
     */
    public Optional<Output<String>> caMaterial() {
        return Optional.ofNullable(this.caMaterial);
    }

    /**
     * PEM-encoded content of Docker client certificate
     * 
     */
    @Import(name="certMaterial")
    private @Nullable Output<String> certMaterial;

    /**
     * @return PEM-encoded content of Docker client certificate
     * 
     */
    public Optional<Output<String>> certMaterial() {
        return Optional.ofNullable(this.certMaterial);
    }

    /**
     * Path to directory with Docker TLS config
     * 
     */
    @Import(name="certPath")
    private @Nullable Output<String> certPath;

    /**
     * @return Path to directory with Docker TLS config
     * 
     */
    public Optional<Output<String>> certPath() {
        return Optional.ofNullable(this.certPath);
    }

    /**
     * The Docker daemon address
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return The Docker daemon address
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * PEM-encoded content of Docker client private key
     * 
     */
    @Import(name="keyMaterial")
    private @Nullable Output<String> keyMaterial;

    /**
     * @return PEM-encoded content of Docker client private key
     * 
     */
    public Optional<Output<String>> keyMaterial() {
        return Optional.ofNullable(this.keyMaterial);
    }

    @Import(name="registryAuth", json=true)
    private @Nullable Output<List<ProviderRegistryAuthArgs>> registryAuth;

    public Optional<Output<List<ProviderRegistryAuthArgs>>> registryAuth() {
        return Optional.ofNullable(this.registryAuth);
    }

    /**
     * Additional SSH option flags to be appended when using `ssh://` protocol
     * 
     */
    @Import(name="sshOpts", json=true)
    private @Nullable Output<List<String>> sshOpts;

    /**
     * @return Additional SSH option flags to be appended when using `ssh://` protocol
     * 
     */
    public Optional<Output<List<String>>> sshOpts() {
        return Optional.ofNullable(this.sshOpts);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.caMaterial = $.caMaterial;
        this.certMaterial = $.certMaterial;
        this.certPath = $.certPath;
        this.host = $.host;
        this.keyMaterial = $.keyMaterial;
        this.registryAuth = $.registryAuth;
        this.sshOpts = $.sshOpts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param caMaterial PEM-encoded content of Docker host CA certificate
         * 
         * @return builder
         * 
         */
        public Builder caMaterial(@Nullable Output<String> caMaterial) {
            $.caMaterial = caMaterial;
            return this;
        }

        /**
         * @param caMaterial PEM-encoded content of Docker host CA certificate
         * 
         * @return builder
         * 
         */
        public Builder caMaterial(String caMaterial) {
            return caMaterial(Output.of(caMaterial));
        }

        /**
         * @param certMaterial PEM-encoded content of Docker client certificate
         * 
         * @return builder
         * 
         */
        public Builder certMaterial(@Nullable Output<String> certMaterial) {
            $.certMaterial = certMaterial;
            return this;
        }

        /**
         * @param certMaterial PEM-encoded content of Docker client certificate
         * 
         * @return builder
         * 
         */
        public Builder certMaterial(String certMaterial) {
            return certMaterial(Output.of(certMaterial));
        }

        /**
         * @param certPath Path to directory with Docker TLS config
         * 
         * @return builder
         * 
         */
        public Builder certPath(@Nullable Output<String> certPath) {
            $.certPath = certPath;
            return this;
        }

        /**
         * @param certPath Path to directory with Docker TLS config
         * 
         * @return builder
         * 
         */
        public Builder certPath(String certPath) {
            return certPath(Output.of(certPath));
        }

        /**
         * @param host The Docker daemon address
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The Docker daemon address
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param keyMaterial PEM-encoded content of Docker client private key
         * 
         * @return builder
         * 
         */
        public Builder keyMaterial(@Nullable Output<String> keyMaterial) {
            $.keyMaterial = keyMaterial;
            return this;
        }

        /**
         * @param keyMaterial PEM-encoded content of Docker client private key
         * 
         * @return builder
         * 
         */
        public Builder keyMaterial(String keyMaterial) {
            return keyMaterial(Output.of(keyMaterial));
        }

        public Builder registryAuth(@Nullable Output<List<ProviderRegistryAuthArgs>> registryAuth) {
            $.registryAuth = registryAuth;
            return this;
        }

        public Builder registryAuth(List<ProviderRegistryAuthArgs> registryAuth) {
            return registryAuth(Output.of(registryAuth));
        }

        public Builder registryAuth(ProviderRegistryAuthArgs... registryAuth) {
            return registryAuth(List.of(registryAuth));
        }

        /**
         * @param sshOpts Additional SSH option flags to be appended when using `ssh://` protocol
         * 
         * @return builder
         * 
         */
        public Builder sshOpts(@Nullable Output<List<String>> sshOpts) {
            $.sshOpts = sshOpts;
            return this;
        }

        /**
         * @param sshOpts Additional SSH option flags to be appended when using `ssh://` protocol
         * 
         * @return builder
         * 
         */
        public Builder sshOpts(List<String> sshOpts) {
            return sshOpts(Output.of(sshOpts));
        }

        /**
         * @param sshOpts Additional SSH option flags to be appended when using `ssh://` protocol
         * 
         * @return builder
         * 
         */
        public Builder sshOpts(String... sshOpts) {
            return sshOpts(List.of(sshOpts));
        }

        public ProviderArgs build() {
            $.host = Codegen.stringProp("host").output().arg($.host).env("DOCKER_HOST").def("unix:///var/run/docker.sock").getNullable();
            return $;
        }
    }

}
