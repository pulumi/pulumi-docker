// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceTaskSpecContainerSpecConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceTaskSpecContainerSpecConfigArgs Empty = new ServiceTaskSpecContainerSpecConfigArgs();

    @Import(name="configId", required=true)
    private Output<String> configId;

    public Output<String> configId() {
        return this.configId;
    }

    @Import(name="configName")
    private @Nullable Output<String> configName;

    public Optional<Output<String>> configName() {
        return Optional.ofNullable(this.configName);
    }

    @Import(name="fileGid")
    private @Nullable Output<String> fileGid;

    public Optional<Output<String>> fileGid() {
        return Optional.ofNullable(this.fileGid);
    }

    @Import(name="fileMode")
    private @Nullable Output<Integer> fileMode;

    public Optional<Output<Integer>> fileMode() {
        return Optional.ofNullable(this.fileMode);
    }

    @Import(name="fileName", required=true)
    private Output<String> fileName;

    public Output<String> fileName() {
        return this.fileName;
    }

    @Import(name="fileUid")
    private @Nullable Output<String> fileUid;

    public Optional<Output<String>> fileUid() {
        return Optional.ofNullable(this.fileUid);
    }

    private ServiceTaskSpecContainerSpecConfigArgs() {}

    private ServiceTaskSpecContainerSpecConfigArgs(ServiceTaskSpecContainerSpecConfigArgs $) {
        this.configId = $.configId;
        this.configName = $.configName;
        this.fileGid = $.fileGid;
        this.fileMode = $.fileMode;
        this.fileName = $.fileName;
        this.fileUid = $.fileUid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceTaskSpecContainerSpecConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceTaskSpecContainerSpecConfigArgs $;

        public Builder() {
            $ = new ServiceTaskSpecContainerSpecConfigArgs();
        }

        public Builder(ServiceTaskSpecContainerSpecConfigArgs defaults) {
            $ = new ServiceTaskSpecContainerSpecConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder configId(Output<String> configId) {
            $.configId = configId;
            return this;
        }

        public Builder configId(String configId) {
            return configId(Output.of(configId));
        }

        public Builder configName(@Nullable Output<String> configName) {
            $.configName = configName;
            return this;
        }

        public Builder configName(String configName) {
            return configName(Output.of(configName));
        }

        public Builder fileGid(@Nullable Output<String> fileGid) {
            $.fileGid = fileGid;
            return this;
        }

        public Builder fileGid(String fileGid) {
            return fileGid(Output.of(fileGid));
        }

        public Builder fileMode(@Nullable Output<Integer> fileMode) {
            $.fileMode = fileMode;
            return this;
        }

        public Builder fileMode(Integer fileMode) {
            return fileMode(Output.of(fileMode));
        }

        public Builder fileName(Output<String> fileName) {
            $.fileName = fileName;
            return this;
        }

        public Builder fileName(String fileName) {
            return fileName(Output.of(fileName));
        }

        public Builder fileUid(@Nullable Output<String> fileUid) {
            $.fileUid = fileUid;
            return this;
        }

        public Builder fileUid(String fileUid) {
            return fileUid(Output.of(fileUid));
        }

        public ServiceTaskSpecContainerSpecConfigArgs build() {
            if ($.configId == null) {
                throw new MissingRequiredPropertyException("ServiceTaskSpecContainerSpecConfigArgs", "configId");
            }
            if ($.fileName == null) {
                throw new MissingRequiredPropertyException("ServiceTaskSpecContainerSpecConfigArgs", "fileName");
            }
            return $;
        }
    }

}
