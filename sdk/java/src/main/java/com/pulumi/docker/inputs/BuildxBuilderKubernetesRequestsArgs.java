// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BuildxBuilderKubernetesRequestsArgs extends com.pulumi.resources.ResourceArgs {

    public static final BuildxBuilderKubernetesRequestsArgs Empty = new BuildxBuilderKubernetesRequestsArgs();

    /**
     * CPU limit for the Kubernetes pod.
     * 
     */
    @Import(name="cpu")
    private @Nullable Output<String> cpu;

    /**
     * @return CPU limit for the Kubernetes pod.
     * 
     */
    public Optional<Output<String>> cpu() {
        return Optional.ofNullable(this.cpu);
    }

    /**
     * Ephemeral storage limit for the Kubernetes pod.
     * 
     */
    @Import(name="ephemeralStorage")
    private @Nullable Output<String> ephemeralStorage;

    /**
     * @return Ephemeral storage limit for the Kubernetes pod.
     * 
     */
    public Optional<Output<String>> ephemeralStorage() {
        return Optional.ofNullable(this.ephemeralStorage);
    }

    /**
     * Memory limit for the Kubernetes pod.
     * 
     */
    @Import(name="memory")
    private @Nullable Output<String> memory;

    /**
     * @return Memory limit for the Kubernetes pod.
     * 
     */
    public Optional<Output<String>> memory() {
        return Optional.ofNullable(this.memory);
    }

    private BuildxBuilderKubernetesRequestsArgs() {}

    private BuildxBuilderKubernetesRequestsArgs(BuildxBuilderKubernetesRequestsArgs $) {
        this.cpu = $.cpu;
        this.ephemeralStorage = $.ephemeralStorage;
        this.memory = $.memory;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BuildxBuilderKubernetesRequestsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BuildxBuilderKubernetesRequestsArgs $;

        public Builder() {
            $ = new BuildxBuilderKubernetesRequestsArgs();
        }

        public Builder(BuildxBuilderKubernetesRequestsArgs defaults) {
            $ = new BuildxBuilderKubernetesRequestsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cpu CPU limit for the Kubernetes pod.
         * 
         * @return builder
         * 
         */
        public Builder cpu(@Nullable Output<String> cpu) {
            $.cpu = cpu;
            return this;
        }

        /**
         * @param cpu CPU limit for the Kubernetes pod.
         * 
         * @return builder
         * 
         */
        public Builder cpu(String cpu) {
            return cpu(Output.of(cpu));
        }

        /**
         * @param ephemeralStorage Ephemeral storage limit for the Kubernetes pod.
         * 
         * @return builder
         * 
         */
        public Builder ephemeralStorage(@Nullable Output<String> ephemeralStorage) {
            $.ephemeralStorage = ephemeralStorage;
            return this;
        }

        /**
         * @param ephemeralStorage Ephemeral storage limit for the Kubernetes pod.
         * 
         * @return builder
         * 
         */
        public Builder ephemeralStorage(String ephemeralStorage) {
            return ephemeralStorage(Output.of(ephemeralStorage));
        }

        /**
         * @param memory Memory limit for the Kubernetes pod.
         * 
         * @return builder
         * 
         */
        public Builder memory(@Nullable Output<String> memory) {
            $.memory = memory;
            return this;
        }

        /**
         * @param memory Memory limit for the Kubernetes pod.
         * 
         * @return builder
         * 
         */
        public Builder memory(String memory) {
            return memory(Output.of(memory));
        }

        public BuildxBuilderKubernetesRequestsArgs build() {
            return $;
        }
    }

}
