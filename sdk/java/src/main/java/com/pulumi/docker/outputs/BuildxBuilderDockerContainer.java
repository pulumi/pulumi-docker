// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BuildxBuilderDockerContainer {
    /**
     * @return Sets the cgroup parent of the container if Docker is using the &#34;cgroupfs&#34; driver.
     * 
     */
    private @Nullable String cgroupParent;
    /**
     * @return Sets the CPU CFS scheduler period for the container.
     * 
     */
    private @Nullable String cpuPeriod;
    /**
     * @return Imposes a CPU CFS quota on the container.
     * 
     */
    private @Nullable String cpuQuota;
    /**
     * @return Configures CPU shares (relative weight) of the container.
     * 
     */
    private @Nullable String cpuShares;
    /**
     * @return Limits the set of CPU cores the container can use.
     * 
     */
    private @Nullable String cpusetCpus;
    /**
     * @return Limits the set of CPU memory nodes the container can use.
     * 
     */
    private @Nullable String cpusetMems;
    /**
     * @return Automatically load images to the Docker Engine image store. Defaults to `false`
     * 
     */
    private @Nullable Boolean defaultLoad;
    /**
     * @return Sets environment variables in the container.
     * 
     */
    private @Nullable Map<String,String> env;
    /**
     * @return Sets the BuildKit image to use for the container.
     * 
     */
    private @Nullable String image;
    /**
     * @return Sets the amount of memory the container can use.
     * 
     */
    private @Nullable String memory;
    /**
     * @return Sets the memory swap limit for the container.
     * 
     */
    private @Nullable String memorySwap;
    /**
     * @return Sets the network mode for the container.
     * 
     */
    private @Nullable String network;
    /**
     * @return Sets the container&#39;s restart policy.
     * 
     */
    private @Nullable String restartPolicy;

    private BuildxBuilderDockerContainer() {}
    /**
     * @return Sets the cgroup parent of the container if Docker is using the &#34;cgroupfs&#34; driver.
     * 
     */
    public Optional<String> cgroupParent() {
        return Optional.ofNullable(this.cgroupParent);
    }
    /**
     * @return Sets the CPU CFS scheduler period for the container.
     * 
     */
    public Optional<String> cpuPeriod() {
        return Optional.ofNullable(this.cpuPeriod);
    }
    /**
     * @return Imposes a CPU CFS quota on the container.
     * 
     */
    public Optional<String> cpuQuota() {
        return Optional.ofNullable(this.cpuQuota);
    }
    /**
     * @return Configures CPU shares (relative weight) of the container.
     * 
     */
    public Optional<String> cpuShares() {
        return Optional.ofNullable(this.cpuShares);
    }
    /**
     * @return Limits the set of CPU cores the container can use.
     * 
     */
    public Optional<String> cpusetCpus() {
        return Optional.ofNullable(this.cpusetCpus);
    }
    /**
     * @return Limits the set of CPU memory nodes the container can use.
     * 
     */
    public Optional<String> cpusetMems() {
        return Optional.ofNullable(this.cpusetMems);
    }
    /**
     * @return Automatically load images to the Docker Engine image store. Defaults to `false`
     * 
     */
    public Optional<Boolean> defaultLoad() {
        return Optional.ofNullable(this.defaultLoad);
    }
    /**
     * @return Sets environment variables in the container.
     * 
     */
    public Map<String,String> env() {
        return this.env == null ? Map.of() : this.env;
    }
    /**
     * @return Sets the BuildKit image to use for the container.
     * 
     */
    public Optional<String> image() {
        return Optional.ofNullable(this.image);
    }
    /**
     * @return Sets the amount of memory the container can use.
     * 
     */
    public Optional<String> memory() {
        return Optional.ofNullable(this.memory);
    }
    /**
     * @return Sets the memory swap limit for the container.
     * 
     */
    public Optional<String> memorySwap() {
        return Optional.ofNullable(this.memorySwap);
    }
    /**
     * @return Sets the network mode for the container.
     * 
     */
    public Optional<String> network() {
        return Optional.ofNullable(this.network);
    }
    /**
     * @return Sets the container&#39;s restart policy.
     * 
     */
    public Optional<String> restartPolicy() {
        return Optional.ofNullable(this.restartPolicy);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BuildxBuilderDockerContainer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String cgroupParent;
        private @Nullable String cpuPeriod;
        private @Nullable String cpuQuota;
        private @Nullable String cpuShares;
        private @Nullable String cpusetCpus;
        private @Nullable String cpusetMems;
        private @Nullable Boolean defaultLoad;
        private @Nullable Map<String,String> env;
        private @Nullable String image;
        private @Nullable String memory;
        private @Nullable String memorySwap;
        private @Nullable String network;
        private @Nullable String restartPolicy;
        public Builder() {}
        public Builder(BuildxBuilderDockerContainer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cgroupParent = defaults.cgroupParent;
    	      this.cpuPeriod = defaults.cpuPeriod;
    	      this.cpuQuota = defaults.cpuQuota;
    	      this.cpuShares = defaults.cpuShares;
    	      this.cpusetCpus = defaults.cpusetCpus;
    	      this.cpusetMems = defaults.cpusetMems;
    	      this.defaultLoad = defaults.defaultLoad;
    	      this.env = defaults.env;
    	      this.image = defaults.image;
    	      this.memory = defaults.memory;
    	      this.memorySwap = defaults.memorySwap;
    	      this.network = defaults.network;
    	      this.restartPolicy = defaults.restartPolicy;
        }

        @CustomType.Setter
        public Builder cgroupParent(@Nullable String cgroupParent) {

            this.cgroupParent = cgroupParent;
            return this;
        }
        @CustomType.Setter
        public Builder cpuPeriod(@Nullable String cpuPeriod) {

            this.cpuPeriod = cpuPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder cpuQuota(@Nullable String cpuQuota) {

            this.cpuQuota = cpuQuota;
            return this;
        }
        @CustomType.Setter
        public Builder cpuShares(@Nullable String cpuShares) {

            this.cpuShares = cpuShares;
            return this;
        }
        @CustomType.Setter
        public Builder cpusetCpus(@Nullable String cpusetCpus) {

            this.cpusetCpus = cpusetCpus;
            return this;
        }
        @CustomType.Setter
        public Builder cpusetMems(@Nullable String cpusetMems) {

            this.cpusetMems = cpusetMems;
            return this;
        }
        @CustomType.Setter
        public Builder defaultLoad(@Nullable Boolean defaultLoad) {

            this.defaultLoad = defaultLoad;
            return this;
        }
        @CustomType.Setter
        public Builder env(@Nullable Map<String,String> env) {

            this.env = env;
            return this;
        }
        @CustomType.Setter
        public Builder image(@Nullable String image) {

            this.image = image;
            return this;
        }
        @CustomType.Setter
        public Builder memory(@Nullable String memory) {

            this.memory = memory;
            return this;
        }
        @CustomType.Setter
        public Builder memorySwap(@Nullable String memorySwap) {

            this.memorySwap = memorySwap;
            return this;
        }
        @CustomType.Setter
        public Builder network(@Nullable String network) {

            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder restartPolicy(@Nullable String restartPolicy) {

            this.restartPolicy = restartPolicy;
            return this;
        }
        public BuildxBuilderDockerContainer build() {
            final var _resultValue = new BuildxBuilderDockerContainer();
            _resultValue.cgroupParent = cgroupParent;
            _resultValue.cpuPeriod = cpuPeriod;
            _resultValue.cpuQuota = cpuQuota;
            _resultValue.cpuShares = cpuShares;
            _resultValue.cpusetCpus = cpusetCpus;
            _resultValue.cpusetMems = cpusetMems;
            _resultValue.defaultLoad = defaultLoad;
            _resultValue.env = env;
            _resultValue.image = image;
            _resultValue.memory = memory;
            _resultValue.memorySwap = memorySwap;
            _resultValue.network = network;
            _resultValue.restartPolicy = restartPolicy;
            return _resultValue;
        }
    }
}
