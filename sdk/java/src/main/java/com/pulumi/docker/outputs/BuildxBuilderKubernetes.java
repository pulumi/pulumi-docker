// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.docker.outputs.BuildxBuilderKubernetesLimits;
import com.pulumi.docker.outputs.BuildxBuilderKubernetesQemu;
import com.pulumi.docker.outputs.BuildxBuilderKubernetesRequests;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BuildxBuilderKubernetes {
    /**
     * @return Sets additional annotations on the deployments and pods.
     * 
     */
    private @Nullable String annotations;
    /**
     * @return Automatically load images to the Docker Engine image store. Defaults to `false`
     * 
     */
    private @Nullable Boolean defaultLoad;
    /**
     * @return Sets the image to use for running BuildKit.
     * 
     */
    private @Nullable String image;
    /**
     * @return Sets additional labels on the deployments and pods.
     * 
     */
    private @Nullable String labels;
    /**
     * @return Resource limits for CPU, memory, and ephemeral storage.
     * 
     */
    private @Nullable BuildxBuilderKubernetesLimits limits;
    /**
     * @return Load-balancing strategy (sticky or random).
     * 
     */
    private @Nullable String loadbalance;
    /**
     * @return Sets the Kubernetes namespace.
     * 
     */
    private @Nullable String namespace;
    /**
     * @return Sets the pod&#39;s nodeSelector label(s).
     * 
     */
    private @Nullable String nodeselector;
    /**
     * @return QEMU emulation configuration.
     * 
     */
    private @Nullable BuildxBuilderKubernetesQemu qemu;
    /**
     * @return Sets the number of Pod replicas to create.
     * 
     */
    private @Nullable Integer replicas;
    /**
     * @return Resource requests for CPU, memory, and ephemeral storage.
     * 
     */
    private @Nullable BuildxBuilderKubernetesRequests requests;
    /**
     * @return Run the container as a non-root user.
     * 
     */
    private @Nullable Boolean rootless;
    /**
     * @return Sets the scheduler responsible for scheduling the pod.
     * 
     */
    private @Nullable String schedulername;
    /**
     * @return Sets the pod&#39;s serviceAccountName.
     * 
     */
    private @Nullable String serviceaccount;
    /**
     * @return Set the timeout limit for pod provisioning.
     * 
     */
    private @Nullable String timeout;
    /**
     * @return Configures the pod&#39;s taint toleration.
     * 
     */
    private @Nullable String tolerations;

    private BuildxBuilderKubernetes() {}
    /**
     * @return Sets additional annotations on the deployments and pods.
     * 
     */
    public Optional<String> annotations() {
        return Optional.ofNullable(this.annotations);
    }
    /**
     * @return Automatically load images to the Docker Engine image store. Defaults to `false`
     * 
     */
    public Optional<Boolean> defaultLoad() {
        return Optional.ofNullable(this.defaultLoad);
    }
    /**
     * @return Sets the image to use for running BuildKit.
     * 
     */
    public Optional<String> image() {
        return Optional.ofNullable(this.image);
    }
    /**
     * @return Sets additional labels on the deployments and pods.
     * 
     */
    public Optional<String> labels() {
        return Optional.ofNullable(this.labels);
    }
    /**
     * @return Resource limits for CPU, memory, and ephemeral storage.
     * 
     */
    public Optional<BuildxBuilderKubernetesLimits> limits() {
        return Optional.ofNullable(this.limits);
    }
    /**
     * @return Load-balancing strategy (sticky or random).
     * 
     */
    public Optional<String> loadbalance() {
        return Optional.ofNullable(this.loadbalance);
    }
    /**
     * @return Sets the Kubernetes namespace.
     * 
     */
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return Sets the pod&#39;s nodeSelector label(s).
     * 
     */
    public Optional<String> nodeselector() {
        return Optional.ofNullable(this.nodeselector);
    }
    /**
     * @return QEMU emulation configuration.
     * 
     */
    public Optional<BuildxBuilderKubernetesQemu> qemu() {
        return Optional.ofNullable(this.qemu);
    }
    /**
     * @return Sets the number of Pod replicas to create.
     * 
     */
    public Optional<Integer> replicas() {
        return Optional.ofNullable(this.replicas);
    }
    /**
     * @return Resource requests for CPU, memory, and ephemeral storage.
     * 
     */
    public Optional<BuildxBuilderKubernetesRequests> requests() {
        return Optional.ofNullable(this.requests);
    }
    /**
     * @return Run the container as a non-root user.
     * 
     */
    public Optional<Boolean> rootless() {
        return Optional.ofNullable(this.rootless);
    }
    /**
     * @return Sets the scheduler responsible for scheduling the pod.
     * 
     */
    public Optional<String> schedulername() {
        return Optional.ofNullable(this.schedulername);
    }
    /**
     * @return Sets the pod&#39;s serviceAccountName.
     * 
     */
    public Optional<String> serviceaccount() {
        return Optional.ofNullable(this.serviceaccount);
    }
    /**
     * @return Set the timeout limit for pod provisioning.
     * 
     */
    public Optional<String> timeout() {
        return Optional.ofNullable(this.timeout);
    }
    /**
     * @return Configures the pod&#39;s taint toleration.
     * 
     */
    public Optional<String> tolerations() {
        return Optional.ofNullable(this.tolerations);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BuildxBuilderKubernetes defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String annotations;
        private @Nullable Boolean defaultLoad;
        private @Nullable String image;
        private @Nullable String labels;
        private @Nullable BuildxBuilderKubernetesLimits limits;
        private @Nullable String loadbalance;
        private @Nullable String namespace;
        private @Nullable String nodeselector;
        private @Nullable BuildxBuilderKubernetesQemu qemu;
        private @Nullable Integer replicas;
        private @Nullable BuildxBuilderKubernetesRequests requests;
        private @Nullable Boolean rootless;
        private @Nullable String schedulername;
        private @Nullable String serviceaccount;
        private @Nullable String timeout;
        private @Nullable String tolerations;
        public Builder() {}
        public Builder(BuildxBuilderKubernetes defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.defaultLoad = defaults.defaultLoad;
    	      this.image = defaults.image;
    	      this.labels = defaults.labels;
    	      this.limits = defaults.limits;
    	      this.loadbalance = defaults.loadbalance;
    	      this.namespace = defaults.namespace;
    	      this.nodeselector = defaults.nodeselector;
    	      this.qemu = defaults.qemu;
    	      this.replicas = defaults.replicas;
    	      this.requests = defaults.requests;
    	      this.rootless = defaults.rootless;
    	      this.schedulername = defaults.schedulername;
    	      this.serviceaccount = defaults.serviceaccount;
    	      this.timeout = defaults.timeout;
    	      this.tolerations = defaults.tolerations;
        }

        @CustomType.Setter
        public Builder annotations(@Nullable String annotations) {

            this.annotations = annotations;
            return this;
        }
        @CustomType.Setter
        public Builder defaultLoad(@Nullable Boolean defaultLoad) {

            this.defaultLoad = defaultLoad;
            return this;
        }
        @CustomType.Setter
        public Builder image(@Nullable String image) {

            this.image = image;
            return this;
        }
        @CustomType.Setter
        public Builder labels(@Nullable String labels) {

            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder limits(@Nullable BuildxBuilderKubernetesLimits limits) {

            this.limits = limits;
            return this;
        }
        @CustomType.Setter
        public Builder loadbalance(@Nullable String loadbalance) {

            this.loadbalance = loadbalance;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {

            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder nodeselector(@Nullable String nodeselector) {

            this.nodeselector = nodeselector;
            return this;
        }
        @CustomType.Setter
        public Builder qemu(@Nullable BuildxBuilderKubernetesQemu qemu) {

            this.qemu = qemu;
            return this;
        }
        @CustomType.Setter
        public Builder replicas(@Nullable Integer replicas) {

            this.replicas = replicas;
            return this;
        }
        @CustomType.Setter
        public Builder requests(@Nullable BuildxBuilderKubernetesRequests requests) {

            this.requests = requests;
            return this;
        }
        @CustomType.Setter
        public Builder rootless(@Nullable Boolean rootless) {

            this.rootless = rootless;
            return this;
        }
        @CustomType.Setter
        public Builder schedulername(@Nullable String schedulername) {

            this.schedulername = schedulername;
            return this;
        }
        @CustomType.Setter
        public Builder serviceaccount(@Nullable String serviceaccount) {

            this.serviceaccount = serviceaccount;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(@Nullable String timeout) {

            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder tolerations(@Nullable String tolerations) {

            this.tolerations = tolerations;
            return this;
        }
        public BuildxBuilderKubernetes build() {
            final var _resultValue = new BuildxBuilderKubernetes();
            _resultValue.annotations = annotations;
            _resultValue.defaultLoad = defaultLoad;
            _resultValue.image = image;
            _resultValue.labels = labels;
            _resultValue.limits = limits;
            _resultValue.loadbalance = loadbalance;
            _resultValue.namespace = namespace;
            _resultValue.nodeselector = nodeselector;
            _resultValue.qemu = qemu;
            _resultValue.replicas = replicas;
            _resultValue.requests = requests;
            _resultValue.rootless = rootless;
            _resultValue.schedulername = schedulername;
            _resultValue.serviceaccount = serviceaccount;
            _resultValue.timeout = timeout;
            _resultValue.tolerations = tolerations;
            return _resultValue;
        }
    }
}
