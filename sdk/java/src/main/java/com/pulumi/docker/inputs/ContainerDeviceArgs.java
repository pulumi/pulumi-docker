// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerDeviceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerDeviceArgs Empty = new ContainerDeviceArgs();

    /**
     * The path in the container where the device will be bound.
     * 
     */
    @Import(name="containerPath")
    private @Nullable Output<String> containerPath;

    /**
     * @return The path in the container where the device will be bound.
     * 
     */
    public Optional<Output<String>> containerPath() {
        return Optional.ofNullable(this.containerPath);
    }

    /**
     * The path on the host where the device is located.
     * 
     */
    @Import(name="hostPath", required=true)
    private Output<String> hostPath;

    /**
     * @return The path on the host where the device is located.
     * 
     */
    public Output<String> hostPath() {
        return this.hostPath;
    }

    /**
     * The cgroup permissions given to the container to access the device. Defaults to `rwm`.
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<String> permissions;

    /**
     * @return The cgroup permissions given to the container to access the device. Defaults to `rwm`.
     * 
     */
    public Optional<Output<String>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    private ContainerDeviceArgs() {}

    private ContainerDeviceArgs(ContainerDeviceArgs $) {
        this.containerPath = $.containerPath;
        this.hostPath = $.hostPath;
        this.permissions = $.permissions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerDeviceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerDeviceArgs $;

        public Builder() {
            $ = new ContainerDeviceArgs();
        }

        public Builder(ContainerDeviceArgs defaults) {
            $ = new ContainerDeviceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param containerPath The path in the container where the device will be bound.
         * 
         * @return builder
         * 
         */
        public Builder containerPath(@Nullable Output<String> containerPath) {
            $.containerPath = containerPath;
            return this;
        }

        /**
         * @param containerPath The path in the container where the device will be bound.
         * 
         * @return builder
         * 
         */
        public Builder containerPath(String containerPath) {
            return containerPath(Output.of(containerPath));
        }

        /**
         * @param hostPath The path on the host where the device is located.
         * 
         * @return builder
         * 
         */
        public Builder hostPath(Output<String> hostPath) {
            $.hostPath = hostPath;
            return this;
        }

        /**
         * @param hostPath The path on the host where the device is located.
         * 
         * @return builder
         * 
         */
        public Builder hostPath(String hostPath) {
            return hostPath(Output.of(hostPath));
        }

        /**
         * @param permissions The cgroup permissions given to the container to access the device. Defaults to `rwm`.
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<String> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions The cgroup permissions given to the container to access the device. Defaults to `rwm`.
         * 
         * @return builder
         * 
         */
        public Builder permissions(String permissions) {
            return permissions(Output.of(permissions));
        }

        public ContainerDeviceArgs build() {
            if ($.hostPath == null) {
                throw new MissingRequiredPropertyException("ContainerDeviceArgs", "hostPath");
            }
            return $;
        }
    }

}
