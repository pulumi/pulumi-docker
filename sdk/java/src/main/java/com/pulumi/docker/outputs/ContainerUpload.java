// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ContainerUpload {
    /**
     * @return Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text. Conflicts with `content_base64` &amp; `source`
     * 
     */
    private @Nullable String content;
    private @Nullable String contentBase64;
    /**
     * @return If `true`, the file will be uploaded with user executable permission. Defaults to `false`.
     * 
     */
    private @Nullable Boolean executable;
    /**
     * @return Path to the file in the container where is upload goes to
     * 
     */
    private String file;
    /**
     * @return A filename that references a file which will be uploaded as the object content. This allows for large file uploads that do not get stored in state. Conflicts with `content` &amp; `content_base64`
     * 
     */
    private @Nullable String source;
    /**
     * @return If using `source`, this will force an update if the file content has updated but the filename has not.
     * 
     */
    private @Nullable String sourceHash;

    private ContainerUpload() {}
    /**
     * @return Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text. Conflicts with `content_base64` &amp; `source`
     * 
     */
    public Optional<String> content() {
        return Optional.ofNullable(this.content);
    }
    public Optional<String> contentBase64() {
        return Optional.ofNullable(this.contentBase64);
    }
    /**
     * @return If `true`, the file will be uploaded with user executable permission. Defaults to `false`.
     * 
     */
    public Optional<Boolean> executable() {
        return Optional.ofNullable(this.executable);
    }
    /**
     * @return Path to the file in the container where is upload goes to
     * 
     */
    public String file() {
        return this.file;
    }
    /**
     * @return A filename that references a file which will be uploaded as the object content. This allows for large file uploads that do not get stored in state. Conflicts with `content` &amp; `content_base64`
     * 
     */
    public Optional<String> source() {
        return Optional.ofNullable(this.source);
    }
    /**
     * @return If using `source`, this will force an update if the file content has updated but the filename has not.
     * 
     */
    public Optional<String> sourceHash() {
        return Optional.ofNullable(this.sourceHash);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerUpload defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String content;
        private @Nullable String contentBase64;
        private @Nullable Boolean executable;
        private String file;
        private @Nullable String source;
        private @Nullable String sourceHash;
        public Builder() {}
        public Builder(ContainerUpload defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.content = defaults.content;
    	      this.contentBase64 = defaults.contentBase64;
    	      this.executable = defaults.executable;
    	      this.file = defaults.file;
    	      this.source = defaults.source;
    	      this.sourceHash = defaults.sourceHash;
        }

        @CustomType.Setter
        public Builder content(@Nullable String content) {
            this.content = content;
            return this;
        }
        @CustomType.Setter
        public Builder contentBase64(@Nullable String contentBase64) {
            this.contentBase64 = contentBase64;
            return this;
        }
        @CustomType.Setter
        public Builder executable(@Nullable Boolean executable) {
            this.executable = executable;
            return this;
        }
        @CustomType.Setter
        public Builder file(String file) {
            this.file = Objects.requireNonNull(file);
            return this;
        }
        @CustomType.Setter
        public Builder source(@Nullable String source) {
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder sourceHash(@Nullable String sourceHash) {
            this.sourceHash = sourceHash;
            return this;
        }
        public ContainerUpload build() {
            final var _resultValue = new ContainerUpload();
            _resultValue.content = content;
            _resultValue.contentBase64 = contentBase64;
            _resultValue.executable = executable;
            _resultValue.file = file;
            _resultValue.source = source;
            _resultValue.sourceHash = sourceHash;
            return _resultValue;
        }
    }
}
