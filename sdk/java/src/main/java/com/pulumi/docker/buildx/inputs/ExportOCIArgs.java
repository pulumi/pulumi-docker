// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.buildx.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.docker.buildx.enums.CompressionType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExportOCIArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExportOCIArgs Empty = new ExportOCIArgs();

    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The compression type to use.
     * 
     */
    @Import(name="compression")
    private @Nullable Output<CompressionType> compression;

    /**
     * @return The compression type to use.
     * 
     */
    public Optional<Output<CompressionType>> compression() {
        return Optional.ofNullable(this.compression);
    }

    /**
     * Compression level from 0 to 22.
     * 
     */
    @Import(name="compressionLevel")
    private @Nullable Output<Integer> compressionLevel;

    /**
     * @return Compression level from 0 to 22.
     * 
     */
    public Optional<Output<Integer>> compressionLevel() {
        return Optional.ofNullable(this.compressionLevel);
    }

    /**
     * The local export path.
     * 
     */
    @Import(name="dest")
    private @Nullable Output<String> dest;

    /**
     * @return The local export path.
     * 
     */
    public Optional<Output<String>> dest() {
        return Optional.ofNullable(this.dest);
    }

    /**
     * Forcefully apply compression.
     * 
     */
    @Import(name="forceCompression")
    private @Nullable Output<Boolean> forceCompression;

    /**
     * @return Forcefully apply compression.
     * 
     */
    public Optional<Output<Boolean>> forceCompression() {
        return Optional.ofNullable(this.forceCompression);
    }

    /**
     * Specify images names to export. This is overridden if tags are already specified.
     * 
     */
    @Import(name="names")
    private @Nullable Output<List<String>> names;

    /**
     * @return Specify images names to export. This is overridden if tags are already specified.
     * 
     */
    public Optional<Output<List<String>>> names() {
        return Optional.ofNullable(this.names);
    }

    /**
     * Use OCI media types in exporter manifests.
     * 
     */
    @Import(name="ociMediaTypes")
    private @Nullable Output<Boolean> ociMediaTypes;

    /**
     * @return Use OCI media types in exporter manifests.
     * 
     */
    public Optional<Output<Boolean>> ociMediaTypes() {
        return Optional.ofNullable(this.ociMediaTypes);
    }

    /**
     * Bundle the output into a tarball layout.
     * 
     */
    @Import(name="tar")
    private @Nullable Output<Boolean> tar;

    /**
     * @return Bundle the output into a tarball layout.
     * 
     */
    public Optional<Output<Boolean>> tar() {
        return Optional.ofNullable(this.tar);
    }

    private ExportOCIArgs() {}

    private ExportOCIArgs(ExportOCIArgs $) {
        this.annotations = $.annotations;
        this.compression = $.compression;
        this.compressionLevel = $.compressionLevel;
        this.dest = $.dest;
        this.forceCompression = $.forceCompression;
        this.names = $.names;
        this.ociMediaTypes = $.ociMediaTypes;
        this.tar = $.tar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExportOCIArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExportOCIArgs $;

        public Builder() {
            $ = new ExportOCIArgs();
        }

        public Builder(ExportOCIArgs defaults) {
            $ = new ExportOCIArgs(Objects.requireNonNull(defaults));
        }

        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param compression The compression type to use.
         * 
         * @return builder
         * 
         */
        public Builder compression(@Nullable Output<CompressionType> compression) {
            $.compression = compression;
            return this;
        }

        /**
         * @param compression The compression type to use.
         * 
         * @return builder
         * 
         */
        public Builder compression(CompressionType compression) {
            return compression(Output.of(compression));
        }

        /**
         * @param compressionLevel Compression level from 0 to 22.
         * 
         * @return builder
         * 
         */
        public Builder compressionLevel(@Nullable Output<Integer> compressionLevel) {
            $.compressionLevel = compressionLevel;
            return this;
        }

        /**
         * @param compressionLevel Compression level from 0 to 22.
         * 
         * @return builder
         * 
         */
        public Builder compressionLevel(Integer compressionLevel) {
            return compressionLevel(Output.of(compressionLevel));
        }

        /**
         * @param dest The local export path.
         * 
         * @return builder
         * 
         */
        public Builder dest(@Nullable Output<String> dest) {
            $.dest = dest;
            return this;
        }

        /**
         * @param dest The local export path.
         * 
         * @return builder
         * 
         */
        public Builder dest(String dest) {
            return dest(Output.of(dest));
        }

        /**
         * @param forceCompression Forcefully apply compression.
         * 
         * @return builder
         * 
         */
        public Builder forceCompression(@Nullable Output<Boolean> forceCompression) {
            $.forceCompression = forceCompression;
            return this;
        }

        /**
         * @param forceCompression Forcefully apply compression.
         * 
         * @return builder
         * 
         */
        public Builder forceCompression(Boolean forceCompression) {
            return forceCompression(Output.of(forceCompression));
        }

        /**
         * @param names Specify images names to export. This is overridden if tags are already specified.
         * 
         * @return builder
         * 
         */
        public Builder names(@Nullable Output<List<String>> names) {
            $.names = names;
            return this;
        }

        /**
         * @param names Specify images names to export. This is overridden if tags are already specified.
         * 
         * @return builder
         * 
         */
        public Builder names(List<String> names) {
            return names(Output.of(names));
        }

        /**
         * @param names Specify images names to export. This is overridden if tags are already specified.
         * 
         * @return builder
         * 
         */
        public Builder names(String... names) {
            return names(List.of(names));
        }

        /**
         * @param ociMediaTypes Use OCI media types in exporter manifests.
         * 
         * @return builder
         * 
         */
        public Builder ociMediaTypes(@Nullable Output<Boolean> ociMediaTypes) {
            $.ociMediaTypes = ociMediaTypes;
            return this;
        }

        /**
         * @param ociMediaTypes Use OCI media types in exporter manifests.
         * 
         * @return builder
         * 
         */
        public Builder ociMediaTypes(Boolean ociMediaTypes) {
            return ociMediaTypes(Output.of(ociMediaTypes));
        }

        /**
         * @param tar Bundle the output into a tarball layout.
         * 
         * @return builder
         * 
         */
        public Builder tar(@Nullable Output<Boolean> tar) {
            $.tar = tar;
            return this;
        }

        /**
         * @param tar Bundle the output into a tarball layout.
         * 
         * @return builder
         * 
         */
        public Builder tar(Boolean tar) {
            return tar(Output.of(tar));
        }

        public ExportOCIArgs build() {
            $.compression = Codegen.objectProp("compression", CompressionType.class).output().arg($.compression).def(CompressionType.Gzip).getNullable();
            $.compressionLevel = Codegen.integerProp("compressionLevel").output().arg($.compressionLevel).def(0).getNullable();
            $.forceCompression = Codegen.booleanProp("forceCompression").output().arg($.forceCompression).def(false).getNullable();
            $.ociMediaTypes = Codegen.booleanProp("ociMediaTypes").output().arg($.ociMediaTypes).def(true).getNullable();
            $.tar = Codegen.booleanProp("tar").output().arg($.tar).def(true).getNullable();
            return $;
        }
    }

}
