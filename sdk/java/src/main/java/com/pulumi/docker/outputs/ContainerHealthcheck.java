// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ContainerHealthcheck {
    /**
     * @return Time between running the check (ms|s|m|h). Defaults to `0s`.
     * 
     */
    private @Nullable String interval;
    /**
     * @return Consecutive failures needed to report unhealthy. Defaults to `0`.
     * 
     */
    private @Nullable Integer retries;
    /**
     * @return Start period for the container to initialize before counting retries towards unstable (ms|s|m|h). Defaults to `0s`.
     * 
     */
    private @Nullable String startPeriod;
    /**
     * @return Command to run to check health. For example, to run `curl -f localhost/health` set the command to be `[&#34;CMD&#34;, &#34;curl&#34;, &#34;-f&#34;, &#34;localhost/health&#34;]`.
     * 
     */
    private List<String> tests;
    /**
     * @return Maximum time to allow one check to run (ms|s|m|h). Defaults to `0s`.
     * 
     */
    private @Nullable String timeout;

    private ContainerHealthcheck() {}
    /**
     * @return Time between running the check (ms|s|m|h). Defaults to `0s`.
     * 
     */
    public Optional<String> interval() {
        return Optional.ofNullable(this.interval);
    }
    /**
     * @return Consecutive failures needed to report unhealthy. Defaults to `0`.
     * 
     */
    public Optional<Integer> retries() {
        return Optional.ofNullable(this.retries);
    }
    /**
     * @return Start period for the container to initialize before counting retries towards unstable (ms|s|m|h). Defaults to `0s`.
     * 
     */
    public Optional<String> startPeriod() {
        return Optional.ofNullable(this.startPeriod);
    }
    /**
     * @return Command to run to check health. For example, to run `curl -f localhost/health` set the command to be `[&#34;CMD&#34;, &#34;curl&#34;, &#34;-f&#34;, &#34;localhost/health&#34;]`.
     * 
     */
    public List<String> tests() {
        return this.tests;
    }
    /**
     * @return Maximum time to allow one check to run (ms|s|m|h). Defaults to `0s`.
     * 
     */
    public Optional<String> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerHealthcheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String interval;
        private @Nullable Integer retries;
        private @Nullable String startPeriod;
        private List<String> tests;
        private @Nullable String timeout;
        public Builder() {}
        public Builder(ContainerHealthcheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.interval = defaults.interval;
    	      this.retries = defaults.retries;
    	      this.startPeriod = defaults.startPeriod;
    	      this.tests = defaults.tests;
    	      this.timeout = defaults.timeout;
        }

        @CustomType.Setter
        public Builder interval(@Nullable String interval) {

            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder retries(@Nullable Integer retries) {

            this.retries = retries;
            return this;
        }
        @CustomType.Setter
        public Builder startPeriod(@Nullable String startPeriod) {

            this.startPeriod = startPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder tests(List<String> tests) {
            if (tests == null) {
              throw new MissingRequiredPropertyException("ContainerHealthcheck", "tests");
            }
            this.tests = tests;
            return this;
        }
        public Builder tests(String... tests) {
            return tests(List.of(tests));
        }
        @CustomType.Setter
        public Builder timeout(@Nullable String timeout) {

            this.timeout = timeout;
            return this;
        }
        public ContainerHealthcheck build() {
            final var _resultValue = new ContainerHealthcheck();
            _resultValue.interval = interval;
            _resultValue.retries = retries;
            _resultValue.startPeriod = startPeriod;
            _resultValue.tests = tests;
            _resultValue.timeout = timeout;
            return _resultValue;
        }
    }
}
