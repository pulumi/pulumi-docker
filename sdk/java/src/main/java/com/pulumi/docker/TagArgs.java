// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TagArgs extends com.pulumi.resources.ResourceArgs {

    public static final TagArgs Empty = new TagArgs();

    /**
     * Name of the source image.
     * 
     */
    @Import(name="sourceImage", required=true)
    private Output<String> sourceImage;

    /**
     * @return Name of the source image.
     * 
     */
    public Output<String> sourceImage() {
        return this.sourceImage;
    }

    /**
     * List of values which cause the tag to be (re)created. This is useful for triggering a new tag when the source image changes.
     * 
     */
    @Import(name="tagTriggers")
    private @Nullable Output<List<String>> tagTriggers;

    /**
     * @return List of values which cause the tag to be (re)created. This is useful for triggering a new tag when the source image changes.
     * 
     */
    public Optional<Output<List<String>>> tagTriggers() {
        return Optional.ofNullable(this.tagTriggers);
    }

    /**
     * Name of the target image.
     * 
     */
    @Import(name="targetImage", required=true)
    private Output<String> targetImage;

    /**
     * @return Name of the target image.
     * 
     */
    public Output<String> targetImage() {
        return this.targetImage;
    }

    private TagArgs() {}

    private TagArgs(TagArgs $) {
        this.sourceImage = $.sourceImage;
        this.tagTriggers = $.tagTriggers;
        this.targetImage = $.targetImage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TagArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TagArgs $;

        public Builder() {
            $ = new TagArgs();
        }

        public Builder(TagArgs defaults) {
            $ = new TagArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param sourceImage Name of the source image.
         * 
         * @return builder
         * 
         */
        public Builder sourceImage(Output<String> sourceImage) {
            $.sourceImage = sourceImage;
            return this;
        }

        /**
         * @param sourceImage Name of the source image.
         * 
         * @return builder
         * 
         */
        public Builder sourceImage(String sourceImage) {
            return sourceImage(Output.of(sourceImage));
        }

        /**
         * @param tagTriggers List of values which cause the tag to be (re)created. This is useful for triggering a new tag when the source image changes.
         * 
         * @return builder
         * 
         */
        public Builder tagTriggers(@Nullable Output<List<String>> tagTriggers) {
            $.tagTriggers = tagTriggers;
            return this;
        }

        /**
         * @param tagTriggers List of values which cause the tag to be (re)created. This is useful for triggering a new tag when the source image changes.
         * 
         * @return builder
         * 
         */
        public Builder tagTriggers(List<String> tagTriggers) {
            return tagTriggers(Output.of(tagTriggers));
        }

        /**
         * @param tagTriggers List of values which cause the tag to be (re)created. This is useful for triggering a new tag when the source image changes.
         * 
         * @return builder
         * 
         */
        public Builder tagTriggers(String... tagTriggers) {
            return tagTriggers(List.of(tagTriggers));
        }

        /**
         * @param targetImage Name of the target image.
         * 
         * @return builder
         * 
         */
        public Builder targetImage(Output<String> targetImage) {
            $.targetImage = targetImage;
            return this;
        }

        /**
         * @param targetImage Name of the target image.
         * 
         * @return builder
         * 
         */
        public Builder targetImage(String targetImage) {
            return targetImage(Output.of(targetImage));
        }

        public TagArgs build() {
            if ($.sourceImage == null) {
                throw new MissingRequiredPropertyException("TagArgs", "sourceImage");
            }
            if ($.targetImage == null) {
                throw new MissingRequiredPropertyException("TagArgs", "targetImage");
            }
            return $;
        }
    }

}
