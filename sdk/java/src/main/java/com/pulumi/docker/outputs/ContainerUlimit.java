// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class ContainerUlimit {
    /**
     * @return The hard limit
     * 
     */
    private final Integer hard;
    /**
     * @return The name of the ulimit
     * 
     */
    private final String name;
    /**
     * @return The soft limit
     * 
     */
    private final Integer soft;

    @CustomType.Constructor
    private ContainerUlimit(
        @CustomType.Parameter("hard") Integer hard,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("soft") Integer soft) {
        this.hard = hard;
        this.name = name;
        this.soft = soft;
    }

    /**
     * @return The hard limit
     * 
     */
    public Integer hard() {
        return this.hard;
    }
    /**
     * @return The name of the ulimit
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The soft limit
     * 
     */
    public Integer soft() {
        return this.soft;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerUlimit defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer hard;
        private String name;
        private Integer soft;

        public Builder() {
    	      // Empty
        }

        public Builder(ContainerUlimit defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hard = defaults.hard;
    	      this.name = defaults.name;
    	      this.soft = defaults.soft;
        }

        public Builder hard(Integer hard) {
            this.hard = Objects.requireNonNull(hard);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder soft(Integer soft) {
            this.soft = Objects.requireNonNull(soft);
            return this;
        }        public ContainerUlimit build() {
            return new ContainerUlimit(hard, name, soft);
        }
    }
}
