// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.docker.inputs.RegistryArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageArgs Empty = new ImageArgs();

    /**
     * The path to the build context to use.
     * 
     */
    @Import(name="context")
    private @Nullable Output<String> context;

    /**
     * @return The path to the build context to use.
     * 
     */
    public Optional<Output<String>> context() {
        return Optional.ofNullable(this.context);
    }

    /**
     * The path to the Dockerfile to use.
     * 
     */
    @Import(name="dockerfile")
    private @Nullable Output<String> dockerfile;

    /**
     * @return The path to the Dockerfile to use.
     * 
     */
    public Optional<Output<String>> dockerfile() {
        return Optional.ofNullable(this.dockerfile);
    }

    /**
     * The image name
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The image name
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The registry to push the image to
     * 
     */
    @Import(name="registry", required=true)
    private Output<RegistryArgs> registry;

    /**
     * @return The registry to push the image to
     * 
     */
    public Output<RegistryArgs> registry() {
        return this.registry;
    }

    /**
     * The URL of the registry server hosting the image.
     * 
     */
    @Import(name="registryURL", required=true)
    private Output<String> registryURL;

    /**
     * @return The URL of the registry server hosting the image.
     * 
     */
    public Output<String> registryURL() {
        return this.registryURL;
    }

    /**
     * The image tag.
     * 
     */
    @Import(name="tag")
    private @Nullable Output<String> tag;

    /**
     * @return The image tag.
     * 
     */
    public Optional<Output<String>> tag() {
        return Optional.ofNullable(this.tag);
    }

    private ImageArgs() {}

    private ImageArgs(ImageArgs $) {
        this.context = $.context;
        this.dockerfile = $.dockerfile;
        this.name = $.name;
        this.registry = $.registry;
        this.registryURL = $.registryURL;
        this.tag = $.tag;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageArgs $;

        public Builder() {
            $ = new ImageArgs();
        }

        public Builder(ImageArgs defaults) {
            $ = new ImageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param context The path to the build context to use.
         * 
         * @return builder
         * 
         */
        public Builder context(@Nullable Output<String> context) {
            $.context = context;
            return this;
        }

        /**
         * @param context The path to the build context to use.
         * 
         * @return builder
         * 
         */
        public Builder context(String context) {
            return context(Output.of(context));
        }

        /**
         * @param dockerfile The path to the Dockerfile to use.
         * 
         * @return builder
         * 
         */
        public Builder dockerfile(@Nullable Output<String> dockerfile) {
            $.dockerfile = dockerfile;
            return this;
        }

        /**
         * @param dockerfile The path to the Dockerfile to use.
         * 
         * @return builder
         * 
         */
        public Builder dockerfile(String dockerfile) {
            return dockerfile(Output.of(dockerfile));
        }

        /**
         * @param name The image name
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The image name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param registry The registry to push the image to
         * 
         * @return builder
         * 
         */
        public Builder registry(Output<RegistryArgs> registry) {
            $.registry = registry;
            return this;
        }

        /**
         * @param registry The registry to push the image to
         * 
         * @return builder
         * 
         */
        public Builder registry(RegistryArgs registry) {
            return registry(Output.of(registry));
        }

        /**
         * @param registryURL The URL of the registry server hosting the image.
         * 
         * @return builder
         * 
         */
        public Builder registryURL(Output<String> registryURL) {
            $.registryURL = registryURL;
            return this;
        }

        /**
         * @param registryURL The URL of the registry server hosting the image.
         * 
         * @return builder
         * 
         */
        public Builder registryURL(String registryURL) {
            return registryURL(Output.of(registryURL));
        }

        /**
         * @param tag The image tag.
         * 
         * @return builder
         * 
         */
        public Builder tag(@Nullable Output<String> tag) {
            $.tag = tag;
            return this;
        }

        /**
         * @param tag The image tag.
         * 
         * @return builder
         * 
         */
        public Builder tag(String tag) {
            return tag(Output.of(tag));
        }

        public ImageArgs build() {
            $.context = Codegen.stringProp("context").output().arg($.context).def(".").getNullable();
            $.dockerfile = Codegen.stringProp("dockerfile").output().arg($.dockerfile).def("Dockerfile").getNullable();
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.registry = Objects.requireNonNull($.registry, "expected parameter 'registry' to be non-null");
            $.registryURL = Objects.requireNonNull($.registryURL, "expected parameter 'registryURL' to be non-null");
            $.tag = Codegen.stringProp("tag").output().arg($.tag).def("latest").getNullable();
            return $;
        }
    }

}
