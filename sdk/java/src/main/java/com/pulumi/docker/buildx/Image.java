// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.buildx;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.docker.Utilities;
import com.pulumi.docker.buildx.ImageArgs;
import com.pulumi.docker.buildx.enums.Platform;
import com.pulumi.docker.buildx.outputs.BuildContext;
import com.pulumi.docker.buildx.outputs.BuilderConfig;
import com.pulumi.docker.buildx.outputs.CacheFromEntry;
import com.pulumi.docker.buildx.outputs.CacheToEntry;
import com.pulumi.docker.buildx.outputs.Dockerfile;
import com.pulumi.docker.buildx.outputs.ExportEntry;
import com.pulumi.docker.buildx.outputs.RegistryAuth;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A Docker image built using buildx -- Docker&#39;s interface to the improved
 * BuildKit backend.
 * 
 * **This resource is experimental and subject to change.**
 * 
 * API types are unstable. Subsequent releases _may_ require manual edits
 * to your state file(s) in order to adopt API changes.
 * 
 * Only use this resource if you understand and accept the risks.
 * 
 * ## Example Usage
 * ### Multi-platform image
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.docker.buildx.Image;
 * import com.pulumi.docker.buildx.ImageArgs;
 * import com.pulumi.docker.buildx.inputs.BuildContextArgs;
 * import com.pulumi.docker.buildx.inputs.DockerfileArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var image = new Image(&#34;image&#34;, ImageArgs.builder()        
 *             .context(BuildContextArgs.builder()
 *                 .location(&#34;app&#34;)
 *                 .build())
 *             .dockerfile(DockerfileArgs.builder()
 *                 .location(&#34;app/Dockerfile&#34;)
 *                 .build())
 *             .platforms(            
 *                 &#34;plan9/amd64&#34;,
 *                 &#34;plan9/386&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Registry export
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.docker.buildx.Image;
 * import com.pulumi.docker.buildx.ImageArgs;
 * import com.pulumi.docker.buildx.inputs.BuildContextArgs;
 * import com.pulumi.docker.buildx.inputs.DockerfileArgs;
 * import com.pulumi.docker.buildx.inputs.ExportEntryArgs;
 * import com.pulumi.docker.buildx.inputs.ExportRegistryArgs;
 * import com.pulumi.docker.buildx.inputs.RegistryAuthArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var image = new Image(&#34;image&#34;, ImageArgs.builder()        
 *             .context(BuildContextArgs.builder()
 *                 .location(&#34;app&#34;)
 *                 .build())
 *             .dockerfile(DockerfileArgs.builder()
 *                 .location(&#34;app/Dockerfile&#34;)
 *                 .build())
 *             .exports(ExportEntryArgs.builder()
 *                 .registry(ExportRegistryArgs.builder()
 *                     .ociMediaTypes(true)
 *                     .build())
 *                 .build())
 *             .registries(RegistryAuthArgs.builder()
 *                 .address(&#34;docker.io&#34;)
 *                 .password(dockerHubPassword)
 *                 .username(&#34;pulumibot&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Caching
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.docker.buildx.Image;
 * import com.pulumi.docker.buildx.ImageArgs;
 * import com.pulumi.docker.buildx.inputs.CacheFromEntryArgs;
 * import com.pulumi.docker.buildx.inputs.CacheFromLocalArgs;
 * import com.pulumi.docker.buildx.inputs.CacheToEntryArgs;
 * import com.pulumi.docker.buildx.inputs.CacheToLocalArgs;
 * import com.pulumi.docker.buildx.inputs.BuildContextArgs;
 * import com.pulumi.docker.buildx.inputs.DockerfileArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var image = new Image(&#34;image&#34;, ImageArgs.builder()        
 *             .cacheFrom(CacheFromEntryArgs.builder()
 *                 .local(CacheFromLocalArgs.builder()
 *                     .src(&#34;tmp/cache&#34;)
 *                     .build())
 *                 .build())
 *             .cacheTo(CacheToEntryArgs.builder()
 *                 .local(CacheToLocalArgs.builder()
 *                     .dest(&#34;tmp/cache&#34;)
 *                     .mode(&#34;max&#34;)
 *                     .build())
 *                 .build())
 *             .context(BuildContextArgs.builder()
 *                 .location(&#34;app&#34;)
 *                 .build())
 *             .dockerfile(DockerfileArgs.builder()
 *                 .location(&#34;app/Dockerfile&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Build arguments
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.docker.buildx.Image;
 * import com.pulumi.docker.buildx.ImageArgs;
 * import com.pulumi.docker.buildx.inputs.BuildContextArgs;
 * import com.pulumi.docker.buildx.inputs.DockerfileArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var image = new Image(&#34;image&#34;, ImageArgs.builder()        
 *             .buildArgs(Map.of(&#34;SET_ME_TO_TRUE&#34;, &#34;true&#34;))
 *             .context(BuildContextArgs.builder()
 *                 .location(&#34;app&#34;)
 *                 .build())
 *             .dockerfile(DockerfileArgs.builder()
 *                 .location(&#34;app/Dockerfile&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Build targets
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.docker.buildx.Image;
 * import com.pulumi.docker.buildx.ImageArgs;
 * import com.pulumi.docker.buildx.inputs.BuildContextArgs;
 * import com.pulumi.docker.buildx.inputs.DockerfileArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var image = new Image(&#34;image&#34;, ImageArgs.builder()        
 *             .context(BuildContextArgs.builder()
 *                 .location(&#34;app&#34;)
 *                 .build())
 *             .dockerfile(DockerfileArgs.builder()
 *                 .location(&#34;app/Dockerfile&#34;)
 *                 .build())
 *             .targets(            
 *                 &#34;build-me&#34;,
 *                 &#34;also-build-me&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Named contexts
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.docker.buildx.Image;
 * import com.pulumi.docker.buildx.ImageArgs;
 * import com.pulumi.docker.buildx.inputs.BuildContextArgs;
 * import com.pulumi.docker.buildx.inputs.DockerfileArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var image = new Image(&#34;image&#34;, ImageArgs.builder()        
 *             .context(BuildContextArgs.builder()
 *                 .location(&#34;app&#34;)
 *                 .named(Map.of(&#34;golang:latest&#34;, Map.of(&#34;location&#34;, &#34;docker-image://golang@sha256:b8e62cf593cdaff36efd90aa3a37de268e6781a2e68c6610940c48f7cdf36984&#34;)))
 *                 .build())
 *             .dockerfile(DockerfileArgs.builder()
 *                 .location(&#34;app/Dockerfile&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Remote context
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.docker.buildx.Image;
 * import com.pulumi.docker.buildx.ImageArgs;
 * import com.pulumi.docker.buildx.inputs.BuildContextArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var image = new Image(&#34;image&#34;, ImageArgs.builder()        
 *             .context(BuildContextArgs.builder()
 *                 .location(&#34;https://raw.githubusercontent.com/pulumi/pulumi-docker/api-types/provider/testdata/Dockerfile&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Inline Dockerfile
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.docker.buildx.Image;
 * import com.pulumi.docker.buildx.ImageArgs;
 * import com.pulumi.docker.buildx.inputs.BuildContextArgs;
 * import com.pulumi.docker.buildx.inputs.DockerfileArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var image = new Image(&#34;image&#34;, ImageArgs.builder()        
 *             .context(BuildContextArgs.builder()
 *                 .location(&#34;app&#34;)
 *                 .build())
 *             .dockerfile(DockerfileArgs.builder()
 *                 .inline(&#34;&#34;&#34;
 * FROM busybox
 * COPY hello.c ./
 *                 &#34;&#34;&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Remote context
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.docker.buildx.Image;
 * import com.pulumi.docker.buildx.ImageArgs;
 * import com.pulumi.docker.buildx.inputs.BuildContextArgs;
 * import com.pulumi.docker.buildx.inputs.DockerfileArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var image = new Image(&#34;image&#34;, ImageArgs.builder()        
 *             .context(BuildContextArgs.builder()
 *                 .location(&#34;https://github.com/docker-library/hello-world.git&#34;)
 *                 .build())
 *             .dockerfile(DockerfileArgs.builder()
 *                 .location(&#34;app/Dockerfile&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Local export
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.docker.buildx.Image;
 * import com.pulumi.docker.buildx.ImageArgs;
 * import com.pulumi.docker.buildx.inputs.BuildContextArgs;
 * import com.pulumi.docker.buildx.inputs.DockerfileArgs;
 * import com.pulumi.docker.buildx.inputs.ExportEntryArgs;
 * import com.pulumi.docker.buildx.inputs.ExportDockerArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var image = new Image(&#34;image&#34;, ImageArgs.builder()        
 *             .context(BuildContextArgs.builder()
 *                 .location(&#34;app&#34;)
 *                 .build())
 *             .dockerfile(DockerfileArgs.builder()
 *                 .location(&#34;app/Dockerfile&#34;)
 *                 .build())
 *             .exports(ExportEntryArgs.builder()
 *                 .docker(ExportDockerArgs.builder()
 *                     .tar(true)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="docker:buildx/image:Image")
public class Image extends com.pulumi.resources.CustomResource {
    /**
     * `ARG` names and values to set during the build.
     * 
     * These variables are accessed like environment variables inside `RUN`
     * instructions.
     * 
     * Build arguments are persisted in the image, so you should use `secrets`
     * if these arguments are sensitive.
     * 
     */
    @Export(name="buildArgs", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> buildArgs;

    /**
     * @return `ARG` names and values to set during the build.
     * 
     * These variables are accessed like environment variables inside `RUN`
     * instructions.
     * 
     * Build arguments are persisted in the image, so you should use `secrets`
     * if these arguments are sensitive.
     * 
     */
    public Output<Optional<Map<String,String>>> buildArgs() {
        return Codegen.optional(this.buildArgs);
    }
    /**
     * When `true`, attempt to build the image during previews. The image will
     * not be pushed to registries, however caches will still populated.
     * 
     */
    @Export(name="buildOnPreview", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> buildOnPreview;

    /**
     * @return When `true`, attempt to build the image during previews. The image will
     * not be pushed to registries, however caches will still populated.
     * 
     */
    public Output<Optional<Boolean>> buildOnPreview() {
        return Codegen.optional(this.buildOnPreview);
    }
    /**
     * Builder configuration.
     * 
     */
    @Export(name="builder", refs={BuilderConfig.class}, tree="[0]")
    private Output</* @Nullable */ BuilderConfig> builder;

    /**
     * @return Builder configuration.
     * 
     */
    public Output<Optional<BuilderConfig>> builder_() {
        return Codegen.optional(this.builder);
    }
    /**
     * External cache configuration.
     * 
     */
    @Export(name="cacheFrom", refs={List.class,CacheFromEntry.class}, tree="[0,1]")
    private Output</* @Nullable */ List<CacheFromEntry>> cacheFrom;

    /**
     * @return External cache configuration.
     * 
     */
    public Output<Optional<List<CacheFromEntry>>> cacheFrom() {
        return Codegen.optional(this.cacheFrom);
    }
    /**
     * Cache export configuration.
     * 
     */
    @Export(name="cacheTo", refs={List.class,CacheToEntry.class}, tree="[0,1]")
    private Output</* @Nullable */ List<CacheToEntry>> cacheTo;

    /**
     * @return Cache export configuration.
     * 
     */
    public Output<Optional<List<CacheToEntry>>> cacheTo() {
        return Codegen.optional(this.cacheTo);
    }
    /**
     * Build context settings.
     * 
     */
    @Export(name="context", refs={BuildContext.class}, tree="[0]")
    private Output</* @Nullable */ BuildContext> context;

    /**
     * @return Build context settings.
     * 
     */
    public Output<Optional<BuildContext>> context() {
        return Codegen.optional(this.context);
    }
    /**
     * A preliminary hash of the image&#39;s build context.
     * 
     * Pulumi uses this to determine if an image _may_ need to be re-built.
     * 
     */
    @Export(name="contextHash", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> contextHash;

    /**
     * @return A preliminary hash of the image&#39;s build context.
     * 
     * Pulumi uses this to determine if an image _may_ need to be re-built.
     * 
     */
    public Output<Optional<String>> contextHash() {
        return Codegen.optional(this.contextHash);
    }
    /**
     * A mapping of platform type to refs which were pushed to registries.
     * 
     */
    @Export(name="digests", refs={Map.class,String.class,List.class}, tree="[0,1,[2,1]]")
    private Output</* @Nullable */ Map<String,List<String>>> digests;

    /**
     * @return A mapping of platform type to refs which were pushed to registries.
     * 
     */
    public Output<Optional<Map<String,List<String>>>> digests() {
        return Codegen.optional(this.digests);
    }
    /**
     * Dockerfile settings.
     * 
     */
    @Export(name="dockerfile", refs={Dockerfile.class}, tree="[0]")
    private Output</* @Nullable */ Dockerfile> dockerfile;

    /**
     * @return Dockerfile settings.
     * 
     */
    public Output<Optional<Dockerfile>> dockerfile() {
        return Codegen.optional(this.dockerfile);
    }
    /**
     * Controls where images are persisted after building.
     * 
     * Images are only stored in the local cache unless `exports` are
     * explicitly configured.
     * 
     */
    @Export(name="exports", refs={List.class,ExportEntry.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ExportEntry>> exports;

    /**
     * @return Controls where images are persisted after building.
     * 
     * Images are only stored in the local cache unless `exports` are
     * explicitly configured.
     * 
     */
    public Output<Optional<List<ExportEntry>>> exports() {
        return Codegen.optional(this.exports);
    }
    /**
     * Attach arbitrary key/value metadata to the image.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Attach arbitrary key/value metadata to the image.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Set target platform(s) for the build. Defaults to the host&#39;s platform
     * 
     */
    @Export(name="platforms", refs={List.class,Platform.class}, tree="[0,1]")
    private Output</* @Nullable */ List<Platform>> platforms;

    /**
     * @return Set target platform(s) for the build. Defaults to the host&#39;s platform
     * 
     */
    public Output<Optional<List<Platform>>> platforms() {
        return Codegen.optional(this.platforms);
    }
    /**
     * Always pull referenced images.
     * 
     */
    @Export(name="pull", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> pull;

    /**
     * @return Always pull referenced images.
     * 
     */
    public Output<Optional<Boolean>> pull() {
        return Codegen.optional(this.pull);
    }
    /**
     * Registry credentials. Required if reading or exporting to private
     * repositories.
     * 
     */
    @Export(name="registries", refs={List.class,RegistryAuth.class}, tree="[0,1]")
    private Output</* @Nullable */ List<RegistryAuth>> registries;

    /**
     * @return Registry credentials. Required if reading or exporting to private
     * repositories.
     * 
     */
    public Output<Optional<List<RegistryAuth>>> registries() {
        return Codegen.optional(this.registries);
    }
    /**
     * A mapping of secret names to their corresponding values.
     * 
     * Unlike the Docker CLI, these can be passed by value and do not need to
     * exist on-disk or in environment variables.
     * 
     * Build arguments and environment variables are persistent in the final
     * image, so you should use this for sensitive values.
     * 
     */
    @Export(name="secrets", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> secrets;

    /**
     * @return A mapping of secret names to their corresponding values.
     * 
     * Unlike the Docker CLI, these can be passed by value and do not need to
     * exist on-disk or in environment variables.
     * 
     * Build arguments and environment variables are persistent in the final
     * image, so you should use this for sensitive values.
     * 
     */
    public Output<Optional<Map<String,String>>> secrets() {
        return Codegen.optional(this.secrets);
    }
    /**
     * Name and optionally a tag (format: `name:tag`).
     * 
     * If exporting to a registry, the name should include the fully qualified
     * registry address (e.g. `docker.io/pulumi/pulumi:latest`).
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return Name and optionally a tag (format: `name:tag`).
     * 
     * If exporting to a registry, the name should include the fully qualified
     * registry address (e.g. `docker.io/pulumi/pulumi:latest`).
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Set the target build stage(s) to build.
     * 
     * If not specified all targets will be built by default.
     * 
     */
    @Export(name="targets", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> targets;

    /**
     * @return Set the target build stage(s) to build.
     * 
     * If not specified all targets will be built by default.
     * 
     */
    public Output<Optional<List<String>>> targets() {
        return Codegen.optional(this.targets);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Image(String name) {
        this(name, ImageArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Image(String name, @Nullable ImageArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Image(String name, @Nullable ImageArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("docker:buildx/image:Image", name, args == null ? ImageArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Image(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("docker:buildx/image:Image", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "secrets"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Image get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Image(name, id, options);
    }
}
