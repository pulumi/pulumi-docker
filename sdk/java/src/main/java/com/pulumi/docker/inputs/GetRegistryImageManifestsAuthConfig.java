// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetRegistryImageManifestsAuthConfig extends com.pulumi.resources.InvokeArgs {

    public static final GetRegistryImageManifestsAuthConfig Empty = new GetRegistryImageManifestsAuthConfig();

    /**
     * The address of the Docker registry.
     * 
     */
    @Import(name="address", required=true)
    private String address;

    /**
     * @return The address of the Docker registry.
     * 
     */
    public String address() {
        return this.address;
    }

    /**
     * The password for the Docker registry.
     * 
     */
    @Import(name="password", required=true)
    private String password;

    /**
     * @return The password for the Docker registry.
     * 
     */
    public String password() {
        return this.password;
    }

    /**
     * The username for the Docker registry.
     * 
     */
    @Import(name="username", required=true)
    private String username;

    /**
     * @return The username for the Docker registry.
     * 
     */
    public String username() {
        return this.username;
    }

    private GetRegistryImageManifestsAuthConfig() {}

    private GetRegistryImageManifestsAuthConfig(GetRegistryImageManifestsAuthConfig $) {
        this.address = $.address;
        this.password = $.password;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRegistryImageManifestsAuthConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRegistryImageManifestsAuthConfig $;

        public Builder() {
            $ = new GetRegistryImageManifestsAuthConfig();
        }

        public Builder(GetRegistryImageManifestsAuthConfig defaults) {
            $ = new GetRegistryImageManifestsAuthConfig(Objects.requireNonNull(defaults));
        }

        /**
         * @param address The address of the Docker registry.
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            $.address = address;
            return this;
        }

        /**
         * @param password The password for the Docker registry.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            $.password = password;
            return this;
        }

        /**
         * @param username The username for the Docker registry.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            $.username = username;
            return this;
        }

        public GetRegistryImageManifestsAuthConfig build() {
            if ($.address == null) {
                throw new MissingRequiredPropertyException("GetRegistryImageManifestsAuthConfig", "address");
            }
            if ($.password == null) {
                throw new MissingRequiredPropertyException("GetRegistryImageManifestsAuthConfig", "password");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("GetRegistryImageManifestsAuthConfig", "username");
            }
            return $;
        }
    }

}
