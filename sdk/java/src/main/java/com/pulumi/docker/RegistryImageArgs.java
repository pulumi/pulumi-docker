// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.docker.inputs.RegistryImageBuildArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistryImageArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistryImageArgs Empty = new RegistryImageArgs();

    /**
     * Definition for building the image
     * 
     */
    @Import(name="build")
    private @Nullable Output<RegistryImageBuildArgs> build;

    /**
     * @return Definition for building the image
     * 
     */
    public Optional<Output<RegistryImageBuildArgs>> build() {
        return Optional.ofNullable(this.build);
    }

    /**
     * If `true`, the verification of TLS certificates of the server/registry is disabled. Defaults to `false`
     * 
     */
    @Import(name="insecureSkipVerify")
    private @Nullable Output<Boolean> insecureSkipVerify;

    /**
     * @return If `true`, the verification of TLS certificates of the server/registry is disabled. Defaults to `false`
     * 
     */
    public Optional<Output<Boolean>> insecureSkipVerify() {
        return Optional.ofNullable(this.insecureSkipVerify);
    }

    /**
     * If true, then the Docker image won&#39;t be deleted on destroy operation. If this is false, it will delete the image from the docker registry on destroy operation. Defaults to `false`
     * 
     */
    @Import(name="keepRemotely")
    private @Nullable Output<Boolean> keepRemotely;

    /**
     * @return If true, then the Docker image won&#39;t be deleted on destroy operation. If this is false, it will delete the image from the docker registry on destroy operation. Defaults to `false`
     * 
     */
    public Optional<Output<Boolean>> keepRemotely() {
        return Optional.ofNullable(this.keepRemotely);
    }

    /**
     * The name of the Docker image.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Docker image.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private RegistryImageArgs() {}

    private RegistryImageArgs(RegistryImageArgs $) {
        this.build = $.build;
        this.insecureSkipVerify = $.insecureSkipVerify;
        this.keepRemotely = $.keepRemotely;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryImageArgs $;

        public Builder() {
            $ = new RegistryImageArgs();
        }

        public Builder(RegistryImageArgs defaults) {
            $ = new RegistryImageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param build Definition for building the image
         * 
         * @return builder
         * 
         */
        public Builder build(@Nullable Output<RegistryImageBuildArgs> build) {
            $.build = build;
            return this;
        }

        /**
         * @param build Definition for building the image
         * 
         * @return builder
         * 
         */
        public Builder build(RegistryImageBuildArgs build) {
            return build(Output.of(build));
        }

        /**
         * @param insecureSkipVerify If `true`, the verification of TLS certificates of the server/registry is disabled. Defaults to `false`
         * 
         * @return builder
         * 
         */
        public Builder insecureSkipVerify(@Nullable Output<Boolean> insecureSkipVerify) {
            $.insecureSkipVerify = insecureSkipVerify;
            return this;
        }

        /**
         * @param insecureSkipVerify If `true`, the verification of TLS certificates of the server/registry is disabled. Defaults to `false`
         * 
         * @return builder
         * 
         */
        public Builder insecureSkipVerify(Boolean insecureSkipVerify) {
            return insecureSkipVerify(Output.of(insecureSkipVerify));
        }

        /**
         * @param keepRemotely If true, then the Docker image won&#39;t be deleted on destroy operation. If this is false, it will delete the image from the docker registry on destroy operation. Defaults to `false`
         * 
         * @return builder
         * 
         */
        public Builder keepRemotely(@Nullable Output<Boolean> keepRemotely) {
            $.keepRemotely = keepRemotely;
            return this;
        }

        /**
         * @param keepRemotely If true, then the Docker image won&#39;t be deleted on destroy operation. If this is false, it will delete the image from the docker registry on destroy operation. Defaults to `false`
         * 
         * @return builder
         * 
         */
        public Builder keepRemotely(Boolean keepRemotely) {
            return keepRemotely(Output.of(keepRemotely));
        }

        /**
         * @param name The name of the Docker image.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Docker image.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public RegistryImageArgs build() {
            return $;
        }
    }

}
