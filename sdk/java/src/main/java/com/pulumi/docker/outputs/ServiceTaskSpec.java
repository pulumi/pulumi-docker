// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.docker.outputs.ServiceTaskSpecContainerSpec;
import com.pulumi.docker.outputs.ServiceTaskSpecLogDriver;
import com.pulumi.docker.outputs.ServiceTaskSpecNetworksAdvanced;
import com.pulumi.docker.outputs.ServiceTaskSpecPlacement;
import com.pulumi.docker.outputs.ServiceTaskSpecResources;
import com.pulumi.docker.outputs.ServiceTaskSpecRestartPolicy;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceTaskSpec {
    private ServiceTaskSpecContainerSpec containerSpec;
    private @Nullable Integer forceUpdate;
    private @Nullable ServiceTaskSpecLogDriver logDriver;
    private @Nullable List<ServiceTaskSpecNetworksAdvanced> networksAdvanceds;
    private @Nullable ServiceTaskSpecPlacement placement;
    private @Nullable ServiceTaskSpecResources resources;
    private @Nullable ServiceTaskSpecRestartPolicy restartPolicy;
    private @Nullable String runtime;

    private ServiceTaskSpec() {}
    public ServiceTaskSpecContainerSpec containerSpec() {
        return this.containerSpec;
    }
    public Optional<Integer> forceUpdate() {
        return Optional.ofNullable(this.forceUpdate);
    }
    public Optional<ServiceTaskSpecLogDriver> logDriver() {
        return Optional.ofNullable(this.logDriver);
    }
    public List<ServiceTaskSpecNetworksAdvanced> networksAdvanceds() {
        return this.networksAdvanceds == null ? List.of() : this.networksAdvanceds;
    }
    public Optional<ServiceTaskSpecPlacement> placement() {
        return Optional.ofNullable(this.placement);
    }
    public Optional<ServiceTaskSpecResources> resources() {
        return Optional.ofNullable(this.resources);
    }
    public Optional<ServiceTaskSpecRestartPolicy> restartPolicy() {
        return Optional.ofNullable(this.restartPolicy);
    }
    public Optional<String> runtime() {
        return Optional.ofNullable(this.runtime);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceTaskSpec defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private ServiceTaskSpecContainerSpec containerSpec;
        private @Nullable Integer forceUpdate;
        private @Nullable ServiceTaskSpecLogDriver logDriver;
        private @Nullable List<ServiceTaskSpecNetworksAdvanced> networksAdvanceds;
        private @Nullable ServiceTaskSpecPlacement placement;
        private @Nullable ServiceTaskSpecResources resources;
        private @Nullable ServiceTaskSpecRestartPolicy restartPolicy;
        private @Nullable String runtime;
        public Builder() {}
        public Builder(ServiceTaskSpec defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerSpec = defaults.containerSpec;
    	      this.forceUpdate = defaults.forceUpdate;
    	      this.logDriver = defaults.logDriver;
    	      this.networksAdvanceds = defaults.networksAdvanceds;
    	      this.placement = defaults.placement;
    	      this.resources = defaults.resources;
    	      this.restartPolicy = defaults.restartPolicy;
    	      this.runtime = defaults.runtime;
        }

        @CustomType.Setter
        public Builder containerSpec(ServiceTaskSpecContainerSpec containerSpec) {
            if (containerSpec == null) {
              throw new MissingRequiredPropertyException("ServiceTaskSpec", "containerSpec");
            }
            this.containerSpec = containerSpec;
            return this;
        }
        @CustomType.Setter
        public Builder forceUpdate(@Nullable Integer forceUpdate) {

            this.forceUpdate = forceUpdate;
            return this;
        }
        @CustomType.Setter
        public Builder logDriver(@Nullable ServiceTaskSpecLogDriver logDriver) {

            this.logDriver = logDriver;
            return this;
        }
        @CustomType.Setter
        public Builder networksAdvanceds(@Nullable List<ServiceTaskSpecNetworksAdvanced> networksAdvanceds) {

            this.networksAdvanceds = networksAdvanceds;
            return this;
        }
        public Builder networksAdvanceds(ServiceTaskSpecNetworksAdvanced... networksAdvanceds) {
            return networksAdvanceds(List.of(networksAdvanceds));
        }
        @CustomType.Setter
        public Builder placement(@Nullable ServiceTaskSpecPlacement placement) {

            this.placement = placement;
            return this;
        }
        @CustomType.Setter
        public Builder resources(@Nullable ServiceTaskSpecResources resources) {

            this.resources = resources;
            return this;
        }
        @CustomType.Setter
        public Builder restartPolicy(@Nullable ServiceTaskSpecRestartPolicy restartPolicy) {

            this.restartPolicy = restartPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder runtime(@Nullable String runtime) {

            this.runtime = runtime;
            return this;
        }
        public ServiceTaskSpec build() {
            final var _resultValue = new ServiceTaskSpec();
            _resultValue.containerSpec = containerSpec;
            _resultValue.forceUpdate = forceUpdate;
            _resultValue.logDriver = logDriver;
            _resultValue.networksAdvanceds = networksAdvanceds;
            _resultValue.placement = placement;
            _resultValue.resources = resources;
            _resultValue.restartPolicy = restartPolicy;
            _resultValue.runtime = runtime;
            return _resultValue;
        }
    }
}
