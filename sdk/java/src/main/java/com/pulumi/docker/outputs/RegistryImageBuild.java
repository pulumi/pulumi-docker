// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.docker.outputs.RegistryImageBuildAuthConfig;
import com.pulumi.docker.outputs.RegistryImageBuildUlimit;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegistryImageBuild {
    /**
     * @return The configuration for the authentication
     * 
     */
    private final @Nullable List<RegistryImageBuildAuthConfig> authConfigs;
    /**
     * @return Pairs for build-time variables in the form TODO
     * 
     */
    private final @Nullable Map<String,String> buildArgs;
    /**
     * @return BuildID is an optional identifier that can be passed together with the build request. The same identifier can be used to gracefully cancel the build with the cancel request.
     * 
     */
    private final @Nullable String buildId;
    /**
     * @return Images to consider as cache sources
     * 
     */
    private final @Nullable List<String> cacheFroms;
    /**
     * @return Optional parent cgroup for the container
     * 
     */
    private final @Nullable String cgroupParent;
    /**
     * @return The absolute path to the context folder. You can use the helper function &#39;${path.cwd}/context-dir&#39;.
     * 
     */
    private final String context;
    /**
     * @return The length of a CPU period in microseconds
     * 
     */
    private final @Nullable Integer cpuPeriod;
    /**
     * @return Microseconds of CPU time that the container can get in a CPU period
     * 
     */
    private final @Nullable Integer cpuQuota;
    /**
     * @return CPUs in which to allow execution (e.g., `0-3`, `0`, `1`)
     * 
     */
    private final @Nullable String cpuSetCpus;
    /**
     * @return MEMs in which to allow execution (`0-3`, `0`, `1`)
     * 
     */
    private final @Nullable String cpuSetMems;
    /**
     * @return CPU shares (relative weight)
     * 
     */
    private final @Nullable Integer cpuShares;
    /**
     * @return Dockerfile file. Defaults to `Dockerfile`
     * 
     */
    private final @Nullable String dockerfile;
    /**
     * @return A list of hostnames/IP mappings to add to the containerâ€™s /etc/hosts file. Specified in the form [&#34;hostname:IP&#34;]
     * 
     */
    private final @Nullable List<String> extraHosts;
    /**
     * @return Always remove intermediate containers
     * 
     */
    private final @Nullable Boolean forceRemove;
    /**
     * @return Isolation represents the isolation technology of a container. The supported values are
     * 
     */
    private final @Nullable String isolation;
    /**
     * @return User-defined key/value metadata
     * 
     */
    private final @Nullable Map<String,String> labels;
    /**
     * @return Set memory limit for build
     * 
     */
    private final @Nullable Integer memory;
    /**
     * @return Total memory (memory + swap), -1 to enable unlimited swap
     * 
     */
    private final @Nullable Integer memorySwap;
    /**
     * @return Set the networking mode for the RUN instructions during build
     * 
     */
    private final @Nullable String networkMode;
    /**
     * @return Do not use the cache when building the image
     * 
     */
    private final @Nullable Boolean noCache;
    /**
     * @return Set platform if server is multi-platform capable
     * 
     */
    private final @Nullable String platform;
    /**
     * @return Attempt to pull the image even if an older image exists locally
     * 
     */
    private final @Nullable Boolean pullParent;
    /**
     * @return A Git repository URI or HTTP/HTTPS context URI
     * 
     */
    private final @Nullable String remoteContext;
    /**
     * @return Remove intermediate containers after a successful build (default behavior)
     * 
     */
    private final @Nullable Boolean remove;
    /**
     * @return The security options
     * 
     */
    private final @Nullable List<String> securityOpts;
    /**
     * @return Set an ID for the build session
     * 
     */
    private final @Nullable String sessionId;
    /**
     * @return Size of /dev/shm in bytes. The size must be greater than 0
     * 
     */
    private final @Nullable Integer shmSize;
    /**
     * @return If true the new layers are squashed into a new image with a single new layer
     * 
     */
    private final @Nullable Boolean squash;
    /**
     * @return Suppress the build output and print image ID on success
     * 
     */
    private final @Nullable Boolean suppressOutput;
    /**
     * @return Set the target build stage to build
     * 
     */
    private final @Nullable String target;
    /**
     * @return Configuration for ulimits
     * 
     */
    private final @Nullable List<RegistryImageBuildUlimit> ulimits;
    /**
     * @return Version of the underlying builder to use
     * 
     */
    private final @Nullable String version;

    @CustomType.Constructor
    private RegistryImageBuild(
        @CustomType.Parameter("authConfigs") @Nullable List<RegistryImageBuildAuthConfig> authConfigs,
        @CustomType.Parameter("buildArgs") @Nullable Map<String,String> buildArgs,
        @CustomType.Parameter("buildId") @Nullable String buildId,
        @CustomType.Parameter("cacheFroms") @Nullable List<String> cacheFroms,
        @CustomType.Parameter("cgroupParent") @Nullable String cgroupParent,
        @CustomType.Parameter("context") String context,
        @CustomType.Parameter("cpuPeriod") @Nullable Integer cpuPeriod,
        @CustomType.Parameter("cpuQuota") @Nullable Integer cpuQuota,
        @CustomType.Parameter("cpuSetCpus") @Nullable String cpuSetCpus,
        @CustomType.Parameter("cpuSetMems") @Nullable String cpuSetMems,
        @CustomType.Parameter("cpuShares") @Nullable Integer cpuShares,
        @CustomType.Parameter("dockerfile") @Nullable String dockerfile,
        @CustomType.Parameter("extraHosts") @Nullable List<String> extraHosts,
        @CustomType.Parameter("forceRemove") @Nullable Boolean forceRemove,
        @CustomType.Parameter("isolation") @Nullable String isolation,
        @CustomType.Parameter("labels") @Nullable Map<String,String> labels,
        @CustomType.Parameter("memory") @Nullable Integer memory,
        @CustomType.Parameter("memorySwap") @Nullable Integer memorySwap,
        @CustomType.Parameter("networkMode") @Nullable String networkMode,
        @CustomType.Parameter("noCache") @Nullable Boolean noCache,
        @CustomType.Parameter("platform") @Nullable String platform,
        @CustomType.Parameter("pullParent") @Nullable Boolean pullParent,
        @CustomType.Parameter("remoteContext") @Nullable String remoteContext,
        @CustomType.Parameter("remove") @Nullable Boolean remove,
        @CustomType.Parameter("securityOpts") @Nullable List<String> securityOpts,
        @CustomType.Parameter("sessionId") @Nullable String sessionId,
        @CustomType.Parameter("shmSize") @Nullable Integer shmSize,
        @CustomType.Parameter("squash") @Nullable Boolean squash,
        @CustomType.Parameter("suppressOutput") @Nullable Boolean suppressOutput,
        @CustomType.Parameter("target") @Nullable String target,
        @CustomType.Parameter("ulimits") @Nullable List<RegistryImageBuildUlimit> ulimits,
        @CustomType.Parameter("version") @Nullable String version) {
        this.authConfigs = authConfigs;
        this.buildArgs = buildArgs;
        this.buildId = buildId;
        this.cacheFroms = cacheFroms;
        this.cgroupParent = cgroupParent;
        this.context = context;
        this.cpuPeriod = cpuPeriod;
        this.cpuQuota = cpuQuota;
        this.cpuSetCpus = cpuSetCpus;
        this.cpuSetMems = cpuSetMems;
        this.cpuShares = cpuShares;
        this.dockerfile = dockerfile;
        this.extraHosts = extraHosts;
        this.forceRemove = forceRemove;
        this.isolation = isolation;
        this.labels = labels;
        this.memory = memory;
        this.memorySwap = memorySwap;
        this.networkMode = networkMode;
        this.noCache = noCache;
        this.platform = platform;
        this.pullParent = pullParent;
        this.remoteContext = remoteContext;
        this.remove = remove;
        this.securityOpts = securityOpts;
        this.sessionId = sessionId;
        this.shmSize = shmSize;
        this.squash = squash;
        this.suppressOutput = suppressOutput;
        this.target = target;
        this.ulimits = ulimits;
        this.version = version;
    }

    /**
     * @return The configuration for the authentication
     * 
     */
    public List<RegistryImageBuildAuthConfig> authConfigs() {
        return this.authConfigs == null ? List.of() : this.authConfigs;
    }
    /**
     * @return Pairs for build-time variables in the form TODO
     * 
     */
    public Map<String,String> buildArgs() {
        return this.buildArgs == null ? Map.of() : this.buildArgs;
    }
    /**
     * @return BuildID is an optional identifier that can be passed together with the build request. The same identifier can be used to gracefully cancel the build with the cancel request.
     * 
     */
    public Optional<String> buildId() {
        return Optional.ofNullable(this.buildId);
    }
    /**
     * @return Images to consider as cache sources
     * 
     */
    public List<String> cacheFroms() {
        return this.cacheFroms == null ? List.of() : this.cacheFroms;
    }
    /**
     * @return Optional parent cgroup for the container
     * 
     */
    public Optional<String> cgroupParent() {
        return Optional.ofNullable(this.cgroupParent);
    }
    /**
     * @return The absolute path to the context folder. You can use the helper function &#39;${path.cwd}/context-dir&#39;.
     * 
     */
    public String context() {
        return this.context;
    }
    /**
     * @return The length of a CPU period in microseconds
     * 
     */
    public Optional<Integer> cpuPeriod() {
        return Optional.ofNullable(this.cpuPeriod);
    }
    /**
     * @return Microseconds of CPU time that the container can get in a CPU period
     * 
     */
    public Optional<Integer> cpuQuota() {
        return Optional.ofNullable(this.cpuQuota);
    }
    /**
     * @return CPUs in which to allow execution (e.g., `0-3`, `0`, `1`)
     * 
     */
    public Optional<String> cpuSetCpus() {
        return Optional.ofNullable(this.cpuSetCpus);
    }
    /**
     * @return MEMs in which to allow execution (`0-3`, `0`, `1`)
     * 
     */
    public Optional<String> cpuSetMems() {
        return Optional.ofNullable(this.cpuSetMems);
    }
    /**
     * @return CPU shares (relative weight)
     * 
     */
    public Optional<Integer> cpuShares() {
        return Optional.ofNullable(this.cpuShares);
    }
    /**
     * @return Dockerfile file. Defaults to `Dockerfile`
     * 
     */
    public Optional<String> dockerfile() {
        return Optional.ofNullable(this.dockerfile);
    }
    /**
     * @return A list of hostnames/IP mappings to add to the containerâ€™s /etc/hosts file. Specified in the form [&#34;hostname:IP&#34;]
     * 
     */
    public List<String> extraHosts() {
        return this.extraHosts == null ? List.of() : this.extraHosts;
    }
    /**
     * @return Always remove intermediate containers
     * 
     */
    public Optional<Boolean> forceRemove() {
        return Optional.ofNullable(this.forceRemove);
    }
    /**
     * @return Isolation represents the isolation technology of a container. The supported values are
     * 
     */
    public Optional<String> isolation() {
        return Optional.ofNullable(this.isolation);
    }
    /**
     * @return User-defined key/value metadata
     * 
     */
    public Map<String,String> labels() {
        return this.labels == null ? Map.of() : this.labels;
    }
    /**
     * @return Set memory limit for build
     * 
     */
    public Optional<Integer> memory() {
        return Optional.ofNullable(this.memory);
    }
    /**
     * @return Total memory (memory + swap), -1 to enable unlimited swap
     * 
     */
    public Optional<Integer> memorySwap() {
        return Optional.ofNullable(this.memorySwap);
    }
    /**
     * @return Set the networking mode for the RUN instructions during build
     * 
     */
    public Optional<String> networkMode() {
        return Optional.ofNullable(this.networkMode);
    }
    /**
     * @return Do not use the cache when building the image
     * 
     */
    public Optional<Boolean> noCache() {
        return Optional.ofNullable(this.noCache);
    }
    /**
     * @return Set platform if server is multi-platform capable
     * 
     */
    public Optional<String> platform() {
        return Optional.ofNullable(this.platform);
    }
    /**
     * @return Attempt to pull the image even if an older image exists locally
     * 
     */
    public Optional<Boolean> pullParent() {
        return Optional.ofNullable(this.pullParent);
    }
    /**
     * @return A Git repository URI or HTTP/HTTPS context URI
     * 
     */
    public Optional<String> remoteContext() {
        return Optional.ofNullable(this.remoteContext);
    }
    /**
     * @return Remove intermediate containers after a successful build (default behavior)
     * 
     */
    public Optional<Boolean> remove() {
        return Optional.ofNullable(this.remove);
    }
    /**
     * @return The security options
     * 
     */
    public List<String> securityOpts() {
        return this.securityOpts == null ? List.of() : this.securityOpts;
    }
    /**
     * @return Set an ID for the build session
     * 
     */
    public Optional<String> sessionId() {
        return Optional.ofNullable(this.sessionId);
    }
    /**
     * @return Size of /dev/shm in bytes. The size must be greater than 0
     * 
     */
    public Optional<Integer> shmSize() {
        return Optional.ofNullable(this.shmSize);
    }
    /**
     * @return If true the new layers are squashed into a new image with a single new layer
     * 
     */
    public Optional<Boolean> squash() {
        return Optional.ofNullable(this.squash);
    }
    /**
     * @return Suppress the build output and print image ID on success
     * 
     */
    public Optional<Boolean> suppressOutput() {
        return Optional.ofNullable(this.suppressOutput);
    }
    /**
     * @return Set the target build stage to build
     * 
     */
    public Optional<String> target() {
        return Optional.ofNullable(this.target);
    }
    /**
     * @return Configuration for ulimits
     * 
     */
    public List<RegistryImageBuildUlimit> ulimits() {
        return this.ulimits == null ? List.of() : this.ulimits;
    }
    /**
     * @return Version of the underlying builder to use
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegistryImageBuild defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<RegistryImageBuildAuthConfig> authConfigs;
        private @Nullable Map<String,String> buildArgs;
        private @Nullable String buildId;
        private @Nullable List<String> cacheFroms;
        private @Nullable String cgroupParent;
        private String context;
        private @Nullable Integer cpuPeriod;
        private @Nullable Integer cpuQuota;
        private @Nullable String cpuSetCpus;
        private @Nullable String cpuSetMems;
        private @Nullable Integer cpuShares;
        private @Nullable String dockerfile;
        private @Nullable List<String> extraHosts;
        private @Nullable Boolean forceRemove;
        private @Nullable String isolation;
        private @Nullable Map<String,String> labels;
        private @Nullable Integer memory;
        private @Nullable Integer memorySwap;
        private @Nullable String networkMode;
        private @Nullable Boolean noCache;
        private @Nullable String platform;
        private @Nullable Boolean pullParent;
        private @Nullable String remoteContext;
        private @Nullable Boolean remove;
        private @Nullable List<String> securityOpts;
        private @Nullable String sessionId;
        private @Nullable Integer shmSize;
        private @Nullable Boolean squash;
        private @Nullable Boolean suppressOutput;
        private @Nullable String target;
        private @Nullable List<RegistryImageBuildUlimit> ulimits;
        private @Nullable String version;

        public Builder() {
    	      // Empty
        }

        public Builder(RegistryImageBuild defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authConfigs = defaults.authConfigs;
    	      this.buildArgs = defaults.buildArgs;
    	      this.buildId = defaults.buildId;
    	      this.cacheFroms = defaults.cacheFroms;
    	      this.cgroupParent = defaults.cgroupParent;
    	      this.context = defaults.context;
    	      this.cpuPeriod = defaults.cpuPeriod;
    	      this.cpuQuota = defaults.cpuQuota;
    	      this.cpuSetCpus = defaults.cpuSetCpus;
    	      this.cpuSetMems = defaults.cpuSetMems;
    	      this.cpuShares = defaults.cpuShares;
    	      this.dockerfile = defaults.dockerfile;
    	      this.extraHosts = defaults.extraHosts;
    	      this.forceRemove = defaults.forceRemove;
    	      this.isolation = defaults.isolation;
    	      this.labels = defaults.labels;
    	      this.memory = defaults.memory;
    	      this.memorySwap = defaults.memorySwap;
    	      this.networkMode = defaults.networkMode;
    	      this.noCache = defaults.noCache;
    	      this.platform = defaults.platform;
    	      this.pullParent = defaults.pullParent;
    	      this.remoteContext = defaults.remoteContext;
    	      this.remove = defaults.remove;
    	      this.securityOpts = defaults.securityOpts;
    	      this.sessionId = defaults.sessionId;
    	      this.shmSize = defaults.shmSize;
    	      this.squash = defaults.squash;
    	      this.suppressOutput = defaults.suppressOutput;
    	      this.target = defaults.target;
    	      this.ulimits = defaults.ulimits;
    	      this.version = defaults.version;
        }

        public Builder authConfigs(@Nullable List<RegistryImageBuildAuthConfig> authConfigs) {
            this.authConfigs = authConfigs;
            return this;
        }
        public Builder authConfigs(RegistryImageBuildAuthConfig... authConfigs) {
            return authConfigs(List.of(authConfigs));
        }
        public Builder buildArgs(@Nullable Map<String,String> buildArgs) {
            this.buildArgs = buildArgs;
            return this;
        }
        public Builder buildId(@Nullable String buildId) {
            this.buildId = buildId;
            return this;
        }
        public Builder cacheFroms(@Nullable List<String> cacheFroms) {
            this.cacheFroms = cacheFroms;
            return this;
        }
        public Builder cacheFroms(String... cacheFroms) {
            return cacheFroms(List.of(cacheFroms));
        }
        public Builder cgroupParent(@Nullable String cgroupParent) {
            this.cgroupParent = cgroupParent;
            return this;
        }
        public Builder context(String context) {
            this.context = Objects.requireNonNull(context);
            return this;
        }
        public Builder cpuPeriod(@Nullable Integer cpuPeriod) {
            this.cpuPeriod = cpuPeriod;
            return this;
        }
        public Builder cpuQuota(@Nullable Integer cpuQuota) {
            this.cpuQuota = cpuQuota;
            return this;
        }
        public Builder cpuSetCpus(@Nullable String cpuSetCpus) {
            this.cpuSetCpus = cpuSetCpus;
            return this;
        }
        public Builder cpuSetMems(@Nullable String cpuSetMems) {
            this.cpuSetMems = cpuSetMems;
            return this;
        }
        public Builder cpuShares(@Nullable Integer cpuShares) {
            this.cpuShares = cpuShares;
            return this;
        }
        public Builder dockerfile(@Nullable String dockerfile) {
            this.dockerfile = dockerfile;
            return this;
        }
        public Builder extraHosts(@Nullable List<String> extraHosts) {
            this.extraHosts = extraHosts;
            return this;
        }
        public Builder extraHosts(String... extraHosts) {
            return extraHosts(List.of(extraHosts));
        }
        public Builder forceRemove(@Nullable Boolean forceRemove) {
            this.forceRemove = forceRemove;
            return this;
        }
        public Builder isolation(@Nullable String isolation) {
            this.isolation = isolation;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = labels;
            return this;
        }
        public Builder memory(@Nullable Integer memory) {
            this.memory = memory;
            return this;
        }
        public Builder memorySwap(@Nullable Integer memorySwap) {
            this.memorySwap = memorySwap;
            return this;
        }
        public Builder networkMode(@Nullable String networkMode) {
            this.networkMode = networkMode;
            return this;
        }
        public Builder noCache(@Nullable Boolean noCache) {
            this.noCache = noCache;
            return this;
        }
        public Builder platform(@Nullable String platform) {
            this.platform = platform;
            return this;
        }
        public Builder pullParent(@Nullable Boolean pullParent) {
            this.pullParent = pullParent;
            return this;
        }
        public Builder remoteContext(@Nullable String remoteContext) {
            this.remoteContext = remoteContext;
            return this;
        }
        public Builder remove(@Nullable Boolean remove) {
            this.remove = remove;
            return this;
        }
        public Builder securityOpts(@Nullable List<String> securityOpts) {
            this.securityOpts = securityOpts;
            return this;
        }
        public Builder securityOpts(String... securityOpts) {
            return securityOpts(List.of(securityOpts));
        }
        public Builder sessionId(@Nullable String sessionId) {
            this.sessionId = sessionId;
            return this;
        }
        public Builder shmSize(@Nullable Integer shmSize) {
            this.shmSize = shmSize;
            return this;
        }
        public Builder squash(@Nullable Boolean squash) {
            this.squash = squash;
            return this;
        }
        public Builder suppressOutput(@Nullable Boolean suppressOutput) {
            this.suppressOutput = suppressOutput;
            return this;
        }
        public Builder target(@Nullable String target) {
            this.target = target;
            return this;
        }
        public Builder ulimits(@Nullable List<RegistryImageBuildUlimit> ulimits) {
            this.ulimits = ulimits;
            return this;
        }
        public Builder ulimits(RegistryImageBuildUlimit... ulimits) {
            return ulimits(List.of(ulimits));
        }
        public Builder version(@Nullable String version) {
            this.version = version;
            return this;
        }        public RegistryImageBuild build() {
            return new RegistryImageBuild(authConfigs, buildArgs, buildId, cacheFroms, cgroupParent, context, cpuPeriod, cpuQuota, cpuSetCpus, cpuSetMems, cpuShares, dockerfile, extraHosts, forceRemove, isolation, labels, memory, memorySwap, networkMode, noCache, platform, pullParent, remoteContext, remove, securityOpts, sessionId, shmSize, squash, suppressOutput, target, ulimits, version);
        }
    }
}
