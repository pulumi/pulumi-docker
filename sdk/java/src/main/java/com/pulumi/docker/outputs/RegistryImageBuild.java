// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.docker.outputs.RegistryImageBuildAuthConfig;
import com.pulumi.docker.outputs.RegistryImageBuildUlimit;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegistryImageBuild {
    private final @Nullable List<RegistryImageBuildAuthConfig> authConfigs;
    private final @Nullable Map<String,String> buildArgs;
    private final @Nullable String buildId;
    private final @Nullable List<String> cacheFroms;
    private final @Nullable String cgroupParent;
    private final String context;
    private final @Nullable Integer cpuPeriod;
    private final @Nullable Integer cpuQuota;
    private final @Nullable String cpuSetCpus;
    private final @Nullable String cpuSetMems;
    private final @Nullable Integer cpuShares;
    private final @Nullable String dockerfile;
    private final @Nullable List<String> extraHosts;
    private final @Nullable Boolean forceRemove;
    private final @Nullable String isolation;
    private final @Nullable Map<String,String> labels;
    private final @Nullable Integer memory;
    private final @Nullable Integer memorySwap;
    private final @Nullable String networkMode;
    private final @Nullable Boolean noCache;
    private final @Nullable String platform;
    private final @Nullable Boolean pullParent;
    private final @Nullable String remoteContext;
    private final @Nullable Boolean remove;
    private final @Nullable List<String> securityOpts;
    private final @Nullable String sessionId;
    private final @Nullable Integer shmSize;
    private final @Nullable Boolean squash;
    private final @Nullable Boolean suppressOutput;
    private final @Nullable String target;
    private final @Nullable List<RegistryImageBuildUlimit> ulimits;
    private final @Nullable String version;

    @CustomType.Constructor
    private RegistryImageBuild(
        @CustomType.Parameter("authConfigs") @Nullable List<RegistryImageBuildAuthConfig> authConfigs,
        @CustomType.Parameter("buildArgs") @Nullable Map<String,String> buildArgs,
        @CustomType.Parameter("buildId") @Nullable String buildId,
        @CustomType.Parameter("cacheFroms") @Nullable List<String> cacheFroms,
        @CustomType.Parameter("cgroupParent") @Nullable String cgroupParent,
        @CustomType.Parameter("context") String context,
        @CustomType.Parameter("cpuPeriod") @Nullable Integer cpuPeriod,
        @CustomType.Parameter("cpuQuota") @Nullable Integer cpuQuota,
        @CustomType.Parameter("cpuSetCpus") @Nullable String cpuSetCpus,
        @CustomType.Parameter("cpuSetMems") @Nullable String cpuSetMems,
        @CustomType.Parameter("cpuShares") @Nullable Integer cpuShares,
        @CustomType.Parameter("dockerfile") @Nullable String dockerfile,
        @CustomType.Parameter("extraHosts") @Nullable List<String> extraHosts,
        @CustomType.Parameter("forceRemove") @Nullable Boolean forceRemove,
        @CustomType.Parameter("isolation") @Nullable String isolation,
        @CustomType.Parameter("labels") @Nullable Map<String,String> labels,
        @CustomType.Parameter("memory") @Nullable Integer memory,
        @CustomType.Parameter("memorySwap") @Nullable Integer memorySwap,
        @CustomType.Parameter("networkMode") @Nullable String networkMode,
        @CustomType.Parameter("noCache") @Nullable Boolean noCache,
        @CustomType.Parameter("platform") @Nullable String platform,
        @CustomType.Parameter("pullParent") @Nullable Boolean pullParent,
        @CustomType.Parameter("remoteContext") @Nullable String remoteContext,
        @CustomType.Parameter("remove") @Nullable Boolean remove,
        @CustomType.Parameter("securityOpts") @Nullable List<String> securityOpts,
        @CustomType.Parameter("sessionId") @Nullable String sessionId,
        @CustomType.Parameter("shmSize") @Nullable Integer shmSize,
        @CustomType.Parameter("squash") @Nullable Boolean squash,
        @CustomType.Parameter("suppressOutput") @Nullable Boolean suppressOutput,
        @CustomType.Parameter("target") @Nullable String target,
        @CustomType.Parameter("ulimits") @Nullable List<RegistryImageBuildUlimit> ulimits,
        @CustomType.Parameter("version") @Nullable String version) {
        this.authConfigs = authConfigs;
        this.buildArgs = buildArgs;
        this.buildId = buildId;
        this.cacheFroms = cacheFroms;
        this.cgroupParent = cgroupParent;
        this.context = context;
        this.cpuPeriod = cpuPeriod;
        this.cpuQuota = cpuQuota;
        this.cpuSetCpus = cpuSetCpus;
        this.cpuSetMems = cpuSetMems;
        this.cpuShares = cpuShares;
        this.dockerfile = dockerfile;
        this.extraHosts = extraHosts;
        this.forceRemove = forceRemove;
        this.isolation = isolation;
        this.labels = labels;
        this.memory = memory;
        this.memorySwap = memorySwap;
        this.networkMode = networkMode;
        this.noCache = noCache;
        this.platform = platform;
        this.pullParent = pullParent;
        this.remoteContext = remoteContext;
        this.remove = remove;
        this.securityOpts = securityOpts;
        this.sessionId = sessionId;
        this.shmSize = shmSize;
        this.squash = squash;
        this.suppressOutput = suppressOutput;
        this.target = target;
        this.ulimits = ulimits;
        this.version = version;
    }

    public List<RegistryImageBuildAuthConfig> authConfigs() {
        return this.authConfigs == null ? List.of() : this.authConfigs;
    }
    public Map<String,String> buildArgs() {
        return this.buildArgs == null ? Map.of() : this.buildArgs;
    }
    public Optional<String> buildId() {
        return Optional.ofNullable(this.buildId);
    }
    public List<String> cacheFroms() {
        return this.cacheFroms == null ? List.of() : this.cacheFroms;
    }
    public Optional<String> cgroupParent() {
        return Optional.ofNullable(this.cgroupParent);
    }
    public String context() {
        return this.context;
    }
    public Optional<Integer> cpuPeriod() {
        return Optional.ofNullable(this.cpuPeriod);
    }
    public Optional<Integer> cpuQuota() {
        return Optional.ofNullable(this.cpuQuota);
    }
    public Optional<String> cpuSetCpus() {
        return Optional.ofNullable(this.cpuSetCpus);
    }
    public Optional<String> cpuSetMems() {
        return Optional.ofNullable(this.cpuSetMems);
    }
    public Optional<Integer> cpuShares() {
        return Optional.ofNullable(this.cpuShares);
    }
    public Optional<String> dockerfile() {
        return Optional.ofNullable(this.dockerfile);
    }
    public List<String> extraHosts() {
        return this.extraHosts == null ? List.of() : this.extraHosts;
    }
    public Optional<Boolean> forceRemove() {
        return Optional.ofNullable(this.forceRemove);
    }
    public Optional<String> isolation() {
        return Optional.ofNullable(this.isolation);
    }
    public Map<String,String> labels() {
        return this.labels == null ? Map.of() : this.labels;
    }
    public Optional<Integer> memory() {
        return Optional.ofNullable(this.memory);
    }
    public Optional<Integer> memorySwap() {
        return Optional.ofNullable(this.memorySwap);
    }
    public Optional<String> networkMode() {
        return Optional.ofNullable(this.networkMode);
    }
    public Optional<Boolean> noCache() {
        return Optional.ofNullable(this.noCache);
    }
    public Optional<String> platform() {
        return Optional.ofNullable(this.platform);
    }
    public Optional<Boolean> pullParent() {
        return Optional.ofNullable(this.pullParent);
    }
    public Optional<String> remoteContext() {
        return Optional.ofNullable(this.remoteContext);
    }
    public Optional<Boolean> remove() {
        return Optional.ofNullable(this.remove);
    }
    public List<String> securityOpts() {
        return this.securityOpts == null ? List.of() : this.securityOpts;
    }
    public Optional<String> sessionId() {
        return Optional.ofNullable(this.sessionId);
    }
    public Optional<Integer> shmSize() {
        return Optional.ofNullable(this.shmSize);
    }
    public Optional<Boolean> squash() {
        return Optional.ofNullable(this.squash);
    }
    public Optional<Boolean> suppressOutput() {
        return Optional.ofNullable(this.suppressOutput);
    }
    public Optional<String> target() {
        return Optional.ofNullable(this.target);
    }
    public List<RegistryImageBuildUlimit> ulimits() {
        return this.ulimits == null ? List.of() : this.ulimits;
    }
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegistryImageBuild defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<RegistryImageBuildAuthConfig> authConfigs;
        private @Nullable Map<String,String> buildArgs;
        private @Nullable String buildId;
        private @Nullable List<String> cacheFroms;
        private @Nullable String cgroupParent;
        private String context;
        private @Nullable Integer cpuPeriod;
        private @Nullable Integer cpuQuota;
        private @Nullable String cpuSetCpus;
        private @Nullable String cpuSetMems;
        private @Nullable Integer cpuShares;
        private @Nullable String dockerfile;
        private @Nullable List<String> extraHosts;
        private @Nullable Boolean forceRemove;
        private @Nullable String isolation;
        private @Nullable Map<String,String> labels;
        private @Nullable Integer memory;
        private @Nullable Integer memorySwap;
        private @Nullable String networkMode;
        private @Nullable Boolean noCache;
        private @Nullable String platform;
        private @Nullable Boolean pullParent;
        private @Nullable String remoteContext;
        private @Nullable Boolean remove;
        private @Nullable List<String> securityOpts;
        private @Nullable String sessionId;
        private @Nullable Integer shmSize;
        private @Nullable Boolean squash;
        private @Nullable Boolean suppressOutput;
        private @Nullable String target;
        private @Nullable List<RegistryImageBuildUlimit> ulimits;
        private @Nullable String version;

        public Builder() {
    	      // Empty
        }

        public Builder(RegistryImageBuild defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authConfigs = defaults.authConfigs;
    	      this.buildArgs = defaults.buildArgs;
    	      this.buildId = defaults.buildId;
    	      this.cacheFroms = defaults.cacheFroms;
    	      this.cgroupParent = defaults.cgroupParent;
    	      this.context = defaults.context;
    	      this.cpuPeriod = defaults.cpuPeriod;
    	      this.cpuQuota = defaults.cpuQuota;
    	      this.cpuSetCpus = defaults.cpuSetCpus;
    	      this.cpuSetMems = defaults.cpuSetMems;
    	      this.cpuShares = defaults.cpuShares;
    	      this.dockerfile = defaults.dockerfile;
    	      this.extraHosts = defaults.extraHosts;
    	      this.forceRemove = defaults.forceRemove;
    	      this.isolation = defaults.isolation;
    	      this.labels = defaults.labels;
    	      this.memory = defaults.memory;
    	      this.memorySwap = defaults.memorySwap;
    	      this.networkMode = defaults.networkMode;
    	      this.noCache = defaults.noCache;
    	      this.platform = defaults.platform;
    	      this.pullParent = defaults.pullParent;
    	      this.remoteContext = defaults.remoteContext;
    	      this.remove = defaults.remove;
    	      this.securityOpts = defaults.securityOpts;
    	      this.sessionId = defaults.sessionId;
    	      this.shmSize = defaults.shmSize;
    	      this.squash = defaults.squash;
    	      this.suppressOutput = defaults.suppressOutput;
    	      this.target = defaults.target;
    	      this.ulimits = defaults.ulimits;
    	      this.version = defaults.version;
        }

        public Builder authConfigs(@Nullable List<RegistryImageBuildAuthConfig> authConfigs) {
            this.authConfigs = authConfigs;
            return this;
        }
        public Builder authConfigs(RegistryImageBuildAuthConfig... authConfigs) {
            return authConfigs(List.of(authConfigs));
        }
        public Builder buildArgs(@Nullable Map<String,String> buildArgs) {
            this.buildArgs = buildArgs;
            return this;
        }
        public Builder buildId(@Nullable String buildId) {
            this.buildId = buildId;
            return this;
        }
        public Builder cacheFroms(@Nullable List<String> cacheFroms) {
            this.cacheFroms = cacheFroms;
            return this;
        }
        public Builder cacheFroms(String... cacheFroms) {
            return cacheFroms(List.of(cacheFroms));
        }
        public Builder cgroupParent(@Nullable String cgroupParent) {
            this.cgroupParent = cgroupParent;
            return this;
        }
        public Builder context(String context) {
            this.context = Objects.requireNonNull(context);
            return this;
        }
        public Builder cpuPeriod(@Nullable Integer cpuPeriod) {
            this.cpuPeriod = cpuPeriod;
            return this;
        }
        public Builder cpuQuota(@Nullable Integer cpuQuota) {
            this.cpuQuota = cpuQuota;
            return this;
        }
        public Builder cpuSetCpus(@Nullable String cpuSetCpus) {
            this.cpuSetCpus = cpuSetCpus;
            return this;
        }
        public Builder cpuSetMems(@Nullable String cpuSetMems) {
            this.cpuSetMems = cpuSetMems;
            return this;
        }
        public Builder cpuShares(@Nullable Integer cpuShares) {
            this.cpuShares = cpuShares;
            return this;
        }
        public Builder dockerfile(@Nullable String dockerfile) {
            this.dockerfile = dockerfile;
            return this;
        }
        public Builder extraHosts(@Nullable List<String> extraHosts) {
            this.extraHosts = extraHosts;
            return this;
        }
        public Builder extraHosts(String... extraHosts) {
            return extraHosts(List.of(extraHosts));
        }
        public Builder forceRemove(@Nullable Boolean forceRemove) {
            this.forceRemove = forceRemove;
            return this;
        }
        public Builder isolation(@Nullable String isolation) {
            this.isolation = isolation;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = labels;
            return this;
        }
        public Builder memory(@Nullable Integer memory) {
            this.memory = memory;
            return this;
        }
        public Builder memorySwap(@Nullable Integer memorySwap) {
            this.memorySwap = memorySwap;
            return this;
        }
        public Builder networkMode(@Nullable String networkMode) {
            this.networkMode = networkMode;
            return this;
        }
        public Builder noCache(@Nullable Boolean noCache) {
            this.noCache = noCache;
            return this;
        }
        public Builder platform(@Nullable String platform) {
            this.platform = platform;
            return this;
        }
        public Builder pullParent(@Nullable Boolean pullParent) {
            this.pullParent = pullParent;
            return this;
        }
        public Builder remoteContext(@Nullable String remoteContext) {
            this.remoteContext = remoteContext;
            return this;
        }
        public Builder remove(@Nullable Boolean remove) {
            this.remove = remove;
            return this;
        }
        public Builder securityOpts(@Nullable List<String> securityOpts) {
            this.securityOpts = securityOpts;
            return this;
        }
        public Builder securityOpts(String... securityOpts) {
            return securityOpts(List.of(securityOpts));
        }
        public Builder sessionId(@Nullable String sessionId) {
            this.sessionId = sessionId;
            return this;
        }
        public Builder shmSize(@Nullable Integer shmSize) {
            this.shmSize = shmSize;
            return this;
        }
        public Builder squash(@Nullable Boolean squash) {
            this.squash = squash;
            return this;
        }
        public Builder suppressOutput(@Nullable Boolean suppressOutput) {
            this.suppressOutput = suppressOutput;
            return this;
        }
        public Builder target(@Nullable String target) {
            this.target = target;
            return this;
        }
        public Builder ulimits(@Nullable List<RegistryImageBuildUlimit> ulimits) {
            this.ulimits = ulimits;
            return this;
        }
        public Builder ulimits(RegistryImageBuildUlimit... ulimits) {
            return ulimits(List.of(ulimits));
        }
        public Builder version(@Nullable String version) {
            this.version = version;
            return this;
        }        public RegistryImageBuild build() {
            return new RegistryImageBuild(authConfigs, buildArgs, buildId, cacheFroms, cgroupParent, context, cpuPeriod, cpuQuota, cpuSetCpus, cpuSetMems, cpuShares, dockerfile, extraHosts, forceRemove, isolation, labels, memory, memorySwap, networkMode, noCache, platform, pullParent, remoteContext, remove, securityOpts, sessionId, shmSize, squash, suppressOutput, target, ulimits, version);
        }
    }
}
