// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.buildx.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.docker.buildx.enums.CacheMode;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CacheToS3 {
    private @Nullable String accessKeyId;
    private @Nullable String blobsPrefix;
    private String bucket;
    private @Nullable String endpointUrl;
    /**
     * @return Ignore errors caused by failed cache exports.
     * 
     */
    private @Nullable Boolean ignoreError;
    private @Nullable String manifestsPrefix;
    private @Nullable CacheMode mode;
    private @Nullable String name;
    private String region;
    private @Nullable String secretAccessKey;
    private @Nullable String sessionToken;
    private @Nullable Boolean usePathStyle;

    private CacheToS3() {}
    public Optional<String> accessKeyId() {
        return Optional.ofNullable(this.accessKeyId);
    }
    public Optional<String> blobsPrefix() {
        return Optional.ofNullable(this.blobsPrefix);
    }
    public String bucket() {
        return this.bucket;
    }
    public Optional<String> endpointUrl() {
        return Optional.ofNullable(this.endpointUrl);
    }
    /**
     * @return Ignore errors caused by failed cache exports.
     * 
     */
    public Optional<Boolean> ignoreError() {
        return Optional.ofNullable(this.ignoreError);
    }
    public Optional<String> manifestsPrefix() {
        return Optional.ofNullable(this.manifestsPrefix);
    }
    public Optional<CacheMode> mode() {
        return Optional.ofNullable(this.mode);
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public String region() {
        return this.region;
    }
    public Optional<String> secretAccessKey() {
        return Optional.ofNullable(this.secretAccessKey);
    }
    public Optional<String> sessionToken() {
        return Optional.ofNullable(this.sessionToken);
    }
    public Optional<Boolean> usePathStyle() {
        return Optional.ofNullable(this.usePathStyle);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CacheToS3 defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessKeyId;
        private @Nullable String blobsPrefix;
        private String bucket;
        private @Nullable String endpointUrl;
        private @Nullable Boolean ignoreError;
        private @Nullable String manifestsPrefix;
        private @Nullable CacheMode mode;
        private @Nullable String name;
        private String region;
        private @Nullable String secretAccessKey;
        private @Nullable String sessionToken;
        private @Nullable Boolean usePathStyle;
        public Builder() {}
        public Builder(CacheToS3 defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessKeyId = defaults.accessKeyId;
    	      this.blobsPrefix = defaults.blobsPrefix;
    	      this.bucket = defaults.bucket;
    	      this.endpointUrl = defaults.endpointUrl;
    	      this.ignoreError = defaults.ignoreError;
    	      this.manifestsPrefix = defaults.manifestsPrefix;
    	      this.mode = defaults.mode;
    	      this.name = defaults.name;
    	      this.region = defaults.region;
    	      this.secretAccessKey = defaults.secretAccessKey;
    	      this.sessionToken = defaults.sessionToken;
    	      this.usePathStyle = defaults.usePathStyle;
        }

        @CustomType.Setter
        public Builder accessKeyId(@Nullable String accessKeyId) {

            this.accessKeyId = accessKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder blobsPrefix(@Nullable String blobsPrefix) {

            this.blobsPrefix = blobsPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder bucket(String bucket) {
            if (bucket == null) {
              throw new MissingRequiredPropertyException("CacheToS3", "bucket");
            }
            this.bucket = bucket;
            return this;
        }
        @CustomType.Setter
        public Builder endpointUrl(@Nullable String endpointUrl) {

            this.endpointUrl = endpointUrl;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreError(@Nullable Boolean ignoreError) {

            this.ignoreError = ignoreError;
            return this;
        }
        @CustomType.Setter
        public Builder manifestsPrefix(@Nullable String manifestsPrefix) {

            this.manifestsPrefix = manifestsPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder mode(@Nullable CacheMode mode) {

            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("CacheToS3", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder secretAccessKey(@Nullable String secretAccessKey) {

            this.secretAccessKey = secretAccessKey;
            return this;
        }
        @CustomType.Setter
        public Builder sessionToken(@Nullable String sessionToken) {

            this.sessionToken = sessionToken;
            return this;
        }
        @CustomType.Setter
        public Builder usePathStyle(@Nullable Boolean usePathStyle) {

            this.usePathStyle = usePathStyle;
            return this;
        }
        public CacheToS3 build() {
            final var _resultValue = new CacheToS3();
            _resultValue.accessKeyId = accessKeyId;
            _resultValue.blobsPrefix = blobsPrefix;
            _resultValue.bucket = bucket;
            _resultValue.endpointUrl = endpointUrl;
            _resultValue.ignoreError = ignoreError;
            _resultValue.manifestsPrefix = manifestsPrefix;
            _resultValue.mode = mode;
            _resultValue.name = name;
            _resultValue.region = region;
            _resultValue.secretAccessKey = secretAccessKey;
            _resultValue.sessionToken = sessionToken;
            _resultValue.usePathStyle = usePathStyle;
            return _resultValue;
        }
    }
}
