// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.docker.inputs.ServiceTaskSpecContainerSpecMountBindOptionsArgs;
import com.pulumi.docker.inputs.ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs;
import com.pulumi.docker.inputs.ServiceTaskSpecContainerSpecMountVolumeOptionsArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceTaskSpecContainerSpecMountArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceTaskSpecContainerSpecMountArgs Empty = new ServiceTaskSpecContainerSpecMountArgs();

    @Import(name="bindOptions")
    private @Nullable Output<ServiceTaskSpecContainerSpecMountBindOptionsArgs> bindOptions;

    public Optional<Output<ServiceTaskSpecContainerSpecMountBindOptionsArgs>> bindOptions() {
        return Optional.ofNullable(this.bindOptions);
    }

    @Import(name="readOnly")
    private @Nullable Output<Boolean> readOnly;

    public Optional<Output<Boolean>> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    @Import(name="source")
    private @Nullable Output<String> source;

    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    @Import(name="target", required=true)
    private Output<String> target;

    public Output<String> target() {
        return this.target;
    }

    @Import(name="tmpfsOptions")
    private @Nullable Output<ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs> tmpfsOptions;

    public Optional<Output<ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs>> tmpfsOptions() {
        return Optional.ofNullable(this.tmpfsOptions);
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    @Import(name="volumeOptions")
    private @Nullable Output<ServiceTaskSpecContainerSpecMountVolumeOptionsArgs> volumeOptions;

    public Optional<Output<ServiceTaskSpecContainerSpecMountVolumeOptionsArgs>> volumeOptions() {
        return Optional.ofNullable(this.volumeOptions);
    }

    private ServiceTaskSpecContainerSpecMountArgs() {}

    private ServiceTaskSpecContainerSpecMountArgs(ServiceTaskSpecContainerSpecMountArgs $) {
        this.bindOptions = $.bindOptions;
        this.readOnly = $.readOnly;
        this.source = $.source;
        this.target = $.target;
        this.tmpfsOptions = $.tmpfsOptions;
        this.type = $.type;
        this.volumeOptions = $.volumeOptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceTaskSpecContainerSpecMountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceTaskSpecContainerSpecMountArgs $;

        public Builder() {
            $ = new ServiceTaskSpecContainerSpecMountArgs();
        }

        public Builder(ServiceTaskSpecContainerSpecMountArgs defaults) {
            $ = new ServiceTaskSpecContainerSpecMountArgs(Objects.requireNonNull(defaults));
        }

        public Builder bindOptions(@Nullable Output<ServiceTaskSpecContainerSpecMountBindOptionsArgs> bindOptions) {
            $.bindOptions = bindOptions;
            return this;
        }

        public Builder bindOptions(ServiceTaskSpecContainerSpecMountBindOptionsArgs bindOptions) {
            return bindOptions(Output.of(bindOptions));
        }

        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        public Builder readOnly(Boolean readOnly) {
            return readOnly(Output.of(readOnly));
        }

        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        public Builder source(String source) {
            return source(Output.of(source));
        }

        public Builder target(Output<String> target) {
            $.target = target;
            return this;
        }

        public Builder target(String target) {
            return target(Output.of(target));
        }

        public Builder tmpfsOptions(@Nullable Output<ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs> tmpfsOptions) {
            $.tmpfsOptions = tmpfsOptions;
            return this;
        }

        public Builder tmpfsOptions(ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs tmpfsOptions) {
            return tmpfsOptions(Output.of(tmpfsOptions));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder volumeOptions(@Nullable Output<ServiceTaskSpecContainerSpecMountVolumeOptionsArgs> volumeOptions) {
            $.volumeOptions = volumeOptions;
            return this;
        }

        public Builder volumeOptions(ServiceTaskSpecContainerSpecMountVolumeOptionsArgs volumeOptions) {
            return volumeOptions(Output.of(volumeOptions));
        }

        public ServiceTaskSpecContainerSpecMountArgs build() {
            if ($.target == null) {
                throw new MissingRequiredPropertyException("ServiceTaskSpecContainerSpecMountArgs", "target");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("ServiceTaskSpecContainerSpecMountArgs", "type");
            }
            return $;
        }
    }

}
