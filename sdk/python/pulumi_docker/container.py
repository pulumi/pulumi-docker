# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from . import utilities, tables

class Container(pulumi.CustomResource):
    """
    Manages the lifecycle of a Docker container.
    """
    def __init__(__self__, __name__, __opts__=None, attach=None, capabilities=None, command=None, cpu_set=None, cpu_shares=None, destroy_grace_seconds=None, devices=None, dns=None, dns_opts=None, dns_searches=None, domainname=None, entrypoints=None, envs=None, healthcheck=None, hosts=None, hostname=None, image=None, labels=None, links=None, log_driver=None, log_opts=None, logs=None, max_retry_count=None, memory=None, memory_swap=None, must_run=None, name=None, network_aliases=None, network_mode=None, networks=None, networks_advanced=None, pid_mode=None, ports=None, privileged=None, publish_all_ports=None, restart=None, rm=None, start=None, ulimits=None, uploads=None, user=None, userns_mode=None, volumes=None):
        """Create a Container resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['attach'] = attach

        __props__['capabilities'] = capabilities

        __props__['command'] = command

        __props__['cpu_set'] = cpu_set

        __props__['cpu_shares'] = cpu_shares

        __props__['destroy_grace_seconds'] = destroy_grace_seconds

        __props__['devices'] = devices

        __props__['dns'] = dns

        __props__['dns_opts'] = dns_opts

        __props__['dns_searches'] = dns_searches

        __props__['domainname'] = domainname

        __props__['entrypoints'] = entrypoints

        __props__['envs'] = envs

        __props__['healthcheck'] = healthcheck

        __props__['hosts'] = hosts

        __props__['hostname'] = hostname

        if not image:
            raise TypeError('Missing required property image')
        __props__['image'] = image

        __props__['labels'] = labels

        __props__['links'] = links

        __props__['log_driver'] = log_driver

        __props__['log_opts'] = log_opts

        __props__['logs'] = logs

        __props__['max_retry_count'] = max_retry_count

        __props__['memory'] = memory

        __props__['memory_swap'] = memory_swap

        __props__['must_run'] = must_run

        __props__['name'] = name

        __props__['network_aliases'] = network_aliases

        __props__['network_mode'] = network_mode

        __props__['networks'] = networks

        __props__['networks_advanced'] = networks_advanced

        __props__['pid_mode'] = pid_mode

        __props__['ports'] = ports

        __props__['privileged'] = privileged

        __props__['publish_all_ports'] = publish_all_ports

        __props__['restart'] = restart

        __props__['rm'] = rm

        __props__['start'] = start

        __props__['ulimits'] = ulimits

        __props__['uploads'] = uploads

        __props__['user'] = user

        __props__['userns_mode'] = userns_mode

        __props__['volumes'] = volumes

        __props__['bridge'] = None
        __props__['container_logs'] = None
        __props__['exit_code'] = None
        __props__['gateway'] = None
        __props__['ip_address'] = None
        __props__['ip_prefix_length'] = None
        __props__['network_datas'] = None

        super(Container, __self__).__init__(
            'docker:index/container:Container',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

