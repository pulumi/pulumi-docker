# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'RegistryAuth',
]

@pulumi.output_type
class RegistryAuth(dict):
    def __init__(__self__, *,
                 address: str,
                 auth_disabled: Optional[bool] = None,
                 config_file: Optional[str] = None,
                 config_file_content: Optional[str] = None,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        RegistryAuth._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address=address,
            auth_disabled=auth_disabled,
            config_file=config_file,
            config_file_content=config_file_content,
            password=password,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address: Optional[str] = None,
             auth_disabled: Optional[bool] = None,
             config_file: Optional[str] = None,
             config_file_content: Optional[str] = None,
             password: Optional[str] = None,
             username: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if address is None:
            raise TypeError("Missing 'address' argument")
        if auth_disabled is None and 'authDisabled' in kwargs:
            auth_disabled = kwargs['authDisabled']
        if config_file is None and 'configFile' in kwargs:
            config_file = kwargs['configFile']
        if config_file_content is None and 'configFileContent' in kwargs:
            config_file_content = kwargs['configFileContent']

        _setter("address", address)
        if auth_disabled is not None:
            _setter("auth_disabled", auth_disabled)
        if config_file is not None:
            _setter("config_file", config_file)
        if config_file_content is not None:
            _setter("config_file_content", config_file_content)
        if password is not None:
            _setter("password", password)
        if username is not None:
            _setter("username", username)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="authDisabled")
    def auth_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "auth_disabled")

    @property
    @pulumi.getter(name="configFile")
    def config_file(self) -> Optional[str]:
        return pulumi.get(self, "config_file")

    @property
    @pulumi.getter(name="configFileContent")
    def config_file_content(self) -> Optional[str]:
        return pulumi.get(self, "config_file_content")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


