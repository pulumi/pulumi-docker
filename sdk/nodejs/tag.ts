// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creates a docker tag. It has the exact same functionality as the `docker tag` command. Deleting the resource will neither delete the source nor target images. The source image must exist on the machine running the docker daemon.
 */
export class Tag extends pulumi.CustomResource {
    /**
     * Get an existing Tag resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TagState, opts?: pulumi.CustomResourceOptions): Tag {
        return new Tag(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'docker:index/tag:Tag';

    /**
     * Returns true if the given object is an instance of Tag.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Tag {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Tag.__pulumiType;
    }

    /**
     * Name of the source image.
     */
    public readonly sourceImage!: pulumi.Output<string>;
    /**
     * ImageID of the source image in the format of `sha256:<<ID>>`
     */
    public /*out*/ readonly sourceImageId!: pulumi.Output<string>;
    /**
     * Name of the target image.
     */
    public readonly targetImage!: pulumi.Output<string>;

    /**
     * Create a Tag resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TagArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TagArgs | TagState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TagState | undefined;
            resourceInputs["sourceImage"] = state ? state.sourceImage : undefined;
            resourceInputs["sourceImageId"] = state ? state.sourceImageId : undefined;
            resourceInputs["targetImage"] = state ? state.targetImage : undefined;
        } else {
            const args = argsOrState as TagArgs | undefined;
            if ((!args || args.sourceImage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceImage'");
            }
            if ((!args || args.targetImage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetImage'");
            }
            resourceInputs["sourceImage"] = args ? args.sourceImage : undefined;
            resourceInputs["targetImage"] = args ? args.targetImage : undefined;
            resourceInputs["sourceImageId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Tag.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Tag resources.
 */
export interface TagState {
    /**
     * Name of the source image.
     */
    sourceImage?: pulumi.Input<string>;
    /**
     * ImageID of the source image in the format of `sha256:<<ID>>`
     */
    sourceImageId?: pulumi.Input<string>;
    /**
     * Name of the target image.
     */
    targetImage?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Tag resource.
 */
export interface TagArgs {
    /**
     * Name of the source image.
     */
    sourceImage: pulumi.Input<string>;
    /**
     * Name of the target image.
     */
    targetImage: pulumi.Input<string>;
}
