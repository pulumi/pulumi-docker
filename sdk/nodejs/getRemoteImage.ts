// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `docker.RemoteImage` provides details about a specific Docker Image which need to be presend on the Docker Host
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as docker from "@pulumi/docker";
 *
 * // uses the 'latest' tag
 * const latest = pulumi.output(docker.getRemoteImage({
 *     name: "nginx",
 * }));
 * // uses a specific tag
 * const specific = pulumi.output(docker.getRemoteImage({
 *     name: "nginx:1.17.6",
 * }));
 * // use the image digest
 * const digest = pulumi.output(docker.getRemoteImage({
 *     name: "nginx@sha256:36b74457bccb56fbf8b05f79c85569501b721d4db813b684391d63e02287c0b2",
 * }));
 * // uses the tag and the image digest
 * const tagAndDigest = pulumi.output(docker.getRemoteImage({
 *     name: "nginx:1.19.1@sha256:36b74457bccb56fbf8b05f79c85569501b721d4db813b684391d63e02287c0b2",
 * }));
 * ```
 */
export function getRemoteImage(args: GetRemoteImageArgs, opts?: pulumi.InvokeOptions): Promise<GetRemoteImageResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("docker:index/getRemoteImage:getRemoteImage", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getRemoteImage.
 */
export interface GetRemoteImageArgs {
    name: string;
}

/**
 * A collection of values returned by getRemoteImage.
 */
export interface GetRemoteImageResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name: string;
    readonly repoDigest: string;
}

export function getRemoteImageOutput(args: GetRemoteImageOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRemoteImageResult> {
    return pulumi.output(args).apply(a => getRemoteImage(a, opts))
}

/**
 * A collection of arguments for invoking getRemoteImage.
 */
export interface GetRemoteImageOutputArgs {
    name: pulumi.Input<string>;
}
