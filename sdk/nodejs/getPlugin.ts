// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Reads the local Docker plugin. The plugin must be installed locally.
 *
 * ## Example Usage
 *
 * ### With alias
 * data "docker.Plugin" "byAlias" {
 *   alias = "sample-volume-plugin:latest"
 * }
 * ## Schema
 *
 * ### Optional
 *
 * - **alias** (String) The alias of the Docker plugin. If the tag is omitted, `:latest` is complemented to the attribute value.
 * - **id** (String) The ID of the plugin, which has precedence over the `alias` of both are given
 *
 * ### Read-Only
 *
 * - **enabled** (Boolean) If `true` the plugin is enabled
 * - **env** (Set of String) The environment variables in the form of `KEY=VALUE`, e.g. `DEBUG=0`
 * - **grant_all_permissions** (Boolean) If true, grant all permissions necessary to run the plugin
 * - **name** (String) The plugin name. If the tag is omitted, `:latest` is complemented to the attribute value.
 * - **plugin_reference** (String) The Docker Plugin Reference
 */
export function getPlugin(args?: GetPluginArgs, opts?: pulumi.InvokeOptions): Promise<GetPluginResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("docker:index/getPlugin:getPlugin", {
        "alias": args.alias,
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getPlugin.
 */
export interface GetPluginArgs {
    readonly alias?: string;
    readonly id?: string;
}

/**
 * A collection of values returned by getPlugin.
 */
export interface GetPluginResult {
    readonly alias?: string;
    readonly enabled: boolean;
    readonly envs: string[];
    readonly grantAllPermissions: boolean;
    readonly id?: string;
    readonly name: string;
    readonly pluginReference: string;
}
