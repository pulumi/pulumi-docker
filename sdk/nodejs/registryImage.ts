// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * <!-- Bug: Type and Name are switched -->
 * Manages the lifecycle of docker image/tag in a registry means it can store one or more version of specific docker images and identified by their tags.
 *
 * ## Example Usage
 *
 * To be able to update an image itself when an updated image arrives.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as docker from "@pulumi/docker";
 *
 * const helloworld = new docker.RegistryImage("helloworld", {build: {
 *     context: `${path.cwd}/absolutePathToContextFolder`,
 * }});
 * ```
 */
export class RegistryImage extends pulumi.CustomResource {
    /**
     * Get an existing RegistryImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegistryImageState, opts?: pulumi.CustomResourceOptions): RegistryImage {
        return new RegistryImage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'docker:index/registryImage:RegistryImage';

    /**
     * Returns true if the given object is an instance of RegistryImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RegistryImage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegistryImage.__pulumiType;
    }

    /**
     * Definition for building the image
     */
    public readonly build!: pulumi.Output<outputs.RegistryImageBuild | undefined>;
    /**
     * If `true`, the verification of TLS certificates of the server/registry is disabled. Defaults to `false`
     */
    public readonly insecureSkipVerify!: pulumi.Output<boolean | undefined>;
    /**
     * If true, then the Docker image won't be deleted on destroy operation. If this is false, it will delete the image from the docker registry on destroy operation. Defaults to `false`
     */
    public readonly keepRemotely!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the Docker image.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The sha256 digest of the image.
     */
    public /*out*/ readonly sha256Digest!: pulumi.Output<string>;

    /**
     * Create a RegistryImage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RegistryImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegistryImageArgs | RegistryImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegistryImageState | undefined;
            resourceInputs["build"] = state ? state.build : undefined;
            resourceInputs["insecureSkipVerify"] = state ? state.insecureSkipVerify : undefined;
            resourceInputs["keepRemotely"] = state ? state.keepRemotely : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sha256Digest"] = state ? state.sha256Digest : undefined;
        } else {
            const args = argsOrState as RegistryImageArgs | undefined;
            resourceInputs["build"] = args ? args.build : undefined;
            resourceInputs["insecureSkipVerify"] = args ? args.insecureSkipVerify : undefined;
            resourceInputs["keepRemotely"] = args ? args.keepRemotely : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sha256Digest"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RegistryImage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RegistryImage resources.
 */
export interface RegistryImageState {
    /**
     * Definition for building the image
     */
    build?: pulumi.Input<inputs.RegistryImageBuild>;
    /**
     * If `true`, the verification of TLS certificates of the server/registry is disabled. Defaults to `false`
     */
    insecureSkipVerify?: pulumi.Input<boolean>;
    /**
     * If true, then the Docker image won't be deleted on destroy operation. If this is false, it will delete the image from the docker registry on destroy operation. Defaults to `false`
     */
    keepRemotely?: pulumi.Input<boolean>;
    /**
     * The name of the Docker image.
     */
    name?: pulumi.Input<string>;
    /**
     * The sha256 digest of the image.
     */
    sha256Digest?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RegistryImage resource.
 */
export interface RegistryImageArgs {
    /**
     * Definition for building the image
     */
    build?: pulumi.Input<inputs.RegistryImageBuild>;
    /**
     * If `true`, the verification of TLS certificates of the server/registry is disabled. Defaults to `false`
     */
    insecureSkipVerify?: pulumi.Input<boolean>;
    /**
     * If true, then the Docker image won't be deleted on destroy operation. If this is false, it will delete the image from the docker registry on destroy operation. Defaults to `false`
     */
    keepRemotely?: pulumi.Input<boolean>;
    /**
     * The name of the Docker image.
     */
    name?: pulumi.Input<string>;
}
