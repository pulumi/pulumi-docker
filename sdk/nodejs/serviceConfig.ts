// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * ### Example
 *
 *  Assuming you created a `config` as follows
 *
 *  #!/bin/bash
 *
 *  printf '{"a":"b"}' | docker config create foo -
 *
 *  prints the id
 *
 *  08c26c477474478d971139f750984775a7f019dbe8a2e7f09d66a187c009e66d
 *
 *  you provide the definition for the resource as follows
 *
 *  terraform
 *
 *  resource "docker_config" "foo" {
 *
 *  name = "foo"
 *
 *  data = base64encode("{\"a\": \"b\"}")
 *
 *  }
 *
 *  then the import command is as follows
 *
 *  #!/bin/bash
 *
 * ```sh
 * $ pulumi import docker:index/serviceConfig:ServiceConfig foo 08c26c477474478d971139f750984775a7f019dbe8a2e7f09d66a187c009e66d
 * ```
 */
export class ServiceConfig extends pulumi.CustomResource {
    /**
     * Get an existing ServiceConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceConfigState, opts?: pulumi.CustomResourceOptions): ServiceConfig {
        return new ServiceConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'docker:index/serviceConfig:ServiceConfig';

    /**
     * Returns true if the given object is an instance of ServiceConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceConfig.__pulumiType;
    }

    /**
     * Base64-url-safe-encoded config data
     */
    public readonly data!: pulumi.Output<string>;
    /**
     * User-defined name of the config
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a ServiceConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceConfigArgs | ServiceConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceConfigState | undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as ServiceConfigArgs | undefined;
            if ((!args || args.data === undefined) && !opts.urn) {
                throw new Error("Missing required property 'data'");
            }
            resourceInputs["data"] = args ? args.data : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceConfig resources.
 */
export interface ServiceConfigState {
    /**
     * Base64-url-safe-encoded config data
     */
    data?: pulumi.Input<string>;
    /**
     * User-defined name of the config
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceConfig resource.
 */
export interface ServiceConfigArgs {
    /**
     * Base64-url-safe-encoded config data
     */
    data: pulumi.Input<string>;
    /**
     * User-defined name of the config
     */
    name?: pulumi.Input<string>;
}
