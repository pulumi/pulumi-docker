// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * <!-- Bug: Type and Name are switched -->
 * Manages the lifecycle of a Docker plugin.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as docker from "@pulumi/docker";
 *
 * const sample_volume_plugin = new docker.Plugin("sample-volume-plugin", {
 *     alias: "sample-volume-plugin",
 *     enableTimeout: 60,
 *     enabled: false,
 *     envs: ["DEBUG=1"],
 *     forceDestroy: true,
 *     forceDisable: true,
 *     grantAllPermissions: true,
 * });
 * ```
 *
 * <!-- schema generated by tfplugindocs -->
 * ## Schema
 *
 * ### Required
 *
 * - **name** (String) Docker Plugin name
 *
 * ### Optional
 *
 * - **alias** (String) Docker Plugin alias
 * - **enable_timeout** (Number) HTTP client timeout to enable the plugin
 * - **enabled** (Boolean) If `true` the plugin is enabled. Defaults to `true`
 * - **env** (Set of String) The environment variables in the form of `KEY=VALUE`, e.g. `DEBUG=0`
 * - **force_destroy** (Boolean) If true, then the plugin is destroyed forcibly
 * - **force_disable** (Boolean) If true, then the plugin is disabled forcibly
 * - **grant_all_permissions** (Boolean) If true, grant all permissions necessary to run the plugin
 * - **grant_permissions** (Block Set) Grant specific permissions only (see below for nested schema)
 * - **id** (String) The ID of this resource.
 *
 * ### Read-Only
 *
 * - **plugin_reference** (String) Docker Plugin Reference
 *
 * <a id="nestedblock--grant_permissions"></a>
 * ### Nested Schema for `grantPermissions`
 *
 * Required:
 *
 * - **name** (String) The name of the permission
 * - **value** (Set of String) The value of the permission
 *
 * ## Import
 *
 * Import is supported using the following syntax#!/bin/bash
 *
 * ```sh
 *  $ pulumi import docker:index/plugin:Plugin sample-volume-plugin "$(docker plugin inspect -f {{.ID}} tiborvass/sample-volume-plugin:latest)"
 * ```
 */
export class Plugin extends pulumi.CustomResource {
    /**
     * Get an existing Plugin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PluginState, opts?: pulumi.CustomResourceOptions): Plugin {
        return new Plugin(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'docker:index/plugin:Plugin';

    /**
     * Returns true if the given object is an instance of Plugin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Plugin {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Plugin.__pulumiType;
    }

    /**
     * Docker Plugin alias
     */
    public readonly alias!: pulumi.Output<string>;
    /**
     * HTTP client timeout to enable the plugin
     */
    public readonly enableTimeout!: pulumi.Output<number | undefined>;
    /**
     * If `true` the plugin is enabled. Defaults to `true`
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The environment variables in the form of `KEY=VALUE`, e.g. `DEBUG=0`
     */
    public readonly envs!: pulumi.Output<string[]>;
    /**
     * If true, then the plugin is destroyed forcibly
     */
    public readonly forceDestroy!: pulumi.Output<boolean | undefined>;
    /**
     * If true, then the plugin is disabled forcibly
     */
    public readonly forceDisable!: pulumi.Output<boolean | undefined>;
    /**
     * If true, grant all permissions necessary to run the plugin
     */
    public readonly grantAllPermissions!: pulumi.Output<boolean | undefined>;
    /**
     * Grant specific permissions only
     */
    public readonly grantPermissions!: pulumi.Output<outputs.PluginGrantPermission[] | undefined>;
    /**
     * Docker Plugin name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Docker Plugin Reference
     */
    public /*out*/ readonly pluginReference!: pulumi.Output<string>;

    /**
     * Create a Plugin resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PluginArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PluginArgs | PluginState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PluginState | undefined;
            inputs["alias"] = state ? state.alias : undefined;
            inputs["enableTimeout"] = state ? state.enableTimeout : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["envs"] = state ? state.envs : undefined;
            inputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            inputs["forceDisable"] = state ? state.forceDisable : undefined;
            inputs["grantAllPermissions"] = state ? state.grantAllPermissions : undefined;
            inputs["grantPermissions"] = state ? state.grantPermissions : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["pluginReference"] = state ? state.pluginReference : undefined;
        } else {
            const args = argsOrState as PluginArgs | undefined;
            inputs["alias"] = args ? args.alias : undefined;
            inputs["enableTimeout"] = args ? args.enableTimeout : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["envs"] = args ? args.envs : undefined;
            inputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            inputs["forceDisable"] = args ? args.forceDisable : undefined;
            inputs["grantAllPermissions"] = args ? args.grantAllPermissions : undefined;
            inputs["grantPermissions"] = args ? args.grantPermissions : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["pluginReference"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Plugin.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Plugin resources.
 */
export interface PluginState {
    /**
     * Docker Plugin alias
     */
    readonly alias?: pulumi.Input<string>;
    /**
     * HTTP client timeout to enable the plugin
     */
    readonly enableTimeout?: pulumi.Input<number>;
    /**
     * If `true` the plugin is enabled. Defaults to `true`
     */
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * The environment variables in the form of `KEY=VALUE`, e.g. `DEBUG=0`
     */
    readonly envs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, then the plugin is destroyed forcibly
     */
    readonly forceDestroy?: pulumi.Input<boolean>;
    /**
     * If true, then the plugin is disabled forcibly
     */
    readonly forceDisable?: pulumi.Input<boolean>;
    /**
     * If true, grant all permissions necessary to run the plugin
     */
    readonly grantAllPermissions?: pulumi.Input<boolean>;
    /**
     * Grant specific permissions only
     */
    readonly grantPermissions?: pulumi.Input<pulumi.Input<inputs.PluginGrantPermission>[]>;
    /**
     * Docker Plugin name
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Docker Plugin Reference
     */
    readonly pluginReference?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Plugin resource.
 */
export interface PluginArgs {
    /**
     * Docker Plugin alias
     */
    readonly alias?: pulumi.Input<string>;
    /**
     * HTTP client timeout to enable the plugin
     */
    readonly enableTimeout?: pulumi.Input<number>;
    /**
     * If `true` the plugin is enabled. Defaults to `true`
     */
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * The environment variables in the form of `KEY=VALUE`, e.g. `DEBUG=0`
     */
    readonly envs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, then the plugin is destroyed forcibly
     */
    readonly forceDestroy?: pulumi.Input<boolean>;
    /**
     * If true, then the plugin is disabled forcibly
     */
    readonly forceDisable?: pulumi.Input<boolean>;
    /**
     * If true, grant all permissions necessary to run the plugin
     */
    readonly grantAllPermissions?: pulumi.Input<boolean>;
    /**
     * Grant specific permissions only
     */
    readonly grantPermissions?: pulumi.Input<pulumi.Input<inputs.PluginGrantPermission>[]>;
    /**
     * Docker Plugin name
     */
    readonly name?: pulumi.Input<string>;
}
