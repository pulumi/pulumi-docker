// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * <!-- Bug: Type and Name are switched -->
 * Manages the lifecycle of a Docker plugin.
 *
 * ## Import
 *
 * #!/bin/bash
 *
 * ```sh
 * $ pulumi import docker:index/plugin:Plugin sample-volume-plugin "$(docker plugin inspect -f {{.ID}} tiborvass/sample-volume-plugin:latest)"
 * ```
 */
export class Plugin extends pulumi.CustomResource {
    /**
     * Get an existing Plugin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PluginState, opts?: pulumi.CustomResourceOptions): Plugin {
        return new Plugin(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'docker:index/plugin:Plugin';

    /**
     * Returns true if the given object is an instance of Plugin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Plugin {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Plugin.__pulumiType;
    }

    /**
     * Docker Plugin alias
     */
    declare public readonly alias: pulumi.Output<string>;
    /**
     * HTTP client timeout to enable the plugin
     */
    declare public readonly enableTimeout: pulumi.Output<number | undefined>;
    /**
     * If `true` the plugin is enabled. Defaults to `true`
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * The environment variables in the form of `KEY=VALUE`, e.g. `DEBUG=0`
     */
    declare public readonly envs: pulumi.Output<string[]>;
    /**
     * If true, then the plugin is destroyed forcibly
     */
    declare public readonly forceDestroy: pulumi.Output<boolean | undefined>;
    /**
     * If true, then the plugin is disabled forcibly
     */
    declare public readonly forceDisable: pulumi.Output<boolean | undefined>;
    /**
     * If true, grant all permissions necessary to run the plugin
     */
    declare public readonly grantAllPermissions: pulumi.Output<boolean | undefined>;
    /**
     * Grant specific permissions only
     */
    declare public readonly grantPermissions: pulumi.Output<outputs.PluginGrantPermission[] | undefined>;
    /**
     * Docker Plugin name
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Docker Plugin Reference
     */
    declare public /*out*/ readonly pluginReference: pulumi.Output<string>;

    /**
     * Create a Plugin resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PluginArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PluginArgs | PluginState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PluginState | undefined;
            resourceInputs["alias"] = state?.alias;
            resourceInputs["enableTimeout"] = state?.enableTimeout;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["envs"] = state?.envs;
            resourceInputs["forceDestroy"] = state?.forceDestroy;
            resourceInputs["forceDisable"] = state?.forceDisable;
            resourceInputs["grantAllPermissions"] = state?.grantAllPermissions;
            resourceInputs["grantPermissions"] = state?.grantPermissions;
            resourceInputs["name"] = state?.name;
            resourceInputs["pluginReference"] = state?.pluginReference;
        } else {
            const args = argsOrState as PluginArgs | undefined;
            resourceInputs["alias"] = args?.alias;
            resourceInputs["enableTimeout"] = args?.enableTimeout;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["envs"] = args?.envs;
            resourceInputs["forceDestroy"] = args?.forceDestroy;
            resourceInputs["forceDisable"] = args?.forceDisable;
            resourceInputs["grantAllPermissions"] = args?.grantAllPermissions;
            resourceInputs["grantPermissions"] = args?.grantPermissions;
            resourceInputs["name"] = args?.name;
            resourceInputs["pluginReference"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Plugin.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Plugin resources.
 */
export interface PluginState {
    /**
     * Docker Plugin alias
     */
    alias?: pulumi.Input<string>;
    /**
     * HTTP client timeout to enable the plugin
     */
    enableTimeout?: pulumi.Input<number>;
    /**
     * If `true` the plugin is enabled. Defaults to `true`
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The environment variables in the form of `KEY=VALUE`, e.g. `DEBUG=0`
     */
    envs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, then the plugin is destroyed forcibly
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * If true, then the plugin is disabled forcibly
     */
    forceDisable?: pulumi.Input<boolean>;
    /**
     * If true, grant all permissions necessary to run the plugin
     */
    grantAllPermissions?: pulumi.Input<boolean>;
    /**
     * Grant specific permissions only
     */
    grantPermissions?: pulumi.Input<pulumi.Input<inputs.PluginGrantPermission>[]>;
    /**
     * Docker Plugin name
     */
    name?: pulumi.Input<string>;
    /**
     * Docker Plugin Reference
     */
    pluginReference?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Plugin resource.
 */
export interface PluginArgs {
    /**
     * Docker Plugin alias
     */
    alias?: pulumi.Input<string>;
    /**
     * HTTP client timeout to enable the plugin
     */
    enableTimeout?: pulumi.Input<number>;
    /**
     * If `true` the plugin is enabled. Defaults to `true`
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The environment variables in the form of `KEY=VALUE`, e.g. `DEBUG=0`
     */
    envs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, then the plugin is destroyed forcibly
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * If true, then the plugin is disabled forcibly
     */
    forceDisable?: pulumi.Input<boolean>;
    /**
     * If true, grant all permissions necessary to run the plugin
     */
    grantAllPermissions?: pulumi.Input<boolean>;
    /**
     * Grant specific permissions only
     */
    grantPermissions?: pulumi.Input<pulumi.Input<inputs.PluginGrantPermission>[]>;
    /**
     * Docker Plugin name
     */
    name?: pulumi.Input<string>;
}
