// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * ### Example
 *
 * Assuming you created a `service` as follows
 *
 * #!/bin/bash
 *
 * docker service create --name foo -p 8080:80 nginx
 *
 * prints th ID
 *
 * 4pcphbxkfn2rffhbhe6czytgi
 *
 * you provide the definition for the resource as follows
 *
 * terraform
 *
 * resource "docker_service" "foo" {
 *
 *   name = "foo"
 *
 *   task_spec {
 *
 *     container_spec {
 *     
 *       image = "nginx"
 *     
 *     }
 *
 *   }
 *
 *   endpoint_spec {
 *
 *     ports {
 *     
 *       target_port    = "80"
 *     
 *       published_port = "8080"
 *     
 *     }
 *
 *   }
 *
 * }
 *
 * then the import command is as follows
 *
 * #!/bin/bash
 *
 * ```sh
 * $ pulumi import docker:index/service:Service foo 4pcphbxkfn2rffhbhe6czytgi
 * ```
 */
export class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceState, opts?: pulumi.CustomResourceOptions): Service {
        return new Service(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'docker:index/service:Service';

    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Service {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }

    /**
     * Configuration for the authentication for pulling the images of the service
     */
    declare public readonly auth: pulumi.Output<outputs.ServiceAuth | undefined>;
    /**
     * A configuration to ensure that a service converges aka reaches the desired that of all task up and running
     */
    declare public readonly convergeConfig: pulumi.Output<outputs.ServiceConvergeConfig | undefined>;
    /**
     * Properties that can be configured to access and load balance a service
     */
    declare public readonly endpointSpec: pulumi.Output<outputs.ServiceEndpointSpec>;
    /**
     * User-defined key/value metadata
     */
    declare public readonly labels: pulumi.Output<outputs.ServiceLabel[]>;
    /**
     * Scheduling mode for the service
     */
    declare public readonly mode: pulumi.Output<outputs.ServiceMode>;
    /**
     * Name of the service
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specification for the rollback strategy of the service
     */
    declare public readonly rollbackConfig: pulumi.Output<outputs.ServiceRollbackConfig | undefined>;
    /**
     * User modifiable task configuration
     */
    declare public readonly taskSpec: pulumi.Output<outputs.ServiceTaskSpec>;
    /**
     * Specification for the update strategy of the service
     */
    declare public readonly updateConfig: pulumi.Output<outputs.ServiceUpdateConfig | undefined>;

    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceArgs | ServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceState | undefined;
            resourceInputs["auth"] = state?.auth;
            resourceInputs["convergeConfig"] = state?.convergeConfig;
            resourceInputs["endpointSpec"] = state?.endpointSpec;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["mode"] = state?.mode;
            resourceInputs["name"] = state?.name;
            resourceInputs["rollbackConfig"] = state?.rollbackConfig;
            resourceInputs["taskSpec"] = state?.taskSpec;
            resourceInputs["updateConfig"] = state?.updateConfig;
        } else {
            const args = argsOrState as ServiceArgs | undefined;
            if (args?.taskSpec === undefined && !opts.urn) {
                throw new Error("Missing required property 'taskSpec'");
            }
            resourceInputs["auth"] = args?.auth;
            resourceInputs["convergeConfig"] = args?.convergeConfig;
            resourceInputs["endpointSpec"] = args?.endpointSpec;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["mode"] = args?.mode;
            resourceInputs["name"] = args?.name;
            resourceInputs["rollbackConfig"] = args?.rollbackConfig;
            resourceInputs["taskSpec"] = args?.taskSpec;
            resourceInputs["updateConfig"] = args?.updateConfig;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Service.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Service resources.
 */
export interface ServiceState {
    /**
     * Configuration for the authentication for pulling the images of the service
     */
    auth?: pulumi.Input<inputs.ServiceAuth>;
    /**
     * A configuration to ensure that a service converges aka reaches the desired that of all task up and running
     */
    convergeConfig?: pulumi.Input<inputs.ServiceConvergeConfig>;
    /**
     * Properties that can be configured to access and load balance a service
     */
    endpointSpec?: pulumi.Input<inputs.ServiceEndpointSpec>;
    /**
     * User-defined key/value metadata
     */
    labels?: pulumi.Input<pulumi.Input<inputs.ServiceLabel>[]>;
    /**
     * Scheduling mode for the service
     */
    mode?: pulumi.Input<inputs.ServiceMode>;
    /**
     * Name of the service
     */
    name?: pulumi.Input<string>;
    /**
     * Specification for the rollback strategy of the service
     */
    rollbackConfig?: pulumi.Input<inputs.ServiceRollbackConfig>;
    /**
     * User modifiable task configuration
     */
    taskSpec?: pulumi.Input<inputs.ServiceTaskSpec>;
    /**
     * Specification for the update strategy of the service
     */
    updateConfig?: pulumi.Input<inputs.ServiceUpdateConfig>;
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    /**
     * Configuration for the authentication for pulling the images of the service
     */
    auth?: pulumi.Input<inputs.ServiceAuth>;
    /**
     * A configuration to ensure that a service converges aka reaches the desired that of all task up and running
     */
    convergeConfig?: pulumi.Input<inputs.ServiceConvergeConfig>;
    /**
     * Properties that can be configured to access and load balance a service
     */
    endpointSpec?: pulumi.Input<inputs.ServiceEndpointSpec>;
    /**
     * User-defined key/value metadata
     */
    labels?: pulumi.Input<pulumi.Input<inputs.ServiceLabel>[]>;
    /**
     * Scheduling mode for the service
     */
    mode?: pulumi.Input<inputs.ServiceMode>;
    /**
     * Name of the service
     */
    name?: pulumi.Input<string>;
    /**
     * Specification for the rollback strategy of the service
     */
    rollbackConfig?: pulumi.Input<inputs.ServiceRollbackConfig>;
    /**
     * User modifiable task configuration
     */
    taskSpec: pulumi.Input<inputs.ServiceTaskSpec>;
    /**
     * Specification for the update strategy of the service
     */
    updateConfig?: pulumi.Input<inputs.ServiceUpdateConfig>;
}
