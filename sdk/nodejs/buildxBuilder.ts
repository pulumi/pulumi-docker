// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * Manages a Docker Buildx builder instance. This resource allows you to create a  buildx builder with various configurations such as driver, nodes, and platform settings. Please see https://github.com/docker/buildx/blob/master/docs/reference/buildx_create.md for more documentation
 */
export class BuildxBuilder extends pulumi.CustomResource {
    /**
     * Get an existing BuildxBuilder resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BuildxBuilderState, opts?: pulumi.CustomResourceOptions): BuildxBuilder {
        return new BuildxBuilder(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'docker:index/buildxBuilder:BuildxBuilder';

    /**
     * Returns true if the given object is an instance of BuildxBuilder.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BuildxBuilder {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BuildxBuilder.__pulumiType;
    }

    /**
     * Append a node to builder instead of changing it
     */
    public readonly append!: pulumi.Output<boolean | undefined>;
    /**
     * Automatically boot the builder after creation. Defaults to `false`
     */
    public readonly bootstrap!: pulumi.Output<boolean | undefined>;
    /**
     * BuildKit daemon config file
     */
    public readonly buildkitConfig!: pulumi.Output<string | undefined>;
    /**
     * BuildKit flags to set for the builder.
     */
    public readonly buildkitFlags!: pulumi.Output<string | undefined>;
    /**
     * Configuration block for the Docker-Container driver.
     */
    public readonly dockerContainer!: pulumi.Output<outputs.BuildxBuilderDockerContainer | undefined>;
    /**
     * The driver to use for the Buildx builder (e.g., docker-container, kubernetes).
     */
    public readonly driver!: pulumi.Output<string | undefined>;
    /**
     * Additional options for the Buildx driver in the form of `key=value,...`. These options are driver-specific.
     */
    public readonly driverOptions!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Configuration block for the Kubernetes driver.
     */
    public readonly kubernetes!: pulumi.Output<outputs.BuildxBuilderKubernetes | undefined>;
    /**
     * The name of the Buildx builder. IF not specified, a random name will be generated.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Create/modify node with given name
     */
    public readonly node!: pulumi.Output<string | undefined>;
    /**
     * Fixed platforms for current node
     */
    public readonly platforms!: pulumi.Output<string[] | undefined>;
    /**
     * Configuration block for the Remote driver.
     */
    public readonly remote!: pulumi.Output<outputs.BuildxBuilderRemote | undefined>;
    /**
     * Set the current builder instance as the default for the current context.
     */
    public readonly use!: pulumi.Output<boolean | undefined>;

    /**
     * Create a BuildxBuilder resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: BuildxBuilderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BuildxBuilderArgs | BuildxBuilderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BuildxBuilderState | undefined;
            resourceInputs["append"] = state ? state.append : undefined;
            resourceInputs["bootstrap"] = state ? state.bootstrap : undefined;
            resourceInputs["buildkitConfig"] = state ? state.buildkitConfig : undefined;
            resourceInputs["buildkitFlags"] = state ? state.buildkitFlags : undefined;
            resourceInputs["dockerContainer"] = state ? state.dockerContainer : undefined;
            resourceInputs["driver"] = state ? state.driver : undefined;
            resourceInputs["driverOptions"] = state ? state.driverOptions : undefined;
            resourceInputs["kubernetes"] = state ? state.kubernetes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["node"] = state ? state.node : undefined;
            resourceInputs["platforms"] = state ? state.platforms : undefined;
            resourceInputs["remote"] = state ? state.remote : undefined;
            resourceInputs["use"] = state ? state.use : undefined;
        } else {
            const args = argsOrState as BuildxBuilderArgs | undefined;
            resourceInputs["append"] = args ? args.append : undefined;
            resourceInputs["bootstrap"] = args ? args.bootstrap : undefined;
            resourceInputs["buildkitConfig"] = args ? args.buildkitConfig : undefined;
            resourceInputs["buildkitFlags"] = args ? args.buildkitFlags : undefined;
            resourceInputs["dockerContainer"] = args ? args.dockerContainer : undefined;
            resourceInputs["driver"] = args ? args.driver : undefined;
            resourceInputs["driverOptions"] = args ? args.driverOptions : undefined;
            resourceInputs["kubernetes"] = args ? args.kubernetes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["node"] = args ? args.node : undefined;
            resourceInputs["platforms"] = args ? args.platforms : undefined;
            resourceInputs["remote"] = args ? args.remote : undefined;
            resourceInputs["use"] = args ? args.use : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BuildxBuilder.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BuildxBuilder resources.
 */
export interface BuildxBuilderState {
    /**
     * Append a node to builder instead of changing it
     */
    append?: pulumi.Input<boolean>;
    /**
     * Automatically boot the builder after creation. Defaults to `false`
     */
    bootstrap?: pulumi.Input<boolean>;
    /**
     * BuildKit daemon config file
     */
    buildkitConfig?: pulumi.Input<string>;
    /**
     * BuildKit flags to set for the builder.
     */
    buildkitFlags?: pulumi.Input<string>;
    /**
     * Configuration block for the Docker-Container driver.
     */
    dockerContainer?: pulumi.Input<inputs.BuildxBuilderDockerContainer>;
    /**
     * The driver to use for the Buildx builder (e.g., docker-container, kubernetes).
     */
    driver?: pulumi.Input<string>;
    /**
     * Additional options for the Buildx driver in the form of `key=value,...`. These options are driver-specific.
     */
    driverOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Configuration block for the Kubernetes driver.
     */
    kubernetes?: pulumi.Input<inputs.BuildxBuilderKubernetes>;
    /**
     * The name of the Buildx builder. IF not specified, a random name will be generated.
     */
    name?: pulumi.Input<string>;
    /**
     * Create/modify node with given name
     */
    node?: pulumi.Input<string>;
    /**
     * Fixed platforms for current node
     */
    platforms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration block for the Remote driver.
     */
    remote?: pulumi.Input<inputs.BuildxBuilderRemote>;
    /**
     * Set the current builder instance as the default for the current context.
     */
    use?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a BuildxBuilder resource.
 */
export interface BuildxBuilderArgs {
    /**
     * Append a node to builder instead of changing it
     */
    append?: pulumi.Input<boolean>;
    /**
     * Automatically boot the builder after creation. Defaults to `false`
     */
    bootstrap?: pulumi.Input<boolean>;
    /**
     * BuildKit daemon config file
     */
    buildkitConfig?: pulumi.Input<string>;
    /**
     * BuildKit flags to set for the builder.
     */
    buildkitFlags?: pulumi.Input<string>;
    /**
     * Configuration block for the Docker-Container driver.
     */
    dockerContainer?: pulumi.Input<inputs.BuildxBuilderDockerContainer>;
    /**
     * The driver to use for the Buildx builder (e.g., docker-container, kubernetes).
     */
    driver?: pulumi.Input<string>;
    /**
     * Additional options for the Buildx driver in the form of `key=value,...`. These options are driver-specific.
     */
    driverOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Configuration block for the Kubernetes driver.
     */
    kubernetes?: pulumi.Input<inputs.BuildxBuilderKubernetes>;
    /**
     * The name of the Buildx builder. IF not specified, a random name will be generated.
     */
    name?: pulumi.Input<string>;
    /**
     * Create/modify node with given name
     */
    node?: pulumi.Input<string>;
    /**
     * Fixed platforms for current node
     */
    platforms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration block for the Remote driver.
     */
    remote?: pulumi.Input<inputs.BuildxBuilderRemote>;
    /**
     * Set the current builder instance as the default for the current context.
     */
    use?: pulumi.Input<boolean>;
}
