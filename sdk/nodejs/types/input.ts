// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface ContainerCapabilities {
    adds?: pulumi.Input<pulumi.Input<string>[]>;
    drops?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ContainerDevice {
    containerPath?: pulumi.Input<string>;
    hostPath: pulumi.Input<string>;
    permissions?: pulumi.Input<string>;
}

export interface ContainerHealthcheck {
    interval?: pulumi.Input<string>;
    retries?: pulumi.Input<number>;
    startPeriod?: pulumi.Input<string>;
    tests: pulumi.Input<pulumi.Input<string>[]>;
    timeout?: pulumi.Input<string>;
}

export interface ContainerHost {
    host: pulumi.Input<string>;
    ip: pulumi.Input<string>;
}

export interface ContainerLabel {
    label: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ContainerMount {
    bindOptions?: pulumi.Input<inputs.ContainerMountBindOptions>;
    readOnly?: pulumi.Input<boolean>;
    source?: pulumi.Input<string>;
    target: pulumi.Input<string>;
    tmpfsOptions?: pulumi.Input<inputs.ContainerMountTmpfsOptions>;
    type: pulumi.Input<string>;
    volumeOptions?: pulumi.Input<inputs.ContainerMountVolumeOptions>;
}

export interface ContainerMountBindOptions {
    propagation?: pulumi.Input<string>;
}

export interface ContainerMountTmpfsOptions {
    mode?: pulumi.Input<number>;
    sizeBytes?: pulumi.Input<number>;
}

export interface ContainerMountVolumeOptions {
    driverName?: pulumi.Input<string>;
    driverOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    labels?: pulumi.Input<pulumi.Input<inputs.ContainerMountVolumeOptionsLabel>[]>;
    noCopy?: pulumi.Input<boolean>;
}

export interface ContainerMountVolumeOptionsLabel {
    label: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ContainerNetworkData {
    /**
     * @deprecated Use `network_data` instead. The network gateway of the container as read from its NetworkSettings.
     */
    gateway?: pulumi.Input<string>;
    globalIpv6Address?: pulumi.Input<string>;
    globalIpv6PrefixLength?: pulumi.Input<number>;
    /**
     * @deprecated Use `network_data` instead. The IP address of the container's first network it.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * @deprecated Use `network_data` instead. The IP prefix length of the container as read from its NetworkSettings.
     */
    ipPrefixLength?: pulumi.Input<number>;
    ipv6Gateway?: pulumi.Input<string>;
    networkName?: pulumi.Input<string>;
}

export interface ContainerNetworksAdvanced {
    aliases?: pulumi.Input<pulumi.Input<string>[]>;
    ipv4Address?: pulumi.Input<string>;
    ipv6Address?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface ContainerPort {
    external?: pulumi.Input<number>;
    internal: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
}

export interface ContainerUlimit {
    hard: pulumi.Input<number>;
    name: pulumi.Input<string>;
    soft: pulumi.Input<number>;
}

export interface ContainerUpload {
    content?: pulumi.Input<string>;
    contentBase64?: pulumi.Input<string>;
    executable?: pulumi.Input<boolean>;
    file: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    sourceHash?: pulumi.Input<string>;
}

export interface ContainerVolume {
    containerPath?: pulumi.Input<string>;
    fromContainer?: pulumi.Input<string>;
    hostPath?: pulumi.Input<string>;
    readOnly?: pulumi.Input<boolean>;
    volumeName?: pulumi.Input<string>;
}

export interface NetworkIpamConfig {
    auxAddress?: pulumi.Input<{[key: string]: any}>;
    gateway?: pulumi.Input<string>;
    ipRange?: pulumi.Input<string>;
    subnet?: pulumi.Input<string>;
}

export interface NetworkLabel {
    label: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface PluginGrantPermission {
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProviderRegistryAuth {
    address: pulumi.Input<string>;
    configFile?: pulumi.Input<string>;
    configFileContent?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface RegistryImageBuild {
    authConfigs?: pulumi.Input<pulumi.Input<inputs.RegistryImageBuildAuthConfig>[]>;
    buildArgs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    buildId?: pulumi.Input<string>;
    cacheFroms?: pulumi.Input<pulumi.Input<string>[]>;
    cgroupParent?: pulumi.Input<string>;
    context: pulumi.Input<string>;
    cpuPeriod?: pulumi.Input<number>;
    cpuQuota?: pulumi.Input<number>;
    cpuSetCpus?: pulumi.Input<string>;
    cpuSetMems?: pulumi.Input<string>;
    cpuShares?: pulumi.Input<number>;
    dockerfile?: pulumi.Input<string>;
    extraHosts?: pulumi.Input<pulumi.Input<string>[]>;
    forceRemove?: pulumi.Input<boolean>;
    isolation?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    memory?: pulumi.Input<number>;
    memorySwap?: pulumi.Input<number>;
    networkMode?: pulumi.Input<string>;
    noCache?: pulumi.Input<boolean>;
    platform?: pulumi.Input<string>;
    pullParent?: pulumi.Input<boolean>;
    remoteContext?: pulumi.Input<string>;
    remove?: pulumi.Input<boolean>;
    securityOpts?: pulumi.Input<pulumi.Input<string>[]>;
    sessionId?: pulumi.Input<string>;
    shmSize?: pulumi.Input<number>;
    squash?: pulumi.Input<boolean>;
    suppressOutput?: pulumi.Input<boolean>;
    target?: pulumi.Input<string>;
    ulimits?: pulumi.Input<pulumi.Input<inputs.RegistryImageBuildUlimit>[]>;
    version?: pulumi.Input<string>;
}

export interface RegistryImageBuildAuthConfig {
    auth?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    hostName: pulumi.Input<string>;
    identityToken?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    registryToken?: pulumi.Input<string>;
    serverAddress?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}

export interface RegistryImageBuildUlimit {
    hard: pulumi.Input<number>;
    name: pulumi.Input<string>;
    soft: pulumi.Input<number>;
}

export interface RemoteImageBuild {
    buildArg?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dockerfile?: pulumi.Input<string>;
    forceRemove?: pulumi.Input<boolean>;
    label?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    noCache?: pulumi.Input<boolean>;
    path: pulumi.Input<string>;
    remove?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    target?: pulumi.Input<string>;
}

export interface SecretLabel {
    label: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ServiceAuth {
    password?: pulumi.Input<string>;
    serverAddress: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface ServiceConvergeConfig {
    delay?: pulumi.Input<string>;
    timeout?: pulumi.Input<string>;
}

export interface ServiceEndpointSpec {
    mode?: pulumi.Input<string>;
    ports?: pulumi.Input<pulumi.Input<inputs.ServiceEndpointSpecPort>[]>;
}

export interface ServiceEndpointSpecPort {
    name?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    publishMode?: pulumi.Input<string>;
    publishedPort?: pulumi.Input<number>;
    targetPort: pulumi.Input<number>;
}

export interface ServiceLabel {
    label: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ServiceMode {
    global?: pulumi.Input<boolean>;
    replicated?: pulumi.Input<inputs.ServiceModeReplicated>;
}

export interface ServiceModeReplicated {
    replicas?: pulumi.Input<number>;
}

export interface ServiceRollbackConfig {
    delay?: pulumi.Input<string>;
    failureAction?: pulumi.Input<string>;
    maxFailureRatio?: pulumi.Input<string>;
    monitor?: pulumi.Input<string>;
    order?: pulumi.Input<string>;
    parallelism?: pulumi.Input<number>;
}

export interface ServiceTaskSpec {
    containerSpec: pulumi.Input<inputs.ServiceTaskSpecContainerSpec>;
    forceUpdate?: pulumi.Input<number>;
    logDriver?: pulumi.Input<inputs.ServiceTaskSpecLogDriver>;
    networks?: pulumi.Input<pulumi.Input<string>[]>;
    placement?: pulumi.Input<inputs.ServiceTaskSpecPlacement>;
    resources?: pulumi.Input<inputs.ServiceTaskSpecResources>;
    restartPolicy?: pulumi.Input<inputs.ServiceTaskSpecRestartPolicy>;
    runtime?: pulumi.Input<string>;
}

export interface ServiceTaskSpecContainerSpec {
    args?: pulumi.Input<pulumi.Input<string>[]>;
    commands?: pulumi.Input<pulumi.Input<string>[]>;
    configs?: pulumi.Input<pulumi.Input<inputs.ServiceTaskSpecContainerSpecConfig>[]>;
    dir?: pulumi.Input<string>;
    dnsConfig?: pulumi.Input<inputs.ServiceTaskSpecContainerSpecDnsConfig>;
    env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    healthcheck?: pulumi.Input<inputs.ServiceTaskSpecContainerSpecHealthcheck>;
    hostname?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.ServiceTaskSpecContainerSpecHost>[]>;
    image: pulumi.Input<string>;
    isolation?: pulumi.Input<string>;
    labels?: pulumi.Input<pulumi.Input<inputs.ServiceTaskSpecContainerSpecLabel>[]>;
    mounts?: pulumi.Input<pulumi.Input<inputs.ServiceTaskSpecContainerSpecMount>[]>;
    privileges?: pulumi.Input<inputs.ServiceTaskSpecContainerSpecPrivileges>;
    readOnly?: pulumi.Input<boolean>;
    secrets?: pulumi.Input<pulumi.Input<inputs.ServiceTaskSpecContainerSpecSecret>[]>;
    stopGracePeriod?: pulumi.Input<string>;
    stopSignal?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
}

export interface ServiceTaskSpecContainerSpecConfig {
    configId: pulumi.Input<string>;
    configName?: pulumi.Input<string>;
    fileGid?: pulumi.Input<string>;
    fileMode?: pulumi.Input<number>;
    fileName: pulumi.Input<string>;
    fileUid?: pulumi.Input<string>;
}

export interface ServiceTaskSpecContainerSpecDnsConfig {
    nameservers: pulumi.Input<pulumi.Input<string>[]>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    searches?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ServiceTaskSpecContainerSpecHealthcheck {
    interval?: pulumi.Input<string>;
    retries?: pulumi.Input<number>;
    startPeriod?: pulumi.Input<string>;
    tests: pulumi.Input<pulumi.Input<string>[]>;
    timeout?: pulumi.Input<string>;
}

export interface ServiceTaskSpecContainerSpecHost {
    host: pulumi.Input<string>;
    ip: pulumi.Input<string>;
}

export interface ServiceTaskSpecContainerSpecLabel {
    label: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ServiceTaskSpecContainerSpecMount {
    bindOptions?: pulumi.Input<inputs.ServiceTaskSpecContainerSpecMountBindOptions>;
    readOnly?: pulumi.Input<boolean>;
    source?: pulumi.Input<string>;
    target: pulumi.Input<string>;
    tmpfsOptions?: pulumi.Input<inputs.ServiceTaskSpecContainerSpecMountTmpfsOptions>;
    type: pulumi.Input<string>;
    volumeOptions?: pulumi.Input<inputs.ServiceTaskSpecContainerSpecMountVolumeOptions>;
}

export interface ServiceTaskSpecContainerSpecMountBindOptions {
    propagation?: pulumi.Input<string>;
}

export interface ServiceTaskSpecContainerSpecMountTmpfsOptions {
    mode?: pulumi.Input<number>;
    sizeBytes?: pulumi.Input<number>;
}

export interface ServiceTaskSpecContainerSpecMountVolumeOptions {
    driverName?: pulumi.Input<string>;
    driverOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    labels?: pulumi.Input<pulumi.Input<inputs.ServiceTaskSpecContainerSpecMountVolumeOptionsLabel>[]>;
    noCopy?: pulumi.Input<boolean>;
}

export interface ServiceTaskSpecContainerSpecMountVolumeOptionsLabel {
    label: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ServiceTaskSpecContainerSpecPrivileges {
    credentialSpec?: pulumi.Input<inputs.ServiceTaskSpecContainerSpecPrivilegesCredentialSpec>;
    seLinuxContext?: pulumi.Input<inputs.ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext>;
}

export interface ServiceTaskSpecContainerSpecPrivilegesCredentialSpec {
    file?: pulumi.Input<string>;
    registry?: pulumi.Input<string>;
}

export interface ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext {
    disable?: pulumi.Input<boolean>;
    level?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
}

export interface ServiceTaskSpecContainerSpecSecret {
    fileGid?: pulumi.Input<string>;
    fileMode?: pulumi.Input<number>;
    fileName: pulumi.Input<string>;
    fileUid?: pulumi.Input<string>;
    secretId: pulumi.Input<string>;
    secretName?: pulumi.Input<string>;
}

export interface ServiceTaskSpecLogDriver {
    name: pulumi.Input<string>;
    options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ServiceTaskSpecPlacement {
    constraints?: pulumi.Input<pulumi.Input<string>[]>;
    maxReplicas?: pulumi.Input<number>;
    platforms?: pulumi.Input<pulumi.Input<inputs.ServiceTaskSpecPlacementPlatform>[]>;
    prefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ServiceTaskSpecPlacementPlatform {
    architecture: pulumi.Input<string>;
    os: pulumi.Input<string>;
}

export interface ServiceTaskSpecResources {
    limits?: pulumi.Input<inputs.ServiceTaskSpecResourcesLimits>;
    reservation?: pulumi.Input<inputs.ServiceTaskSpecResourcesReservation>;
}

export interface ServiceTaskSpecResourcesLimits {
    memoryBytes?: pulumi.Input<number>;
    nanoCpus?: pulumi.Input<number>;
}

export interface ServiceTaskSpecResourcesReservation {
    genericResources?: pulumi.Input<inputs.ServiceTaskSpecResourcesReservationGenericResources>;
    memoryBytes?: pulumi.Input<number>;
    nanoCpus?: pulumi.Input<number>;
}

export interface ServiceTaskSpecResourcesReservationGenericResources {
    discreteResourcesSpecs?: pulumi.Input<pulumi.Input<string>[]>;
    namedResourcesSpecs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ServiceTaskSpecRestartPolicy {
    condition?: pulumi.Input<string>;
    delay?: pulumi.Input<string>;
    maxAttempts?: pulumi.Input<number>;
    window?: pulumi.Input<string>;
}

export interface ServiceUpdateConfig {
    delay?: pulumi.Input<string>;
    failureAction?: pulumi.Input<string>;
    maxFailureRatio?: pulumi.Input<string>;
    monitor?: pulumi.Input<string>;
    order?: pulumi.Input<string>;
    parallelism?: pulumi.Input<number>;
}

export interface VolumeLabel {
    label: pulumi.Input<string>;
    value: pulumi.Input<string>;
}
export namespace config {
}
