// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";

export interface ContainerCapabilities {
    /**
     * list of linux capabilities to add.
     */
    adds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of linux capabilities to drop.
     */
    drops?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ContainerDevice {
    /**
     * The path in the container where the
     * device will be binded.
     */
    containerPath?: pulumi.Input<string>;
    /**
     * The path on the host where the device
     * is located.
     */
    hostPath: pulumi.Input<string>;
    /**
     * The cgroup permissions given to the
     * container to access the device.
     * Defaults to `rwm`.
     */
    permissions?: pulumi.Input<string>;
}

export interface ContainerHealthcheck {
    interval?: pulumi.Input<string>;
    retries?: pulumi.Input<number>;
    startPeriod?: pulumi.Input<string>;
    tests: pulumi.Input<pulumi.Input<string>[]>;
    timeout?: pulumi.Input<string>;
}

export interface ContainerHost {
    /**
     * Hostname to add.
     */
    host: pulumi.Input<string>;
    /**
     * IP address this hostname should resolve to.
     */
    ip: pulumi.Input<string>;
}

export interface ContainerLabel {
    /**
     * Name of the label
     * * `value` (Required, string) Value of the label
     */
    label: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ContainerMount {
    /**
     * Optional configuration for the `bind` type.
     */
    bindOptions?: pulumi.Input<inputs.ContainerMountBindOptions>;
    /**
     * If true, this volume will be readonly.
     * Defaults to false.
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * A filename that references a file which will be uploaded as the object content. This allows for large file uploads that do not get stored in state.
     */
    source?: pulumi.Input<string>;
    /**
     * The container path.
     */
    target: pulumi.Input<string>;
    /**
     * Optional configuration for the `tmpf` type.
     */
    tmpfsOptions?: pulumi.Input<inputs.ContainerMountTmpfsOptions>;
    /**
     * The mount type: valid values are `bind|volume|tmpfs`.
     */
    type: pulumi.Input<string>;
    /**
     * Optional configuration for the `volume` type.
     */
    volumeOptions?: pulumi.Input<inputs.ContainerMountVolumeOptions>;
}

export interface ContainerMountBindOptions {
    /**
     * A propagation mode with the value.
     */
    propagation?: pulumi.Input<string>;
}

export interface ContainerMountTmpfsOptions {
    /**
     * The permission mode for the tmpfs mount in an integer.
     */
    mode?: pulumi.Input<number>;
    /**
     * The size for the tmpfs mount in bytes.
     */
    sizeBytes?: pulumi.Input<number>;
}

export interface ContainerMountVolumeOptions {
    driverName?: pulumi.Input<string>;
    /**
     * Options for the driver.
     */
    driverOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Adding labels.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.ContainerMountVolumeOptionsLabel>[]>;
    /**
     * Whether to populate volume with data from the target.
     */
    noCopy?: pulumi.Input<boolean>;
}

export interface ContainerMountVolumeOptionsLabel {
    /**
     * Name of the label
     * * `value` (Required, string) Value of the label
     */
    label: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ContainerNetworkData {
    /**
     * *Deprecated:* Use `networkData` instead. The network gateway of the container as read from its
     * NetworkSettings.
     */
    gateway?: pulumi.Input<string>;
    /**
     * *Deprecated:* Use `networkData` instead. The IP address of the container's first network it.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * *Deprecated:* Use `networkData` instead. The IP prefix length of the container as read from its
     * NetworkSettings.
     */
    ipPrefixLength?: pulumi.Input<number>;
    networkName?: pulumi.Input<string>;
}

export interface ContainerNetworksAdvanced {
    /**
     * The network aliases of the container in the specific network.
     */
    aliases?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The IPV4 address of the container in the specific network.
     */
    ipv4Address?: pulumi.Input<string>;
    /**
     * The IPV6 address of the container in the specific network.
     */
    ipv6Address?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface ContainerPort {
    /**
     * Port exposed out of the container. If not given a free random port `>= 32768` will be used.
     */
    external?: pulumi.Input<number>;
    /**
     * Port within the container.
     */
    internal: pulumi.Input<number>;
    /**
     * IP address this hostname should resolve to.
     */
    ip?: pulumi.Input<string>;
    /**
     * Protocol that can be used over this port,
     * defaults to `tcp`.
     */
    protocol?: pulumi.Input<string>;
}

export interface ContainerUlimit {
    hard: pulumi.Input<number>;
    name: pulumi.Input<string>;
    soft: pulumi.Input<number>;
}

export interface ContainerUpload {
    /**
     * Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.
     */
    content?: pulumi.Input<string>;
    /**
     * <elided>
     */
    contentBase64?: pulumi.Input<string>;
    /**
     * If true, the file will be uploaded with user
     * executable permission.
     * Defaults to false.
     */
    executable?: pulumi.Input<boolean>;
    /**
     * path to a file in the container.
     */
    file: pulumi.Input<string>;
    /**
     * A filename that references a file which will be uploaded as the object content. This allows for large file uploads that do not get stored in state.
     */
    source?: pulumi.Input<string>;
    /**
     * If using `source`, this will force an update if the file content has updated but the filename has not. 
     */
    sourceHash?: pulumi.Input<string>;
}

export interface ContainerVolume {
    /**
     * The path in the container where the
     * device will be binded.
     */
    containerPath?: pulumi.Input<string>;
    /**
     * The container where the volume is
     * coming from.
     */
    fromContainer?: pulumi.Input<string>;
    /**
     * The path on the host where the device
     * is located.
     */
    hostPath?: pulumi.Input<string>;
    /**
     * If true, this volume will be readonly.
     * Defaults to false.
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * The name of the docker volume which
     * should be mounted.
     */
    volumeName?: pulumi.Input<string>;
}

export interface NetworkIpamConfig {
    auxAddress?: pulumi.Input<{[key: string]: any}>;
    gateway?: pulumi.Input<string>;
    ipRange?: pulumi.Input<string>;
    subnet?: pulumi.Input<string>;
}

export interface NetworkLabel {
    /**
     * Name of the label
     * * `value` (Required, string) Value of the label
     */
    label: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ProviderRegistryAuth {
    address: pulumi.Input<string>;
    configFile?: pulumi.Input<string>;
    configFileContent?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface SecretLabel {
    /**
     * Name of the label
     * * `value` (Required, string) Value of the label
     */
    label: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ServiceAuth {
    /**
     * The password to use for authenticating to the registry. If this is blank, the `DOCKER_REGISTRY_PASS` is also be checked.
     */
    password?: pulumi.Input<string>;
    /**
     * The address of the registry server
     */
    serverAddress: pulumi.Input<string>;
    /**
     * The username to use for authenticating to the registry. If this is blank, the `DOCKER_REGISTRY_USER` is also be checked. 
     */
    username?: pulumi.Input<string>;
}

export interface ServiceConvergeConfig {
    delay?: pulumi.Input<string>;
    timeout?: pulumi.Input<string>;
}

export interface ServiceEndpointSpec {
    /**
     * The mode of resolution to use for internal load balancing between tasks. `(vip|dnsrr)`. Default: `vip`.
     */
    mode?: pulumi.Input<string>;
    /**
     * See Ports below for details.
     */
    ports?: pulumi.Input<pulumi.Input<inputs.ServiceEndpointSpecPort>[]>;
}

export interface ServiceEndpointSpecPort {
    /**
     * A random name for the port.
     */
    name?: pulumi.Input<string>;
    /**
     * Protocol that can be used over this port: `tcp|udp|sctp`. Default: `tcp`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Represents the mode in which the port is to be published: `ingress|host`
     */
    publishMode?: pulumi.Input<string>;
    /**
     * The port on the swarm hosts. If not set the value of `targetPort` will be used.
     */
    publishedPort?: pulumi.Input<number>;
    /**
     * Port inside the container.
     */
    targetPort: pulumi.Input<number>;
}

export interface ServiceLabel {
    label: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ServiceMode {
    global?: pulumi.Input<boolean>;
    replicated?: pulumi.Input<inputs.ServiceModeReplicated>;
}

export interface ServiceModeReplicated {
    replicas?: pulumi.Input<number>;
}

export interface ServiceRollbackConfig {
    delay?: pulumi.Input<string>;
    failureAction?: pulumi.Input<string>;
    maxFailureRatio?: pulumi.Input<string>;
    monitor?: pulumi.Input<string>;
    order?: pulumi.Input<string>;
    parallelism?: pulumi.Input<number>;
}

export interface ServiceTaskSpec {
    containerSpec: pulumi.Input<inputs.ServiceTaskSpecContainerSpec>;
    forceUpdate?: pulumi.Input<number>;
    logDriver?: pulumi.Input<inputs.ServiceTaskSpecLogDriver>;
    networks?: pulumi.Input<pulumi.Input<string>[]>;
    placement?: pulumi.Input<inputs.ServiceTaskSpecPlacement>;
    resources?: pulumi.Input<inputs.ServiceTaskSpecResources>;
    restartPolicy?: pulumi.Input<inputs.ServiceTaskSpecRestartPolicy>;
    runtime?: pulumi.Input<string>;
}

export interface ServiceTaskSpecContainerSpec {
    args?: pulumi.Input<pulumi.Input<string>[]>;
    commands?: pulumi.Input<pulumi.Input<string>[]>;
    configs?: pulumi.Input<pulumi.Input<inputs.ServiceTaskSpecContainerSpecConfig>[]>;
    dir?: pulumi.Input<string>;
    dnsConfig?: pulumi.Input<inputs.ServiceTaskSpecContainerSpecDnsConfig>;
    env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    healthcheck?: pulumi.Input<inputs.ServiceTaskSpecContainerSpecHealthcheck>;
    hostname?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.ServiceTaskSpecContainerSpecHost>[]>;
    image: pulumi.Input<string>;
    isolation?: pulumi.Input<string>;
    labels?: pulumi.Input<pulumi.Input<inputs.ServiceTaskSpecContainerSpecLabel>[]>;
    mounts?: pulumi.Input<pulumi.Input<inputs.ServiceTaskSpecContainerSpecMount>[]>;
    privileges?: pulumi.Input<inputs.ServiceTaskSpecContainerSpecPrivileges>;
    readOnly?: pulumi.Input<boolean>;
    secrets?: pulumi.Input<pulumi.Input<inputs.ServiceTaskSpecContainerSpecSecret>[]>;
    stopGracePeriod?: pulumi.Input<string>;
    stopSignal?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
}

export interface ServiceTaskSpecContainerSpecConfig {
    /**
     * ConfigID represents the ID of the specific config.
     */
    configId: pulumi.Input<string>;
    /**
     * The name of the config that this references, but internally it is just provided for lookup/display purposes
     */
    configName?: pulumi.Input<string>;
    /**
     * Represents the file GID. Defaults: `0`
     */
    fileGid?: pulumi.Input<string>;
    /**
     * Represents the FileMode of the file. Defaults: `0444`
     */
    fileMode?: pulumi.Input<number>;
    /**
     * Represents the final filename in the filesystem. The specific target file that the config data is written within the docker container, e.g. `/root/config/config.json`
     */
    fileName: pulumi.Input<string>;
    /**
     * Represents the file UID. Defaults: `0`
     */
    fileUid?: pulumi.Input<string>;
}

export interface ServiceTaskSpecContainerSpecDnsConfig {
    nameservers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The options for the logging driver, e.g.
     */
    options?: pulumi.Input<pulumi.Input<string>[]>;
    searches?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ServiceTaskSpecContainerSpecHealthcheck {
    interval?: pulumi.Input<string>;
    retries?: pulumi.Input<number>;
    startPeriod?: pulumi.Input<string>;
    tests: pulumi.Input<pulumi.Input<string>[]>;
    timeout?: pulumi.Input<string>;
}

export interface ServiceTaskSpecContainerSpecHost {
    host: pulumi.Input<string>;
    ip: pulumi.Input<string>;
}

export interface ServiceTaskSpecContainerSpecLabel {
    label: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ServiceTaskSpecContainerSpecMount {
    bindOptions?: pulumi.Input<inputs.ServiceTaskSpecContainerSpecMountBindOptions>;
    readOnly?: pulumi.Input<boolean>;
    source?: pulumi.Input<string>;
    target: pulumi.Input<string>;
    tmpfsOptions?: pulumi.Input<inputs.ServiceTaskSpecContainerSpecMountTmpfsOptions>;
    type: pulumi.Input<string>;
    volumeOptions?: pulumi.Input<inputs.ServiceTaskSpecContainerSpecMountVolumeOptions>;
}

export interface ServiceTaskSpecContainerSpecMountBindOptions {
    propagation?: pulumi.Input<string>;
}

export interface ServiceTaskSpecContainerSpecMountTmpfsOptions {
    /**
     * The mode of resolution to use for internal load balancing between tasks. `(vip|dnsrr)`. Default: `vip`.
     */
    mode?: pulumi.Input<number>;
    sizeBytes?: pulumi.Input<number>;
}

export interface ServiceTaskSpecContainerSpecMountVolumeOptions {
    driverName?: pulumi.Input<string>;
    driverOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    labels?: pulumi.Input<pulumi.Input<inputs.ServiceTaskSpecContainerSpecMountVolumeOptionsLabel>[]>;
    noCopy?: pulumi.Input<boolean>;
}

export interface ServiceTaskSpecContainerSpecMountVolumeOptionsLabel {
    label: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ServiceTaskSpecContainerSpecPrivileges {
    credentialSpec?: pulumi.Input<inputs.ServiceTaskSpecContainerSpecPrivilegesCredentialSpec>;
    seLinuxContext?: pulumi.Input<inputs.ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext>;
}

export interface ServiceTaskSpecContainerSpecPrivilegesCredentialSpec {
    file?: pulumi.Input<string>;
    registry?: pulumi.Input<string>;
}

export interface ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext {
    disable?: pulumi.Input<boolean>;
    level?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
}

export interface ServiceTaskSpecContainerSpecSecret {
    /**
     * Represents the file GID. Defaults: `0`
     */
    fileGid?: pulumi.Input<string>;
    /**
     * Represents the FileMode of the file. Defaults: `0444`
     */
    fileMode?: pulumi.Input<number>;
    /**
     * Represents the final filename in the filesystem. The specific target file that the config data is written within the docker container, e.g. `/root/config/config.json`
     */
    fileName: pulumi.Input<string>;
    /**
     * Represents the file UID. Defaults: `0`
     */
    fileUid?: pulumi.Input<string>;
    secretId: pulumi.Input<string>;
    secretName?: pulumi.Input<string>;
}

export interface ServiceTaskSpecLogDriver {
    /**
     * A random name for the port.
     */
    name: pulumi.Input<string>;
    /**
     * The options for the logging driver, e.g.
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ServiceTaskSpecPlacement {
    constraints?: pulumi.Input<pulumi.Input<string>[]>;
    platforms?: pulumi.Input<pulumi.Input<inputs.ServiceTaskSpecPlacementPlatform>[]>;
    prefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ServiceTaskSpecPlacementPlatform {
    architecture: pulumi.Input<string>;
    os: pulumi.Input<string>;
}

export interface ServiceTaskSpecResources {
    limits?: pulumi.Input<inputs.ServiceTaskSpecResourcesLimits>;
    reservation?: pulumi.Input<inputs.ServiceTaskSpecResourcesReservation>;
}

export interface ServiceTaskSpecResourcesLimits {
    genericResources?: pulumi.Input<inputs.ServiceTaskSpecResourcesLimitsGenericResources>;
    memoryBytes?: pulumi.Input<number>;
    nanoCpus?: pulumi.Input<number>;
}

export interface ServiceTaskSpecResourcesLimitsGenericResources {
    discreteResourcesSpecs?: pulumi.Input<pulumi.Input<string>[]>;
    namedResourcesSpecs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ServiceTaskSpecResourcesReservation {
    genericResources?: pulumi.Input<inputs.ServiceTaskSpecResourcesReservationGenericResources>;
    memoryBytes?: pulumi.Input<number>;
    nanoCpus?: pulumi.Input<number>;
}

export interface ServiceTaskSpecResourcesReservationGenericResources {
    discreteResourcesSpecs?: pulumi.Input<pulumi.Input<string>[]>;
    namedResourcesSpecs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ServiceTaskSpecRestartPolicy {
    condition?: pulumi.Input<string>;
    delay?: pulumi.Input<string>;
    maxAttempts?: pulumi.Input<number>;
    window?: pulumi.Input<string>;
}

export interface ServiceUpdateConfig {
    delay?: pulumi.Input<string>;
    failureAction?: pulumi.Input<string>;
    maxFailureRatio?: pulumi.Input<string>;
    monitor?: pulumi.Input<string>;
    order?: pulumi.Input<string>;
    parallelism?: pulumi.Input<number>;
}

export interface VolumeLabel {
    label: pulumi.Input<string>;
    value: pulumi.Input<string>;
}
