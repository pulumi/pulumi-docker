// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * A real CRUD docker image we hope
 */
export class Image extends pulumi.CustomResource {
    /**
     * Get an existing Image resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Image {
        return new Image(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'docker:index/image:Image';

    /**
     * Returns true if the given object is an instance of Image.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Image {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Image.__pulumiType;
    }

    /**
     * The path to the build context to use.
     */
    public readonly context!: pulumi.Output<string>;
    /**
     * The path to the Dockerfile to use.
     */
    public readonly dockerfile!: pulumi.Output<string>;
    /**
     * The image name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The URL of the registry server hosting the image.
     */
    public readonly registryURL!: pulumi.Output<string>;
    /**
     * The image tag.
     */
    public readonly tag!: pulumi.Output<string | undefined>;

    /**
     * Create a Image resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.registry === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registry'");
            }
            if ((!args || args.registryURL === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registryURL'");
            }
            resourceInputs["context"] = args ? args.context : undefined;
            resourceInputs["dockerfile"] = args ? args.dockerfile : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["registry"] = args ? args.registry : undefined;
            resourceInputs["registryURL"] = args ? args.registryURL : undefined;
            resourceInputs["tag"] = (args ? args.tag : undefined) ?? "latest";
        } else {
            resourceInputs["context"] = undefined /*out*/;
            resourceInputs["dockerfile"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["registryURL"] = undefined /*out*/;
            resourceInputs["tag"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Image.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Image resource.
 */
export interface ImageArgs {
    /**
     * The path to the build context to use.
     */
    context?: pulumi.Input<string>;
    /**
     * The path to the Dockerfile to use.
     */
    dockerfile?: pulumi.Input<string>;
    /**
     * The image name
     */
    name: pulumi.Input<string>;
    /**
     * The registry to push the image to
     */
    registry: pulumi.Input<inputs.Registry>;
    /**
     * The URL of the registry server hosting the image.
     */
    registryURL: pulumi.Input<string>;
    /**
     * The image tag.
     */
    tag?: pulumi.Input<string>;
}
