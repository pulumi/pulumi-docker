// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource manages the lifecycle of a Docker service. By default, the creation, update and delete of services are detached.
 * 
 * With the Converge Config the behavior of the `docker cli` is imitated to guarantee that
 * for example, all tasks of a service are running or successfully updated or to inform `terraform` that a service could not
 * be updated and was successfully rolled back.
 */
export class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceState): Service {
        return new Service(name, <any>state, { id });
    }

    /**
     * See Auth below for details.
     */
    public readonly auth: pulumi.Output<{ password?: string, serverAddress: string, username?: string } | undefined>;
    /**
     * See Converge Config below for details.
     */
    public readonly convergeConfig: pulumi.Output<{ delay?: string, timeout?: string } | undefined>;
    /**
     * See EndpointSpec below for details.
     */
    public readonly endpointSpec: pulumi.Output<{ mode: string, ports?: { name?: string, protocol?: string, publishMode?: string, publishedPort?: number, targetPort: number }[] }>;
    /**
     * User-defined key/value metadata
     */
    public readonly labels: pulumi.Output<{[key: string]: string}>;
    /**
     * See Mode below for details.
     */
    public readonly mode: pulumi.Output<{ global?: boolean, replicated: { replicas?: number } }>;
    /**
     * The name of the Docker service.
     */
    public readonly name: pulumi.Output<string>;
    /**
     * See RollbackConfig below for details.
     */
    public readonly rollbackConfig: pulumi.Output<{ delay?: string, failureAction?: string, maxFailureRatio?: string, monitor?: string, order?: string, parallelism?: number } | undefined>;
    /**
     * See TaskSpec below for details.
     */
    public readonly taskSpec: pulumi.Output<{ containerSpec: { args?: string[], commands?: string[], configs?: { configId: string, configName?: string, fileName: string }[], dir?: string, dnsConfig: { nameservers: string[], options?: string[], searches?: string[] }, env?: {[key: string]: string}, groups?: string[], healthcheck: { interval?: string, retries?: number, startPeriod?: string, tests: string[], timeout?: string }, hostname?: string, hosts?: { host: string, ip: string }[], image: string, isolation?: string, labels?: {[key: string]: string}, mounts?: { bindOptions?: { propagation?: string }, readOnly?: boolean, source: string, target: string, tmpfsOptions?: { mode?: number, sizeBytes?: number }, type: string, volumeOptions?: { driverName?: string, driverOptions?: {[key: string]: string}, labels?: {[key: string]: string}, noCopy?: boolean } }[], privileges?: { credentialSpec?: { file?: string, registry?: string }, seLinuxContext?: { disable?: boolean, level?: string, role?: string, type?: string, user?: string } }, readOnly?: boolean, secrets?: { fileName: string, secretId: string, secretName?: string }[], stopGracePeriod: string, stopSignal?: string, user?: string }, forceUpdate: number, logDriver?: { name: string, options?: {[key: string]: string} }, networks?: string[], placement: { constraints?: string[], platforms?: { architecture: string, os: string }[], prefs?: string[] }, resources: { limits?: { genericResources?: { discreteResourcesSpecs?: string[], namedResourcesSpecs?: string[] }, memoryBytes?: number, nanoCpus?: number }, reservation?: { genericResources?: { discreteResourcesSpecs?: string[], namedResourcesSpecs?: string[] }, memoryBytes?: number, nanoCpus?: number } }, restartPolicy: { condition?: string, delay?: string, maxAttempts?: number, window?: string }, runtime: string }>;
    /**
     * See UpdateConfig below for details.
     */
    public readonly updateConfig: pulumi.Output<{ delay?: string, failureAction?: string, maxFailureRatio?: string, monitor?: string, order?: string, parallelism?: number } | undefined>;

    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceArgs | ServiceState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: ServiceState = argsOrState as ServiceState | undefined;
            inputs["auth"] = state ? state.auth : undefined;
            inputs["convergeConfig"] = state ? state.convergeConfig : undefined;
            inputs["endpointSpec"] = state ? state.endpointSpec : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["mode"] = state ? state.mode : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["rollbackConfig"] = state ? state.rollbackConfig : undefined;
            inputs["taskSpec"] = state ? state.taskSpec : undefined;
            inputs["updateConfig"] = state ? state.updateConfig : undefined;
        } else {
            const args = argsOrState as ServiceArgs | undefined;
            if (!args || args.taskSpec === undefined) {
                throw new Error("Missing required property 'taskSpec'");
            }
            inputs["auth"] = args ? args.auth : undefined;
            inputs["convergeConfig"] = args ? args.convergeConfig : undefined;
            inputs["endpointSpec"] = args ? args.endpointSpec : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["mode"] = args ? args.mode : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["rollbackConfig"] = args ? args.rollbackConfig : undefined;
            inputs["taskSpec"] = args ? args.taskSpec : undefined;
            inputs["updateConfig"] = args ? args.updateConfig : undefined;
        }
        super("docker:swarm/service:Service", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Service resources.
 */
export interface ServiceState {
    /**
     * See Auth below for details.
     */
    readonly auth?: pulumi.Input<{ password?: pulumi.Input<string>, serverAddress: pulumi.Input<string>, username?: pulumi.Input<string> }>;
    /**
     * See Converge Config below for details.
     */
    readonly convergeConfig?: pulumi.Input<{ delay?: pulumi.Input<string>, timeout?: pulumi.Input<string> }>;
    /**
     * See EndpointSpec below for details.
     */
    readonly endpointSpec?: pulumi.Input<{ mode?: pulumi.Input<string>, ports?: pulumi.Input<pulumi.Input<{ name?: pulumi.Input<string>, protocol?: pulumi.Input<string>, publishMode?: pulumi.Input<string>, publishedPort?: pulumi.Input<number>, targetPort: pulumi.Input<number> }>[]> }>;
    /**
     * User-defined key/value metadata
     */
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * See Mode below for details.
     */
    readonly mode?: pulumi.Input<{ global?: pulumi.Input<boolean>, replicated?: pulumi.Input<{ replicas?: pulumi.Input<number> }> }>;
    /**
     * The name of the Docker service.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * See RollbackConfig below for details.
     */
    readonly rollbackConfig?: pulumi.Input<{ delay?: pulumi.Input<string>, failureAction?: pulumi.Input<string>, maxFailureRatio?: pulumi.Input<string>, monitor?: pulumi.Input<string>, order?: pulumi.Input<string>, parallelism?: pulumi.Input<number> }>;
    /**
     * See TaskSpec below for details.
     */
    readonly taskSpec?: pulumi.Input<{ containerSpec: pulumi.Input<{ args?: pulumi.Input<pulumi.Input<string>[]>, commands?: pulumi.Input<pulumi.Input<string>[]>, configs?: pulumi.Input<pulumi.Input<{ configId: pulumi.Input<string>, configName?: pulumi.Input<string>, fileName: pulumi.Input<string> }>[]>, dir?: pulumi.Input<string>, dnsConfig?: pulumi.Input<{ nameservers: pulumi.Input<pulumi.Input<string>[]>, options?: pulumi.Input<pulumi.Input<string>[]>, searches?: pulumi.Input<pulumi.Input<string>[]> }>, env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>, groups?: pulumi.Input<pulumi.Input<string>[]>, healthcheck?: pulumi.Input<{ interval?: pulumi.Input<string>, retries?: pulumi.Input<number>, startPeriod?: pulumi.Input<string>, tests: pulumi.Input<pulumi.Input<string>[]>, timeout?: pulumi.Input<string> }>, hostname?: pulumi.Input<string>, hosts?: pulumi.Input<pulumi.Input<{ host: pulumi.Input<string>, ip: pulumi.Input<string> }>[]>, image: pulumi.Input<string>, isolation?: pulumi.Input<string>, labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>, mounts?: pulumi.Input<pulumi.Input<{ bindOptions?: pulumi.Input<{ propagation?: pulumi.Input<string> }>, readOnly?: pulumi.Input<boolean>, source: pulumi.Input<string>, target: pulumi.Input<string>, tmpfsOptions?: pulumi.Input<{ mode?: pulumi.Input<number>, sizeBytes?: pulumi.Input<number> }>, type: pulumi.Input<string>, volumeOptions?: pulumi.Input<{ driverName?: pulumi.Input<string>, driverOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>, labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>, noCopy?: pulumi.Input<boolean> }> }>[]>, privileges?: pulumi.Input<{ credentialSpec?: pulumi.Input<{ file?: pulumi.Input<string>, registry?: pulumi.Input<string> }>, seLinuxContext?: pulumi.Input<{ disable?: pulumi.Input<boolean>, level?: pulumi.Input<string>, role?: pulumi.Input<string>, type?: pulumi.Input<string>, user?: pulumi.Input<string> }> }>, readOnly?: pulumi.Input<boolean>, secrets?: pulumi.Input<pulumi.Input<{ fileName: pulumi.Input<string>, secretId: pulumi.Input<string>, secretName?: pulumi.Input<string> }>[]>, stopGracePeriod?: pulumi.Input<string>, stopSignal?: pulumi.Input<string>, user?: pulumi.Input<string> }>, forceUpdate?: pulumi.Input<number>, logDriver?: pulumi.Input<{ name: pulumi.Input<string>, options?: pulumi.Input<{[key: string]: pulumi.Input<string>}> }>, networks?: pulumi.Input<pulumi.Input<string>[]>, placement?: pulumi.Input<{ constraints?: pulumi.Input<pulumi.Input<string>[]>, platforms?: pulumi.Input<pulumi.Input<{ architecture: pulumi.Input<string>, os: pulumi.Input<string> }>[]>, prefs?: pulumi.Input<pulumi.Input<string>[]> }>, resources?: pulumi.Input<{ limits?: pulumi.Input<{ genericResources?: pulumi.Input<{ discreteResourcesSpecs?: pulumi.Input<pulumi.Input<string>[]>, namedResourcesSpecs?: pulumi.Input<pulumi.Input<string>[]> }>, memoryBytes?: pulumi.Input<number>, nanoCpus?: pulumi.Input<number> }>, reservation?: pulumi.Input<{ genericResources?: pulumi.Input<{ discreteResourcesSpecs?: pulumi.Input<pulumi.Input<string>[]>, namedResourcesSpecs?: pulumi.Input<pulumi.Input<string>[]> }>, memoryBytes?: pulumi.Input<number>, nanoCpus?: pulumi.Input<number> }> }>, restartPolicy?: pulumi.Input<{ condition?: pulumi.Input<string>, delay?: pulumi.Input<string>, maxAttempts?: pulumi.Input<number>, window?: pulumi.Input<string> }>, runtime?: pulumi.Input<string> }>;
    /**
     * See UpdateConfig below for details.
     */
    readonly updateConfig?: pulumi.Input<{ delay?: pulumi.Input<string>, failureAction?: pulumi.Input<string>, maxFailureRatio?: pulumi.Input<string>, monitor?: pulumi.Input<string>, order?: pulumi.Input<string>, parallelism?: pulumi.Input<number> }>;
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    /**
     * See Auth below for details.
     */
    readonly auth?: pulumi.Input<{ password?: pulumi.Input<string>, serverAddress: pulumi.Input<string>, username?: pulumi.Input<string> }>;
    /**
     * See Converge Config below for details.
     */
    readonly convergeConfig?: pulumi.Input<{ delay?: pulumi.Input<string>, timeout?: pulumi.Input<string> }>;
    /**
     * See EndpointSpec below for details.
     */
    readonly endpointSpec?: pulumi.Input<{ mode?: pulumi.Input<string>, ports?: pulumi.Input<pulumi.Input<{ name?: pulumi.Input<string>, protocol?: pulumi.Input<string>, publishMode?: pulumi.Input<string>, publishedPort?: pulumi.Input<number>, targetPort: pulumi.Input<number> }>[]> }>;
    /**
     * User-defined key/value metadata
     */
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * See Mode below for details.
     */
    readonly mode?: pulumi.Input<{ global?: pulumi.Input<boolean>, replicated?: pulumi.Input<{ replicas?: pulumi.Input<number> }> }>;
    /**
     * The name of the Docker service.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * See RollbackConfig below for details.
     */
    readonly rollbackConfig?: pulumi.Input<{ delay?: pulumi.Input<string>, failureAction?: pulumi.Input<string>, maxFailureRatio?: pulumi.Input<string>, monitor?: pulumi.Input<string>, order?: pulumi.Input<string>, parallelism?: pulumi.Input<number> }>;
    /**
     * See TaskSpec below for details.
     */
    readonly taskSpec: pulumi.Input<{ containerSpec: pulumi.Input<{ args?: pulumi.Input<pulumi.Input<string>[]>, commands?: pulumi.Input<pulumi.Input<string>[]>, configs?: pulumi.Input<pulumi.Input<{ configId: pulumi.Input<string>, configName?: pulumi.Input<string>, fileName: pulumi.Input<string> }>[]>, dir?: pulumi.Input<string>, dnsConfig?: pulumi.Input<{ nameservers: pulumi.Input<pulumi.Input<string>[]>, options?: pulumi.Input<pulumi.Input<string>[]>, searches?: pulumi.Input<pulumi.Input<string>[]> }>, env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>, groups?: pulumi.Input<pulumi.Input<string>[]>, healthcheck?: pulumi.Input<{ interval?: pulumi.Input<string>, retries?: pulumi.Input<number>, startPeriod?: pulumi.Input<string>, tests: pulumi.Input<pulumi.Input<string>[]>, timeout?: pulumi.Input<string> }>, hostname?: pulumi.Input<string>, hosts?: pulumi.Input<pulumi.Input<{ host: pulumi.Input<string>, ip: pulumi.Input<string> }>[]>, image: pulumi.Input<string>, isolation?: pulumi.Input<string>, labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>, mounts?: pulumi.Input<pulumi.Input<{ bindOptions?: pulumi.Input<{ propagation?: pulumi.Input<string> }>, readOnly?: pulumi.Input<boolean>, source: pulumi.Input<string>, target: pulumi.Input<string>, tmpfsOptions?: pulumi.Input<{ mode?: pulumi.Input<number>, sizeBytes?: pulumi.Input<number> }>, type: pulumi.Input<string>, volumeOptions?: pulumi.Input<{ driverName?: pulumi.Input<string>, driverOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>, labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>, noCopy?: pulumi.Input<boolean> }> }>[]>, privileges?: pulumi.Input<{ credentialSpec?: pulumi.Input<{ file?: pulumi.Input<string>, registry?: pulumi.Input<string> }>, seLinuxContext?: pulumi.Input<{ disable?: pulumi.Input<boolean>, level?: pulumi.Input<string>, role?: pulumi.Input<string>, type?: pulumi.Input<string>, user?: pulumi.Input<string> }> }>, readOnly?: pulumi.Input<boolean>, secrets?: pulumi.Input<pulumi.Input<{ fileName: pulumi.Input<string>, secretId: pulumi.Input<string>, secretName?: pulumi.Input<string> }>[]>, stopGracePeriod?: pulumi.Input<string>, stopSignal?: pulumi.Input<string>, user?: pulumi.Input<string> }>, forceUpdate?: pulumi.Input<number>, logDriver?: pulumi.Input<{ name: pulumi.Input<string>, options?: pulumi.Input<{[key: string]: pulumi.Input<string>}> }>, networks?: pulumi.Input<pulumi.Input<string>[]>, placement?: pulumi.Input<{ constraints?: pulumi.Input<pulumi.Input<string>[]>, platforms?: pulumi.Input<pulumi.Input<{ architecture: pulumi.Input<string>, os: pulumi.Input<string> }>[]>, prefs?: pulumi.Input<pulumi.Input<string>[]> }>, resources?: pulumi.Input<{ limits?: pulumi.Input<{ genericResources?: pulumi.Input<{ discreteResourcesSpecs?: pulumi.Input<pulumi.Input<string>[]>, namedResourcesSpecs?: pulumi.Input<pulumi.Input<string>[]> }>, memoryBytes?: pulumi.Input<number>, nanoCpus?: pulumi.Input<number> }>, reservation?: pulumi.Input<{ genericResources?: pulumi.Input<{ discreteResourcesSpecs?: pulumi.Input<pulumi.Input<string>[]>, namedResourcesSpecs?: pulumi.Input<pulumi.Input<string>[]> }>, memoryBytes?: pulumi.Input<number>, nanoCpus?: pulumi.Input<number> }> }>, restartPolicy?: pulumi.Input<{ condition?: pulumi.Input<string>, delay?: pulumi.Input<string>, maxAttempts?: pulumi.Input<number>, window?: pulumi.Input<string> }>, runtime?: pulumi.Input<string> }>;
    /**
     * See UpdateConfig below for details.
     */
    readonly updateConfig?: pulumi.Input<{ delay?: pulumi.Input<string>, failureAction?: pulumi.Input<string>, maxFailureRatio?: pulumi.Input<string>, monitor?: pulumi.Input<string>, order?: pulumi.Input<string>, parallelism?: pulumi.Input<number> }>;
}
