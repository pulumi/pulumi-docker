"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tag = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Creates a docker tag. It has the exact same functionality as the `docker tag` command. Deleting the resource will neither delete the source nor target images. The source image must exist on the machine running the docker daemon.
 */
class Tag extends pulumi.CustomResource {
    /**
     * Get an existing Tag resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Tag(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Tag.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Tag.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["sourceImage"] = state ? state.sourceImage : undefined;
            resourceInputs["sourceImageId"] = state ? state.sourceImageId : undefined;
            resourceInputs["targetImage"] = state ? state.targetImage : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.sourceImage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceImage'");
            }
            if ((!args || args.targetImage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetImage'");
            }
            resourceInputs["sourceImage"] = args ? args.sourceImage : undefined;
            resourceInputs["targetImage"] = args ? args.targetImage : undefined;
            resourceInputs["sourceImageId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Tag.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Tag = Tag;
/** @internal */
Tag.__pulumiType = 'docker:index/tag:Tag';
//# sourceMappingURL=tag.js.map