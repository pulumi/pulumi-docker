"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.types = exports.config = exports.Volume = exports.Tag = exports.ServiceConfig = exports.Service = exports.Secret = exports.RemoteImage = exports.RegistryImage = exports.Provider = exports.Plugin = exports.Network = exports.Image = exports.getRemoteImageOutput = exports.getRemoteImage = exports.getRegistryImageOutput = exports.getRegistryImage = exports.getPluginOutput = exports.getPlugin = exports.getNetworkOutput = exports.getNetwork = exports.getLogsOutput = exports.getLogs = exports.Container = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
exports.Container = null;
utilities.lazyLoad(exports, ["Container"], () => require("./container"));
exports.getLogs = null;
exports.getLogsOutput = null;
utilities.lazyLoad(exports, ["getLogs", "getLogsOutput"], () => require("./getLogs"));
exports.getNetwork = null;
exports.getNetworkOutput = null;
utilities.lazyLoad(exports, ["getNetwork", "getNetworkOutput"], () => require("./getNetwork"));
exports.getPlugin = null;
exports.getPluginOutput = null;
utilities.lazyLoad(exports, ["getPlugin", "getPluginOutput"], () => require("./getPlugin"));
exports.getRegistryImage = null;
exports.getRegistryImageOutput = null;
utilities.lazyLoad(exports, ["getRegistryImage", "getRegistryImageOutput"], () => require("./getRegistryImage"));
exports.getRemoteImage = null;
exports.getRemoteImageOutput = null;
utilities.lazyLoad(exports, ["getRemoteImage", "getRemoteImageOutput"], () => require("./getRemoteImage"));
exports.Image = null;
utilities.lazyLoad(exports, ["Image"], () => require("./image"));
exports.Network = null;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));
exports.Plugin = null;
utilities.lazyLoad(exports, ["Plugin"], () => require("./plugin"));
exports.Provider = null;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));
exports.RegistryImage = null;
utilities.lazyLoad(exports, ["RegistryImage"], () => require("./registryImage"));
exports.RemoteImage = null;
utilities.lazyLoad(exports, ["RemoteImage"], () => require("./remoteImage"));
exports.Secret = null;
utilities.lazyLoad(exports, ["Secret"], () => require("./secret"));
exports.Service = null;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));
exports.ServiceConfig = null;
utilities.lazyLoad(exports, ["ServiceConfig"], () => require("./serviceConfig"));
exports.Tag = null;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));
exports.Volume = null;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));
// Export enums:
__exportStar(require("./types/enums"), exports);
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "docker:index/container:Container":
                return new exports.Container(name, undefined, { urn });
            case "docker:index/image:Image":
                return new exports.Image(name, undefined, { urn });
            case "docker:index/network:Network":
                return new exports.Network(name, undefined, { urn });
            case "docker:index/plugin:Plugin":
                return new exports.Plugin(name, undefined, { urn });
            case "docker:index/registryImage:RegistryImage":
                return new exports.RegistryImage(name, undefined, { urn });
            case "docker:index/remoteImage:RemoteImage":
                return new exports.RemoteImage(name, undefined, { urn });
            case "docker:index/secret:Secret":
                return new exports.Secret(name, undefined, { urn });
            case "docker:index/service:Service":
                return new exports.Service(name, undefined, { urn });
            case "docker:index/serviceConfig:ServiceConfig":
                return new exports.ServiceConfig(name, undefined, { urn });
            case "docker:index/tag:Tag":
                return new exports.Tag(name, undefined, { urn });
            case "docker:index/volume:Volume":
                return new exports.Volume(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("docker", "index/container", _module);
pulumi.runtime.registerResourceModule("docker", "index/image", _module);
pulumi.runtime.registerResourceModule("docker", "index/network", _module);
pulumi.runtime.registerResourceModule("docker", "index/plugin", _module);
pulumi.runtime.registerResourceModule("docker", "index/registryImage", _module);
pulumi.runtime.registerResourceModule("docker", "index/remoteImage", _module);
pulumi.runtime.registerResourceModule("docker", "index/secret", _module);
pulumi.runtime.registerResourceModule("docker", "index/service", _module);
pulumi.runtime.registerResourceModule("docker", "index/serviceConfig", _module);
pulumi.runtime.registerResourceModule("docker", "index/tag", _module);
pulumi.runtime.registerResourceModule("docker", "index/volume", _module);
pulumi.runtime.registerResourcePackage("docker", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:docker") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new exports.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map