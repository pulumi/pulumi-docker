"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegistryImage = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * <!-- Bug: Type and Name are switched -->
 * Manages the lifecycle of docker image in a registry. You can upload images to a registry (= `docker push`) and also delete them again
 *
 * ## Example Usage
 *
 * Build an image with the `docker.RemoteImage` resource and then push it to a registry:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as docker from "@pulumi/docker";
 *
 * const helloworld = new docker.RegistryImage("helloworld", {keepRemotely: true});
 * const image = new docker.RemoteImage("image", {
 *     name: "registry.com/somename:1.0",
 *     build: {
 *         context: `${path.cwd}/absolutePathToContextFolder`,
 *     },
 * });
 * ```
 */
class RegistryImage extends pulumi.CustomResource {
    /**
     * Get an existing RegistryImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RegistryImage(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RegistryImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegistryImage.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["insecureSkipVerify"] = state ? state.insecureSkipVerify : undefined;
            resourceInputs["keepRemotely"] = state ? state.keepRemotely : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sha256Digest"] = state ? state.sha256Digest : undefined;
            resourceInputs["triggers"] = state ? state.triggers : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["insecureSkipVerify"] = args ? args.insecureSkipVerify : undefined;
            resourceInputs["keepRemotely"] = args ? args.keepRemotely : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
            resourceInputs["sha256Digest"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RegistryImage.__pulumiType, name, resourceInputs, opts);
    }
}
exports.RegistryImage = RegistryImage;
/** @internal */
RegistryImage.__pulumiType = 'docker:index/registryImage:RegistryImage';
//# sourceMappingURL=registryImage.js.map