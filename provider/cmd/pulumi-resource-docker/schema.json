{
    "name": "docker",
    "description": "A Pulumi package for interacting with Docker in Pulumi programs",
    "keywords": [
        "pulumi",
        "docker"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`docker` Terraform Provider](https://github.com/terraform-providers/terraform-provider-docker).",
    "repository": "https://github.com/pulumi/pulumi-docker",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "caMaterial": {
                "type": "string",
                "description": "PEM-encoded content of Docker host CA certificate\n"
            },
            "certMaterial": {
                "type": "string",
                "description": "PEM-encoded content of Docker client certificate\n"
            },
            "certPath": {
                "type": "string",
                "description": "Path to directory with Docker TLS config\n"
            },
            "host": {
                "type": "string",
                "description": "The Docker daemon address\n",
                "default": "unix:///var/run/docker.sock",
                "defaultInfo": {
                    "environment": [
                        "DOCKER_HOST"
                    ]
                }
            },
            "keyMaterial": {
                "type": "string",
                "description": "PEM-encoded content of Docker client private key\n"
            },
            "registryAuth": {
                "type": "array",
                "items": {
                    "$ref": "#/types/docker:config/registryAuth:registryAuth"
                }
            }
        },
        "defaults": [
            "host"
        ]
    },
    "types": {
        "docker:/ContainerCapabilities:ContainerCapabilities": {
            "properties": {
                "adds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of linux capabilities to add.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "drops": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of linux capabilities to drop.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "docker:/ContainerDevice:ContainerDevice": {
            "properties": {
                "containerPath": {
                    "type": "string",
                    "description": "The path in the container where the\ndevice will be binded.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostPath": {
                    "type": "string",
                    "description": "The path on the host where the device\nis located.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permissions": {
                    "type": "string",
                    "description": "The cgroup permissions given to the\ncontainer to access the device.\nDefaults to `rwm`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hostPath"
            ]
        },
        "docker:/ContainerHealthcheck:ContainerHealthcheck": {
            "properties": {
                "interval": {
                    "type": "string",
                    "description": "Time between running the check `(ms|s|m|h)`. Default: `0s`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retries": {
                    "type": "integer",
                    "description": "Consecutive failures needed to report unhealthy. Default: `0`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPeriod": {
                    "type": "string",
                    "description": "Start period for the container to initialize before counting retries towards unstable `(ms|s|m|h)`. Default: `0s`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tests": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command to run to check health. For example, to run `curl -f http://localhost/health` set the\ncommand to be `[\"CMD\", \"curl\", \"-f\", \"http://localhost/health\"]`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "string",
                    "description": "Maximum time to allow one check to run `(ms|s|m|h)`. Default: `0s`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "tests"
            ]
        },
        "docker:/ContainerHost:ContainerHost": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Hostname to add.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "IP address this hostname should resolve to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "host",
                "ip"
            ]
        },
        "docker:/ContainerLabel:ContainerLabel": {
            "properties": {
                "label": {
                    "type": "string",
                    "description": "Name of the label\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value of the label\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "label",
                "value"
            ]
        },
        "docker:/ContainerMount:ContainerMount": {
            "properties": {
                "bindOptions": {
                    "$ref": "#/types/docker:/ContainerMountBindOptions:ContainerMountBindOptions",
                    "description": "Optional configuration for the `bind` type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "If true, this volume will be readonly.\nDefaults to false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "source": {
                    "type": "string",
                    "description": "The mount source (e.g., a volume name, a host path)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "target": {
                    "type": "string",
                    "description": "The container path.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tmpfsOptions": {
                    "$ref": "#/types/docker:/ContainerMountTmpfsOptions:ContainerMountTmpfsOptions",
                    "description": "Optional configuration for the `tmpf` type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The mount type: valid values are `bind|volume|tmpfs`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeOptions": {
                    "$ref": "#/types/docker:/ContainerMountVolumeOptions:ContainerMountVolumeOptions",
                    "description": "Optional configuration for the `volume` type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "target",
                "type"
            ]
        },
        "docker:/ContainerMountBindOptions:ContainerMountBindOptions": {
            "properties": {
                "propagation": {
                    "type": "string",
                    "description": "A propagation mode with the value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "docker:/ContainerMountTmpfsOptions:ContainerMountTmpfsOptions": {
            "properties": {
                "mode": {
                    "type": "integer",
                    "description": "The permission mode for the tmpfs mount in an integer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sizeBytes": {
                    "type": "integer",
                    "description": "The size for the tmpfs mount in bytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "docker:/ContainerMountVolumeOptions:ContainerMountVolumeOptions": {
            "properties": {
                "driverName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "driverOptions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Options for the driver.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ContainerMountVolumeOptionsLabel:ContainerMountVolumeOptionsLabel"
                    },
                    "description": "Adding labels.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "noCopy": {
                    "type": "boolean",
                    "description": "Whether to populate volume with data from the target.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "docker:/ContainerMountVolumeOptionsLabel:ContainerMountVolumeOptionsLabel": {
            "properties": {
                "label": {
                    "type": "string",
                    "description": "Name of the label\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value of the label\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "label",
                "value"
            ]
        },
        "docker:/ContainerNetworkData:ContainerNetworkData": {
            "properties": {
                "gateway": {
                    "type": "string",
                    "description": "*Deprecated:* Use `network_data` instead. The network gateway of the container as read from its\nNetworkSettings.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "*Deprecated:* Use `network_data` instead. The IP address of the container's first network it.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipPrefixLength": {
                    "type": "integer",
                    "description": "*Deprecated:* Use `network_data` instead. The IP prefix length of the container as read from its\nNetworkSettings.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "gateway",
                        "ipAddress",
                        "ipPrefixLength",
                        "networkName"
                    ]
                }
            }
        },
        "docker:/ContainerNetworksAdvanced:ContainerNetworksAdvanced": {
            "properties": {
                "aliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The network aliases of the container in the specific network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv4Address": {
                    "type": "string",
                    "description": "The IPV4 address of the container in the specific network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "The IPV6 address of the container in the specific network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "docker:/ContainerPort:ContainerPort": {
            "properties": {
                "external": {
                    "type": "integer",
                    "description": "Port exposed out of the container. If not given a free random port `\u003e= 32768` will be used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "internal": {
                    "type": "integer",
                    "description": "Port within the container.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "IP address this hostname should resolve to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol that can be used over this port,\ndefaults to `tcp`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "internal"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "external",
                        "internal"
                    ]
                }
            }
        },
        "docker:/ContainerUlimit:ContainerUlimit": {
            "properties": {
                "hard": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "soft": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hard",
                "name",
                "soft"
            ]
        },
        "docker:/ContainerUpload:ContainerUpload": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "contentBase64": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "executable": {
                    "type": "boolean",
                    "description": "If true, the file will be uploaded with user\nexecutable permission.\nDefaults to false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "file": {
                    "type": "string",
                    "description": "path to a file in the container.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "source": {
                    "type": "string",
                    "description": "A filename that references a file which will be uploaded as the object content. This allows for large file uploads that do not get stored in state.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceHash": {
                    "type": "string",
                    "description": "If using `source`, this will force an update if the file content has updated but the filename has not.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "file"
            ]
        },
        "docker:/ContainerVolume:ContainerVolume": {
            "properties": {
                "containerPath": {
                    "type": "string",
                    "description": "The path in the container where the\ndevice will be binded.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fromContainer": {
                    "type": "string",
                    "description": "The container where the volume is\ncoming from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostPath": {
                    "type": "string",
                    "description": "The path on the host where the device\nis located.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "If true, this volume will be readonly.\nDefaults to false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeName": {
                    "type": "string",
                    "description": "The name of the docker volume which\nshould be mounted.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "docker:/NetworkIpamConfig:NetworkIpamConfig": {
            "properties": {
                "auxAddress": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "docker:/NetworkLabel:NetworkLabel": {
            "properties": {
                "label": {
                    "type": "string",
                    "description": "Name of the label\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value of the label\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "label",
                "value"
            ]
        },
        "docker:/SecretLabel:SecretLabel": {
            "properties": {
                "label": {
                    "type": "string",
                    "description": "Name of the label\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value of the label\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "label",
                "value"
            ]
        },
        "docker:/ServiceAuth:ServiceAuth": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "The password to use for authenticating to the registry. If this is blank, the `DOCKER_REGISTRY_PASS` is also be checked.\n"
                },
                "serverAddress": {
                    "type": "string",
                    "description": "The address of the registry server\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to use for authenticating to the registry. If this is blank, the `DOCKER_REGISTRY_USER` is also be checked.\n"
                }
            },
            "type": "object",
            "required": [
                "serverAddress"
            ]
        },
        "docker:/ServiceConvergeConfig:ServiceConvergeConfig": {
            "properties": {
                "delay": {
                    "type": "string",
                    "description": "Time between each the check to check docker endpoint `(ms|s|m|h)`. For example, to check if\nall tasks are up when a service is created, or to check if all tasks are successfully updated on an update. Default: `7s`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "string",
                    "description": "The timeout of the service to reach the desired state `(s|m)`. Default: `3m`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "docker:/ServiceEndpointSpec:ServiceEndpointSpec": {
            "properties": {
                "mode": {
                    "type": "string",
                    "description": "The mode of resolution to use for internal load balancing between tasks. `(vip|dnsrr)`. Default: `vip`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ServiceEndpointSpecPort:ServiceEndpointSpecPort"
                    },
                    "description": "See Ports below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "mode"
                    ]
                }
            }
        },
        "docker:/ServiceEndpointSpecPort:ServiceEndpointSpecPort": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Docker service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol that can be used over this port: `tcp|udp|sctp`. Default: `tcp`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publishMode": {
                    "type": "string",
                    "description": "Represents the mode in which the port is to be published: `ingress|host`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publishedPort": {
                    "type": "integer",
                    "description": "The port on the swarm hosts. If not set the value of `target_port` will be used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetPort": {
                    "type": "integer",
                    "description": "Port inside the container.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "targetPort"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "publishedPort",
                        "targetPort"
                    ]
                }
            }
        },
        "docker:/ServiceLabel:ServiceLabel": {
            "properties": {
                "label": {
                    "type": "string",
                    "description": "Name of the label\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value of the label\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "label",
                "value"
            ]
        },
        "docker:/ServiceMode:ServiceMode": {
            "properties": {
                "global": {
                    "type": "boolean",
                    "description": "set it to `true` to run the service in the global mode\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicated": {
                    "$ref": "#/types/docker:/ServiceModeReplicated:ServiceModeReplicated",
                    "description": ", which contains atm only the amount of `replicas`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "replicated"
                    ]
                }
            }
        },
        "docker:/ServiceModeReplicated:ServiceModeReplicated": {
            "properties": {
                "replicas": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "docker:/ServiceRollbackConfig:ServiceRollbackConfig": {
            "properties": {
                "delay": {
                    "type": "string",
                    "description": "Delay between restart attempts `(ms|s|m|h)`\nall tasks are up when a service is created, or to check if all tasks are successfully updated on an update. Default: `7s`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failureAction": {
                    "type": "string",
                    "description": "Action on update failure: `pause|continue|rollback`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxFailureRatio": {
                    "type": "string",
                    "description": "The failure rate to tolerate during an update as `float`. **Important:** the `float`need to be wrapped in a `string` to avoid internal\ncasting and precision errors.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitor": {
                    "type": "string",
                    "description": "Duration after each task update to monitor for failure `(ns|us|ms|s|m|h)`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "order": {
                    "type": "string",
                    "description": "Update order either 'stop-first' or 'start-first'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parallelism": {
                    "type": "integer",
                    "description": "The maximum number of tasks to be updated in one iteration simultaneously (0 to update all at once).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "docker:/ServiceTaskSpec:ServiceTaskSpec": {
            "properties": {
                "containerSpec": {
                    "$ref": "#/types/docker:/ServiceTaskSpecContainerSpec:ServiceTaskSpecContainerSpec",
                    "description": "See ContainerSpec below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forceUpdate": {
                    "type": "integer",
                    "description": "A counter that triggers an update even if no relevant parameters have been changed. See [Docker Spec](https://github.com/docker/swarmkit/blob/master/api/specs.proto#L126).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logDriver": {
                    "$ref": "#/types/docker:/ServiceTaskSpecLogDriver:ServiceTaskSpecLogDriver",
                    "description": "See Log Driver below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Ids of the networks in which the container will be put in.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "placement": {
                    "$ref": "#/types/docker:/ServiceTaskSpecPlacement:ServiceTaskSpecPlacement",
                    "description": "See Placement below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "$ref": "#/types/docker:/ServiceTaskSpecResources:ServiceTaskSpecResources",
                    "description": "See Resources below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "restartPolicy": {
                    "$ref": "#/types/docker:/ServiceTaskSpecRestartPolicy:ServiceTaskSpecRestartPolicy",
                    "description": "See Restart Policy below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "runtime": {
                    "type": "string",
                    "description": "Runtime is the type of runtime specified for the task executor. See [Docker Runtime](https://github.com/moby/moby/blob/master/api/types/swarm/runtime.go).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "containerSpec"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "containerSpec",
                        "forceUpdate",
                        "placement",
                        "resources",
                        "restartPolicy",
                        "runtime"
                    ]
                }
            }
        },
        "docker:/ServiceTaskSpecContainerSpec:ServiceTaskSpecContainerSpec": {
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Arguments to the command.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The command to be run in the image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ServiceTaskSpecContainerSpecConfig:ServiceTaskSpecContainerSpecConfig"
                    },
                    "description": "See Configs below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dir": {
                    "type": "string",
                    "description": "The working directory for commands to run in.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dnsConfig": {
                    "$ref": "#/types/docker:/ServiceTaskSpecContainerSpecDnsConfig:ServiceTaskSpecContainerSpecDnsConfig",
                    "description": "See DNS Config below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of environment variables in the form VAR=value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of additional groups that the container process will run as.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthcheck": {
                    "$ref": "#/types/docker:/ServiceTaskSpecContainerSpecHealthcheck:ServiceTaskSpecContainerSpecHealthcheck",
                    "description": "See Healthcheck below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname to use for the container, as a valid RFC 1123 hostname.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ServiceTaskSpecContainerSpecHost:ServiceTaskSpecContainerSpecHost"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "description": "The image used to create the Docker service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isolation": {
                    "type": "string",
                    "description": "Isolation technology of the containers running the service. (Windows only). Valid values are: `default|process|hyperv`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ServiceTaskSpecContainerSpecLabel:ServiceTaskSpecContainerSpecLabel"
                    },
                    "description": "See Labels below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ServiceTaskSpecContainerSpecMount:ServiceTaskSpecContainerSpecMount"
                    },
                    "description": "See Mounts below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privileges": {
                    "$ref": "#/types/docker:/ServiceTaskSpecContainerSpecPrivileges:ServiceTaskSpecContainerSpecPrivileges",
                    "description": "See Privileges below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Mount the container's root filesystem as read only.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ServiceTaskSpecContainerSpecSecret:ServiceTaskSpecContainerSpecSecret"
                    },
                    "description": "See Secrets below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stopGracePeriod": {
                    "type": "string",
                    "description": "Amount of time to wait for the container to terminate before forcefully removing it `(ms|s|m|h)`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stopSignal": {
                    "type": "string",
                    "description": "Signal to stop the container.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "The user inside the container.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "image"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dnsConfig",
                        "healthcheck",
                        "image",
                        "stopGracePeriod"
                    ]
                }
            }
        },
        "docker:/ServiceTaskSpecContainerSpecConfig:ServiceTaskSpecContainerSpecConfig": {
            "properties": {
                "configId": {
                    "type": "string",
                    "description": "ConfigID represents the ID of the specific config.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "configName": {
                    "type": "string",
                    "description": "The name of the config that this references, but internally it is just provided for lookup/display purposes\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fileGid": {
                    "type": "string",
                    "description": "Represents the file GID. Defaults: `0`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fileMode": {
                    "type": "integer",
                    "description": "Represents the FileMode of the file. Defaults: `0444`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fileName": {
                    "type": "string",
                    "description": "Represents the final filename in the filesystem. The specific target file that the config data is written within the docker container, e.g. `/root/config/config.json`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fileUid": {
                    "type": "string",
                    "description": "Represents the file UID. Defaults: `0`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "configId",
                "fileName"
            ]
        },
        "docker:/ServiceTaskSpecContainerSpecDnsConfig:ServiceTaskSpecContainerSpecDnsConfig": {
            "properties": {
                "nameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IP addresses of the name servers, for example, `8.8.8.8`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of internal resolver variables to be modified, for example, `debug`, `ndots:3`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "searches": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A search list for host-name lookup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "nameservers"
            ]
        },
        "docker:/ServiceTaskSpecContainerSpecHealthcheck:ServiceTaskSpecContainerSpecHealthcheck": {
            "properties": {
                "interval": {
                    "type": "string",
                    "description": "Time between running the check `(ms|s|m|h)`. Default: `0s`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retries": {
                    "type": "integer",
                    "description": "Consecutive failures needed to report unhealthy. Default: `0`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startPeriod": {
                    "type": "string",
                    "description": "Start period for the container to initialize before counting retries towards unstable `(ms|s|m|h)`. Default: `0s`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tests": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command to run to check health. For example, to run `curl -f http://localhost/health` set the\ncommand to be `[\"CMD\", \"curl\", \"-f\", \"http://localhost/health\"]`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "string",
                    "description": "Maximum time to allow one check to run `(ms|s|m|h)`. Default: `0s`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "tests"
            ]
        },
        "docker:/ServiceTaskSpecContainerSpecHost:ServiceTaskSpecContainerSpecHost": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "A list of hostname/IP mappings to add to the container's hosts file.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "The ip\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "host",
                "ip"
            ]
        },
        "docker:/ServiceTaskSpecContainerSpecLabel:ServiceTaskSpecContainerSpecLabel": {
            "properties": {
                "label": {
                    "type": "string",
                    "description": "Name of the label\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value of the label\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "label",
                "value"
            ]
        },
        "docker:/ServiceTaskSpecContainerSpecMount:ServiceTaskSpecContainerSpecMount": {
            "properties": {
                "bindOptions": {
                    "$ref": "#/types/docker:/ServiceTaskSpecContainerSpecMountBindOptions:ServiceTaskSpecContainerSpecMountBindOptions",
                    "description": "Optional configuration for the `bind` type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Mount the container's root filesystem as read only.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "source": {
                    "type": "string",
                    "description": "The mount source (e.g., a volume name, a host path)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "target": {
                    "type": "string",
                    "description": "The container path.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tmpfsOptions": {
                    "$ref": "#/types/docker:/ServiceTaskSpecContainerSpecMountTmpfsOptions:ServiceTaskSpecContainerSpecMountTmpfsOptions",
                    "description": "Optional configuration for the `tmpf` type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "SELinux type label\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeOptions": {
                    "$ref": "#/types/docker:/ServiceTaskSpecContainerSpecMountVolumeOptions:ServiceTaskSpecContainerSpecMountVolumeOptions",
                    "description": "Optional configuration for the `volume` type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "target",
                "type"
            ]
        },
        "docker:/ServiceTaskSpecContainerSpecMountBindOptions:ServiceTaskSpecContainerSpecMountBindOptions": {
            "properties": {
                "propagation": {
                    "type": "string",
                    "description": "A propagation mode with the value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "docker:/ServiceTaskSpecContainerSpecMountTmpfsOptions:ServiceTaskSpecContainerSpecMountTmpfsOptions": {
            "properties": {
                "mode": {
                    "type": "integer",
                    "description": "See Mode below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sizeBytes": {
                    "type": "integer",
                    "description": "The size for the tmpfs mount in bytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "docker:/ServiceTaskSpecContainerSpecMountVolumeOptions:ServiceTaskSpecContainerSpecMountVolumeOptions": {
            "properties": {
                "driverName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "driverOptions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ServiceTaskSpecContainerSpecMountVolumeOptionsLabel:ServiceTaskSpecContainerSpecMountVolumeOptionsLabel"
                    },
                    "description": "See Labels below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "noCopy": {
                    "type": "boolean",
                    "description": "Whether to populate volume with data from the target.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "docker:/ServiceTaskSpecContainerSpecMountVolumeOptionsLabel:ServiceTaskSpecContainerSpecMountVolumeOptionsLabel": {
            "properties": {
                "label": {
                    "type": "string",
                    "description": "Name of the label\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value of the label\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "label",
                "value"
            ]
        },
        "docker:/ServiceTaskSpecContainerSpecPrivileges:ServiceTaskSpecContainerSpecPrivileges": {
            "properties": {
                "credentialSpec": {
                    "$ref": "#/types/docker:/ServiceTaskSpecContainerSpecPrivilegesCredentialSpec:ServiceTaskSpecContainerSpecPrivilegesCredentialSpec",
                    "description": "For managed service account (Windows only)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "seLinuxContext": {
                    "$ref": "#/types/docker:/ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext:ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext",
                    "description": "SELinux labels of the container\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "docker:/ServiceTaskSpecContainerSpecPrivilegesCredentialSpec:ServiceTaskSpecContainerSpecPrivilegesCredentialSpec": {
            "properties": {
                "file": {
                    "type": "string",
                    "description": "Load credential spec from this file.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "registry": {
                    "type": "string",
                    "description": "Load credential spec from this value in the Windows registry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "docker:/ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext:ServiceTaskSpecContainerSpecPrivilegesSeLinuxContext": {
            "properties": {
                "disable": {
                    "type": "boolean",
                    "description": "Disable SELinux\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "type": "string",
                    "description": "SELinux level label\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "description": "SELinux role label\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "SELinux type label\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "The user inside the container.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "docker:/ServiceTaskSpecContainerSpecSecret:ServiceTaskSpecContainerSpecSecret": {
            "properties": {
                "fileGid": {
                    "type": "string",
                    "description": "Represents the file GID. Defaults: `0`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fileMode": {
                    "type": "integer",
                    "description": "Represents the FileMode of the file. Defaults: `0444`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fileName": {
                    "type": "string",
                    "description": "Represents the final filename in the filesystem. The specific target file that the secret data is written within the docker container, e.g. `/root/secret/secret.json`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fileUid": {
                    "type": "string",
                    "description": "Represents the file UID. Defaults: `0`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretId": {
                    "type": "string",
                    "description": "ConfigID represents the ID of the specific secret.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretName": {
                    "type": "string",
                    "description": "The name of the secret that this references, but internally it is just provided for lookup/display purposes\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fileName",
                "secretId"
            ]
        },
        "docker:/ServiceTaskSpecLogDriver:ServiceTaskSpecLogDriver": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The logging driver to use. Either `(none|json-file|syslog|journald|gelf|fluentd|awslogs|splunk|etwlogs|gcplogs)`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The options for the logging driver, e.g.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "docker:/ServiceTaskSpecPlacement:ServiceTaskSpecPlacement": {
            "properties": {
                "constraints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of constraints. e.g.: `node.role==manager`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "platforms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ServiceTaskSpecPlacementPlatform:ServiceTaskSpecPlacementPlatform"
                    },
                    "description": "Platforms stores all the platforms that the service's image can run on\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Preferences provide a way to make the scheduler aware of factors such as topology. They are provided in order from highest to lowest precedence, e.g.: `spread=node.role.manager`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "docker:/ServiceTaskSpecPlacementPlatform:ServiceTaskSpecPlacementPlatform": {
            "properties": {
                "architecture": {
                    "type": "string",
                    "description": "The architecture, e.g., `amd64`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "os": {
                    "type": "string",
                    "description": "The operation system, e.g., `linux`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "architecture",
                "os"
            ]
        },
        "docker:/ServiceTaskSpecResources:ServiceTaskSpecResources": {
            "properties": {
                "limits": {
                    "$ref": "#/types/docker:/ServiceTaskSpecResourcesLimits:ServiceTaskSpecResourcesLimits",
                    "description": "Describes the resources which can be advertised by a node and requested by a task.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reservation": {
                    "$ref": "#/types/docker:/ServiceTaskSpecResourcesReservation:ServiceTaskSpecResourcesReservation",
                    "description": "An object describing the resources which can be advertised by a node and requested by a task.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "docker:/ServiceTaskSpecResourcesLimits:ServiceTaskSpecResourcesLimits": {
            "properties": {
                "genericResources": {
                    "$ref": "#/types/docker:/ServiceTaskSpecResourcesLimitsGenericResources:ServiceTaskSpecResourcesLimitsGenericResources",
                    "description": "User-defined resources can be either Integer resources (e.g, SSD=3) or String resources (e.g, GPU=UUID1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memoryBytes": {
                    "type": "integer",
                    "description": "The amount of memory in bytes the container allocates\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nanoCpus": {
                    "type": "integer",
                    "description": "CPU shares in units of 1/1e9 (or 10^-9) of the CPU. Should be at least 1000000\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "docker:/ServiceTaskSpecResourcesLimitsGenericResources:ServiceTaskSpecResourcesLimitsGenericResources": {
            "properties": {
                "discreteResourcesSpecs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Integer resources, delimited by `=`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namedResourcesSpecs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The String resources, delimited by `=`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "docker:/ServiceTaskSpecResourcesReservation:ServiceTaskSpecResourcesReservation": {
            "properties": {
                "genericResources": {
                    "$ref": "#/types/docker:/ServiceTaskSpecResourcesReservationGenericResources:ServiceTaskSpecResourcesReservationGenericResources",
                    "description": "User-defined resources can be either Integer resources (e.g, SSD=3) or String resources (e.g, GPU=UUID1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memoryBytes": {
                    "type": "integer",
                    "description": "The amount of memory in bytes the container allocates\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nanoCpus": {
                    "type": "integer",
                    "description": "CPU shares in units of 1/1e9 (or 10^-9) of the CPU. Should be at least 1000000\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "docker:/ServiceTaskSpecResourcesReservationGenericResources:ServiceTaskSpecResourcesReservationGenericResources": {
            "properties": {
                "discreteResourcesSpecs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Integer resources, delimited by `=`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namedResourcesSpecs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The String resources, delimited by `=`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "docker:/ServiceTaskSpecRestartPolicy:ServiceTaskSpecRestartPolicy": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition for restart: `(none|on-failure|any)`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "delay": {
                    "type": "string",
                    "description": "Delay between restart attempts `(ms|s|m|h)`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxAttempts": {
                    "type": "integer",
                    "description": "Maximum attempts to restart a given container before giving up (default value is `0`, which is ignored)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "window": {
                    "type": "string",
                    "description": "The time window used to evaluate the restart policy (default value is `0`, which is unbounded) `(ms|s|m|h)`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "docker:/ServiceUpdateConfig:ServiceUpdateConfig": {
            "properties": {
                "delay": {
                    "type": "string",
                    "description": "Delay between updates `(ns|us|ms|s|m|h)`, e.g. `5s`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failureAction": {
                    "type": "string",
                    "description": "Action on update failure: `pause|continue|rollback`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxFailureRatio": {
                    "type": "string",
                    "description": "The failure rate to tolerate during an update as `float`. **Important:** the `float`need to be wrapped in a `string` to avoid internal\ncasting and precision errors.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitor": {
                    "type": "string",
                    "description": "Duration after each task update to monitor for failure `(ns|us|ms|s|m|h)`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "order": {
                    "type": "string",
                    "description": "Update order either 'stop-first' or 'start-first'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parallelism": {
                    "type": "integer",
                    "description": "The maximum number of tasks to be updated in one iteration simultaneously (0 to update all at once).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "docker:/VolumeLabel:VolumeLabel": {
            "properties": {
                "label": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "label",
                "value"
            ]
        },
        "docker:/getNetworkIpamConfig:getNetworkIpamConfig": {
            "properties": {
                "auxAddress": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gateway": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "docker:config/registryAuth:registryAuth": {
            "properties": {
                "address": {
                    "type": "string"
                },
                "configFile": {
                    "type": "string"
                },
                "configFileContent": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "address"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "docker:index/ProviderRegistryAuth:ProviderRegistryAuth": {
            "properties": {
                "address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "configFile": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "configFileContent": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the docker package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "inputProperties": {
            "caMaterial": {
                "type": "string",
                "description": "PEM-encoded content of Docker host CA certificate\n"
            },
            "certMaterial": {
                "type": "string",
                "description": "PEM-encoded content of Docker client certificate\n"
            },
            "certPath": {
                "type": "string",
                "description": "Path to directory with Docker TLS config\n"
            },
            "host": {
                "type": "string",
                "description": "The Docker daemon address\n",
                "default": "unix:///var/run/docker.sock",
                "defaultInfo": {
                    "environment": [
                        "DOCKER_HOST"
                    ]
                }
            },
            "keyMaterial": {
                "type": "string",
                "description": "PEM-encoded content of Docker client private key\n"
            },
            "registryAuth": {
                "type": "array",
                "items": {
                    "$ref": "#/types/docker:index/ProviderRegistryAuth:ProviderRegistryAuth"
                }
            }
        }
    },
    "resources": {
        "docker:index/container:Container": {
            "description": "Manages the lifecycle of a Docker container.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as docker from \"@pulumi/docker\";\n\n// Find the latest Ubuntu precise image.\nconst ubuntuRemoteImage = new docker.RemoteImage(\"ubuntu\", {\n    name: \"ubuntu:precise\",\n});\n// Start a container\nconst ubuntuContainer = new docker.Container(\"ubuntu\", {\n    image: ubuntuRemoteImage.latest,\n});\n```\n```python\nimport pulumi\nimport pulumi_docker as docker\n\n# Find the latest Ubuntu precise image.\nubuntu_remote_image = docker.RemoteImage(\"ubuntuRemoteImage\", name=\"ubuntu:precise\")\n# Start a container\nubuntu_container = docker.Container(\"ubuntuContainer\", image=ubuntu_remote_image.latest)\n```\n```csharp\nusing Pulumi;\nusing Docker = Pulumi.Docker;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Find the latest Ubuntu precise image.\n        var ubuntuRemoteImage = new Docker.RemoteImage(\"ubuntuRemoteImage\", new Docker.RemoteImageArgs\n        {\n            Name = \"ubuntu:precise\",\n        });\n        // Start a container\n        var ubuntuContainer = new Docker.Container(\"ubuntuContainer\", new Docker.ContainerArgs\n        {\n            Image = ubuntuRemoteImage.Latest,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-docker/sdk/v2/go/docker\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tubuntuRemoteImage, err := docker.NewRemoteImage(ctx, \"ubuntuRemoteImage\", \u0026docker.RemoteImageArgs{\n\t\t\tName: pulumi.String(\"ubuntu:precise\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = docker.NewContainer(ctx, \"ubuntuContainer\", \u0026docker.ContainerArgs{\n\t\t\tImage: ubuntuRemoteImage.Latest,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "attach": {
                    "type": "boolean",
                    "description": "If true attach to the container after its creation and waits the end of his execution.\n"
                },
                "bridge": {
                    "type": "string",
                    "description": "The network bridge of the container as read from its NetworkSettings.\n"
                },
                "capabilities": {
                    "$ref": "#/types/docker:/ContainerCapabilities:ContainerCapabilities",
                    "description": "See Capabilities below for details.\n"
                },
                "command": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The command to use to start the\ncontainer. For example, to run `/usr/bin/myprogram -f baz.conf` set the\ncommand to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n"
                },
                "containerLogs": {
                    "type": "string",
                    "description": "The logs of the container if its execution is done (`attach` must be disabled).\n"
                },
                "cpuSet": {
                    "type": "string",
                    "description": "A comma-separated list or hyphen-separated range of CPUs a container can use, e.g. `0-1`.\n"
                },
                "cpuShares": {
                    "type": "integer",
                    "description": "CPU shares (relative weight) for the container.\n"
                },
                "destroyGraceSeconds": {
                    "type": "integer",
                    "description": "If defined will attempt to stop the container before destroying. Container will be destroyed after `n` seconds or on successful stop.\n"
                },
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ContainerDevice:ContainerDevice"
                    },
                    "description": "See Devices below for details.\n"
                },
                "dns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of DNS servers.\n"
                },
                "dnsOpts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of DNS options used by the DNS provider(s), see `resolv.conf` documentation for valid list of options.\n"
                },
                "dnsSearches": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of DNS search domains that are used when bare unqualified hostnames are used inside of the container.\n"
                },
                "domainname": {
                    "type": "string",
                    "description": "Domain name of the container.\n"
                },
                "entrypoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The command to use as the\nEntrypoint for the container. The Entrypoint allows you to configure a\ncontainer to run as an executable. For example, to run `/usr/bin/myprogram`\nwhen starting a container, set the entrypoint to be\n`[\"/usr/bin/myprogram\"]`.\n"
                },
                "envs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Environment variables to set.\n"
                },
                "exitCode": {
                    "type": "integer",
                    "description": "The exit code of the container if its execution is done (`must_run` must be disabled).\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "*Deprecated:* Use `network_data` instead. The network gateway of the container as read from its\nNetworkSettings.\n",
                    "deprecationMessage": "Use gateway from ip_adresses_data instead. This field exposes the data of the container's first network."
                },
                "groupAdds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Add additional groups to run as.\n"
                },
                "healthcheck": {
                    "$ref": "#/types/docker:/ContainerHealthcheck:ContainerHealthcheck",
                    "description": "See Healthcheck below for details.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname of the container.\n"
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ContainerHost:ContainerHost"
                    },
                    "description": "Hostname to add.\n"
                },
                "image": {
                    "type": "string",
                    "description": "The ID of the image to back this container.\nThe easiest way to get this value is to use the `docker.RemoteImage` resource\nas is shown in the example above.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "*Deprecated:* Use `network_data` instead. The IP address of the container's first network it.\n",
                    "deprecationMessage": "Use ip_adresses_data instead. This field exposes the data of the container's first network."
                },
                "ipPrefixLength": {
                    "type": "integer",
                    "description": "*Deprecated:* Use `network_data` instead. The IP prefix length of the container as read from its\nNetworkSettings.\n",
                    "deprecationMessage": "Use ip_prefix_length from ip_adresses_data instead. This field exposes the data of the container's first network."
                },
                "ipcMode": {
                    "type": "string",
                    "description": "IPC sharing mode for the container. Possible values are: `none`, `private`, `shareable`, `container:\u003cname|id\u003e` or `host`.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ContainerLabel:ContainerLabel"
                    },
                    "description": "Adding labels.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of links for link based\nconnectivity between containers that are running on the same host.\n",
                    "deprecationMessage": "The --link flag is a legacy feature of Docker. It may eventually be removed."
                },
                "logDriver": {
                    "type": "string",
                    "description": "The logging driver to use for the container.\nDefaults to \"json-file\".\n"
                },
                "logOpts": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key/value pairs to use as options for\nthe logging driver.\n"
                },
                "logs": {
                    "type": "boolean",
                    "description": "Save the container logs (`attach` must be enabled).\n"
                },
                "maxRetryCount": {
                    "type": "integer",
                    "description": "The maximum amount of times to an attempt\na restart when `restart` is set to \"on-failure\"\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "The memory limit for the container in MBs.\n"
                },
                "memorySwap": {
                    "type": "integer"
                },
                "mounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ContainerMount:ContainerMount"
                    },
                    "description": "See Mounts below for details.\n"
                },
                "mustRun": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "networkAliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Network aliases of the container for user-defined networks only. *Deprecated:* use `networks_advanced` instead.\n",
                    "deprecationMessage": "Use networks_advanced instead. Will be removed in v2.0.0"
                },
                "networkDatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ContainerNetworkData:ContainerNetworkData"
                    },
                    "description": "(Map of a block) The IP addresses of the container on each\nnetwork. Key are the network names, values are the IP addresses.\n"
                },
                "networkMode": {
                    "type": "string",
                    "description": "Network mode of the container.\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Id of the networks in which the\ncontainer is. *Deprecated:* use `networks_advanced` instead.\n",
                    "deprecationMessage": "Use networks_advanced instead. Will be removed in v2.0.0"
                },
                "networksAdvanced": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ContainerNetworksAdvanced:ContainerNetworksAdvanced"
                    },
                    "description": "See Networks Advanced below for details. If this block has priority to the deprecated `network_alias` and `network` properties.\n"
                },
                "pidMode": {
                    "type": "string",
                    "description": "The PID (Process) Namespace mode for the container. Either `container:\u003cname|id\u003e` or `host`.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ContainerPort:ContainerPort"
                    },
                    "description": "See Ports below for details.\n"
                },
                "privileged": {
                    "type": "boolean",
                    "description": "Run container in privileged mode.\n"
                },
                "publishAllPorts": {
                    "type": "boolean",
                    "description": "Publish all ports of the container.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "If true, this volume will be readonly.\nDefaults to false.\n"
                },
                "restart": {
                    "type": "string",
                    "description": "The restart policy for the container. Must be\none of \"no\", \"on-failure\", \"always\", \"unless-stopped\".\n"
                },
                "rm": {
                    "type": "boolean"
                },
                "shmSize": {
                    "type": "integer",
                    "description": "Size of `/dev/shm` in MBs.\n"
                },
                "start": {
                    "type": "boolean",
                    "description": "If true, then the Docker container will be\nstarted after creation. If false, then the container is only created.\n"
                },
                "sysctls": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "A map of kernel parameters (sysctls) to set in the container.\n"
                },
                "tmpfs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "A map of container directories which should be replaced by `tmpfs mounts`, and their corresponding mount options.\n"
                },
                "ulimits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ContainerUlimit:ContainerUlimit"
                    },
                    "description": "See Ulimits below for\ndetails.\n"
                },
                "uploads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ContainerUpload:ContainerUpload"
                    },
                    "description": "See File Upload below for details.\n"
                },
                "user": {
                    "type": "string",
                    "description": "User used for run the first process. Format is\n`user` or `user:group` which user and group can be passed literraly or\nby name.\n"
                },
                "usernsMode": {
                    "type": "string",
                    "description": "Sets the usernamespace mode for the container when usernamespace remapping option is enabled.\n"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ContainerVolume:ContainerVolume"
                    },
                    "description": "See Volumes below for details.\n"
                },
                "workingDir": {
                    "type": "string",
                    "description": "The working directory for commands to run in\n"
                }
            },
            "required": [
                "bridge",
                "command",
                "containerLogs",
                "dns",
                "dnsOpts",
                "entrypoints",
                "exitCode",
                "gateway",
                "hostname",
                "image",
                "ipAddress",
                "ipPrefixLength",
                "ipcMode",
                "logDriver",
                "logOpts",
                "name",
                "networkDatas",
                "shmSize",
                "user",
                "workingDir"
            ],
            "inputProperties": {
                "attach": {
                    "type": "boolean",
                    "description": "If true attach to the container after its creation and waits the end of his execution.\n"
                },
                "capabilities": {
                    "$ref": "#/types/docker:/ContainerCapabilities:ContainerCapabilities",
                    "description": "See Capabilities below for details.\n"
                },
                "command": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The command to use to start the\ncontainer. For example, to run `/usr/bin/myprogram -f baz.conf` set the\ncommand to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n"
                },
                "cpuSet": {
                    "type": "string",
                    "description": "A comma-separated list or hyphen-separated range of CPUs a container can use, e.g. `0-1`.\n"
                },
                "cpuShares": {
                    "type": "integer",
                    "description": "CPU shares (relative weight) for the container.\n"
                },
                "destroyGraceSeconds": {
                    "type": "integer",
                    "description": "If defined will attempt to stop the container before destroying. Container will be destroyed after `n` seconds or on successful stop.\n"
                },
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ContainerDevice:ContainerDevice"
                    },
                    "description": "See Devices below for details.\n"
                },
                "dns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of DNS servers.\n"
                },
                "dnsOpts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of DNS options used by the DNS provider(s), see `resolv.conf` documentation for valid list of options.\n"
                },
                "dnsSearches": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of DNS search domains that are used when bare unqualified hostnames are used inside of the container.\n"
                },
                "domainname": {
                    "type": "string",
                    "description": "Domain name of the container.\n"
                },
                "entrypoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The command to use as the\nEntrypoint for the container. The Entrypoint allows you to configure a\ncontainer to run as an executable. For example, to run `/usr/bin/myprogram`\nwhen starting a container, set the entrypoint to be\n`[\"/usr/bin/myprogram\"]`.\n"
                },
                "envs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Environment variables to set.\n"
                },
                "groupAdds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Add additional groups to run as.\n"
                },
                "healthcheck": {
                    "$ref": "#/types/docker:/ContainerHealthcheck:ContainerHealthcheck",
                    "description": "See Healthcheck below for details.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname of the container.\n"
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ContainerHost:ContainerHost"
                    },
                    "description": "Hostname to add.\n"
                },
                "image": {
                    "type": "string",
                    "description": "The ID of the image to back this container.\nThe easiest way to get this value is to use the `docker.RemoteImage` resource\nas is shown in the example above.\n"
                },
                "ipcMode": {
                    "type": "string",
                    "description": "IPC sharing mode for the container. Possible values are: `none`, `private`, `shareable`, `container:\u003cname|id\u003e` or `host`.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ContainerLabel:ContainerLabel"
                    },
                    "description": "Adding labels.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of links for link based\nconnectivity between containers that are running on the same host.\n",
                    "deprecationMessage": "The --link flag is a legacy feature of Docker. It may eventually be removed."
                },
                "logDriver": {
                    "type": "string",
                    "description": "The logging driver to use for the container.\nDefaults to \"json-file\".\n"
                },
                "logOpts": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key/value pairs to use as options for\nthe logging driver.\n"
                },
                "logs": {
                    "type": "boolean",
                    "description": "Save the container logs (`attach` must be enabled).\n"
                },
                "maxRetryCount": {
                    "type": "integer",
                    "description": "The maximum amount of times to an attempt\na restart when `restart` is set to \"on-failure\"\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "The memory limit for the container in MBs.\n"
                },
                "memorySwap": {
                    "type": "integer"
                },
                "mounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ContainerMount:ContainerMount"
                    },
                    "description": "See Mounts below for details.\n"
                },
                "mustRun": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "networkAliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Network aliases of the container for user-defined networks only. *Deprecated:* use `networks_advanced` instead.\n",
                    "deprecationMessage": "Use networks_advanced instead. Will be removed in v2.0.0"
                },
                "networkMode": {
                    "type": "string",
                    "description": "Network mode of the container.\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Id of the networks in which the\ncontainer is. *Deprecated:* use `networks_advanced` instead.\n",
                    "deprecationMessage": "Use networks_advanced instead. Will be removed in v2.0.0"
                },
                "networksAdvanced": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ContainerNetworksAdvanced:ContainerNetworksAdvanced"
                    },
                    "description": "See Networks Advanced below for details. If this block has priority to the deprecated `network_alias` and `network` properties.\n"
                },
                "pidMode": {
                    "type": "string",
                    "description": "The PID (Process) Namespace mode for the container. Either `container:\u003cname|id\u003e` or `host`.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ContainerPort:ContainerPort"
                    },
                    "description": "See Ports below for details.\n"
                },
                "privileged": {
                    "type": "boolean",
                    "description": "Run container in privileged mode.\n"
                },
                "publishAllPorts": {
                    "type": "boolean",
                    "description": "Publish all ports of the container.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "If true, this volume will be readonly.\nDefaults to false.\n"
                },
                "restart": {
                    "type": "string",
                    "description": "The restart policy for the container. Must be\none of \"no\", \"on-failure\", \"always\", \"unless-stopped\".\n"
                },
                "rm": {
                    "type": "boolean"
                },
                "shmSize": {
                    "type": "integer",
                    "description": "Size of `/dev/shm` in MBs.\n"
                },
                "start": {
                    "type": "boolean",
                    "description": "If true, then the Docker container will be\nstarted after creation. If false, then the container is only created.\n"
                },
                "sysctls": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "A map of kernel parameters (sysctls) to set in the container.\n"
                },
                "tmpfs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "A map of container directories which should be replaced by `tmpfs mounts`, and their corresponding mount options.\n"
                },
                "ulimits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ContainerUlimit:ContainerUlimit"
                    },
                    "description": "See Ulimits below for\ndetails.\n"
                },
                "uploads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ContainerUpload:ContainerUpload"
                    },
                    "description": "See File Upload below for details.\n"
                },
                "user": {
                    "type": "string",
                    "description": "User used for run the first process. Format is\n`user` or `user:group` which user and group can be passed literraly or\nby name.\n"
                },
                "usernsMode": {
                    "type": "string",
                    "description": "Sets the usernamespace mode for the container when usernamespace remapping option is enabled.\n"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ContainerVolume:ContainerVolume"
                    },
                    "description": "See Volumes below for details.\n"
                },
                "workingDir": {
                    "type": "string",
                    "description": "The working directory for commands to run in\n"
                }
            },
            "requiredInputs": [
                "image"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Container resources.\n",
                "properties": {
                    "attach": {
                        "type": "boolean",
                        "description": "If true attach to the container after its creation and waits the end of his execution.\n"
                    },
                    "bridge": {
                        "type": "string",
                        "description": "The network bridge of the container as read from its NetworkSettings.\n"
                    },
                    "capabilities": {
                        "$ref": "#/types/docker:/ContainerCapabilities:ContainerCapabilities",
                        "description": "See Capabilities below for details.\n"
                    },
                    "command": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The command to use to start the\ncontainer. For example, to run `/usr/bin/myprogram -f baz.conf` set the\ncommand to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n"
                    },
                    "containerLogs": {
                        "type": "string",
                        "description": "The logs of the container if its execution is done (`attach` must be disabled).\n"
                    },
                    "cpuSet": {
                        "type": "string",
                        "description": "A comma-separated list or hyphen-separated range of CPUs a container can use, e.g. `0-1`.\n"
                    },
                    "cpuShares": {
                        "type": "integer",
                        "description": "CPU shares (relative weight) for the container.\n"
                    },
                    "destroyGraceSeconds": {
                        "type": "integer",
                        "description": "If defined will attempt to stop the container before destroying. Container will be destroyed after `n` seconds or on successful stop.\n"
                    },
                    "devices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/docker:/ContainerDevice:ContainerDevice"
                        },
                        "description": "See Devices below for details.\n"
                    },
                    "dns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of DNS servers.\n"
                    },
                    "dnsOpts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of DNS options used by the DNS provider(s), see `resolv.conf` documentation for valid list of options.\n"
                    },
                    "dnsSearches": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of DNS search domains that are used when bare unqualified hostnames are used inside of the container.\n"
                    },
                    "domainname": {
                        "type": "string",
                        "description": "Domain name of the container.\n"
                    },
                    "entrypoints": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The command to use as the\nEntrypoint for the container. The Entrypoint allows you to configure a\ncontainer to run as an executable. For example, to run `/usr/bin/myprogram`\nwhen starting a container, set the entrypoint to be\n`[\"/usr/bin/myprogram\"]`.\n"
                    },
                    "envs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Environment variables to set.\n"
                    },
                    "exitCode": {
                        "type": "integer",
                        "description": "The exit code of the container if its execution is done (`must_run` must be disabled).\n"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "*Deprecated:* Use `network_data` instead. The network gateway of the container as read from its\nNetworkSettings.\n",
                        "deprecationMessage": "Use gateway from ip_adresses_data instead. This field exposes the data of the container's first network."
                    },
                    "groupAdds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Add additional groups to run as.\n"
                    },
                    "healthcheck": {
                        "$ref": "#/types/docker:/ContainerHealthcheck:ContainerHealthcheck",
                        "description": "See Healthcheck below for details.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "Hostname of the container.\n"
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/docker:/ContainerHost:ContainerHost"
                        },
                        "description": "Hostname to add.\n"
                    },
                    "image": {
                        "type": "string",
                        "description": "The ID of the image to back this container.\nThe easiest way to get this value is to use the `docker.RemoteImage` resource\nas is shown in the example above.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "*Deprecated:* Use `network_data` instead. The IP address of the container's first network it.\n",
                        "deprecationMessage": "Use ip_adresses_data instead. This field exposes the data of the container's first network."
                    },
                    "ipPrefixLength": {
                        "type": "integer",
                        "description": "*Deprecated:* Use `network_data` instead. The IP prefix length of the container as read from its\nNetworkSettings.\n",
                        "deprecationMessage": "Use ip_prefix_length from ip_adresses_data instead. This field exposes the data of the container's first network."
                    },
                    "ipcMode": {
                        "type": "string",
                        "description": "IPC sharing mode for the container. Possible values are: `none`, `private`, `shareable`, `container:\u003cname|id\u003e` or `host`.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/docker:/ContainerLabel:ContainerLabel"
                        },
                        "description": "Adding labels.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of links for link based\nconnectivity between containers that are running on the same host.\n",
                        "deprecationMessage": "The --link flag is a legacy feature of Docker. It may eventually be removed."
                    },
                    "logDriver": {
                        "type": "string",
                        "description": "The logging driver to use for the container.\nDefaults to \"json-file\".\n"
                    },
                    "logOpts": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Key/value pairs to use as options for\nthe logging driver.\n"
                    },
                    "logs": {
                        "type": "boolean",
                        "description": "Save the container logs (`attach` must be enabled).\n"
                    },
                    "maxRetryCount": {
                        "type": "integer",
                        "description": "The maximum amount of times to an attempt\na restart when `restart` is set to \"on-failure\"\n"
                    },
                    "memory": {
                        "type": "integer",
                        "description": "The memory limit for the container in MBs.\n"
                    },
                    "memorySwap": {
                        "type": "integer"
                    },
                    "mounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/docker:/ContainerMount:ContainerMount"
                        },
                        "description": "See Mounts below for details.\n"
                    },
                    "mustRun": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkAliases": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Network aliases of the container for user-defined networks only. *Deprecated:* use `networks_advanced` instead.\n",
                        "deprecationMessage": "Use networks_advanced instead. Will be removed in v2.0.0"
                    },
                    "networkDatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/docker:/ContainerNetworkData:ContainerNetworkData"
                        },
                        "description": "(Map of a block) The IP addresses of the container on each\nnetwork. Key are the network names, values are the IP addresses.\n"
                    },
                    "networkMode": {
                        "type": "string",
                        "description": "Network mode of the container.\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Id of the networks in which the\ncontainer is. *Deprecated:* use `networks_advanced` instead.\n",
                        "deprecationMessage": "Use networks_advanced instead. Will be removed in v2.0.0"
                    },
                    "networksAdvanced": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/docker:/ContainerNetworksAdvanced:ContainerNetworksAdvanced"
                        },
                        "description": "See Networks Advanced below for details. If this block has priority to the deprecated `network_alias` and `network` properties.\n"
                    },
                    "pidMode": {
                        "type": "string",
                        "description": "The PID (Process) Namespace mode for the container. Either `container:\u003cname|id\u003e` or `host`.\n"
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/docker:/ContainerPort:ContainerPort"
                        },
                        "description": "See Ports below for details.\n"
                    },
                    "privileged": {
                        "type": "boolean",
                        "description": "Run container in privileged mode.\n"
                    },
                    "publishAllPorts": {
                        "type": "boolean",
                        "description": "Publish all ports of the container.\n"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "If true, this volume will be readonly.\nDefaults to false.\n"
                    },
                    "restart": {
                        "type": "string",
                        "description": "The restart policy for the container. Must be\none of \"no\", \"on-failure\", \"always\", \"unless-stopped\".\n"
                    },
                    "rm": {
                        "type": "boolean"
                    },
                    "shmSize": {
                        "type": "integer",
                        "description": "Size of `/dev/shm` in MBs.\n"
                    },
                    "start": {
                        "type": "boolean",
                        "description": "If true, then the Docker container will be\nstarted after creation. If false, then the container is only created.\n"
                    },
                    "sysctls": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "A map of kernel parameters (sysctls) to set in the container.\n"
                    },
                    "tmpfs": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "A map of container directories which should be replaced by `tmpfs mounts`, and their corresponding mount options.\n"
                    },
                    "ulimits": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/docker:/ContainerUlimit:ContainerUlimit"
                        },
                        "description": "See Ulimits below for\ndetails.\n"
                    },
                    "uploads": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/docker:/ContainerUpload:ContainerUpload"
                        },
                        "description": "See File Upload below for details.\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "User used for run the first process. Format is\n`user` or `user:group` which user and group can be passed literraly or\nby name.\n"
                    },
                    "usernsMode": {
                        "type": "string",
                        "description": "Sets the usernamespace mode for the container when usernamespace remapping option is enabled.\n"
                    },
                    "volumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/docker:/ContainerVolume:ContainerVolume"
                        },
                        "description": "See Volumes below for details.\n"
                    },
                    "workingDir": {
                        "type": "string",
                        "description": "The working directory for commands to run in\n"
                    }
                },
                "type": "object"
            }
        },
        "docker:index/network:Network": {
            "description": "Manages a Docker Network. This can be used alongside\n[docker\\_container](https://www.terraform.io/docs/providers/docker/r/container.html)\nto create virtual networks within the docker environment.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as docker from \"@pulumi/docker\";\n\n// Create a new docker network\nconst privateNetwork = new docker.Network(\"private_network\", {});\n```\n```python\nimport pulumi\nimport pulumi_docker as docker\n\n# Create a new docker network\nprivate_network = docker.Network(\"privateNetwork\")\n```\n```csharp\nusing Pulumi;\nusing Docker = Pulumi.Docker;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new docker network\n        var privateNetwork = new Docker.Network(\"privateNetwork\", new Docker.NetworkArgs\n        {\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-docker/sdk/v2/go/docker\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := docker.NewNetwork(ctx, \"privateNetwork\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "attachable": {
                    "type": "boolean",
                    "description": "Enable manual container attachment to the network.\nDefaults to `false`.\n"
                },
                "checkDuplicate": {
                    "type": "boolean",
                    "description": "Requests daemon to check for networks\nwith same name.\n"
                },
                "driver": {
                    "type": "string",
                    "description": "Name of the network driver to use. Defaults to\n`bridge` driver.\n"
                },
                "ingress": {
                    "type": "boolean",
                    "description": "Create swarm routing-mesh network.\nDefaults to `false`.\n"
                },
                "internal": {
                    "type": "boolean",
                    "description": "Restrict external access to the network.\nDefaults to `false`.\n"
                },
                "ipamConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/NetworkIpamConfig:NetworkIpamConfig"
                    },
                    "description": "See IPAM config below for\ndetails.\n"
                },
                "ipamDriver": {
                    "type": "string",
                    "description": "Driver used by the custom IP scheme of the\nnetwork.\n"
                },
                "ipv6": {
                    "type": "boolean",
                    "description": "Enable IPv6 networking.\nDefaults to `false`.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/NetworkLabel:NetworkLabel"
                    },
                    "description": "See Labels below for details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Docker network.\n"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Network specific options to be used by\nthe drivers.\n"
                },
                "scope": {
                    "type": "string"
                }
            },
            "required": [
                "driver",
                "internal",
                "ipamConfigs",
                "name",
                "options",
                "scope"
            ],
            "inputProperties": {
                "attachable": {
                    "type": "boolean",
                    "description": "Enable manual container attachment to the network.\nDefaults to `false`.\n"
                },
                "checkDuplicate": {
                    "type": "boolean",
                    "description": "Requests daemon to check for networks\nwith same name.\n"
                },
                "driver": {
                    "type": "string",
                    "description": "Name of the network driver to use. Defaults to\n`bridge` driver.\n"
                },
                "ingress": {
                    "type": "boolean",
                    "description": "Create swarm routing-mesh network.\nDefaults to `false`.\n"
                },
                "internal": {
                    "type": "boolean",
                    "description": "Restrict external access to the network.\nDefaults to `false`.\n"
                },
                "ipamConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/NetworkIpamConfig:NetworkIpamConfig"
                    },
                    "description": "See IPAM config below for\ndetails.\n"
                },
                "ipamDriver": {
                    "type": "string",
                    "description": "Driver used by the custom IP scheme of the\nnetwork.\n"
                },
                "ipv6": {
                    "type": "boolean",
                    "description": "Enable IPv6 networking.\nDefaults to `false`.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/NetworkLabel:NetworkLabel"
                    },
                    "description": "See Labels below for details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Docker network.\n"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Network specific options to be used by\nthe drivers.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Network resources.\n",
                "properties": {
                    "attachable": {
                        "type": "boolean",
                        "description": "Enable manual container attachment to the network.\nDefaults to `false`.\n"
                    },
                    "checkDuplicate": {
                        "type": "boolean",
                        "description": "Requests daemon to check for networks\nwith same name.\n"
                    },
                    "driver": {
                        "type": "string",
                        "description": "Name of the network driver to use. Defaults to\n`bridge` driver.\n"
                    },
                    "ingress": {
                        "type": "boolean",
                        "description": "Create swarm routing-mesh network.\nDefaults to `false`.\n"
                    },
                    "internal": {
                        "type": "boolean",
                        "description": "Restrict external access to the network.\nDefaults to `false`.\n"
                    },
                    "ipamConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/docker:/NetworkIpamConfig:NetworkIpamConfig"
                        },
                        "description": "See IPAM config below for\ndetails.\n"
                    },
                    "ipamDriver": {
                        "type": "string",
                        "description": "Driver used by the custom IP scheme of the\nnetwork.\n"
                    },
                    "ipv6": {
                        "type": "boolean",
                        "description": "Enable IPv6 networking.\nDefaults to `false`.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/docker:/NetworkLabel:NetworkLabel"
                        },
                        "description": "See Labels below for details.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Docker network.\n"
                    },
                    "options": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Network specific options to be used by\nthe drivers.\n"
                    },
                    "scope": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "docker:index/remoteImage:RemoteImage": {
            "description": "Pulls a Docker image to a given Docker host from a Docker Registry.\n\nThis resource will *not* pull new layers of the image automatically unless used in\nconjunction with [`docker.getRegistryImage`](https://www.terraform.io/docs/providers/docker/d/registry_image.html)\ndata source to update the `pull_triggers` field.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as docker from \"@pulumi/docker\";\n\n// Find the latest Ubuntu precise image.\nconst ubuntu = new docker.RemoteImage(\"ubuntu\", {\n    name: \"ubuntu:precise\",\n});\n```\n```python\nimport pulumi\nimport pulumi_docker as docker\n\n# Find the latest Ubuntu precise image.\nubuntu = docker.RemoteImage(\"ubuntu\", name=\"ubuntu:precise\")\n```\n```csharp\nusing Pulumi;\nusing Docker = Pulumi.Docker;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Find the latest Ubuntu precise image.\n        var ubuntu = new Docker.RemoteImage(\"ubuntu\", new Docker.RemoteImageArgs\n        {\n            Name = \"ubuntu:precise\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-docker/sdk/v2/go/docker\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := docker.NewRemoteImage(ctx, \"ubuntu\", \u0026docker.RemoteImageArgs{\n\t\t\tName: pulumi.String(\"ubuntu:precise\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% example %}}\n### Dynamic image\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as docker from \"@pulumi/docker\";\n\nconst ubuntuRegistryImage = pulumi.output(docker.getRegistryImage({\n    name: \"ubuntu:precise\",\n}, { async: true }));\nconst ubuntuRemoteImage = new docker.RemoteImage(\"ubuntu\", {\n    name: ubuntuRegistryImage.name!,\n    pullTriggers: [ubuntuRegistryImage.sha256Digest],\n});\n```\n```python\nimport pulumi\nimport pulumi_docker as docker\n\nubuntu_registry_image = docker.get_registry_image(name=\"ubuntu:precise\")\nubuntu_remote_image = docker.RemoteImage(\"ubuntuRemoteImage\",\n    name=ubuntu_registry_image.name,\n    pull_triggers=[ubuntu_registry_image.sha256_digest])\n```\n```csharp\nusing Pulumi;\nusing Docker = Pulumi.Docker;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var ubuntuRegistryImage = Output.Create(Docker.GetRegistryImage.InvokeAsync(new Docker.GetRegistryImageArgs\n        {\n            Name = \"ubuntu:precise\",\n        }));\n        var ubuntuRemoteImage = new Docker.RemoteImage(\"ubuntuRemoteImage\", new Docker.RemoteImageArgs\n        {\n            Name = ubuntuRegistryImage.Apply(ubuntuRegistryImage =\u003e ubuntuRegistryImage.Name),\n            PullTriggers = \n            {\n                ubuntuRegistryImage.Apply(ubuntuRegistryImage =\u003e ubuntuRegistryImage.Sha256Digest),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-docker/sdk/v2/go/docker\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"ubuntu:precise\"\n\t\tubuntuRegistryImage, err := docker.GetRegistryImage(ctx, \u0026docker.GetRegistryImageArgs{\n\t\t\tName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = docker.NewRemoteImage(ctx, \"ubuntuRemoteImage\", \u0026docker.RemoteImageArgs{\n\t\t\tName: pulumi.String(ubuntuRegistryImage.Name),\n\t\t\tPullTriggers: pulumi.StringArray{\n\t\t\t\tpulumi.String(ubuntuRegistryImage.Sha256Digest),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "keepLocally": {
                    "type": "boolean",
                    "description": "If true, then the Docker image won't be\ndeleted on destroy operation. If this is false, it will delete the image from\nthe docker local storage on destroy operation.\n"
                },
                "latest": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Docker image, including any tags or SHA256 repo digests.\n"
                },
                "pullTrigger": {
                    "type": "string",
                    "description": "**Deprecated**, use `pull_triggers` instead.\n",
                    "deprecationMessage": "Use field pull_triggers instead"
                },
                "pullTriggers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of values which cause an\nimage pull when changed. This is used to store the image digest from the\nregistry when using the `docker.getRegistryImage` [data source](https://www.terraform.io/docs/providers/docker/d/registry_image.html)\nto trigger an image update.\n"
                }
            },
            "required": [
                "latest",
                "name"
            ],
            "inputProperties": {
                "keepLocally": {
                    "type": "boolean",
                    "description": "If true, then the Docker image won't be\ndeleted on destroy operation. If this is false, it will delete the image from\nthe docker local storage on destroy operation.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Docker image, including any tags or SHA256 repo digests.\n"
                },
                "pullTrigger": {
                    "type": "string",
                    "description": "**Deprecated**, use `pull_triggers` instead.\n",
                    "deprecationMessage": "Use field pull_triggers instead"
                },
                "pullTriggers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of values which cause an\nimage pull when changed. This is used to store the image digest from the\nregistry when using the `docker.getRegistryImage` [data source](https://www.terraform.io/docs/providers/docker/d/registry_image.html)\nto trigger an image update.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RemoteImage resources.\n",
                "properties": {
                    "keepLocally": {
                        "type": "boolean",
                        "description": "If true, then the Docker image won't be\ndeleted on destroy operation. If this is false, it will delete the image from\nthe docker local storage on destroy operation.\n"
                    },
                    "latest": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Docker image, including any tags or SHA256 repo digests.\n"
                    },
                    "pullTrigger": {
                        "type": "string",
                        "description": "**Deprecated**, use `pull_triggers` instead.\n",
                        "deprecationMessage": "Use field pull_triggers instead"
                    },
                    "pullTriggers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of values which cause an\nimage pull when changed. This is used to store the image digest from the\nregistry when using the `docker.getRegistryImage` [data source](https://www.terraform.io/docs/providers/docker/d/registry_image.html)\nto trigger an image update.\n"
                    }
                },
                "type": "object"
            }
        },
        "docker:index/secret:Secret": {
            "properties": {
                "data": {
                    "type": "string",
                    "description": "The base64 encoded data of the secret.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/SecretLabel:SecretLabel"
                    },
                    "description": "See Labels below for details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Docker secret.\n"
                }
            },
            "required": [
                "data",
                "name"
            ],
            "inputProperties": {
                "data": {
                    "type": "string",
                    "description": "The base64 encoded data of the secret.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/SecretLabel:SecretLabel"
                    },
                    "description": "See Labels below for details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Docker secret.\n"
                }
            },
            "requiredInputs": [
                "data"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Secret resources.\n",
                "properties": {
                    "data": {
                        "type": "string",
                        "description": "The base64 encoded data of the secret.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/docker:/SecretLabel:SecretLabel"
                        },
                        "description": "See Labels below for details.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Docker secret.\n"
                    }
                },
                "type": "object"
            }
        },
        "docker:index/service:Service": {
            "properties": {
                "auth": {
                    "$ref": "#/types/docker:/ServiceAuth:ServiceAuth",
                    "description": "See Auth below for details.\n"
                },
                "convergeConfig": {
                    "$ref": "#/types/docker:/ServiceConvergeConfig:ServiceConvergeConfig",
                    "description": "See Converge Config below for details.\n"
                },
                "endpointSpec": {
                    "$ref": "#/types/docker:/ServiceEndpointSpec:ServiceEndpointSpec",
                    "description": "See EndpointSpec below for details.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ServiceLabel:ServiceLabel"
                    },
                    "description": "See Labels below for details.\n"
                },
                "mode": {
                    "$ref": "#/types/docker:/ServiceMode:ServiceMode",
                    "description": "See Mode below for details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Docker service.\n"
                },
                "rollbackConfig": {
                    "$ref": "#/types/docker:/ServiceRollbackConfig:ServiceRollbackConfig",
                    "description": "See RollbackConfig below for details.\n"
                },
                "taskSpec": {
                    "$ref": "#/types/docker:/ServiceTaskSpec:ServiceTaskSpec",
                    "description": "See TaskSpec below for details.\n"
                },
                "updateConfig": {
                    "$ref": "#/types/docker:/ServiceUpdateConfig:ServiceUpdateConfig",
                    "description": "See UpdateConfig below for details.\n"
                }
            },
            "required": [
                "endpointSpec",
                "labels",
                "mode",
                "name",
                "taskSpec"
            ],
            "inputProperties": {
                "auth": {
                    "$ref": "#/types/docker:/ServiceAuth:ServiceAuth",
                    "description": "See Auth below for details.\n"
                },
                "convergeConfig": {
                    "$ref": "#/types/docker:/ServiceConvergeConfig:ServiceConvergeConfig",
                    "description": "See Converge Config below for details.\n"
                },
                "endpointSpec": {
                    "$ref": "#/types/docker:/ServiceEndpointSpec:ServiceEndpointSpec",
                    "description": "See EndpointSpec below for details.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/ServiceLabel:ServiceLabel"
                    },
                    "description": "See Labels below for details.\n"
                },
                "mode": {
                    "$ref": "#/types/docker:/ServiceMode:ServiceMode",
                    "description": "See Mode below for details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Docker service.\n"
                },
                "rollbackConfig": {
                    "$ref": "#/types/docker:/ServiceRollbackConfig:ServiceRollbackConfig",
                    "description": "See RollbackConfig below for details.\n"
                },
                "taskSpec": {
                    "$ref": "#/types/docker:/ServiceTaskSpec:ServiceTaskSpec",
                    "description": "See TaskSpec below for details.\n"
                },
                "updateConfig": {
                    "$ref": "#/types/docker:/ServiceUpdateConfig:ServiceUpdateConfig",
                    "description": "See UpdateConfig below for details.\n"
                }
            },
            "requiredInputs": [
                "taskSpec"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Service resources.\n",
                "properties": {
                    "auth": {
                        "$ref": "#/types/docker:/ServiceAuth:ServiceAuth",
                        "description": "See Auth below for details.\n"
                    },
                    "convergeConfig": {
                        "$ref": "#/types/docker:/ServiceConvergeConfig:ServiceConvergeConfig",
                        "description": "See Converge Config below for details.\n"
                    },
                    "endpointSpec": {
                        "$ref": "#/types/docker:/ServiceEndpointSpec:ServiceEndpointSpec",
                        "description": "See EndpointSpec below for details.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/docker:/ServiceLabel:ServiceLabel"
                        },
                        "description": "See Labels below for details.\n"
                    },
                    "mode": {
                        "$ref": "#/types/docker:/ServiceMode:ServiceMode",
                        "description": "See Mode below for details.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Docker service.\n"
                    },
                    "rollbackConfig": {
                        "$ref": "#/types/docker:/ServiceRollbackConfig:ServiceRollbackConfig",
                        "description": "See RollbackConfig below for details.\n"
                    },
                    "taskSpec": {
                        "$ref": "#/types/docker:/ServiceTaskSpec:ServiceTaskSpec",
                        "description": "See TaskSpec below for details.\n"
                    },
                    "updateConfig": {
                        "$ref": "#/types/docker:/ServiceUpdateConfig:ServiceUpdateConfig",
                        "description": "See UpdateConfig below for details.\n"
                    }
                },
                "type": "object"
            }
        },
        "docker:index/serviceConfig:ServiceConfig": {
            "properties": {
                "data": {
                    "type": "string",
                    "description": "The base64 encoded data of the config.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Docker config.\n"
                }
            },
            "required": [
                "data",
                "name"
            ],
            "inputProperties": {
                "data": {
                    "type": "string",
                    "description": "The base64 encoded data of the config.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Docker config.\n"
                }
            },
            "requiredInputs": [
                "data"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceConfig resources.\n",
                "properties": {
                    "data": {
                        "type": "string",
                        "description": "The base64 encoded data of the config.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Docker config.\n"
                    }
                },
                "type": "object"
            }
        },
        "docker:index/volume:Volume": {
            "description": "Creates and destroys a volume in Docker. This can be used alongside\n[docker\\_container](https://www.terraform.io/docs/providers/docker/r/container.html)\nto prepare volumes that can be shared across containers.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as docker from \"@pulumi/docker\";\n\n// Creates a docker volume \"shared_volume\".\nconst sharedVolume = new docker.Volume(\"shared_volume\", {});\n```\n```python\nimport pulumi\nimport pulumi_docker as docker\n\n# Creates a docker volume \"shared_volume\".\nshared_volume = docker.Volume(\"sharedVolume\")\n```\n```csharp\nusing Pulumi;\nusing Docker = Pulumi.Docker;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Creates a docker volume \"shared_volume\".\n        var sharedVolume = new Docker.Volume(\"sharedVolume\", new Docker.VolumeArgs\n        {\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-docker/sdk/v2/go/docker\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := docker.NewVolume(ctx, \"sharedVolume\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "driver": {
                    "type": "string",
                    "description": "Driver type for the volume (defaults to local).\n"
                },
                "driverOpts": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Options specific to the driver.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/VolumeLabel:VolumeLabel"
                    },
                    "description": "User-defined key/value metadata.\n"
                },
                "mountpoint": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Docker volume (generated if not\nprovided).\n"
                }
            },
            "required": [
                "driver",
                "mountpoint",
                "name"
            ],
            "inputProperties": {
                "driver": {
                    "type": "string",
                    "description": "Driver type for the volume (defaults to local).\n"
                },
                "driverOpts": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Options specific to the driver.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/docker:/VolumeLabel:VolumeLabel"
                    },
                    "description": "User-defined key/value metadata.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Docker volume (generated if not\nprovided).\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Volume resources.\n",
                "properties": {
                    "driver": {
                        "type": "string",
                        "description": "Driver type for the volume (defaults to local).\n"
                    },
                    "driverOpts": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Options specific to the driver.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/docker:/VolumeLabel:VolumeLabel"
                        },
                        "description": "User-defined key/value metadata.\n"
                    },
                    "mountpoint": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Docker volume (generated if not\nprovided).\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "docker:index/getNetwork:getNetwork": {
            "description": "Finds a specific docker network and returns information about it.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as docker from \"@pulumi/docker\";\n\nconst main = pulumi.output(docker.getNetwork({\n    name: \"main\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_docker as docker\n\nmain = docker.get_network(name=\"main\")\n```\n```csharp\nusing Pulumi;\nusing Docker = Pulumi.Docker;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var main = Output.Create(Docker.GetNetwork.InvokeAsync(new Docker.GetNetworkArgs\n        {\n            Name = \"main\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-docker/sdk/v2/go/docker\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"main\"\n\t\t_, err := docker.LookupNetwork(ctx, \u0026docker.LookupNetworkArgs{\n\t\t\tName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNetwork.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the Docker network.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Docker network.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNetwork.\n",
                "properties": {
                    "driver": {
                        "type": "string",
                        "description": "(Optional, string) The driver of the Docker network. \nPossible values are `bridge`, `host`, `overlay`, `macvlan`.\nSee [docker docs][networkdocs] for more details.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "internal": {
                        "type": "boolean"
                    },
                    "ipamConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/docker:/getNetworkIpamConfig:getNetworkIpamConfig"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "options": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Optional, map) Only available with bridge networks. See\n[docker docs][bridgeoptionsdocs] for more details.\n* `internal` (Optional, bool) Boolean flag for whether the network is internal.\n* `ipam_config` (Optional, map) See IPAM below for details.\n* `scope` (Optional, string) Scope of the network. One of `swarm`, `global`, or `local`.\n"
                    },
                    "scope": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "driver",
                    "internal",
                    "ipamConfigs",
                    "options",
                    "scope"
                ]
            }
        },
        "docker:index/getRegistryImage:getRegistryImage": {
            "description": "Reads the image metadata from a Docker Registry. Used in conjunction with the\n[docker\\_image](https://www.terraform.io/docs/providers/docker/r/image.html) resource to keep an image up\nto date on the latest available version of the tag.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as docker from \"@pulumi/docker\";\n\nconst ubuntuRegistryImage = pulumi.output(docker.getRegistryImage({\n    name: \"ubuntu:precise\",\n}, { async: true }));\nconst ubuntuRemoteImage = new docker.RemoteImage(\"ubuntu\", {\n    name: ubuntuRegistryImage.name!,\n    pullTriggers: [ubuntuRegistryImage.sha256Digest],\n});\n```\n```python\nimport pulumi\nimport pulumi_docker as docker\n\nubuntu_registry_image = docker.get_registry_image(name=\"ubuntu:precise\")\nubuntu_remote_image = docker.RemoteImage(\"ubuntuRemoteImage\",\n    name=ubuntu_registry_image.name,\n    pull_triggers=[ubuntu_registry_image.sha256_digest])\n```\n```csharp\nusing Pulumi;\nusing Docker = Pulumi.Docker;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var ubuntuRegistryImage = Output.Create(Docker.GetRegistryImage.InvokeAsync(new Docker.GetRegistryImageArgs\n        {\n            Name = \"ubuntu:precise\",\n        }));\n        var ubuntuRemoteImage = new Docker.RemoteImage(\"ubuntuRemoteImage\", new Docker.RemoteImageArgs\n        {\n            Name = ubuntuRegistryImage.Apply(ubuntuRegistryImage =\u003e ubuntuRegistryImage.Name),\n            PullTriggers = \n            {\n                ubuntuRegistryImage.Apply(ubuntuRegistryImage =\u003e ubuntuRegistryImage.Sha256Digest),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-docker/sdk/v2/go/docker\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"ubuntu:precise\"\n\t\tubuntuRegistryImage, err := docker.GetRegistryImage(ctx, \u0026docker.GetRegistryImageArgs{\n\t\t\tName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = docker.NewRemoteImage(ctx, \"ubuntuRemoteImage\", \u0026docker.RemoteImageArgs{\n\t\t\tName: pulumi.String(ubuntuRegistryImage.Name),\n\t\t\tPullTriggers: pulumi.StringArray{\n\t\t\t\tpulumi.String(ubuntuRegistryImage.Sha256Digest),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRegistryImage.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Docker image, including any tags. e.g. `alpine:latest`\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRegistryImage.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "sha256Digest": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sha256Digest",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "namespaces": {
                "docker": "Docker"
            },
            "packageReferences": {
                "Pulumi": "2.*",
                "Semver": "2.0.5",
                "System.Collections.Immutable": "1.6.0"
            }
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/pulumi": "^2.0.0",
                "semver": "^5.4.0"
            },
            "devDependencies": {
                "@types/node": "^8.0.0",
                "@types/semver": "^5.4.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for interacting with Docker in Pulumi programs",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-docker)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-docker` repo](https://github.com/pulumi/pulumi-docker/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-docker` repo](https://github.com/terraform-providers/terraform-provider-docker/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-docker)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-docker` repo](https://github.com/pulumi/pulumi-docker/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-docker` repo](https://github.com/terraform-providers/terraform-provider-docker/issues).",
            "requires": {
                "pulumi": "\u003e=2.9.0,\u003c3.0.0"
            },
            "usesIOClasses": true
        }
    }
}