// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -typed -package internal -source client.go -destination mockclient_test.go --self_package github.com/pulumi/pulumi-docker/provider/v4/internal
//
// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	pb "github.com/docker/buildx/controller/pb"
	types "github.com/docker/cli/cli/manifest/types"
	types0 "github.com/docker/docker/api/types"
	client "github.com/moby/buildkit/client"
	properties "github.com/pulumi/pulumi-docker/provider/v4/internal/properties"
	provider "github.com/pulumi/pulumi-go-provider"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockClient) Auth(ctx context.Context, creds properties.RegistryAuth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", ctx, creds)
	ret0, _ := ret[0].(error)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockClientMockRecorder) Auth(ctx, creds any) *ClientAuthCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockClient)(nil).Auth), ctx, creds)
	return &ClientAuthCall{Call: call}
}

// ClientAuthCall wrap *gomock.Call
type ClientAuthCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientAuthCall) Return(arg0 error) *ClientAuthCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientAuthCall) Do(f func(context.Context, properties.RegistryAuth) error) *ClientAuthCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientAuthCall) DoAndReturn(f func(context.Context, properties.RegistryAuth) error) *ClientAuthCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Build mocks base method.
func (m *MockClient) Build(ctx provider.Context, b Build) (map[string]*client.SolveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", ctx, b)
	ret0, _ := ret[0].(map[string]*client.SolveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockClientMockRecorder) Build(ctx, b any) *ClientBuildCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockClient)(nil).Build), ctx, b)
	return &ClientBuildCall{Call: call}
}

// ClientBuildCall wrap *gomock.Call
type ClientBuildCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientBuildCall) Return(arg0 map[string]*client.SolveResponse, arg1 error) *ClientBuildCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientBuildCall) Do(f func(provider.Context, Build) (map[string]*client.SolveResponse, error)) *ClientBuildCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientBuildCall) DoAndReturn(f func(provider.Context, Build) (map[string]*client.SolveResponse, error)) *ClientBuildCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BuildKitEnabled mocks base method.
func (m *MockClient) BuildKitEnabled() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildKitEnabled")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildKitEnabled indicates an expected call of BuildKitEnabled.
func (mr *MockClientMockRecorder) BuildKitEnabled() *ClientBuildKitEnabledCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildKitEnabled", reflect.TypeOf((*MockClient)(nil).BuildKitEnabled))
	return &ClientBuildKitEnabledCall{Call: call}
}

// ClientBuildKitEnabledCall wrap *gomock.Call
type ClientBuildKitEnabledCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientBuildKitEnabledCall) Return(arg0 bool, arg1 error) *ClientBuildKitEnabledCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientBuildKitEnabledCall) Do(f func() (bool, error)) *ClientBuildKitEnabledCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientBuildKitEnabledCall) DoAndReturn(f func() (bool, error)) *ClientBuildKitEnabledCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Close mocks base method.
func (m *MockClient) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close(ctx any) *ClientCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close), ctx)
	return &ClientCloseCall{Call: call}
}

// ClientCloseCall wrap *gomock.Call
type ClientCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientCloseCall) Return(arg0 error) *ClientCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientCloseCall) Do(f func(context.Context) error) *ClientCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientCloseCall) DoAndReturn(f func(context.Context) error) *ClientCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockClient) Delete(ctx context.Context, id string) ([]types0.ImageDeleteResponseItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].([]types0.ImageDeleteResponseItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockClientMockRecorder) Delete(ctx, id any) *ClientDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClient)(nil).Delete), ctx, id)
	return &ClientDeleteCall{Call: call}
}

// ClientDeleteCall wrap *gomock.Call
type ClientDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientDeleteCall) Return(arg0 []types0.ImageDeleteResponseItem, arg1 error) *ClientDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientDeleteCall) Do(f func(context.Context, string) ([]types0.ImageDeleteResponseItem, error)) *ClientDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientDeleteCall) DoAndReturn(f func(context.Context, string) ([]types0.ImageDeleteResponseItem, error)) *ClientDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Inspect mocks base method.
func (m *MockClient) Inspect(ctx context.Context, id string) ([]types.ImageManifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inspect", ctx, id)
	ret0, _ := ret[0].([]types.ImageManifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inspect indicates an expected call of Inspect.
func (mr *MockClientMockRecorder) Inspect(ctx, id any) *ClientInspectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inspect", reflect.TypeOf((*MockClient)(nil).Inspect), ctx, id)
	return &ClientInspectCall{Call: call}
}

// ClientInspectCall wrap *gomock.Call
type ClientInspectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientInspectCall) Return(arg0 []types.ImageManifest, arg1 error) *ClientInspectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientInspectCall) Do(f func(context.Context, string) ([]types.ImageManifest, error)) *ClientInspectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientInspectCall) DoAndReturn(f func(context.Context, string) ([]types.ImageManifest, error)) *ClientInspectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockBuild is a mock of Build interface.
type MockBuild struct {
	ctrl     *gomock.Controller
	recorder *MockBuildMockRecorder
}

// MockBuildMockRecorder is the mock recorder for MockBuild.
type MockBuildMockRecorder struct {
	mock *MockBuild
}

// NewMockBuild creates a new mock instance.
func NewMockBuild(ctrl *gomock.Controller) *MockBuild {
	mock := &MockBuild{ctrl: ctrl}
	mock.recorder = &MockBuildMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuild) EXPECT() *MockBuildMockRecorder {
	return m.recorder
}

// BuildOptions mocks base method.
func (m *MockBuild) BuildOptions() pb.BuildOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildOptions")
	ret0, _ := ret[0].(pb.BuildOptions)
	return ret0
}

// BuildOptions indicates an expected call of BuildOptions.
func (mr *MockBuildMockRecorder) BuildOptions() *BuildBuildOptionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildOptions", reflect.TypeOf((*MockBuild)(nil).BuildOptions))
	return &BuildBuildOptionsCall{Call: call}
}

// BuildBuildOptionsCall wrap *gomock.Call
type BuildBuildOptionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *BuildBuildOptionsCall) Return(arg0 pb.BuildOptions) *BuildBuildOptionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *BuildBuildOptionsCall) Do(f func() pb.BuildOptions) *BuildBuildOptionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *BuildBuildOptionsCall) DoAndReturn(f func() pb.BuildOptions) *BuildBuildOptionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Targets mocks base method.
func (m *MockBuild) Targets() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Targets")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Targets indicates an expected call of Targets.
func (mr *MockBuildMockRecorder) Targets() *BuildTargetsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Targets", reflect.TypeOf((*MockBuild)(nil).Targets))
	return &BuildTargetsCall{Call: call}
}

// BuildTargetsCall wrap *gomock.Call
type BuildTargetsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *BuildTargetsCall) Return(arg0 []string) *BuildTargetsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *BuildTargetsCall) Do(f func() []string) *BuildTargetsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *BuildTargetsCall) DoAndReturn(f func() []string) *BuildTargetsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
