// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -typed -package mock -source client.go -destination mock/client.go
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	pb "github.com/docker/buildx/controller/pb"
	types "github.com/docker/cli/cli/manifest/types"
	image "github.com/docker/docker/api/types/image"
	client "github.com/moby/buildkit/client"
	properties "github.com/pulumi/pulumi-docker/provider/v4/internal/properties"
	provider "github.com/pulumi/pulumi-go-provider"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockClient) Auth(ctx context.Context, name string, creds properties.RegistryAuth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", ctx, name, creds)
	ret0, _ := ret[0].(error)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockClientMockRecorder) Auth(ctx, name, creds any) *ClientAuthCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockClient)(nil).Auth), ctx, name, creds)
	return &ClientAuthCall{Call: call}
}

// ClientAuthCall wrap *gomock.Call
type ClientAuthCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientAuthCall) Return(arg0 error) *ClientAuthCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientAuthCall) Do(f func(context.Context, string, properties.RegistryAuth) error) *ClientAuthCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientAuthCall) DoAndReturn(f func(context.Context, string, properties.RegistryAuth) error) *ClientAuthCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Build mocks base method.
func (m *MockClient) Build(ctx provider.Context, name string, opts pb.BuildOptions) (*client.SolveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", ctx, name, opts)
	ret0, _ := ret[0].(*client.SolveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockClientMockRecorder) Build(ctx, name, opts any) *ClientBuildCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockClient)(nil).Build), ctx, name, opts)
	return &ClientBuildCall{Call: call}
}

// ClientBuildCall wrap *gomock.Call
type ClientBuildCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientBuildCall) Return(arg0 *client.SolveResponse, arg1 error) *ClientBuildCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientBuildCall) Do(f func(provider.Context, string, pb.BuildOptions) (*client.SolveResponse, error)) *ClientBuildCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientBuildCall) DoAndReturn(f func(provider.Context, string, pb.BuildOptions) (*client.SolveResponse, error)) *ClientBuildCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BuildKitEnabled mocks base method.
func (m *MockClient) BuildKitEnabled() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildKitEnabled")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildKitEnabled indicates an expected call of BuildKitEnabled.
func (mr *MockClientMockRecorder) BuildKitEnabled() *ClientBuildKitEnabledCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildKitEnabled", reflect.TypeOf((*MockClient)(nil).BuildKitEnabled))
	return &ClientBuildKitEnabledCall{Call: call}
}

// ClientBuildKitEnabledCall wrap *gomock.Call
type ClientBuildKitEnabledCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientBuildKitEnabledCall) Return(arg0 bool, arg1 error) *ClientBuildKitEnabledCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientBuildKitEnabledCall) Do(f func() (bool, error)) *ClientBuildKitEnabledCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientBuildKitEnabledCall) DoAndReturn(f func() (bool, error)) *ClientBuildKitEnabledCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockClient) Delete(ctx context.Context, id string) ([]image.DeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].([]image.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockClientMockRecorder) Delete(ctx, id any) *ClientDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClient)(nil).Delete), ctx, id)
	return &ClientDeleteCall{Call: call}
}

// ClientDeleteCall wrap *gomock.Call
type ClientDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientDeleteCall) Return(arg0 []image.DeleteResponse, arg1 error) *ClientDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientDeleteCall) Do(f func(context.Context, string) ([]image.DeleteResponse, error)) *ClientDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientDeleteCall) DoAndReturn(f func(context.Context, string) ([]image.DeleteResponse, error)) *ClientDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Inspect mocks base method.
func (m *MockClient) Inspect(ctx context.Context, name, id string) ([]types.ImageManifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inspect", ctx, name, id)
	ret0, _ := ret[0].([]types.ImageManifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inspect indicates an expected call of Inspect.
func (mr *MockClientMockRecorder) Inspect(ctx, name, id any) *ClientInspectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inspect", reflect.TypeOf((*MockClient)(nil).Inspect), ctx, name, id)
	return &ClientInspectCall{Call: call}
}

// ClientInspectCall wrap *gomock.Call
type ClientInspectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientInspectCall) Return(arg0 []types.ImageManifest, arg1 error) *ClientInspectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientInspectCall) Do(f func(context.Context, string, string) ([]types.ImageManifest, error)) *ClientInspectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientInspectCall) DoAndReturn(f func(context.Context, string, string) ([]types.ImageManifest, error)) *ClientInspectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
